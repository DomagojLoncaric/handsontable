{"version":3,"file":"js/app.1b07f8bf.js","mappings":"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,cACA,oBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,OACA,QACA,qBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,UACA,QACA,gBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,SACA,SACA,mBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,cACA,gBACA,oBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,UACA,iBACA,gBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,UACA,QACA,mBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,eACA,QACA,0BACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,UACA,QACA,mBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,QACA,gBACA,sBACA,aACA,cACA,EACA,MACA,GACA,GAEF,EACE,EACA,OACA,QACA,oBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,SACA,SACA,sBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,OACA,WACA,gBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,QACA,iBACA,kBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,cACA,QACA,sBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,QACA,aACA,eACA,aACA,cACA,EACA,IACA,EACA,GAEF,EACE,EACA,SACA,UACA,eACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,OACA,SACA,eACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,SACA,gBACA,iBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,MACA,WACA,eACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,SACA,QACA,eACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,WACA,OACA,WACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,OACA,mBACA,WACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,cACA,UACA,aACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,cACA,gBACA,WACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,UACA,SACA,aACA,aACA,cACA,EACA,MACA,GACA,GAEF,EACE,EACA,UACA,QACA,WACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,SACA,QACA,WACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,UACA,iBACA,8BACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,UACA,WACA,YACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,WACA,SACA,eACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,QACA,iBACA,eACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,SACA,QACA,eACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,WACA,gBACA,0BACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,QACA,QACA,iBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,SACA,QACA,eACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,WACA,gBACA,WACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,OACA,OACA,WACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,UACA,QACA,0BACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,SACA,WACA,qBACA,aACA,cACA,EACA,KACA,GACA,GAEF,EACE,EACA,QACA,QACA,sBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,YACA,QACA,0BACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,OACA,QACA,0BACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,WACA,iBACA,wBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,WACA,QACA,wBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,YACA,iBACA,sBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,QACA,gBACA,sBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,SACA,QACA,sBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,UACA,SACA,yBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,QACA,QACA,gBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,aACA,WACA,yBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,OACA,QACA,yBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,aACA,QACA,qBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,QACA,UACA,qBACA,aACA,cACA,EACA,MACA,GACA,GAEF,EACE,EACA,QACA,iBACA,qBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,aACA,QACA,aACA,aACA,cACA,EACA,KACA,GACA,GAEF,EACE,EACA,WACA,QACA,aACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,QACA,iBACA,aACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,YACA,QACA,oBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,UACA,UACA,oBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,OACA,QACA,oBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,SACA,QACA,yBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,WACA,QACA,yBACA,aACA,cACA,EACA,MACA,GACA,GAEF,EACE,EACA,UACA,YACA,yBACA,aACA,cACA,EACA,KACA,GACA,GAEF,EACE,EACA,eACA,QACA,gBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,WACA,QACA,gBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,UACA,gBACA,gBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,UACA,iBACA,4BACA,aACA,cACA,EACA,KACA,GACA,GAEF,EACE,EACA,OACA,QACA,4BACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,QACA,QACA,4BACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,QACA,QACA,eACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,QACA,iBACA,wBACA,aACA,cACA,EACA,MACA,GACA,GAEF,EACE,EACA,gBACA,QACA,wBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,SACA,QACA,qBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,QACA,iBACA,qBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,WACA,QACA,4BACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,aACA,QACA,4BACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,SACA,QACA,4BACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,SACA,eACA,wBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,eACA,QACA,wBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,SACA,WACA,wBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,QACA,gBACA,mBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,UACA,QACA,mBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,QACA,QACA,mBACA,aACA,cACA,EACA,KACA,GACA,GAEF,EACE,EACA,YACA,gBACA,eACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,QACA,gBACA,eACA,aACA,cACA,EACA,KACA,GACA,GAEF,EACE,EACA,QACA,QACA,eACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,WACA,gBACA,eACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,cACA,QACA,qBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,OACA,QACA,iBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,aACA,gBACA,oBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,cACA,QACA,oBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,aACA,QACA,eACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,YACA,iBACA,cACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,SACA,gBACA,qBACA,aACA,cACA,EACA,KACA,EACA,GAEF,EACE,EACA,QACA,QACA,qBACA,aACA,cACA,EACA,MACA,EACA,GAEF,EACE,EACA,YACA,QACA,oBACA,aACA,cACA,EACA,MACA,EACA,IAISs4H,GAAiB,WACjBC,GAAgB,MAEtB,SAASr+F,KACd,OAAOl6B,EACT,CClrCA,MAAM,GAAkB,qBACX,GAAc,eAMpB,MAAMw4H,WAA2B3V,GACtC,sBAAWt0F,GACT,OAAO,EACT,CAKA,IAAAqwF,GACElzE,MAAMkzE,OACFl/G,KAAK+4H,UACP/4H,KAAK+4H,SAASjsG,UAEuB,SAAnC9sB,KAAKg5H,YAAYplH,MAAMT,UACzBnT,KAAKg5H,YAAYplH,MAAMT,QAAU,IAInCnT,KAAK+4H,SAAW,IAAI/4H,KAAKqyE,IAAI1yD,YAAY3f,KAAKg5H,YAAah5H,KAAKi5H,WAChEj5H,KAAK+4H,SAASzkD,OACdt0E,KAAK+4H,SAASnxD,YAAYh0D,MAAMT,QAAU,GACtCnT,KAAKuxB,eAAe4mE,OACtBn4F,KAAK+4H,SAASxzB,WAAW,EAAG,GAE5BvlG,KAAK+4H,SAASlwD,eAEhB/wD,GAAiB9X,KAAK24B,SAAU,EAAG34B,KAAK24B,SAASx2B,MAAMxB,QACvDX,KAAKysE,oBA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","sources":["webpack://vue-template/./src/App.vue?db0a","webpack://vue-template/./src/components/DataGrid.vue?96c4","webpack://vue-template/../../../../../handsontable/tmp/helpers/array.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/templateLiteralTag.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/mixed.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/string.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/a11y.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/dom/element.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/function.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/object.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/browser.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/unicode.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/dom/event.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/console.mjs","webpack://vue-template/../../../../../handsontable/tmp/pluginHooks.mjs","webpack://vue-template/../../../../../handsontable/tmp/utils/staticRegister.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/registry.mjs","webpack://vue-template/../../../../../handsontable/tmp/eventManager.mjs","webpack://vue-template/../../../../../handsontable/tmp/editorManager.mjs","webpack://vue-template/../../../../../handsontable/tmp/focusManager.mjs","webpack://vue-template/../../../../../handsontable/tmp/utils/parseTable.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/number.mjs","webpack://vue-template/../../../../../handsontable/tmp/utils/dataStructures/priorityMap.mjs","webpack://vue-template/../../../../../handsontable/tmp/utils/dataStructures/uniqueMap.mjs","webpack://vue-template/../../../../../handsontable/tmp/utils/dataStructures/uniqueSet.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/registry.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/registry.mjs","webpack://vue-template/../../../../../handsontable/tmp/validators/registry.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/feature.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/event.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/filter/column.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/filter/row.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/utils/orderView/constants.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/utils/orderView/viewSize.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/utils/orderView/viewSizeSet.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/utils/orderView/view.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/utils/orderView/sharedView.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/utils/nodesPool.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/renderer/_base.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/renderer/rowHeaders.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/renderer/columnHeaders.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/renderer/colGroup.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/renderer/rows.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/renderer/cells.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/renderer/table.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/renderer/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/utils/column.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/utils/row.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/overlay/constants.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/table.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/table/mixin/stickyRowsTop.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/table/mixin/calculatedColumns.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/table/top.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/scroll.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/cell/coords.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/cell/range.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/core/_base.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/core/clone.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/overlay/_base.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/selection/border/constants.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/overlay/top.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/table/mixin/stickyRowsBottom.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/table/bottom.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/overlay/bottom.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/table/mixin/calculatedRows.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/table/mixin/stickyColumnsStart.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/table/inlineStart.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/overlay/inlineStart.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/table/topInlineStartCorner.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/overlay/topInlineStartCorner.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/table/bottomInlineStartCorner.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/overlay/bottomInlineStartCorner.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/overlays.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/settings.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/table/master.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/calculator/constants.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/calculator/viewportRows.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/calculator/viewportColumns.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/viewport.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/selection/scanner.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/selection/border/border.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/selection/manager.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/core/core.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/facade/core.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/mouseEventHandler.mjs","webpack://vue-template/../../../../../handsontable/tmp/utils/rootInstance.mjs","webpack://vue-template/../../../../../handsontable/tmp/tableView.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/data.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/dataSource.mjs","webpack://vue-template/../../../../../handsontable/tmp/mixins/localHooks.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/maps/indexMap.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/maps/utils/indexesSequence.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/maps/utils/actionsOnIndexes.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/maps/indexesSequence.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/maps/utils/physicallyIndexed.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/maps/physicalIndexToValueMap.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/maps/hidingMap.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/maps/linkedPhysicalIndexToValueMap.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/maps/trimmingMap.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/maps/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/mapCollections/mapCollection.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/mapCollections/aggregatedCollection.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/changesObservable/observer.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/changesObservable/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/changesObservable/observable.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/indexMapper.mjs","webpack://vue-template/../../../../../handsontable/tmp/i18n/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/i18n/phraseFormatters/pluralize.mjs","webpack://vue-template/../../../../../handsontable/tmp/i18n/phraseFormatters/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/i18n/constants.mjs","webpack://vue-template/../../../../../handsontable/tmp/i18n/languages/en-US.mjs","webpack://vue-template/../../../../../handsontable/tmp/i18n/registry.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/selection/constants.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/walkontable/src/selection/selection.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/highlight/visualSelection.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/highlight/types/activeHeader.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/highlight/types/areaLayered.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/highlight/types/area.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/highlight/types/column.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/highlight/types/focus.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/highlight/types/customSelection.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/highlight/types/fill.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/highlight/types/header.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/highlight/types/row.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/highlight/highlight.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/range.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/transformation.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/selection/selection.mjs","webpack://vue-template/../../../../../handsontable/tmp/cellTypes/registry.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/metaManager/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/metaManager/metaSchema.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/metaManager/metaLayers/globalMeta.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/metaManager/metaLayers/tableMeta.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/metaManager/lazyFactoryMap.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/metaManager/metaLayers/columnMeta.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/metaManager/metaLayers/cellMeta.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/metaManager/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/metaManager/mods/dynamicCellMeta.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/metaManager/mods/extendMetaProperties.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/SheetClip/SheetClip.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/dataMap.mjs","webpack://vue-template/../../../../../handsontable/tmp/dataMap/replaceData.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/constants.mjs","webpack://vue-template/../../../../../handsontable/tmp/core/focusCatcher/focusDetector.mjs","webpack://vue-template/../../../../../handsontable/tmp/core/focusCatcher/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcuts/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcuts/context.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcuts/keyObserver.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcuts/recorder.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcuts/manager.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/editor/closeAndSave.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/editor/closeWithoutSaving.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/editor/fastOpen.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/editor/open.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/editor/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/down.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/downByViewportHeight.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/left.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/right.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/toColumns.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/toMostBottom.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/toMostInlineEnd.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/toMostInlineStart.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/toMostLeft.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/toMostRight.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/toMostTop.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/toRows.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/up.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/upByViewportHeight.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/extendCellsSelection/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/down.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/downByViewportHeight.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/inlineEnd.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/inlineStart.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/left.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/right.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/toMostBottom.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/toMostBottomInlineEnd.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/toMostInlineEnd.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/toMostInlineStart.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/toMostLeft.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/toMostRight.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/toMostTop.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/toMostTopInlineStart.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/up.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/upByViewportHeight.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/moveCellSelection/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/emptySelectedCells.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/scrollToFocusedCell.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/selectAll.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/populateSelectedCellsData.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/commands/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/editor.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/grid.mjs","webpack://vue-template/../../../../../handsontable/tmp/shortcutContexts/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/core.mjs","webpack://vue-template/../../../../../handsontable/tmp/mixins/hooksRefRegisterer.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/baseEditor/baseEditor.mjs","webpack://vue-template/../../../../../handsontable/tmp/3rdparty/autoResize/autoResize.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/textEditor/caretPositioner.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/textEditor/textEditor.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/baseRenderer/baseRenderer.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/textRenderer/textRenderer.mjs","webpack://vue-template/../../../../../handsontable/tmp/cellTypes/textType/textType.mjs","webpack://vue-template/../../../../../handsontable/tmp/base.mjs","webpack://vue-template/../../../../../wrappers/vue/es/vue-handsontable.mjs","webpack://vue-template/./src/utils/constants.ts","webpack://vue-template/../../../../../handsontable/tmp/editors/handsontableEditor/handsontableEditor.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/autocompleteEditor/autocompleteEditor.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/checkboxEditor/checkboxEditor.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/dateEditor/dateEditor.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/dropdownEditor/dropdownEditor.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/numericEditor/numericEditor.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/passwordEditor/passwordEditor.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/selectEditor/selectEditor.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/timeEditor/timeEditor.mjs","webpack://vue-template/../../../../../handsontable/tmp/editors/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/htmlRenderer/htmlRenderer.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/autocompleteRenderer/autocompleteRenderer.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/checkboxRenderer/checkboxRenderer.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/numericRenderer/numericRenderer.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/passwordRenderer/passwordRenderer.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/timeRenderer/timeRenderer.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/validators/autocompleteValidator/autocompleteValidator.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/date.mjs","webpack://vue-template/../../../../../handsontable/tmp/validators/dateValidator/dateValidator.mjs","webpack://vue-template/../../../../../handsontable/tmp/validators/numericValidator/numericValidator.mjs","webpack://vue-template/../../../../../handsontable/tmp/validators/timeValidator/timeValidator.mjs","webpack://vue-template/../../../../../handsontable/tmp/validators/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/cellTypes/autocompleteType/autocompleteType.mjs","webpack://vue-template/../../../../../handsontable/tmp/cellTypes/checkboxType/checkboxType.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/dateRenderer/dateRenderer.mjs","webpack://vue-template/../../../../../handsontable/tmp/cellTypes/dateType/dateType.mjs","webpack://vue-template/../../../../../handsontable/tmp/cellTypes/dropdownType/dropdownType.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/handsontableRenderer/handsontableRenderer.mjs","webpack://vue-template/../../../../../handsontable/tmp/cellTypes/handsontableType/handsontableType.mjs","webpack://vue-template/../../../../../handsontable/tmp/cellTypes/numericType/numericType.mjs","webpack://vue-template/../../../../../handsontable/tmp/cellTypes/passwordType/passwordType.mjs","webpack://vue-template/../../../../../handsontable/tmp/renderers/selectRenderer/selectRenderer.mjs","webpack://vue-template/../../../../../handsontable/tmp/cellTypes/selectType/selectType.mjs","webpack://vue-template/../../../../../handsontable/tmp/cellTypes/timeType/timeType.mjs","webpack://vue-template/../../../../../handsontable/tmp/cellTypes/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/base/base.mjs","webpack://vue-template/../../../../../handsontable/tmp/utils/ghostTable.mjs","webpack://vue-template/../../../../../handsontable/tmp/utils/samplesGenerator.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/autoColumnSize/autoColumnSize.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/autofill/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/autofill/autofill.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/autoRowSize/autoRowSize.mjs","webpack://vue-template/../../../../../handsontable/tmp/translations/maps/utils/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/bindRowsWithHeaders/maps/looseBindsMap.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/bindRowsWithHeaders/maps/strictBindsMap.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/bindRowsWithHeaders/bindRowsWithHeaders.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/collapsibleColumns/collapsibleColumns.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSorting/columnStatesManager.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSorting/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSorting/domHelpers.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSorting/sortService/engine.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSorting/sortFunction/default.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSorting/sortFunction/numeric.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSorting/sortFunction/checkbox.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSorting/sortFunction/date.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSorting/sortService/registry.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSorting/rootComparator.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSorting/columnSorting.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSummary/endpoints.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSummary/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/columnSummary/columnSummary.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/comments/commentEditor.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/comments/displaySwitch.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/separator.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/comments/contextMenuItem/addEditComment.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/comments/contextMenuItem/removeComment.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/comments/contextMenuItem/readOnlyComment.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/comments/comments.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/commandExecutor.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/alignment.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/clearColumn.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/columnLeft.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/columnRight.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/readOnly.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/redo.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/removeColumn.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/removeRow.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/rowAbove.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/rowBelow.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/noItems.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/undo.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/predefinedItems/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/itemsFactory.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/menu/cursor.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/menu/positioner.mjs","webpack://vue-template/../../../../../handsontable/tmp/utils/paginator.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/menu/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/menu/navigator.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/menu/defaultShortcutsList.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/menu/shortcuts.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/menu/menuItemRenderer.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/menu/menu.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/contextMenu/contextMenu.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/copyPaste/contextMenuItem/copy.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/copyPaste/contextMenuItem/copyColumnHeadersOnly.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/copyPaste/contextMenuItem/copyWithColumnGroupHeaders.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/copyPaste/contextMenuItem/copyWithColumnHeaders.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/copyPaste/contextMenuItem/cut.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/copyPaste/clipboardData.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/copyPaste/pasteEvent.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/copyPaste/copyableRanges.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/copyPaste/copyPaste.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/customBorders/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/customBorders/contextMenuItem/top.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/customBorders/contextMenuItem/right.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/customBorders/contextMenuItem/bottom.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/customBorders/contextMenuItem/left.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/customBorders/contextMenuItem/noBorders.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/customBorders/customBorders.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/dragToScroll/dragToScroll.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/dropdownMenu/dropdownMenu.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/exportFile/dataProvider.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/exportFile/types/_base.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/exportFile/types/csv.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/exportFile/typeFactory.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/exportFile/exportFile.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/component/_base.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/conditionRegisterer.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/none.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/empty.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/notEmpty.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/equal.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/notEqual.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/greaterThan.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/greaterThanOrEqual.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/lessThan.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/lessThanOrEqual.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/date/after.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/date/before.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/between.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/notBetween.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/beginsWith.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/endsWith.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/contains.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/notContains.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/date/tomorrow.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/date/today.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/date/yesterday.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/constants.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/ui/_base.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/ui/input.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/ui/select.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/component/condition.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/logicalOperationRegisterer.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/logicalOperations/conjunction.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/logicalOperations/disjunction.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/logicalOperations/disjunctionWithExtraCondition.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/ui/radioInput.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/component/operators.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/ui/link.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/ui/multipleSelect.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/condition/byValue.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/component/value.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/component/actionBar.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/conditionCollection.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/dataFilter.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/conditionUpdateObserver.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/menu/focusNavigator.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/menu/focusController.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/filters/filters.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/formulas/engine/settings.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/formulas/engine/register.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/formulas/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/formulas/indexSyncer/axisSyncer.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/formulas/indexSyncer/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/formulas/formulas.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/hiddenColumns/contextMenuItem/hideColumn.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/hiddenColumns/contextMenuItem/showColumn.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/hiddenColumns/hiddenColumns.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/hiddenRows/contextMenuItem/hideRow.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/hiddenRows/contextMenuItem/showRow.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/hiddenRows/hiddenRows.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualColumnFreeze/contextMenuItem/freezeColumn.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualColumnFreeze/contextMenuItem/unfreezeColumn.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualColumnFreeze/manualColumnFreeze.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualColumnMove/ui/_base.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualColumnMove/ui/backlight.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualColumnMove/ui/guideline.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualColumnMove/manualColumnMove.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualColumnResize/manualColumnResize.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualRowMove/ui/_base.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualRowMove/ui/backlight.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualRowMove/ui/guideline.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualRowMove/manualRowMove.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/manualRowResize/manualRowResize.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/mergeCells/cellCoords.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/mergeCells/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/mergeCells/cellsCollection.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/mergeCells/calculations/autofill.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/mergeCells/calculations/selection.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/mergeCells/contextMenuItem/toggleMerge.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/mergeCells/mergeCells.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/multiColumnSorting/rootComparator.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/multiColumnSorting/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/multiColumnSorting/domHelpers.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/multiColumnSorting/multiColumnSorting.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/multipleSelectionHandles/multipleSelectionHandles.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/stateManager/utils.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/stateManager/settingsNormalizer.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/stateManager/sourceSettings.mjs","webpack://vue-template/../../../../../handsontable/tmp/utils/dataStructures/tree.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/stateManager/headersTree.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/stateManager/nodeModifiers/utils/tree.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/stateManager/nodeModifiers/expand.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/stateManager/nodeModifiers/collapse.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/stateManager/nodeModifiers/hideColumn.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/stateManager/nodeModifiers/showColumn.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/stateManager/nodeModifiers/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/stateManager/matrixGenerator.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/stateManager/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/utils/ghostTable.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedHeaders/nestedHeaders.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedRows/data/dataManager.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedRows/ui/_base.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedRows/ui/headers.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedRows/ui/collapsing.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedRows/ui/contextMenu.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedRows/utils/rowMoveController.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/nestedRows/nestedRows.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/persistentState/storage.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/persistentState/persistentState.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/search/search.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/touchScroll/touchScroll.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/trimRows/trimRows.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/undoRedo/undoRedo.mjs","webpack://vue-template/../../../../../handsontable/tmp/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/plugins/index.mjs","webpack://vue-template/../../../../../handsontable/tmp/registry.mjs","webpack://vue-template/../../../../../handsontable/tmp/helpers/wrappers/jquery.mjs","webpack://vue-template/./src/renderers/progressBar.ts","webpack://vue-template/./src/renderers/stars.ts","webpack://vue-template/./src/utils/hooks-callbacks.ts","webpack://vue-template/./src/components/DataGrid.vue?bb20","webpack://vue-template/./src/components/DataGrid.vue?9c91","webpack://vue-template/./src/components/DataGrid.vue","webpack://vue-template/src/App.vue","webpack://vue-template/./src/App.vue?88e2","webpack://vue-template/./src/App.vue","webpack://vue-template/./src/main.ts","webpack://vue-template/../../../../../node_modules/moment/locale/ sync ^\\.\\/.*$","webpack://vue-template/webpack/bootstrap","webpack://vue-template/webpack/runtime/chunk loaded","webpack://vue-template/webpack/runtime/define property getters","webpack://vue-template/webpack/runtime/global","webpack://vue-template/webpack/runtime/hasOwnProperty shorthand","webpack://vue-template/webpack/runtime/make namespace object","webpack://vue-template/webpack/runtime/node module decorator","webpack://vue-template/webpack/runtime/jsonp chunk loading","webpack://vue-template/webpack/startup"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"app\"}},[_c('DataGrid')],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"example\"}},[_c('hot-table',{ref:\"hotTableComponent\",attrs:{\"data\":_vm.data,\"settings\":_vm.hotSettings}})],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import \"core-js/modules/es.array.push.js\";\n/**\n * @param {Array} arr An array to process.\n */\nexport function to2dArray(arr) {\n  const ilen = arr.length;\n  let i = 0;\n  while (i < ilen) {\n    arr[i] = [arr[i]];\n    i += 1;\n  }\n}\n\n/**\n * @param {Array} arr An array to extend.\n * @param {Array} extension The data to extend from.\n */\nexport function extendArray(arr, extension) {\n  const ilen = extension.length;\n  let i = 0;\n  while (i < ilen) {\n    arr.push(extension[i]);\n    i += 1;\n  }\n}\n\n/**\n * @param {Array} arr An array to pivot.\n * @returns {Array}\n */\nexport function pivot(arr) {\n  const pivotedArr = [];\n  if (!arr || arr.length === 0 || !arr[0] || arr[0].length === 0) {\n    return pivotedArr;\n  }\n  const rowCount = arr.length;\n  const colCount = arr[0].length;\n  for (let i = 0; i < rowCount; i++) {\n    for (let j = 0; j < colCount; j++) {\n      if (!pivotedArr[j]) {\n        pivotedArr[j] = [];\n      }\n      pivotedArr[j][i] = arr[i][j];\n    }\n  }\n  return pivotedArr;\n}\n\n/**\n * A specialized version of `.reduce` for arrays without support for callback\n * shorthands and `this` binding.\n *\n * {@link https://github.com/lodash/lodash/blob/master/lodash.js}.\n *\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initFromArray] Specify using the first element of `array` as the initial value.\n * @returns {*} Returns the accumulated value.\n */\nexport function arrayReduce(array, iteratee, accumulator, initFromArray) {\n  let index = -1;\n  let iterable = array;\n  let result = accumulator;\n  if (!Array.isArray(array)) {\n    iterable = Array.from(array);\n  }\n  const length = iterable.length;\n  if (initFromArray && length) {\n    index += 1;\n    result = iterable[index];\n  }\n  index += 1;\n  while (index < length) {\n    result = iteratee(result, iterable[index], index, iterable);\n    index += 1;\n  }\n  return result;\n}\n\n/**\n * A specialized version of `.filter` for arrays without support for callback\n * shorthands and `this` binding.\n *\n * {@link https://github.com/lodash/lodash/blob/master/lodash.js}.\n *\n * @param {Array} array The array to iterate over.\n * @param {Function} predicate The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nexport function arrayFilter(array, predicate) {\n  let index = 0;\n  let iterable = array;\n  if (!Array.isArray(array)) {\n    iterable = Array.from(array);\n  }\n  const length = iterable.length;\n  const result = [];\n  let resIndex = -1;\n  while (index < length) {\n    const value = iterable[index];\n    if (predicate(value, index, iterable)) {\n      resIndex += 1;\n      result[resIndex] = value;\n    }\n    index += 1;\n  }\n  return result;\n}\n\n/**\n * A specialized version of `.map` for arrays without support for callback\n * shorthands and `this` binding.\n *\n * @param {Array} array The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new filtered array.\n */\nexport function arrayMap(array, iteratee) {\n  let index = 0;\n  let iterable = array;\n  if (!Array.isArray(array)) {\n    iterable = Array.from(array);\n  }\n  const length = iterable.length;\n  const result = [];\n  let resIndex = -1;\n  while (index < length) {\n    const value = iterable[index];\n    resIndex += 1;\n    result[resIndex] = iteratee(value, index, iterable);\n    index += 1;\n  }\n  return result;\n}\n\n/**\n * A specialized version of `.forEach` for arrays without support for callback\n * shorthands and `this` binding.\n *\n * {@link https://github.com/lodash/lodash/blob/master/lodash.js}.\n *\n * @param {Array|*} array The array to iterate over or an any element with implemented iterator protocol.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nexport function arrayEach(array, iteratee) {\n  let index = 0;\n  let iterable = array;\n  if (!Array.isArray(array)) {\n    iterable = Array.from(array);\n  }\n  const length = iterable.length;\n  while (index < length) {\n    if (iteratee(iterable[index], index, iterable) === false) {\n      break;\n    }\n    index += 1;\n  }\n  return array;\n}\n\n/**\n * Calculate sum value for each item of the array.\n *\n * @param {Array} array The array to process.\n * @returns {number} Returns calculated sum value.\n */\nexport function arraySum(array) {\n  return arrayReduce(array, (a, b) => a + b, 0);\n}\n\n/**\n * Returns the highest value from an array. Can be array of numbers or array of strings.\n * NOTICE: Mixed values is not supported.\n *\n * @param {Array} array The array to process.\n * @returns {number} Returns the highest value from an array.\n */\nexport function arrayMax(array) {\n  return arrayReduce(array, (a, b) => a > b ? a : b, Array.isArray(array) ? array[0] : void 0);\n}\n\n/**\n * Returns the lowest value from an array. Can be array of numbers or array of strings.\n * NOTICE: Mixed values is not supported.\n *\n * @param {Array} array The array to process.\n * @returns {number} Returns the lowest value from an array.\n */\nexport function arrayMin(array) {\n  return arrayReduce(array, (a, b) => a < b ? a : b, Array.isArray(array) ? array[0] : void 0);\n}\n\n/**\n * Calculate average value for each item of the array.\n *\n * @param {Array} array The array to process.\n * @returns {number} Returns calculated average value.\n */\nexport function arrayAvg(array) {\n  if (!array.length) {\n    return 0;\n  }\n  return arraySum(array) / array.length;\n}\n\n/**\n * Flatten multidimensional array.\n *\n * @param {Array} array Array of Arrays.\n * @returns {Array}\n */\nexport function arrayFlatten(array) {\n  return arrayReduce(array, (initial, value) => initial.concat(Array.isArray(value) ? arrayFlatten(value) : value), []);\n}\n\n/**\n * Unique values in the array.\n *\n * @param {Array} array The array to process.\n * @returns {Array}\n */\nexport function arrayUnique(array) {\n  const unique = [];\n  arrayEach(array, value => {\n    if (unique.indexOf(value) === -1) {\n      unique.push(value);\n    }\n  });\n  return unique;\n}\n\n/**\n * Differences from two or more arrays.\n *\n * @param {...Array} arrays Array of strings or array of numbers.\n * @returns {Array} Returns the difference between arrays.\n */\nexport function getDifferenceOfArrays() {\n  for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrays[_key] = arguments[_key];\n  }\n  const [first, ...rest] = [...arrays];\n  let filteredFirstArray = first;\n  arrayEach(rest, array => {\n    filteredFirstArray = filteredFirstArray.filter(value => !array.includes(value));\n  });\n  return filteredFirstArray;\n}\n\n/**\n * Intersection of two or more arrays.\n *\n * @param {...Array} arrays Array of strings or array of numbers.\n * @returns {Array} Returns elements that exists in every array.\n */\nexport function getIntersectionOfArrays() {\n  for (var _len2 = arguments.length, arrays = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    arrays[_key2] = arguments[_key2];\n  }\n  const [first, ...rest] = [...arrays];\n  let filteredFirstArray = first;\n  arrayEach(rest, array => {\n    filteredFirstArray = filteredFirstArray.filter(value => array.includes(value));\n  });\n  return filteredFirstArray;\n}\n\n/**\n * Union of two or more arrays.\n *\n * @param {...Array} arrays Array of strings or array of numbers.\n * @returns {Array} Returns the elements that exist in any of the arrays, without duplicates.\n */\nexport function getUnionOfArrays() {\n  for (var _len3 = arguments.length, arrays = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    arrays[_key3] = arguments[_key3];\n  }\n  const [first, ...rest] = [...arrays];\n  const set = new Set(first);\n  arrayEach(rest, array => {\n    arrayEach(array, value => {\n      if (!set.has(value)) {\n        set.add(value);\n      }\n    });\n  });\n  return Array.from(set);\n}\n\n/**\n * Convert a separated strings to an array of strings.\n *\n * @param {string} value A string of class name(s).\n * @param {string|RegExp} delimiter The pattern describing where each split should occur.\n * @returns {string[]} Returns array of string or empty array.\n */\nexport function stringToArray(value) {\n  let delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ' ';\n  return value.split(delimiter);\n}","import { arrayReduce } from \"../helpers/array.mjs\";\n/**\n * Tags a multiline string and return new one without line break characters and following spaces.\n *\n * @param {Array} strings Parts of the entire string without expressions.\n * @param {...string} expressions Expressions converted to strings, which are added to the entire string.\n * @returns {string}\n */\nexport function toSingleLine(strings) {\n  for (var _len = arguments.length, expressions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    expressions[_key - 1] = arguments[_key];\n  }\n  const result = arrayReduce(strings, (previousValue, currentValue, index) => {\n    const valueWithoutWhiteSpaces = currentValue.replace(/\\r?\\n\\s*/g, '');\n    const expressionForIndex = expressions[index] ? expressions[index] : '';\n    return previousValue + valueWithoutWhiteSpaces + expressionForIndex;\n  }, '');\n  return result.trim();\n}","import moment from 'moment';\nimport { toSingleLine } from \"./templateLiteralTag.mjs\";\n/**\n * Converts any value to string.\n *\n * @param {*} value The value to stringify.\n * @returns {string}\n */\nexport function stringify(value) {\n  let result;\n  switch (typeof value) {\n    case 'string':\n    case 'number':\n      result = `${value}`;\n      break;\n    case 'object':\n      result = value === null ? '' : value.toString();\n      break;\n    case 'undefined':\n      result = '';\n      break;\n    default:\n      result = value.toString();\n      break;\n  }\n  return result;\n}\n\n/**\n * Checks if given variable is defined.\n *\n * @param {*} variable Variable to check.\n * @returns {boolean}\n */\nexport function isDefined(variable) {\n  return typeof variable !== 'undefined';\n}\n\n/**\n * Checks if given variable is undefined.\n *\n * @param {*} variable Variable to check.\n * @returns {boolean}\n */\nexport function isUndefined(variable) {\n  return typeof variable === 'undefined';\n}\n\n/**\n * Check if given variable is null, empty string or undefined.\n *\n * @param {*} variable Variable to check.\n * @returns {boolean}\n */\nexport function isEmpty(variable) {\n  return variable === null || variable === '' || isUndefined(variable);\n}\n\n/**\n * Check if given variable is a regular expression.\n *\n * @param {*} variable Variable to check.\n * @returns {boolean}\n */\nexport function isRegExp(variable) {\n  return Object.prototype.toString.call(variable) === '[object RegExp]';\n}\n\n/* eslint-disable */\nconst _m = '\\x6C\\x65\\x6E\\x67\\x74\\x68';\nconst _hd = v => parseInt(v, 16);\nconst _pi = v => parseInt(v, 10);\nconst _ss = (v, s, l) => v['\\x73\\x75\\x62\\x73\\x74\\x72'](s, l);\nconst _cp = v => v['\\x63\\x6F\\x64\\x65\\x50\\x6F\\x69\\x6E\\x74\\x41\\x74'](0) - 65;\nconst _norm = v => `${v}`.replace(/\\-/g, '');\nconst _extractTime = v => _hd(_ss(_norm(v), _hd('12'), _cp('\\x46'))) / (_hd(_ss(_norm(v), _cp('\\x42'), ~~![][_m])) || 9);\nconst _ignored = () => typeof location !== 'undefined' && /^([a-z0-9\\-]+\\.)?\\x68\\x61\\x6E\\x64\\x73\\x6F\\x6E\\x74\\x61\\x62\\x6C\\x65\\x2E\\x63\\x6F\\x6D$/i.test(location.host);\nlet _notified = false;\nconst consoleMessages = {\n  invalid: () => toSingleLine`\n    The license key for Handsontable is invalid.\\x20\n    If you need any help, contact us at support@handsontable.com.`,\n  expired: _ref => {\n    let {\n      keyValidityDate,\n      hotVersion\n    } = _ref;\n    return toSingleLine`\n    The license key for Handsontable expired on ${keyValidityDate}, and is not valid for the installed\\x20\n    version ${hotVersion}. Renew your license key at handsontable.com or downgrade to a version released prior\\x20\n    to ${keyValidityDate}. If you need any help, contact us at sales@handsontable.com.`;\n  },\n  missing: () => toSingleLine`\n    The license key for Handsontable is missing. Use your purchased key to activate the product.\\x20\n    Alternatively, you can activate Handsontable to use for non-commercial purposes by\\x20\n    passing the key: 'non-commercial-and-evaluation'. If you need any help, contact\\x20\n    us at support@handsontable.com.`,\n  non_commercial: () => ''\n};\nconst domMessages = {\n  invalid: () => toSingleLine`\n    The license key for Handsontable is invalid.\\x20\n    <a href=\"https://handsontable.com/docs/tutorial-license-key.html\" target=\"_blank\">Read more</a> on how to\\x20\n    install it properly or contact us at <a href=\"mailto:support@handsontable.com\">support@handsontable.com</a>.`,\n  expired: _ref2 => {\n    let {\n      keyValidityDate,\n      hotVersion\n    } = _ref2;\n    return toSingleLine`\n    The license key for Handsontable expired on ${keyValidityDate}, and is not valid for the installed\\x20\n    version ${hotVersion}. <a href=\"https://handsontable.com/pricing\" target=\"_blank\">Renew</a> your\\x20\n    license key or downgrade to a version released prior to ${keyValidityDate}. If you need any\\x20\n    help, contact us at <a href=\"mailto:sales@handsontable.com\">sales@handsontable.com</a>.`;\n  },\n  missing: () => toSingleLine`\n    The license key for Handsontable is missing. Use your purchased key to activate the product.\\x20\n    Alternatively, you can activate Handsontable to use for non-commercial purposes by\\x20\n    passing the key: 'non-commercial-and-evaluation'.\\x20\n    <a href=\"https://handsontable.com/docs/tutorial-license-key.html\" target=\"_blank\">Read more</a> about it in\\x20\n    the documentation or contact us at <a href=\"mailto:support@handsontable.com\">support@handsontable.com</a>.`,\n  non_commercial: () => ''\n};\nexport function _injectProductInfo(key, element) {\n  const hasValidType = !isEmpty(key);\n  const isNonCommercial = typeof key === 'string' && key.toLowerCase() === 'non-commercial-and-evaluation';\n  const hotVersion = \"13.1.0\";\n  let keyValidityDate;\n  let consoleMessageState = 'invalid';\n  let domMessageState = 'invalid';\n  key = _norm(key || '');\n  const schemaValidity = _checkKeySchema(key);\n  if (hasValidType || isNonCommercial || schemaValidity) {\n    if (schemaValidity) {\n      const releaseDate = moment(\"31/08/2023\", 'DD/MM/YYYY');\n      const releaseDays = Math.floor(releaseDate.toDate().getTime() / 8.64e7);\n      const keyValidityDays = _extractTime(key);\n      keyValidityDate = moment((keyValidityDays + 1) * 8.64e7, 'x').format('MMMM DD, YYYY');\n      if (releaseDays > keyValidityDays) {\n        consoleMessageState = 'expired';\n        domMessageState = 'expired';\n      } else {\n        consoleMessageState = 'valid';\n        domMessageState = 'valid';\n      }\n    } else if (isNonCommercial) {\n      consoleMessageState = 'non_commercial';\n      domMessageState = 'valid';\n    } else {\n      consoleMessageState = 'invalid';\n      domMessageState = 'invalid';\n    }\n  } else {\n    consoleMessageState = 'missing';\n    domMessageState = 'missing';\n  }\n  if (_ignored()) {\n    consoleMessageState = 'valid';\n    domMessageState = 'valid';\n  }\n  if (!_notified && consoleMessageState !== 'valid') {\n    const message = consoleMessages[consoleMessageState]({\n      keyValidityDate,\n      hotVersion\n    });\n    if (message) {\n      console[consoleMessageState === 'non_commercial' ? 'info' : 'warn'](consoleMessages[consoleMessageState]({\n        keyValidityDate,\n        hotVersion\n      }));\n    }\n    _notified = true;\n  }\n  if (domMessageState !== 'valid' && element.parentNode) {\n    const message = domMessages[domMessageState]({\n      keyValidityDate,\n      hotVersion\n    });\n    if (message) {\n      const messageNode = document.createElement('div');\n      messageNode.className = 'hot-display-license-info';\n      messageNode.innerHTML = domMessages[domMessageState]({\n        keyValidityDate,\n        hotVersion\n      });\n      element.parentNode.insertBefore(messageNode, element.nextSibling);\n    }\n  }\n}\nfunction _checkKeySchema(v) {\n  let z = [][_m];\n  let p = z;\n  if (v[_m] !== _cp('\\x5A')) {\n    return false;\n  }\n  for (let c = '', i = '\\x42\\x3C\\x48\\x34\\x50\\x2B'.split(''), j = _cp(i.shift()); j; j = _cp(i.shift() || 'A')) {\n    --j < ''[_m] ? p = p | (_pi(`${_pi(_hd(c) + (_hd(_ss(v, Math.abs(j), 2)) + []).padStart(2, '0'))}`) % 97 || 2) >> 1 : c = _ss(v, j, !j ? 6 : i[_m] === 1 ? 9 : 8);\n  }\n  return p === z;\n}\n/* eslint-enable */","import \"core-js/modules/es.array.push.js\";\nimport DOMPurify from 'dompurify';\nimport { stringify } from \"./mixed.mjs\";\n/**\n * Convert string to upper case first letter.\n *\n * @param {string} string String to convert.\n * @returns {string}\n */\nexport function toUpperCaseFirst(string) {\n  return string[0].toUpperCase() + string.substr(1);\n}\n\n/**\n * Compare strings case insensitively.\n *\n * @param {...string} strings Strings to compare.\n * @returns {boolean}\n */\nexport function equalsIgnoreCase() {\n  const unique = [];\n  for (var _len = arguments.length, strings = new Array(_len), _key = 0; _key < _len; _key++) {\n    strings[_key] = arguments[_key];\n  }\n  let length = strings.length;\n  while (length) {\n    length -= 1;\n    const string = stringify(strings[length]).toLowerCase();\n    if (unique.indexOf(string) === -1) {\n      unique.push(string);\n    }\n  }\n  return unique.length === 1;\n}\n\n/**\n * Generates a random hex string. Used as namespace for Handsontable instance events.\n *\n * @returns {string} Returns 16-long character random string (eq. `'92b1bfc74ec4'`).\n */\nexport function randomString() {\n  /**\n   * @returns {string}\n   */\n  function s4() {\n    return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n  return s4() + s4() + s4() + s4();\n}\n\n/**\n * Checks if value is valid percent.\n *\n * @param {string} value The value to check.\n * @returns {boolean}\n */\nexport function isPercentValue(value) {\n  return /^([0-9][0-9]?%$)|(^100%$)/.test(value);\n}\n\n/**\n * Substitute strings placed beetwen square brackets into value defined in `variables` object. String names defined in\n * square brackets must be the same as property name of `variables` object.\n *\n * @param {string} template Template string.\n * @param {object} variables Object which contains all available values which can be injected into template.\n * @returns {string}\n */\nexport function substitute(template) {\n  let variables = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return `${template}`.replace(/(?:\\\\)?\\[([^[\\]]+)]/g, (match, name) => {\n    if (match.charAt(0) === '\\\\') {\n      return match.substr(1, match.length - 1);\n    }\n    return variables[name] === void 0 ? '' : variables[name];\n  });\n}\n\n/**\n * Strip any HTML tag from the string.\n *\n * @param {string} string String to cut HTML from.\n * @returns {string}\n */\nexport function stripTags(string) {\n  return sanitize(`${string}`, {\n    ALLOWED_TAGS: []\n  });\n}\n\n/**\n * Sanitizes string from potential security vulnerabilities.\n *\n * @param {string} string String to sanitize.\n * @param {object} [options] DOMPurify's configuration object.\n * @returns {string}\n */\nexport function sanitize(string, options) {\n  return DOMPurify.sanitize(string, options);\n}","export const A11Y_TABINDEX = val => ['tabindex', val];\nexport const A11Y_TREEGRID = () => ['role', 'treegrid'];\nexport const A11Y_PRESENTATION = () => ['role', 'presentation'];\nexport const A11Y_GRIDCELL = () => ['role', 'gridcell'];\nexport const A11Y_ROWHEADER = () => ['role', 'rowheader'];\nexport const A11Y_COLUMNHEADER = () => ['role', 'columnheader'];\nexport const A11Y_ROW = () => ['role', 'row'];\nexport const A11Y_MENU = () => ['role', 'menu'];\nexport const A11Y_MENU_ITEM = () => ['role', 'menuitem'];\nexport const A11Y_COMBOBOX = () => ['role', 'combobox'];\nexport const A11Y_LISTBOX = () => ['role', 'listbox'];\nexport const A11Y_OPTION = () => ['role', 'option'];\nexport const A11Y_CHECKBOX = () => ['role', 'checkbox'];\nexport const A11Y_SCOPE_COL = () => ['scope', 'col'];\nexport const A11Y_SCOPE_ROW = () => ['scope', 'row'];\nexport const A11Y_TEXT = () => ['type', 'text'];\nexport const A11Y_LABEL = val => ['aria-label', val];\nexport const A11Y_HIDDEN = () => ['aria-hidden', 'true'];\nexport const A11Y_DISABLED = () => ['aria-disabled', 'true'];\nexport const A11Y_MULTISELECTABLE = () => ['aria-multiselectable', 'true'];\nexport const A11Y_HASPOPUP = val => ['aria-haspopup', val];\nexport const A11Y_ROWCOUNT = val => ['aria-rowcount', val];\nexport const A11Y_COLCOUNT = val => ['aria-colcount', val];\nexport const A11Y_ROWINDEX = val => ['aria-rowindex', val];\nexport const A11Y_COLINDEX = val => ['aria-colindex', val];\nexport const A11Y_EXPANDED = val => ['aria-expanded', val];\nexport const A11Y_SORT = val => ['aria-sort', val];\nexport const A11Y_READONLY = () => ['aria-readonly', 'true'];\nexport const A11Y_INVALID = () => ['aria-invalid', 'true'];\nexport const A11Y_CHECKED = val => ['aria-checked', val];\nexport const A11Y_SELECTED = () => ['aria-selected', 'true'];\nexport const A11Y_AUTOCOMPLETE = () => ['aria-autocomplete', 'list'];\nexport const A11Y_CONTROLS = val => ['aria-controls', val];\nexport const A11Y_ACTIVEDESCENDANT = val => ['aria-activedescendant', val];\nexport const A11Y_LIVE = val => ['aria-live', val];\nexport const A11Y_RELEVANT = val => ['aria-relevant', val];\nexport const A11Y_SETSIZE = val => ['aria-setsize', val];\nexport const A11Y_POSINSET = val => ['aria-posinset', val];","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { sanitize } from \"../string.mjs\";\nimport { A11Y_HIDDEN } from \"../a11y.mjs\";\n/**\n * Get the parent of the specified node in the DOM tree.\n *\n * @param {HTMLElement} element Element from which traversing is started.\n * @param {number} [level=0] Traversing deep level.\n * @returns {HTMLElement|null}\n */\nexport function getParent(element) {\n  let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let iteration = -1;\n  let parent = null;\n  let elementToCheck = element;\n  while (elementToCheck !== null) {\n    if (iteration === level) {\n      parent = elementToCheck;\n      break;\n    }\n    if (elementToCheck.host && elementToCheck.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n      elementToCheck = elementToCheck.host;\n    } else {\n      iteration += 1;\n      elementToCheck = elementToCheck.parentNode;\n    }\n  }\n  return parent;\n}\n\n/**\n * Check if the provided element is a child of the provided Handsontable container.\n *\n * @param {HTMLElement} element Element to be analyzed.\n * @param {HTMLElement} thisHotContainer The Handsontable container.\n * @returns {boolean}\n */\nexport function isThisHotChild(element, thisHotContainer) {\n  const closestHandsontableContainer = element.closest('.handsontable');\n  return !!closestHandsontableContainer && (closestHandsontableContainer.parentNode === thisHotContainer || closestHandsontableContainer === thisHotContainer);\n}\n\n/**\n * Gets `frameElement` of the specified frame. Returns null if it is a top frame or if script has no access to read property.\n *\n * @param {Window} frame Frame from which should be get frameElement in safe way.\n * @returns {HTMLIFrameElement|null}\n */\nexport function getFrameElement(frame) {\n  return Object.getPrototypeOf(frame.parent) && frame.frameElement;\n}\n\n/**\n * Gets parent frame of the specified frame. Returns null if it is a top frame or if script has no access to read property.\n *\n * @param {Window} frame Frame from which should get frameElement in a safe way.\n * @returns {Window|null}\n */\nexport function getParentWindow(frame) {\n  return getFrameElement(frame) && frame.parent;\n}\n\n/**\n * Checks if script has access to read from parent frame of specified frame.\n *\n * @param {Window} frame Frame from which should get frameElement in a safe way.\n * @returns {boolean}\n */\nexport function hasAccessToParentWindow(frame) {\n  return !!Object.getPrototypeOf(frame.parent);\n}\n\n/**\n * Goes up the DOM tree (including given element) until it finds an parent element that matches the nodes or nodes name.\n * This method goes up through web components.\n *\n * @param {Node} element Element from which traversing is started.\n * @param {Array<string|Node>} [nodes] Array of elements or Array of elements name (in uppercase form).\n * @param {Node} [until] The element until the traversing ends.\n * @returns {Node|null}\n */\nexport function closest(element) {\n  let nodes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let until = arguments.length > 2 ? arguments[2] : undefined;\n  const {\n    ELEMENT_NODE,\n    DOCUMENT_FRAGMENT_NODE\n  } = Node;\n  let elementToCheck = element;\n  while (elementToCheck !== null && elementToCheck !== void 0 && elementToCheck !== until) {\n    const {\n      nodeType,\n      nodeName\n    } = elementToCheck;\n    if (nodeType === ELEMENT_NODE && (nodes.includes(nodeName) || nodes.includes(elementToCheck))) {\n      return elementToCheck;\n    }\n    const {\n      host\n    } = elementToCheck;\n    if (host && nodeType === DOCUMENT_FRAGMENT_NODE) {\n      elementToCheck = host;\n    } else {\n      elementToCheck = elementToCheck.parentNode;\n    }\n  }\n  return null;\n}\n\n/**\n * Goes \"down\" the DOM tree (including given element) until it finds an element that matches the nodes or nodes name.\n *\n * @param {HTMLElement} element Element from which traversing is started.\n * @param {Array} nodes Array of elements or Array of elements name.\n * @param {HTMLElement} [until] The list of elements until the traversing ends.\n * @returns {HTMLElement|null}\n */\nexport function closestDown(element, nodes, until) {\n  const matched = [];\n  let elementToCheck = element;\n  while (elementToCheck) {\n    elementToCheck = closest(elementToCheck, nodes, until);\n    if (!elementToCheck || until && !until.contains(elementToCheck)) {\n      break;\n    }\n    matched.push(elementToCheck);\n    if (elementToCheck.host && elementToCheck.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n      elementToCheck = elementToCheck.host;\n    } else {\n      elementToCheck = elementToCheck.parentNode;\n    }\n  }\n  const length = matched.length;\n  return length ? matched[length - 1] : null;\n}\n\n/**\n * Goes up the DOM tree and checks if element is child of another element.\n *\n * @param {HTMLElement} child Child element An element to check.\n * @param {object|string} parent Parent element OR selector of the parent element.\n *                               If string provided, function returns `true` for the first occurrence of element with that class.\n * @returns {boolean}\n */\nexport function isChildOf(child, parent) {\n  let node = child.parentNode;\n  let queriedParents = [];\n  if (typeof parent === 'string') {\n    if (child.defaultView) {\n      queriedParents = Array.prototype.slice.call(child.querySelectorAll(parent), 0);\n    } else {\n      queriedParents = Array.prototype.slice.call(child.ownerDocument.querySelectorAll(parent), 0);\n    }\n  } else {\n    queriedParents.push(parent);\n  }\n  while (node !== null) {\n    if (queriedParents.indexOf(node) > -1) {\n      return true;\n    }\n    node = node.parentNode;\n  }\n  return false;\n}\n\n/**\n * Counts index of element within its parent.\n * WARNING: for performance reasons, assumes there are only element nodes (no text nodes). This is true\n * for Walkotnable, otherwise would need to check for nodeType or use previousElementSibling.\n *\n * @see http://jsperf.com/sibling-index/10\n * @param {Element} element The element to check.\n * @returns {number}\n */\nexport function index(element) {\n  let i = 0;\n  let elementToCheck = element;\n  if (elementToCheck.previousSibling) {\n    /* eslint-disable no-cond-assign */\n    while (elementToCheck = elementToCheck.previousSibling) {\n      i += 1;\n    }\n  }\n  return i;\n}\n\n/**\n * Check if the provided overlay contains the provided element.\n *\n * @param {string} overlayType The type of the overlay.\n * @param {HTMLElement} element An element to check.\n * @param {HTMLElement} root The root element.\n * @returns {boolean}\n */\nexport function overlayContainsElement(overlayType, element, root) {\n  const overlayElement = root.parentElement.querySelector(`.ht_clone_${overlayType}`);\n  return overlayElement ? overlayElement.contains(element) : null;\n}\n\n/**\n * @param {string[]} classNames The element \"class\" attribute string.\n * @returns {string[]}\n */\nfunction filterEmptyClassNames(classNames) {\n  if (!classNames || !classNames.length) {\n    return [];\n  }\n  return classNames.filter(x => !!x);\n}\n\n/**\n * Filter out the RegExp entries from an array.\n *\n * @param {(string|RegExp)[]} list Array of either strings, Regexes or a mix of both.\n * @param {boolean} [returnBoth] If `true`, both the array without regexes and an array of regexes will be returned.\n * @returns {string[]|{regexFree: string[], regexes: RegExp[]}}\n */\nfunction filterRegexes(list, returnBoth) {\n  if (!list || !list.length) {\n    return returnBoth ? {\n      regexFree: [],\n      regexes: []\n    } : [];\n  }\n  const regexes = [];\n  const regexFree = [];\n  regexFree.push(...list.filter(entry => {\n    const isRegex = entry instanceof RegExp;\n    if (isRegex && returnBoth) {\n      regexes.push(entry);\n    }\n    return !isRegex;\n  }));\n  return returnBoth ? {\n    regexFree,\n    regexes\n  } : regexFree;\n}\n\n/**\n * Checks if element has class name.\n *\n * @param {HTMLElement} element An element to check.\n * @param {string} className Class name to check.\n * @returns {boolean}\n */\nexport function hasClass(element, className) {\n  if (element.classList === void 0 || typeof className !== 'string' || className === '') {\n    return false;\n  }\n  return element.classList.contains(className);\n}\n\n/**\n * Add class name to an element.\n *\n * @param {HTMLElement} element An element to process.\n * @param {string|Array} className Class name as string or array of strings.\n */\nexport function addClass(element, className) {\n  if (typeof className === 'string') {\n    className = className.split(' ');\n  }\n  className = filterEmptyClassNames(className);\n  if (className.length > 0) {\n    element.classList.add(...className);\n  }\n}\n\n/**\n * Remove class name from an element.\n *\n * @param {HTMLElement} element An element to process.\n * @param {string|Array<string|RegExp>} className Class name as string or array of strings.\n */\nexport function removeClass(element, className) {\n  if (typeof className === 'string') {\n    className = className.split(' ');\n  } else if (className instanceof RegExp) {\n    className = [className];\n  }\n  let {\n    regexFree: stringClasses,\n    // eslint-disable-next-line prefer-const\n    regexes: regexClasses\n  } = filterRegexes(className, true);\n  stringClasses = filterEmptyClassNames(stringClasses);\n  if (stringClasses.length > 0) {\n    element.classList.remove(...stringClasses);\n  }\n  regexClasses.forEach(regexClassName => {\n    element.classList.forEach(currentClassName => {\n      if (regexClassName.test(currentClassName)) {\n        element.classList.remove(currentClassName);\n      }\n    });\n  });\n}\n\n/**\n * Set a single attribute or multiple attributes at once.\n *\n * @param {HTMLElement} domElement The HTML element to be modified.\n * @param {Array[]|string} attributes If setting multiple attributes at once, `attributes` holds an array containing the\n * attributes to be added. Each element of the array should be an array in a form of `[attributeName,\n * attributeValue]`. If setting a single attribute, `attributes` holds the name of the attribute.\n * @param {string|number|undefined} [attributeValue] If setting a single attribute, `attributeValue` holds the attribute\n * value.\n */\nexport function setAttribute(domElement) {\n  let attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let attributeValue = arguments.length > 2 ? arguments[2] : undefined;\n  if (!Array.isArray(attributes)) {\n    attributes = [[attributes, attributeValue]];\n  }\n  attributes.forEach(attributeInfo => {\n    if (Array.isArray(attributeInfo) && attributeInfo[0] !== '') {\n      domElement.setAttribute(...attributeInfo);\n    }\n  });\n}\n\n/**\n * Remove a single attribute or multiple attributes from the provided element at once.\n *\n * @param {HTMLElement} domElement The HTML element to be processed.\n * @param {Array<string|RegExp>|string} attributesToRemove If removing multiple attributes, `attributesToRemove`\n * holds an array of attribute names to be removed from the provided element. If removing a single attribute, it\n * holds the attribute name.\n */\nexport function removeAttribute(domElement) {\n  let attributesToRemove = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  if (typeof attributesToRemove === 'string') {\n    attributesToRemove = attributesToRemove.split(' ');\n  } else if (attributesToRemove instanceof RegExp) {\n    attributesToRemove = [attributesToRemove];\n  }\n  const {\n    regexFree: stringAttributes,\n    regexes: regexAttributes\n  } = filterRegexes(attributesToRemove, true);\n  stringAttributes.forEach(attributeNameToRemove => {\n    if (attributeNameToRemove !== '') {\n      domElement.removeAttribute(attributeNameToRemove);\n    }\n  });\n  regexAttributes.forEach(attributeRegex => {\n    domElement.getAttributeNames().forEach(attributeName => {\n      if (attributeRegex.test(attributeName)) {\n        domElement.removeAttribute(attributeName);\n      }\n    });\n  });\n}\n\n/**\n * @param {HTMLElement} element An element from the text is removed.\n */\nexport function removeTextNodes(element) {\n  if (element.nodeType === 3) {\n    element.parentNode.removeChild(element); // bye text nodes!\n  } else if (['TABLE', 'THEAD', 'TBODY', 'TFOOT', 'TR'].indexOf(element.nodeName) > -1) {\n    const childs = element.childNodes;\n    for (let i = childs.length - 1; i >= 0; i--) {\n      removeTextNodes(childs[i]);\n    }\n  }\n}\n\n/**\n * Remove children function\n * WARNING - this doesn't unload events and data attached by jQuery\n * http://jsperf.com/jquery-html-vs-empty-vs-innerhtml/9\n * http://jsperf.com/jquery-html-vs-empty-vs-innerhtml/11 - no siginificant improvement with Chrome remove() method.\n *\n * @param {HTMLElement} element An element to clear.\n */\nexport function empty(element) {\n  let child;\n\n  /* eslint-disable no-cond-assign */\n  while (child = element.lastChild) {\n    element.removeChild(child);\n  }\n}\nexport const HTML_CHARACTERS = /(<(.*)>|&(.*);)/;\n\n/**\n * Insert content into element trying to avoid innerHTML method.\n *\n * @param {HTMLElement} element An element to write into.\n * @param {string} content The text to write.\n * @param {boolean} [sanitizeContent=true] If `true`, the content will be sanitized before writing to the element.\n */\nexport function fastInnerHTML(element, content) {\n  let sanitizeContent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  if (HTML_CHARACTERS.test(content)) {\n    element.innerHTML = sanitizeContent ? sanitize(content) : content;\n  } else {\n    fastInnerText(element, content);\n  }\n}\n\n/**\n * Insert text content into element.\n *\n * @param {HTMLElement} element An element to write into.\n * @param {string} content The text to write.\n */\nexport function fastInnerText(element, content) {\n  const child = element.firstChild;\n  if (child && child.nodeType === 3 && child.nextSibling === null) {\n    // fast lane - replace existing text node\n    child.textContent = content;\n  } else {\n    // slow lane - empty element and insert a text node\n    empty(element);\n    element.appendChild(element.ownerDocument.createTextNode(content));\n  }\n}\n\n/**\n * Returns true if element is attached to the DOM and visible, false otherwise.\n *\n * @param {HTMLElement} element An element to check.\n * @returns {boolean}\n */\nexport function isVisible(element) {\n  const documentElement = element.ownerDocument.documentElement;\n  let next = element;\n  while (next !== documentElement) {\n    // until <html> reached\n    if (next === null) {\n      // parent detached from DOM\n      return false;\n    } else if (next.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n      if (next.host) {\n        // this is Web Components Shadow DOM\n        // see: http://w3c.github.io/webcomponents/spec/shadow/#encapsulation\n        // according to spec, should be if (next.ownerDocument !== window.document), but that doesn't work yet\n        if (next.host.impl) {\n          // Chrome 33.0.1723.0 canary (2013-11-29) Web Platform features disabled\n          return isVisible(next.host.impl);\n        } else if (next.host) {\n          // Chrome 33.0.1723.0 canary (2013-11-29) Web Platform features enabled\n          return isVisible(next.host);\n        }\n        throw new Error('Lost in Web Components world');\n      } else {\n        return false; // this is a node detached from document in IE8\n      }\n    } else if (getComputedStyle(next).display === 'none') {\n      return false;\n    }\n    next = next.parentNode;\n  }\n  return true;\n}\n\n/**\n * Returns elements top and left offset relative to the document. Function is not compatible with jQuery offset.\n *\n * @param {HTMLElement} element An element to get the offset position from.\n * @returns {object} Returns object with `top` and `left` props.\n */\nexport function offset(element) {\n  const rootDocument = element.ownerDocument;\n  const rootWindow = rootDocument.defaultView;\n  const documentElement = rootDocument.documentElement;\n  let elementToCheck = element;\n  let offsetLeft;\n  let offsetTop;\n  let lastElem;\n  offsetLeft = elementToCheck.offsetLeft;\n  offsetTop = elementToCheck.offsetTop;\n  lastElem = elementToCheck;\n\n  /* eslint-disable no-cond-assign */\n  while (elementToCheck = elementToCheck.offsetParent) {\n    // from my observation, document.body always has scrollLeft/scrollTop == 0\n    if (elementToCheck === rootDocument.body) {\n      break;\n    }\n    // If the element is inside an SVG context, the `offsetParent` can be\n    // a <foreignObject> that does not have properties `offsetLeft` and `offsetTop` defined.\n    if (!('offsetLeft' in elementToCheck)) {\n      break;\n    }\n    offsetLeft += elementToCheck.offsetLeft;\n    offsetTop += elementToCheck.offsetTop;\n    lastElem = elementToCheck;\n  }\n\n  // slow - http://jsperf.com/offset-vs-getboundingclientrect/6\n  if (lastElem && lastElem.style.position === 'fixed') {\n    // if(lastElem !== document.body) { //faster but does gives false positive in Firefox\n    offsetLeft += rootWindow.pageXOffset || documentElement.scrollLeft;\n    offsetTop += rootWindow.pageYOffset || documentElement.scrollTop;\n  }\n  return {\n    left: offsetLeft,\n    top: offsetTop\n  };\n}\n\n/**\n * Returns the document's scrollTop property.\n *\n * @param {Window} [rootWindow] The document window owner.\n * @returns {number}\n */\n// eslint-disable-next-line no-restricted-globals\nexport function getWindowScrollTop() {\n  let rootWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n  return rootWindow.scrollY;\n}\n\n/**\n * Returns the document's scrollLeft property.\n *\n * @param {Window} [rootWindow] The document window owner.\n * @returns {number}\n */\n// eslint-disable-next-line no-restricted-globals\nexport function getWindowScrollLeft() {\n  let rootWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n  return rootWindow.scrollX;\n}\n\n/**\n * Returns the provided element's scrollTop property.\n *\n * @param {HTMLElement} element An element to get the scroll top position from.\n * @param {Window} [rootWindow] The document window owner.\n * @returns {number}\n */\n// eslint-disable-next-line no-restricted-globals\nexport function getScrollTop(element) {\n  let rootWindow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;\n  if (element === rootWindow) {\n    return getWindowScrollTop(rootWindow);\n  }\n  return element.scrollTop;\n}\n\n/**\n * Returns the provided element's scrollLeft property.\n *\n * @param {HTMLElement} element An element to get the scroll left position from.\n * @param {Window} [rootWindow] The document window owner.\n * @returns {number}\n */\n// eslint-disable-next-line no-restricted-globals\nexport function getScrollLeft(element) {\n  let rootWindow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;\n  if (element === rootWindow) {\n    return getWindowScrollLeft(rootWindow);\n  }\n  return element.scrollLeft;\n}\n\n/**\n * Returns a DOM element responsible for scrolling of the provided element.\n *\n * @param {HTMLElement} element An element to get the scrollable element from.\n * @returns {HTMLElement} Element's scrollable parent.\n */\nexport function getScrollableElement(element) {\n  let rootDocument = element.ownerDocument;\n  let rootWindow = rootDocument ? rootDocument.defaultView : void 0;\n  if (!rootDocument) {\n    rootDocument = element.document ? element.document : element;\n    rootWindow = rootDocument.defaultView;\n  }\n  const props = ['auto', 'scroll'];\n  let el = element.parentNode;\n  while (el && el.style && rootDocument.body !== el) {\n    let {\n      overflow,\n      overflowX,\n      overflowY\n    } = el.style;\n    if ([overflow, overflowX, overflowY].includes('scroll')) {\n      return el;\n    } else {\n      ({\n        overflow,\n        overflowX,\n        overflowY\n      } = rootWindow.getComputedStyle(el));\n      if (props.includes(overflow) || props.includes(overflowX) || props.includes(overflowY)) {\n        return el;\n      }\n    }\n\n    // The '+ 1' after the scrollHeight/scrollWidth is to prevent problems with zoomed out Chrome.\n    if (el.clientHeight <= el.scrollHeight + 1 && (props.includes(overflowY) || props.includes(overflow))) {\n      return el;\n    }\n    if (el.clientWidth <= el.scrollWidth + 1 && (props.includes(overflowX) || props.includes(overflow))) {\n      return el;\n    }\n    el = el.parentNode;\n  }\n  return rootWindow;\n}\n\n/**\n * Returns a DOM element responsible for trimming the provided element.\n *\n * @param {HTMLElement} base Base element.\n * @returns {HTMLElement} Base element's trimming parent.\n */\nexport function getTrimmingContainer(base) {\n  const rootDocument = base.ownerDocument;\n  const rootWindow = rootDocument.defaultView;\n  let el = base.parentNode;\n  while (el && el.style && rootDocument.body !== el) {\n    if (el.style.overflow !== 'visible' && el.style.overflow !== '') {\n      return el;\n    }\n    const computedStyle = getComputedStyle(el, rootWindow);\n    const allowedProperties = ['scroll', 'hidden', 'auto'];\n    const property = computedStyle.getPropertyValue('overflow');\n    const propertyY = computedStyle.getPropertyValue('overflow-y');\n    const propertyX = computedStyle.getPropertyValue('overflow-x');\n    if (allowedProperties.includes(property) || allowedProperties.includes(propertyY) || allowedProperties.includes(propertyX)) {\n      return el;\n    }\n    el = el.parentNode;\n  }\n  return rootWindow;\n}\n\n/**\n * Returns a style property for the provided element. (Be it an inline or external style).\n *\n * @param {HTMLElement} element An element to get the style from.\n * @param {string} prop Wanted property.\n * @param {Window} [rootWindow] The document window owner.\n * @returns {string|undefined} Element's style property.\n */\n// eslint-disable-next-line no-restricted-globals\nexport function getStyle(element, prop) {\n  let rootWindow = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : window;\n  if (!element) {\n    return;\n  } else if (element === rootWindow) {\n    if (prop === 'width') {\n      return `${rootWindow.innerWidth}px`;\n    } else if (prop === 'height') {\n      return `${rootWindow.innerHeight}px`;\n    }\n    return;\n  }\n  const styleProp = element.style[prop];\n  if (styleProp !== '' && styleProp !== void 0) {\n    return styleProp;\n  }\n  const computedStyle = getComputedStyle(element, rootWindow);\n  if (computedStyle[prop] !== '' && computedStyle[prop] !== void 0) {\n    return computedStyle[prop];\n  }\n}\n\n/**\n * Verifies if element fit to provided CSSRule.\n *\n * @param {Element} element Element to verify with selector text.\n * @param {CSSRule} rule Selector text from CSSRule.\n * @returns {boolean}\n */\nexport function matchesCSSRules(element, rule) {\n  const {\n    selectorText\n  } = rule;\n  let result = false;\n  if (rule.type === CSSRule.STYLE_RULE && selectorText) {\n    if (element.msMatchesSelector) {\n      result = element.msMatchesSelector(selectorText);\n    } else if (element.matches) {\n      result = element.matches(selectorText);\n    }\n  }\n  return result;\n}\n\n/**\n * Returns a computed style object for the provided element. (Needed if style is declared in external stylesheet).\n *\n * @param {HTMLElement} element An element to get style from.\n * @param {Window} [rootWindow] The document window owner.\n * @returns {IEElementStyle|CssStyle} Elements computed style object.\n */\n// eslint-disable-next-line no-restricted-globals\nexport function getComputedStyle(element) {\n  let rootWindow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;\n  return element.currentStyle || rootWindow.getComputedStyle(element);\n}\n\n/**\n * Returns the element's outer width.\n *\n * @param {HTMLElement} element An element to get the width from.\n * @returns {number} Element's outer width.\n */\nexport function outerWidth(element) {\n  return element.offsetWidth;\n}\n\n/**\n * Returns the element's outer height.\n *\n * @param {HTMLElement} element An element to get the height from.\n * @returns {number} Element's outer height.\n */\nexport function outerHeight(element) {\n  return element.offsetHeight;\n}\n\n/**\n * Returns the element's inner height.\n *\n * @param {HTMLElement} element An element to get the height from.\n * @returns {number} Element's inner height.\n */\nexport function innerHeight(element) {\n  return element.clientHeight || element.innerHeight;\n}\n\n/**\n * Returns the element's inner width.\n *\n * @param {HTMLElement} element An element to get the width from.\n * @returns {number} Element's inner width.\n */\nexport function innerWidth(element) {\n  return element.clientWidth || element.innerWidth;\n}\n\n/**\n * @param {HTMLElement} element An element to which the event is added.\n * @param {string} event The event name.\n * @param {Function} callback The callback to add.\n */\nexport function addEvent(element, event, callback) {\n  element.addEventListener(event, callback, false);\n}\n\n/**\n * @param {HTMLElement} element An element from which the event is removed.\n * @param {string} event The event name.\n * @param {Function} callback The function reference to remove.\n */\nexport function removeEvent(element, event, callback) {\n  element.removeEventListener(event, callback, false);\n}\n\n/**\n * Returns caret position in text input.\n *\n * @author https://stackoverflow.com/questions/263743/how-to-get-caret-position-in-textarea\n * @param {HTMLElement} el An element to check.\n * @returns {number}\n */\nexport function getCaretPosition(el) {\n  if (el.selectionStart) {\n    return el.selectionStart;\n  }\n  return 0;\n}\n\n/**\n * Returns end of the selection in text input.\n *\n * @param {HTMLElement} el An element to check.\n * @returns {number}\n */\nexport function getSelectionEndPosition(el) {\n  if (el.selectionEnd) {\n    return el.selectionEnd;\n  }\n  return 0;\n}\n\n/**\n * Returns text under selection.\n *\n * @param {Window} [rootWindow] The document window owner.\n * @returns {string}\n */\n// eslint-disable-next-line no-restricted-globals\nexport function getSelectionText() {\n  let rootWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n  const rootDocument = rootWindow.document;\n  let text = '';\n  if (rootWindow.getSelection) {\n    text = rootWindow.getSelection().toString();\n  } else if (rootDocument.selection && rootDocument.selection.type !== 'Control') {\n    text = rootDocument.selection.createRange().text;\n  }\n  return text;\n}\n\n/**\n * Cross-platform helper to clear text selection.\n *\n * @param {Window} [rootWindow] The document window owner.\n */\n// eslint-disable-next-line no-restricted-globals\nexport function clearTextSelection() {\n  let rootWindow = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window;\n  // http://stackoverflow.com/questions/3169786/clear-text-selection-with-javascript\n  if (rootWindow.getSelection) {\n    if (rootWindow.getSelection().empty) {\n      // Chrome\n      rootWindow.getSelection().empty();\n    } else if (rootWindow.getSelection().removeAllRanges) {\n      // Firefox\n      rootWindow.getSelection().removeAllRanges();\n    }\n  }\n}\n\n/**\n * Sets caret position in text input.\n *\n * @author http://blog.vishalon.net/index.php/javascript-getting-and-setting-caret-position-in-textarea/\n * @param {Element} element An element to process.\n * @param {number} pos The selection start position.\n * @param {number} endPos The selection end position.\n */\nexport function setCaretPosition(element, pos, endPos) {\n  if (endPos === void 0) {\n    endPos = pos;\n  }\n  if (element.setSelectionRange) {\n    element.focus();\n    try {\n      element.setSelectionRange(pos, endPos);\n    } catch (err) {\n      const elementParent = element.parentNode;\n      const parentDisplayValue = elementParent.style.display;\n      elementParent.style.display = 'block';\n      element.setSelectionRange(pos, endPos);\n      elementParent.style.display = parentDisplayValue;\n    }\n  }\n}\nlet cachedScrollbarWidth;\n\n/**\n * Helper to calculate scrollbar width.\n * Source: https://stackoverflow.com/questions/986937/how-can-i-get-the-browsers-scrollbar-sizes.\n *\n * @private\n * @param {Document} rootDocument The onwer of the document.\n * @returns {number}\n */\n// eslint-disable-next-line no-restricted-globals\nfunction walkontableCalculateScrollbarWidth() {\n  let rootDocument = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n  const inner = rootDocument.createElement('div');\n  inner.style.height = '200px';\n  inner.style.width = '100%';\n  const outer = rootDocument.createElement('div');\n  outer.style.boxSizing = 'content-box';\n  outer.style.height = '150px';\n  outer.style.left = '0px';\n  outer.style.overflow = 'hidden';\n  outer.style.position = 'absolute';\n  outer.style.top = '0px';\n  outer.style.width = '200px';\n  outer.style.visibility = 'hidden';\n  outer.appendChild(inner);\n  (rootDocument.body || rootDocument.documentElement).appendChild(outer);\n  const w1 = inner.offsetWidth;\n  outer.style.overflow = 'scroll';\n  let w2 = inner.offsetWidth;\n  if (w1 === w2) {\n    w2 = outer.clientWidth;\n  }\n  (rootDocument.body || rootDocument.documentElement).removeChild(outer);\n  return w1 - w2;\n}\n\n/**\n * Returns the computed width of the native browser scroll bar.\n *\n * @param {Document} [rootDocument] The owner of the document.\n * @returns {number} Width.\n */\n// eslint-disable-next-line no-restricted-globals\nexport function getScrollbarWidth() {\n  let rootDocument = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n  if (cachedScrollbarWidth === void 0) {\n    cachedScrollbarWidth = walkontableCalculateScrollbarWidth(rootDocument);\n  }\n  return cachedScrollbarWidth;\n}\n\n/**\n * Checks if the provided element has a vertical scrollbar.\n *\n * @param {HTMLElement} element An element to check.\n * @returns {boolean}\n */\nexport function hasVerticalScrollbar(element) {\n  return element.offsetWidth !== element.clientWidth;\n}\n\n/**\n * Checks if the provided element has a vertical scrollbar.\n *\n * @param {HTMLElement} element An element to check.\n * @returns {boolean}\n */\nexport function hasHorizontalScrollbar(element) {\n  return element.offsetHeight !== element.clientHeight;\n}\n\n/**\n * Sets overlay position depending on it's type and used browser.\n *\n * @param {HTMLElement} overlayElem An element to process.\n * @param {number|string} left The left position of the overlay.\n * @param {number|string} top The top position of the overlay.\n */\nexport function setOverlayPosition(overlayElem, left, top) {\n  overlayElem.style.transform = `translate3d(${left},${top},0)`;\n}\n\n/**\n * @param {HTMLElement} element An element to process.\n * @returns {number|Array}\n */\nexport function getCssTransform(element) {\n  let transform;\n  if (element.style.transform && (transform = element.style.transform) !== '') {\n    return ['transform', transform];\n  }\n  return -1;\n}\n\n/**\n * @param {HTMLElement} element An element to process.\n */\nexport function resetCssTransform(element) {\n  if (element.style.transform && element.style.transform !== '') {\n    element.style.transform = '';\n  }\n}\n\n/**\n * Determines if the given DOM element is an input field.\n * Notice: By 'input' we mean input, textarea and select nodes.\n *\n * @param {HTMLElement} element - DOM element.\n * @returns {boolean}\n */\nexport function isInput(element) {\n  const inputs = ['INPUT', 'SELECT', 'TEXTAREA'];\n  return element && (inputs.indexOf(element.nodeName) > -1 || element.contentEditable === 'true');\n}\n\n/**\n * Determines if the given DOM element is an input field placed OUTSIDE of HOT.\n * Notice: By 'input' we mean input, textarea and select nodes which have defined 'data-hot-input' attribute.\n *\n * @param {HTMLElement} element - DOM element.\n * @returns {boolean}\n */\nexport function isOutsideInput(element) {\n  return isInput(element) && element.hasAttribute('data-hot-input') === false;\n}\n\n/**\n * Check if the given DOM element can be focused (by using \"select\" method).\n *\n * @param {HTMLElement} element - DOM element.\n */\nexport function selectElementIfAllowed(element) {\n  const activeElement = element.ownerDocument.activeElement;\n  if (!isOutsideInput(activeElement)) {\n    element.select();\n  }\n}\n\n/**\n * Check if the provided element is detached from DOM.\n *\n * @param {HTMLElement} element HTML element to be checked.\n * @returns {boolean} `true` if the element is detached, `false` otherwise.\n */\nexport function isDetached(element) {\n  return !element.parentNode;\n}\n\n/**\n * Set up an observer to recognize when the provided element first becomes visible and trigger a callback when it\n * happens.\n *\n * @param {HTMLElement} elementToBeObserved Element to be observed.\n * @param {Function} callback The callback function.\n */\nexport function observeVisibilityChangeOnce(elementToBeObserved, callback) {\n  const visibilityObserver = new IntersectionObserver((entries, observer) => {\n    entries.forEach(entry => {\n      if (entry.isIntersecting && elementToBeObserved.offsetParent !== null) {\n        callback();\n        observer.unobserve(elementToBeObserved);\n      }\n    });\n  }, {\n    root: elementToBeObserved.ownerDocument.body\n  });\n  visibilityObserver.observe(elementToBeObserved);\n}\n\n/**\n * Add a `contenteditable` attribute, select the contents and optionally add the `invisibleSelection`\n * class to the provided element.\n *\n * @param {HTMLElement} element Element to be processed.\n * @param {boolean} [invisibleSelection=true] `true` if the class should be added to the element.\n * @param {boolean} [ariaHidden=true] `true` if the `aria-hidden` attribute should be added to the processed element.\n */\nexport function makeElementContentEditableAndSelectItsContent(element) {\n  let invisibleSelection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  let ariaHidden = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const ownerDocument = element.ownerDocument;\n  const range = ownerDocument.createRange();\n  const sel = ownerDocument.defaultView.getSelection();\n  setAttribute(element, 'contenteditable', true);\n  if (ariaHidden) {\n    setAttribute(element, ...A11Y_HIDDEN());\n  }\n  if (invisibleSelection) {\n    addClass(element, 'invisibleSelection');\n  }\n  range.selectNodeContents(element);\n  sel.removeAllRanges();\n  sel.addRange(range);\n}\n\n/**\n * Remove the `contenteditable` attribute, deselect the contents and optionally remove the `invisibleSelection`\n * class from the provided element.\n *\n * @param {HTMLElement} selectedElement The element to be deselected.\n * @param {boolean} [removeInvisibleSelectionClass=true] `true` if the class should be removed from the element.\n */\nexport function removeContentEditableFromElementAndDeselect(selectedElement) {\n  let removeInvisibleSelectionClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const sel = selectedElement.ownerDocument.defaultView.getSelection();\n  if (selectedElement.hasAttribute('aria-hidden')) {\n    selectedElement.removeAttribute('aria-hidden');\n  }\n  sel.removeAllRanges();\n  if (removeInvisibleSelectionClass) {\n    removeClass(selectedElement, 'invisibleSelection');\n  }\n  selectedElement.removeAttribute('contenteditable');\n}\n\n/**\n * Run the provided callback while the provided element is selected and modified to have the `contenteditable`\n * attribute added. Optionally, the selection can be configured to be invisible.\n *\n * @param {HTMLElement} element Element to be selected.\n * @param {Function} callback Callback to be called.\n * @param {boolean} [invisibleSelection=true] `true` if the selection should be invisible.\n */\nexport function runWithSelectedContendEditableElement(element, callback) {\n  let invisibleSelection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  makeElementContentEditableAndSelectItsContent(element, invisibleSelection);\n  callback();\n  removeContentEditableFromElementAndDeselect(element, invisibleSelection);\n}","import { arrayReduce } from \"./array.mjs\";\nimport { isDefined } from \"./mixed.mjs\";\n/**\n * Checks if given variable is function.\n *\n * @param {*} func Variable to check.\n * @returns {boolean}\n */\nexport function isFunction(func) {\n  return typeof func === 'function';\n}\n\n/**\n * Creates throttle function that enforces a maximum number of times a function (`func`) can be called over time (`wait`).\n *\n * @param {Function} func Function to invoke.\n * @param {number} wait Delay in miliseconds.\n * @returns {Function}\n */\nexport function throttle(func) {\n  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  let lastCalled = 0;\n  const result = {\n    lastCallThrottled: true\n  };\n  let lastTimer = null;\n\n  /**\n   * @param {...*} args The list of arguments passed during the function invocation.\n   * @returns {object}\n   */\n  function _throttle() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const stamp = Date.now();\n    let needCall = false;\n    result.lastCallThrottled = true;\n    if (!lastCalled) {\n      lastCalled = stamp;\n      needCall = true;\n    }\n    const remaining = wait - (stamp - lastCalled);\n    if (needCall) {\n      result.lastCallThrottled = false;\n      func.apply(this, args);\n    } else {\n      if (lastTimer) {\n        clearTimeout(lastTimer);\n      }\n      lastTimer = setTimeout(() => {\n        result.lastCallThrottled = false;\n        func.apply(this, args);\n        lastCalled = 0;\n        lastTimer = void 0;\n      }, remaining);\n    }\n    return result;\n  }\n  return _throttle;\n}\n\n/**\n * Creates throttle function that enforces a maximum number of times a function (`func`) can be called over\n * time (`wait`) after specified hits.\n *\n * @param {Function} func Function to invoke.\n * @param {number} wait Delay in miliseconds.\n * @param {number} hits Number of hits after throttling will be applied.\n * @returns {Function}\n */\nexport function throttleAfterHits(func) {\n  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  let hits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 10;\n  const funcThrottle = throttle(func, wait);\n  let remainHits = hits;\n\n  /**\n   *\n   */\n  function _clearHits() {\n    remainHits = hits;\n  }\n  /**\n   * @param {*} args The list of arguments passed during the function invocation.\n   * @returns {*}\n   */\n  function _throttleAfterHits() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    if (remainHits) {\n      remainHits -= 1;\n      return func.apply(this, args);\n    }\n    return funcThrottle.apply(this, args);\n  }\n  _throttleAfterHits.clearHits = _clearHits;\n  return _throttleAfterHits;\n}\n\n/**\n * Creates debounce function that enforces a function (`func`) not be called again until a certain amount of time (`wait`)\n * has passed without it being called.\n *\n * @param {Function} func Function to invoke.\n * @param {number} wait Delay in milliseconds.\n * @returns {Function}\n */\nexport function debounce(func) {\n  let wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 200;\n  let lastTimer = null;\n  let result;\n\n  /**\n   * @param {*} args The list of arguments passed during the function invocation.\n   * @returns {*}\n   */\n  function _debounce() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    if (lastTimer) {\n      clearTimeout(lastTimer);\n    }\n    lastTimer = setTimeout(() => {\n      result = func.apply(this, args);\n    }, wait);\n    return result;\n  }\n  return _debounce;\n}\n\n/**\n * Creates the function that returns the result of calling the given functions. Result of the first function is passed to\n * the second as an argument and so on. Only first function in the chain can handle multiple arguments.\n *\n * @param {Function} functions Functions to compose.\n * @returns {Function}\n */\nexport function pipe() {\n  for (var _len4 = arguments.length, functions = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    functions[_key4] = arguments[_key4];\n  }\n  const [firstFunc, ...restFunc] = functions;\n  return function _pipe() {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    return arrayReduce(restFunc, (acc, fn) => fn(acc), firstFunc.apply(this, args));\n  };\n}\n\n/**\n * Creates the function that returns the function with cached arguments.\n *\n * @param {Function} func Function to partialization.\n * @param {Array} params Function arguments to cache.\n * @returns {Function}\n */\nexport function partial(func) {\n  for (var _len6 = arguments.length, params = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    params[_key6 - 1] = arguments[_key6];\n  }\n  return function _partial() {\n    for (var _len7 = arguments.length, restParams = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      restParams[_key7] = arguments[_key7];\n    }\n    return func.apply(this, params.concat(restParams));\n  };\n}\n\n/**\n * Creates the functions that returns the function with cached arguments. If count if passed arguments will be matched\n * to the arguments defined in `func` then function will be invoked.\n * Arguments are added to the stack in direction from the left to the right.\n *\n * @example\n * ```\n * var replace = curry(function(find, replace, string) {\n *   return string.replace(find, replace);\n * });\n *\n * // returns function with bounded first argument\n * var replace = replace('foo')\n *\n * // returns replaced string - all arguments was passed so function was invoked\n * replace('bar', 'Some test with foo...');\n *\n * ```\n *\n * @param {Function} func Function to currying.\n * @returns {Function}\n */\nexport function curry(func) {\n  const argsLength = func.length;\n\n  /**\n   * @param {*} argsSoFar The list of arguments passed during the function invocation.\n   * @returns {Function}\n   */\n  function given(argsSoFar) {\n    return function _curry() {\n      for (var _len8 = arguments.length, params = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        params[_key8] = arguments[_key8];\n      }\n      const passedArgsSoFar = argsSoFar.concat(params);\n      let result;\n      if (passedArgsSoFar.length >= argsLength) {\n        result = func.apply(this, passedArgsSoFar);\n      } else {\n        result = given(passedArgsSoFar);\n      }\n      return result;\n    };\n  }\n  return given([]);\n}\n\n/**\n * Creates the functions that returns the function with cached arguments. If count if passed arguments will be matched\n * to the arguments defined in `func` then function will be invoked.\n * Arguments are added to the stack in direction from the right to the left.\n *\n * @example\n * ```\n * var replace = curry(function(find, replace, string) {\n *   return string.replace(find, replace);\n * });\n *\n * // returns function with bounded first argument\n * var replace = replace('Some test with foo...')\n *\n * // returns replaced string - all arguments was passed so function was invoked\n * replace('bar', 'foo');\n *\n * ```\n *\n * @param {Function} func Function to currying.\n * @returns {Function}\n */\nexport function curryRight(func) {\n  const argsLength = func.length;\n\n  /**\n   * @param {*} argsSoFar The list of arguments passed during the function invocation.\n   * @returns {Function}\n   */\n  function given(argsSoFar) {\n    return function _curry() {\n      for (var _len9 = arguments.length, params = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        params[_key9] = arguments[_key9];\n      }\n      const passedArgsSoFar = argsSoFar.concat(params.reverse());\n      let result;\n      if (passedArgsSoFar.length >= argsLength) {\n        result = func.apply(this, passedArgsSoFar);\n      } else {\n        result = given(passedArgsSoFar);\n      }\n      return result;\n    };\n  }\n  return given([]);\n}\n\n/**\n * Calls a function in the quickest way available.\n *\n * In contrast to the `apply()` method that passes arguments as an array,\n * the `call()` method passes arguments directly, to avoid garbage collection costs.\n *\n * @param {Function} func The function to call.\n * @param {*} context The value to use as `this` when calling the `func` function.\n * @param {*} [arg1] An argument passed to the `func` function.\n * @param {*} [arg2] An argument passed to `func` function.\n * @param {*} [arg3] An argument passed to `func` function.\n * @param {*} [arg4] An argument passed to `func` function.\n * @param {*} [arg5] An argument passed to `func` function.\n * @param {*} [arg6] An argument passed to `func` function.\n * @returns {*}\n */\nexport function fastCall(func, context, arg1, arg2, arg3, arg4, arg5, arg6) {\n  if (isDefined(arg6)) {\n    return func.call(context, arg1, arg2, arg3, arg4, arg5, arg6);\n  } else if (isDefined(arg5)) {\n    return func.call(context, arg1, arg2, arg3, arg4, arg5);\n  } else if (isDefined(arg4)) {\n    return func.call(context, arg1, arg2, arg3, arg4);\n  } else if (isDefined(arg3)) {\n    return func.call(context, arg1, arg2, arg3);\n  } else if (isDefined(arg2)) {\n    return func.call(context, arg1, arg2);\n  } else if (isDefined(arg1)) {\n    return func.call(context, arg1);\n  }\n  return func.call(context);\n}","import \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { arrayEach } from \"./array.mjs\";\n/**\n * Generate schema for passed object.\n *\n * @param {Array|object} object An object to analyze.\n * @returns {Array|object}\n */\nexport function duckSchema(object) {\n  let schema;\n  if (Array.isArray(object)) {\n    schema = object.length ? new Array(object.length).fill(null) : [];\n  } else {\n    schema = {};\n    objectEach(object, (value, key) => {\n      if (key === '__children') {\n        return;\n      }\n      if (value && typeof value === 'object' && !Array.isArray(value)) {\n        schema[key] = duckSchema(value);\n      } else if (Array.isArray(value)) {\n        if (value.length && typeof value[0] === 'object' && !Array.isArray(value[0])) {\n          schema[key] = [duckSchema(value[0])];\n        } else {\n          schema[key] = [];\n        }\n      } else {\n        schema[key] = null;\n      }\n    });\n  }\n  return schema;\n}\n\n/**\n * Inherit without without calling parent constructor, and setting `Child.prototype.constructor` to `Child` instead of `Parent`.\n * Creates temporary dummy function to call it as constructor.\n * Described in ticket: https://github.com/handsontable/handsontable/pull/516.\n *\n * @param {object} Child The child class.\n * @param {object} Parent The parent class.\n * @returns {object}\n */\nexport function inherit(Child, Parent) {\n  Parent.prototype.constructor = Parent;\n  Child.prototype = new Parent();\n  Child.prototype.constructor = Child;\n  return Child;\n}\n\n/**\n * Perform shallow extend of a target object with extension's own properties.\n *\n * @param {object} target An object that will receive the new properties.\n * @param {object} extension An object containing additional properties to merge into the target.\n * @param {string[]} [writableKeys] An array of keys that are writable to target object.\n * @returns {object}\n */\nexport function extend(target, extension, writableKeys) {\n  const hasWritableKeys = Array.isArray(writableKeys);\n  objectEach(extension, (value, key) => {\n    if (hasWritableKeys === false || writableKeys.includes(key)) {\n      target[key] = value;\n    }\n  });\n  return target;\n}\n\n/**\n * Perform deep extend of a target object with extension's own properties.\n *\n * @param {object} target An object that will receive the new properties.\n * @param {object} extension An object containing additional properties to merge into the target.\n */\nexport function deepExtend(target, extension) {\n  objectEach(extension, (value, key) => {\n    if (extension[key] && typeof extension[key] === 'object') {\n      if (!target[key]) {\n        if (Array.isArray(extension[key])) {\n          target[key] = [];\n        } else if (Object.prototype.toString.call(extension[key]) === '[object Date]') {\n          target[key] = extension[key];\n        } else {\n          target[key] = {};\n        }\n      }\n      deepExtend(target[key], extension[key]);\n    } else {\n      target[key] = extension[key];\n    }\n  });\n}\n\n/**\n * Perform deep clone of an object.\n * WARNING! Only clones JSON properties. Will cause error when `obj` contains a function, Date, etc.\n *\n * @param {object} obj An object that will be cloned.\n * @returns {object}\n */\nexport function deepClone(obj) {\n  if (typeof obj === 'object') {\n    return JSON.parse(JSON.stringify(obj));\n  }\n  return obj;\n}\n\n/**\n * Shallow clone object.\n *\n * @param {object} object An object to clone.\n * @returns {object}\n */\nexport function clone(object) {\n  const result = {};\n  objectEach(object, (value, key) => {\n    result[key] = value;\n  });\n  return result;\n}\n\n/**\n * Extend the Base object (usually prototype) of the functionality the `mixins` objects.\n *\n * @param {object} Base Base object which will be extended.\n * @param {object} mixins The object of the functionality will be \"copied\".\n * @returns {object}\n */\nexport function mixin(Base) {\n  if (!Base.MIXINS) {\n    Base.MIXINS = [];\n  }\n  for (var _len = arguments.length, mixins = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    mixins[_key - 1] = arguments[_key];\n  }\n  arrayEach(mixins, mixinItem => {\n    Base.MIXINS.push(mixinItem.MIXIN_NAME);\n    objectEach(mixinItem, (value, key) => {\n      if (Base.prototype[key] !== void 0) {\n        throw new Error(`Mixin conflict. Property '${key}' already exist and cannot be overwritten.`);\n      }\n      if (typeof value === 'function') {\n        Base.prototype[key] = value;\n      } else {\n        const getter = function _getter(property, initialValue) {\n          const propertyName = `_${property}`;\n          const initValue = newValue => {\n            let result = newValue;\n            if (Array.isArray(result) || isObject(result)) {\n              result = deepClone(result);\n            }\n            return result;\n          };\n          return function () {\n            if (this[propertyName] === void 0) {\n              this[propertyName] = initValue(initialValue);\n            }\n            return this[propertyName];\n          };\n        };\n        const setter = function _setter(property) {\n          const propertyName = `_${property}`;\n          return function (newValue) {\n            this[propertyName] = newValue;\n          };\n        };\n        Object.defineProperty(Base.prototype, key, {\n          get: getter(key, value),\n          set: setter(key),\n          configurable: true\n        });\n      }\n    });\n  });\n  return Base;\n}\n\n/**\n * Checks if two objects or arrays are (deep) equal.\n *\n * @param {object|Array} object1 The first object to compare.\n * @param {object|Array} object2 The second object to compare.\n * @returns {boolean}\n */\nexport function isObjectEqual(object1, object2) {\n  return JSON.stringify(object1) === JSON.stringify(object2);\n}\n\n/**\n * Determines whether given object is a plain Object.\n * Note: String and Array are not plain Objects.\n *\n * @param {*} object An object to check.\n * @returns {boolean}\n */\nexport function isObject(object) {\n  return Object.prototype.toString.call(object) === '[object Object]';\n}\n\n/**\n * @param {object} object The object on which to define the property.\n * @param {string} property The name of the property to be defined or modified.\n * @param {*} value The value associated with the property.\n * @param {object} options The descriptor for the property being defined or modified.\n */\nexport function defineGetter(object, property, value, options) {\n  options.value = value;\n  options.writable = options.writable !== false;\n  options.enumerable = options.enumerable !== false;\n  options.configurable = options.configurable !== false;\n  Object.defineProperty(object, property, options);\n}\n\n/**\n * A specialized version of `.forEach` for objects.\n *\n * @param {object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {object} Returns `object`.\n */\nexport function objectEach(object, iteratee) {\n  // eslint-disable-next-line no-restricted-syntax\n  for (const key in object) {\n    if (!object.hasOwnProperty || object.hasOwnProperty && Object.prototype.hasOwnProperty.call(object, key)) {\n      if (iteratee(object[key], key, object) === false) {\n        break;\n      }\n    }\n  }\n  return object;\n}\n\n/**\n * Get object property by its name. Access to sub properties can be achieved by dot notation (e.q. `'foo.bar.baz'`).\n *\n * @param {object} object Object which value will be exported.\n * @param {string} name Object property name.\n * @returns {*}\n */\nexport function getProperty(object, name) {\n  const names = name.split('.');\n  let result = object;\n  objectEach(names, nameItem => {\n    result = result[nameItem];\n    if (result === void 0) {\n      result = void 0;\n      return false;\n    }\n  });\n  return result;\n}\n\n/**\n * Set a property value on the provided object. Works on nested object prop names as well (e.g. `first.name`).\n *\n * @param {object} object Object to work on.\n * @param {string} name Prop name.\n * @param {*} value Value to be assigned at the provided property.\n */\nexport function setProperty(object, name, value) {\n  const names = name.split('.');\n  let workingObject = object;\n  names.forEach((propName, index) => {\n    if (index !== names.length - 1) {\n      if (!hasOwnProperty(workingObject, propName)) {\n        workingObject[propName] = {};\n      }\n      workingObject = workingObject[propName];\n    } else {\n      workingObject[propName] = value;\n    }\n  });\n}\n\n/**\n * Return object length (recursively).\n *\n * @param {*} object Object for which we want get length.\n * @returns {number}\n */\nexport function deepObjectSize(object) {\n  if (!isObject(object)) {\n    return 0;\n  }\n  const recursObjLen = function (obj) {\n    let result = 0;\n    if (isObject(obj)) {\n      objectEach(obj, (value, key) => {\n        if (key === '__children') {\n          return;\n        }\n        result += recursObjLen(value);\n      });\n    } else {\n      result += 1;\n    }\n    return result;\n  };\n  return recursObjLen(object);\n}\n\n/**\n * Create object with property where its value change will be observed.\n *\n * @param {*} [defaultValue=undefined] Default value.\n * @param {string} [propertyToListen='value'] Property to listen.\n * @returns {object}\n */\nexport function createObjectPropListener(defaultValue) {\n  let propertyToListen = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';\n  const privateProperty = `_${propertyToListen}`;\n  const holder = {\n    _touched: false,\n    [privateProperty]: defaultValue,\n    isTouched() {\n      return this._touched;\n    }\n  };\n  Object.defineProperty(holder, propertyToListen, {\n    get() {\n      return this[privateProperty];\n    },\n    set(value) {\n      this._touched = true;\n      this[privateProperty] = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return holder;\n}\n\n/**\n * Check if at specified `key` there is any value for `object`.\n *\n * @param {object} object Object to search value at specific key.\n * @param {string} key String key to check.\n * @returns {boolean}\n */\nexport function hasOwnProperty(object, key) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}","import { objectEach } from \"./object.mjs\";\nconst tester = testerFunc => {\n  const result = {\n    value: false\n  };\n  result.test = (ua, vendor) => {\n    result.value = testerFunc(ua, vendor);\n  };\n  return result;\n};\nconst browsers = {\n  chrome: tester((ua, vendor) => /Chrome/.test(ua) && /Google/.test(vendor)),\n  chromeWebKit: tester(ua => /CriOS/.test(ua)),\n  edge: tester(ua => /Edge/.test(ua)),\n  edgeWebKit: tester(ua => /EdgiOS/.test(ua)),\n  firefox: tester(ua => /Firefox/.test(ua)),\n  firefoxWebKit: tester(ua => /FxiOS/.test(ua)),\n  mobile: tester(ua => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(ua)),\n  safari: tester((ua, vendor) => /Safari/.test(ua) && /Apple Computer/.test(vendor))\n};\nconst platforms = {\n  mac: tester(platform => /^Mac/.test(platform)),\n  win: tester(platform => /^Win/.test(platform)),\n  linux: tester(platform => /^Linux/.test(platform)),\n  ios: tester(ua => /iPhone|iPad|iPod/i.test(ua))\n};\n\n/**\n * @param {object} [metaObject] The browser identity collection.\n * @param {object} [metaObject.userAgent] The user agent reported by browser.\n * @param {object} [metaObject.vendor] The vendor name reported by browser.\n */\nexport function setBrowserMeta() {\n  let {\n    userAgent = navigator.userAgent,\n    vendor = navigator.vendor\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  objectEach(browsers, _ref => {\n    let {\n      test\n    } = _ref;\n    return void test(userAgent, vendor);\n  });\n}\n\n/**\n * @param {object} [metaObject] The platform identity collection.\n * @param {object} [metaObject.platform] The platform ID.\n */\nexport function setPlatformMeta() {\n  let {\n    platform = navigator.platform\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  objectEach(platforms, _ref2 => {\n    let {\n      test\n    } = _ref2;\n    return void test(platform);\n  });\n}\nsetBrowserMeta();\nsetPlatformMeta();\n\n/**\n * @returns {boolean}\n */\nexport function isChrome() {\n  return browsers.chrome.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isChromeWebKit() {\n  return browsers.chromeWebKit.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isFirefox() {\n  return browsers.firefox.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isFirefoxWebKit() {\n  return browsers.firefoxWebKit.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isSafari() {\n  return browsers.safari.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isEdge() {\n  return browsers.edge.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isEdgeWebKit() {\n  return browsers.edgeWebKit.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isMobileBrowser() {\n  return browsers.mobile.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isIOS() {\n  return platforms.ios.value;\n}\n\n/**\n * A hacky way to recognize the iPad. Since iOS 13, the iPad on Safari mimics macOS behavior and user agent.\n *\n * @see {@https://stackoverflow.com/a/57838385}\n * @param {object} [metaObject] The browser identity collection.\n * @param {number} [metaObject.maxTouchPoints] The maximum number of simultanous touch points.\n * @returns {boolean}\n */\nexport function isIpadOS() {\n  let {\n    maxTouchPoints\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : navigator;\n  return maxTouchPoints > 2 && platforms.mac.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isWindowsOS() {\n  return platforms.win.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isMacOS() {\n  return platforms.mac.value;\n}\n\n/**\n * @returns {boolean}\n */\nexport function isLinuxOS() {\n  return platforms.linux.value;\n}","import \"core-js/modules/es.array.push.js\";\nimport { arrayEach } from \"./array.mjs\";\nimport { isMacOS, isFirefox } from \"./browser.mjs\";\nexport const KEY_CODES = {\n  ALT: 18,\n  ARROW_DOWN: 40,\n  ARROW_LEFT: 37,\n  ARROW_RIGHT: 39,\n  ARROW_UP: 38,\n  AUDIO_DOWN: isFirefox() ? 182 : 174,\n  AUDIO_MUTE: isFirefox() ? 181 : 173,\n  AUDIO_UP: isFirefox() ? 183 : 175,\n  BACKSPACE: 8,\n  CAPS_LOCK: 20,\n  COMMA: 188,\n  COMMAND_LEFT: 91,\n  COMMAND_RIGHT: 93,\n  COMMAND_FIREFOX: 224,\n  CONTROL: 17,\n  DELETE: 46,\n  END: 35,\n  ENTER: 13,\n  ESCAPE: 27,\n  F1: 112,\n  F2: 113,\n  F3: 114,\n  F4: 115,\n  F5: 116,\n  F6: 117,\n  F7: 118,\n  F8: 119,\n  F9: 120,\n  F10: 121,\n  F11: 122,\n  F12: 123,\n  F13: 124,\n  F14: 125,\n  F15: 126,\n  F16: 127,\n  F17: 128,\n  F18: 129,\n  F19: 130,\n  HOME: 36,\n  INSERT: 45,\n  MEDIA_NEXT: 176,\n  MEDIA_PLAY_PAUSE: 179,\n  MEDIA_PREV: 177,\n  MEDIA_STOP: 178,\n  NULL: 0,\n  NUM_LOCK: 144,\n  PAGE_DOWN: 34,\n  PAGE_UP: 33,\n  PAUSE: 19,\n  PERIOD: 190,\n  SCROLL_LOCK: 145,\n  SHIFT: 16,\n  SPACE: 32,\n  TAB: 9,\n  A: 65,\n  C: 67,\n  D: 68,\n  F: 70,\n  L: 76,\n  O: 79,\n  P: 80,\n  S: 83,\n  V: 86,\n  X: 88,\n  Y: 89,\n  Z: 90\n};\nconst FUNCTION_KEYS = [KEY_CODES.ALT, KEY_CODES.ARROW_DOWN, KEY_CODES.ARROW_LEFT, KEY_CODES.ARROW_RIGHT, KEY_CODES.ARROW_UP, KEY_CODES.AUDIO_DOWN, KEY_CODES.AUDIO_MUTE, KEY_CODES.AUDIO_UP, KEY_CODES.BACKSPACE, KEY_CODES.CAPS_LOCK, KEY_CODES.DELETE, KEY_CODES.END, KEY_CODES.ENTER, KEY_CODES.ESCAPE, KEY_CODES.F1, KEY_CODES.F2, KEY_CODES.F3, KEY_CODES.F4, KEY_CODES.F5, KEY_CODES.F6, KEY_CODES.F7, KEY_CODES.F8, KEY_CODES.F9, KEY_CODES.F10, KEY_CODES.F11, KEY_CODES.F12, KEY_CODES.F13, KEY_CODES.F14, KEY_CODES.F15, KEY_CODES.F16, KEY_CODES.F17, KEY_CODES.F18, KEY_CODES.F19, KEY_CODES.HOME, KEY_CODES.INSERT, KEY_CODES.MEDIA_NEXT, KEY_CODES.MEDIA_PLAY_PAUSE, KEY_CODES.MEDIA_PREV, KEY_CODES.MEDIA_STOP, KEY_CODES.NULL, KEY_CODES.NUM_LOCK, KEY_CODES.PAGE_DOWN, KEY_CODES.PAGE_UP, KEY_CODES.PAUSE, KEY_CODES.SCROLL_LOCK, KEY_CODES.SHIFT, KEY_CODES.TAB];\n\n/**\n * Returns true if keyCode represents a printable character.\n *\n * @param {number} keyCode The keyboard key code.\n * @returns {boolean}\n */\nexport function isPrintableChar(keyCode) {\n  return keyCode === 32 ||\n  // space\n  keyCode >= 48 && keyCode <= 57 ||\n  // 0-9\n  keyCode >= 96 && keyCode <= 111 ||\n  // numpad\n  keyCode >= 186 && keyCode <= 192 ||\n  // ;=,-./`\n  keyCode >= 219 && keyCode <= 222 ||\n  // []{}\\|\"'\n  keyCode >= 226 ||\n  // special chars (229 for Asian chars)\n  keyCode >= 65 && keyCode <= 90; // a-z\n}\n\n/**\n * @param {number} keyCode The keyboard key code.\n * @returns {boolean}\n */\nexport function isFunctionKey(keyCode) {\n  return FUNCTION_KEYS.includes(keyCode);\n}\n\n/**\n * Checks if passed key code is ctrl or cmd key. Depends on what OS the code runs it check key code based on\n * different meta key codes.\n *\n * @param {number} keyCode The keyboard key code.\n * @returns {boolean}\n */\nexport function isCtrlKey(keyCode) {\n  const keys = [];\n  if (isMacOS()) {\n    keys.push(KEY_CODES.COMMAND_LEFT, KEY_CODES.COMMAND_RIGHT, KEY_CODES.COMMAND_FIREFOX);\n  } else {\n    keys.push(KEY_CODES.CONTROL);\n  }\n  return keys.includes(keyCode);\n}\n\n/**\n * Checks if passed key code is ctrl or cmd key. This helper checks if the key code matches to meta keys\n * regardless of the OS on which it is running.\n *\n * @param {number} keyCode The keyboard key code.\n * @returns {boolean}\n */\nexport function isCtrlMetaKey(keyCode) {\n  return [KEY_CODES.CONTROL, KEY_CODES.COMMAND_LEFT, KEY_CODES.COMMAND_RIGHT, KEY_CODES.COMMAND_FIREFOX].includes(keyCode);\n}\n\n/**\n * @param {number} keyCode The keyboard key code.\n * @param {string} baseCode The list of the key codes to compare with.\n * @returns {boolean}\n */\nexport function isKey(keyCode, baseCode) {\n  const keys = baseCode.split('|');\n  let result = false;\n  arrayEach(keys, key => {\n    if (keyCode === KEY_CODES[key]) {\n      result = true;\n      return false;\n    }\n  });\n  return result;\n}","/**\n * Prevent other listeners of the same event from being called.\n *\n * @param {Event} event The mouse event object.\n */\nexport function stopImmediatePropagation(event) {\n  event.isImmediatePropagationEnabled = false;\n  event.cancelBubble = true;\n}\n\n/**\n * Check if event was stopped by `stopImmediatePropagation`.\n *\n * @param {Event} event The mouse event object.\n * @returns {boolean}\n */\nexport function isImmediatePropagationStopped(event) {\n  return event.isImmediatePropagationEnabled === false;\n}\n\n/**\n * Check if provided event was triggered by clicking the right mouse button.\n *\n * @param {Event} event The mouse event object.\n * @returns {boolean}\n */\nexport function isRightClick(event) {\n  return event.button === 2;\n}\n\n/**\n * Check if provided event was triggered by clicking the left mouse button.\n *\n * @param {Event} event The mouse event object.\n * @returns {boolean}\n */\nexport function isLeftClick(event) {\n  return event.button === 0;\n}\n\n/**\n * Calculates the event offset until reaching the element defined by `relativeElement` argument.\n *\n * @param {Event} event The mouse event object.\n * @param {HTMLElement|undefined} [untilElement] The element to which the offset will be calculated.\n * @returns {{ x: number, y: number }}\n */\nexport function offsetRelativeTo(event, untilElement) {\n  const offset = {\n    x: event.offsetX,\n    y: event.offsetY\n  };\n  let element = event.target;\n  if (!(untilElement instanceof HTMLElement) || element !== untilElement && element.contains(untilElement)) {\n    return offset;\n  }\n  while (element !== untilElement) {\n    offset.x += element.offsetLeft;\n    offset.y += element.offsetTop;\n    element = element.offsetParent;\n  }\n  return offset;\n}","/* eslint-disable no-console */\n/* eslint-disable no-restricted-globals */\n/**\n * \"In Internet Explorer 9 (and 8), the console object is only exposed when the developer tools are opened\n * for a particular tab.\".\n *\n * Source: https://stackoverflow.com/a/5473193.\n */\nimport { isDefined } from \"./mixed.mjs\";\n/**\n * Logs message to the console if the `console` object is exposed.\n *\n * @param {...*} args Values which will be logged.\n */\nexport function log() {\n  if (isDefined(console)) {\n    console.log(...arguments);\n  }\n}\n\n/**\n * Logs warn to the console if the `console` object is exposed.\n *\n * @param {...*} args Values which will be logged.\n */\nexport function warn() {\n  if (isDefined(console)) {\n    console.warn(...arguments);\n  }\n}\n\n/**\n * Logs info to the console if the `console` object is exposed.\n *\n * @param {...*} args Values which will be logged.\n */\nexport function info() {\n  if (isDefined(console)) {\n    console.info(...arguments);\n  }\n}\n\n/**\n * Logs error to the console if the `console` object is exposed.\n *\n * @param {...*} args Values which will be logged.\n */\nexport function error() {\n  if (isDefined(console)) {\n    console.error(...arguments);\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { arrayEach } from \"./helpers/array.mjs\";\nimport { objectEach } from \"./helpers/object.mjs\";\nimport { substitute } from \"./helpers/string.mjs\";\nimport { warn } from \"./helpers/console.mjs\";\nimport { toSingleLine } from \"./helpers/templateLiteralTag.mjs\";\nimport { fastCall } from \"./helpers/function.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @description\n *\n * ::: only-for javascript\n * Handsontable events are the common interface that function in 2 ways: as __callbacks__ and as __hooks__.\n * :::\n *\n * ::: only-for react\n * This page lists all the **Handsontable hooks** – callbacks that let you react before or after an action occurs.\n *\n * Read more on the [Events and hooks](@/guides/getting-started/events-and-hooks.md) page.\n * :::\n *\n * @example\n *\n * ::: only-for javascript\n * ```js\n * // using events as callbacks\n * ...\n * const hot1 = new Handsontable(document.getElementById('example1'), {\n *   afterChange: function(changes, source) {\n *     $.ajax({\n *       url: \"save.php',\n *       data: change\n *     });\n *   }\n * });\n * ...\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   afterChange={(changes, source) => {\n *     fetch('save.php', {\n *       method: 'POST',\n *       headers: {\n *         'Accept': 'application/json',\n *         'Content-Type': 'application/json'\n *       },\n *       body: JSON.stringify(changes)\n *     });\n *   }}\n * />\n * :::\n *\n * ::: only-for javascript\n * ```js\n * // using events as plugin hooks\n * ...\n * const hot1 = new Handsontable(document.getElementById('example1'), {\n *   myPlugin: true\n * });\n *\n * const hot2 = new Handsontable(document.getElementById('example2'), {\n *   myPlugin: false\n * });\n *\n * // global hook\n * Handsontable.hooks.add('afterChange', function() {\n *   // Fired twice - for hot1 and hot2\n *   if (this.getSettings().myPlugin) {\n *     // function body - will only run for hot1\n *   }\n * });\n *\n * // local hook (has same effect as a callback)\n * hot2.addHook('afterChange', function() {\n *   // function body - will only run in #example2\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef1 = useRef(null);\n * const hotRef2 = useRef(null);\n *\n * // Using events as plugin hooks:\n * ...\n *\n * <HotTable\n *   ref={hotRef1}\n *   myPlugin={true}\n * });\n *\n * <HotTable\n *   ref={hotRef2}\n *   myPlugin={false}\n * });\n *\n * ...\n *\n * const hot2 = hotRef2.current.hotInstance;\n * // local hook (has same effect as a callback)\n * hot2.addHook('afterChange', function() {\n *   // function body - will only run in #example2\n * });\n *\n * // global hook\n * Handsontable.hooks.add('afterChange', function() {\n *   // Fired twice - for hot1 and hot2\n *   if (this.getSettings().myPlugin) {\n *     // function body - will only run for first instance\n *   }\n * });\n * :::\n * ...\n */\n// @TODO: Move plugin description hooks to plugin?\nconst REGISTERED_HOOKS = [/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * Fired after resetting a cell's meta. This happens when the {@link Core#updateSettings} method is called.\n *\n * @event Hooks#afterCellMetaReset\n */\n'afterCellMetaReset',\n/**\n * Fired after one or more cells has been changed. The changes are triggered in any situation when the\n * value is entered using an editor or changed using API (e.q setDataAtCell).\n *\n * __Note:__ For performance reasons, the `changes` array is null for `\"loadData\"` source.\n *\n * @event Hooks#afterChange\n * @param {Array[]} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`. `row` is a visual row index.\n * @param {string} [source] String that identifies source of hook call ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n * @example\n * ::: only-for javascript\n * ```js\n * new Handsontable(element, {\n *   afterChange: (changes) => {\n *     changes?.forEach(([row, prop, oldValue, newValue]) => {\n *       // Some logic...\n *     });\n *   }\n * })\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   afterChange={(changes, source) => {\n *     changes?.forEach(([row, prop, oldValue, newValue]) => {\n *       // Some logic...\n *     });\n *   }}\n * />\n * ```\n * :::\n */\n'afterChange',\n/**\n * Fired each time user opens {@link ContextMenu} and after setting up the Context Menu's default options. These options are a collection\n * which user can select by setting an array of keys or an array of objects in {@link Options#contextMenu} option.\n *\n * @event Hooks#afterContextMenuDefaultOptions\n * @param {Array} predefinedItems An array of objects containing information about the pre-defined Context Menu items.\n */\n'afterContextMenuDefaultOptions',\n/**\n * Fired each time user opens {@link ContextMenu} plugin before setting up the Context Menu's items but after filtering these options by\n * user (`contextMenu` option). This hook can by helpful to determine if user use specified menu item or to set up\n * one of the menu item to by always visible.\n *\n * @event Hooks#beforeContextMenuSetItems\n * @param {object[]} menuItems An array of objects containing information about to generated Context Menu items.\n */\n'beforeContextMenuSetItems',\n/**\n * Fired by {@link DropdownMenu} plugin after setting up the Dropdown Menu's default options. These options are a\n * collection which user can select by setting an array of keys or an array of objects in {@link Options#dropdownMenu}\n * option.\n *\n * @event Hooks#afterDropdownMenuDefaultOptions\n * @param {object[]} predefinedItems An array of objects containing information about the pre-defined Context Menu items.\n */\n'afterDropdownMenuDefaultOptions',\n/**\n * Fired by {@link DropdownMenu} plugin before setting up the Dropdown Menu's items but after filtering these options\n * by user (`dropdownMenu` option). This hook can by helpful to determine if user use specified menu item or to set\n * up one of the menu item to by always visible.\n *\n * @event Hooks#beforeDropdownMenuSetItems\n * @param {object[]} menuItems An array of objects containing information about to generated Dropdown Menu items.\n */\n'beforeDropdownMenuSetItems',\n/**\n * Fired by {@link ContextMenu} plugin after hiding the Context Menu. This hook is fired when {@link Options#contextMenu}\n * option is enabled.\n *\n * @event Hooks#afterContextMenuHide\n * @param {object} context The Context Menu plugin instance.\n */\n'afterContextMenuHide',\n/**\n * Fired by {@link ContextMenu} plugin before opening the Context Menu. This hook is fired when {@link Options#contextMenu}\n * option is enabled.\n *\n * @event Hooks#beforeContextMenuShow\n * @param {object} context The Context Menu instance.\n */\n'beforeContextMenuShow',\n/**\n * Fired by {@link ContextMenu} plugin after opening the Context Menu. This hook is fired when {@link Options#contextMenu}\n * option is enabled.\n *\n * @event Hooks#afterContextMenuShow\n * @param {object} context The Context Menu plugin instance.\n */\n'afterContextMenuShow',\n/**\n * Fired by {@link CopyPaste} plugin after reaching the copy limit while copying data. This hook is fired when\n * {@link Options#copyPaste} option is enabled.\n *\n * @event Hooks#afterCopyLimit\n * @param {number} selectedRows Count of selected copyable rows.\n * @param {number} selectedColumns Count of selected copyable columns.\n * @param {number} copyRowsLimit Current copy rows limit.\n * @param {number} copyColumnsLimit Current copy columns limit.\n */\n'afterCopyLimit',\n/**\n * Fired before created a new column.\n *\n * @event Hooks#beforeCreateCol\n * @param {number} index Represents the visual index of first newly created column in the data source array.\n * @param {number} amount Number of newly created columns in the data source array.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n * @returns {*} If `false` then creating columns is cancelled.\n * @example\n * ::: only-for javascript\n * ```js\n * // Return `false` to cancel column inserting.\n * new Handsontable(element, {\n *   beforeCreateCol: function(data, coords) {\n *     return false;\n *   }\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * // Return `false` to cancel column inserting.\n * <HotTable\n *   beforeCreateCol={(data, coords) => {\n *     return false;\n *   }}\n * />\n * ```\n * :::\n */\n'beforeCreateCol',\n/**\n * Fired after the order of columns has changed.\n * This hook is fired by changing column indexes of any type supported by the {@link IndexMapper}.\n *\n * @event Hooks#afterColumnSequenceChange\n * @param {'init'|'remove'|'insert'|'move'|'update'} [source] A string that indicates what caused the change to the order of columns.\n */\n'afterColumnSequenceChange',\n/**\n * Fired after created a new column.\n *\n * @event Hooks#afterCreateCol\n * @param {number} index Represents the visual index of first newly created column in the data source.\n * @param {number} amount Number of newly created columns in the data source.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n */\n'afterCreateCol',\n/**\n * Fired before created a new row.\n *\n * @event Hooks#beforeCreateRow\n * @param {number} index Represents the visual index of first newly created row in the data source array.\n * @param {number} amount Number of newly created rows in the data source array.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n * @returns {*|boolean} If false is returned the action is canceled.\n */\n'beforeCreateRow',\n/**\n * Fired after created a new row.\n *\n * @event Hooks#afterCreateRow\n * @param {number} index Represents the visual index of first newly created row in the data source array.\n * @param {number} amount Number of newly created rows in the data source array.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n */\n'afterCreateRow',\n/**\n * Fired after all selected cells are deselected.\n *\n * @event Hooks#afterDeselect\n */\n'afterDeselect',\n/**\n * Fired after destroying the Handsontable instance.\n *\n * @event Hooks#afterDestroy\n */\n'afterDestroy',\n/**\n * Hook fired after keydown event is handled.\n *\n * @event Hooks#afterDocumentKeyDown\n * @param {Event} event A native `keydown` event object.\n */\n'afterDocumentKeyDown',\n/**\n * Fired inside the Walkontable's selection `draw` method. Can be used to add additional class names to cells, depending on the current selection.\n *\n * @event Hooks#afterDrawSelection\n * @param {number} currentRow Row index of the currently processed cell.\n * @param {number} currentColumn Column index of the currently cell.\n * @param {number[]} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.\n * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.\n * @since 0.38.1\n * @returns {string|undefined} Can return a `String`, which will act as an additional `className` to be added to the currently processed cell.\n */\n'afterDrawSelection',\n/**\n * Fired inside the Walkontable's `refreshSelections` method. Can be used to remove additional class names from all cells in the table.\n *\n * @event Hooks#beforeRemoveCellClassNames\n * @since 0.38.1\n * @returns {string[]|undefined} Can return an `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.\n */\n'beforeRemoveCellClassNames',\n/**\n * Fired after getting the cell settings.\n *\n * @event Hooks#afterGetCellMeta\n * @param {number} row Visual row index.\n * @param {number} column Visual column index.\n * @param {object} cellProperties Object containing the cell properties.\n */\n'afterGetCellMeta',\n/**\n * Fired after retrieving information about a column header and appending it to the table header.\n *\n * @event Hooks#afterGetColHeader\n * @param {number} column Visual column index.\n * @param {HTMLTableCellElement} TH Header's TH element.\n * @param {number} [headerLevel=0] (Since 12.2.0) Header level index. Accepts positive (0 to n)\n *                                 and negative (-1 to -n) values. For positive values, 0 points to the\n *                                 topmost header. For negative values, -1 points to the bottom-most\n *                                 header (the header closest to the cells).\n */\n'afterGetColHeader',\n/**\n * Fired after retrieving information about a row header and appending it to the table header.\n *\n * @event Hooks#afterGetRowHeader\n * @param {number} row Visual row index.\n * @param {HTMLTableCellElement} TH Header's TH element.\n */\n'afterGetRowHeader',\n/**\n * Fired after the Handsontable instance is initiated.\n *\n * @event Hooks#afterInit\n */\n'afterInit',\n/**\n * Fired after Handsontable's [`data`](@/api/options.md#data)\n * gets modified by the [`loadData()`](@/api/core.md#loaddata) method\n * or the [`updateSettings()`](@/api/core.md#updatesettings) method.\n *\n * Read more:\n * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n * - [Saving data](@/guides/getting-started/saving-data.md)\n *\n * @event Hooks#afterLoadData\n * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data\n * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)\n * @param {string} source The source of the call\n */\n'afterLoadData',\n/**\n * Fired after the [`updateData()`](@/api/core.md#updatedata) method\n * modifies Handsontable's [`data`](@/api/options.md#data).\n *\n * Read more:\n * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n * - [Saving data](@/guides/getting-started/saving-data.md)\n *\n * @event Hooks#afterUpdateData\n * @since 11.1.0\n * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data\n * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)\n * @param {string} source The source of the call\n */\n'afterUpdateData',\n/**\n * Fired after a scroll event, which is identified as a momentum scroll (e.g. On an iPad).\n *\n * @event Hooks#afterMomentumScroll\n */\n'afterMomentumScroll',\n/**\n * Fired after a `mousedown` event is triggered on the cell corner (the drag handle).\n *\n * @event Hooks#afterOnCellCornerMouseDown\n * @param {Event} event `mousedown` event object.\n */\n'afterOnCellCornerMouseDown',\n/**\n * Fired after a `dblclick` event is triggered on the cell corner (the drag handle).\n *\n * @event Hooks#afterOnCellCornerDblClick\n * @param {Event} event `dblclick` event object.\n */\n'afterOnCellCornerDblClick',\n/**\n * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate\n * indexes are negative.\n *\n * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseDown` called\n * with coordinates `{row: 0, col: -1}`.\n *\n * @event Hooks#afterOnCellMouseDown\n * @param {Event} event `mousedown` event object.\n * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\n */\n'afterOnCellMouseDown',\n/**\n * Fired after clicking on a cell or row/column header. In case the row/column header was clicked, the coordinate\n * indexes are negative.\n *\n * For example clicking on the row header of cell (0, 0) results with `afterOnCellMouseUp` called\n * with coordinates `{row: 0, col: -1}`.\n *\n * @event Hooks#afterOnCellMouseUp\n * @param {Event} event `mouseup` event object.\n * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\n */\n'afterOnCellMouseUp',\n/**\n * Fired after clicking right mouse button on a cell or row/column header.\n *\n * For example clicking on the row header of cell (0, 0) results with `afterOnCellContextMenu` called\n * with coordinates `{row: 0, col: -1}`.\n *\n * @event Hooks#afterOnCellContextMenu\n * @since 4.1.0\n * @param {Event} event `contextmenu` event object.\n * @param {CellCoords} coords Coordinates object containing the visual row and visual column indexes of the clicked cell.\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\n */\n'afterOnCellContextMenu',\n/**\n * Fired after hovering a cell or row/column header with the mouse cursor. In case the row/column header was\n * hovered, the index is negative.\n *\n * For example, hovering over the row header of cell (0, 0) results with `afterOnCellMouseOver` called\n * with coords `{row: 0, col: -1}`.\n *\n * @event Hooks#afterOnCellMouseOver\n * @param {Event} event `mouseover` event object.\n * @param {CellCoords} coords Hovered cell's visual coordinate object.\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\n */\n'afterOnCellMouseOver',\n/**\n * Fired after leaving a cell or row/column header with the mouse cursor.\n *\n * @event Hooks#afterOnCellMouseOut\n * @param {Event} event `mouseout` event object.\n * @param {CellCoords} coords Leaved cell's visual coordinate object.\n * @param {HTMLTableCellElement} TD Cell's TD (or TH) element.\n */\n'afterOnCellMouseOut',\n/**\n * Fired after one or more columns are removed.\n *\n * @event Hooks#afterRemoveCol\n * @param {number} index Visual index of starter column.\n * @param {number} amount An amount of removed columns.\n * @param {number[]} physicalColumns An array of physical columns removed from the data source.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n */\n'afterRemoveCol',\n/**\n * Fired after one or more rows are removed.\n *\n * @event Hooks#afterRemoveRow\n * @param {number} index Visual index of starter row.\n * @param {number} amount An amount of removed rows.\n * @param {number[]} physicalRows An array of physical rows removed from the data source.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n */\n'afterRemoveRow',\n/**\n * Fired before starting rendering the cell.\n *\n * @event Hooks#beforeRenderer\n * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.\n * @param {number} row Visual row index.\n * @param {number} column Visual column index.\n * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.\n * @param {*} value Value of the rendered cell.\n * @param {object} cellProperties Object containing the cell's properties.\n */\n'beforeRenderer',\n/**\n * Fired after finishing rendering the cell (after the renderer finishes).\n *\n * @event Hooks#afterRenderer\n * @param {HTMLTableCellElement} TD Currently rendered cell's TD element.\n * @param {number} row Visual row index.\n * @param {number} column Visual column index.\n * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.\n * @param {*} value Value of the rendered cell.\n * @param {object} cellProperties Object containing the cell's properties.\n */\n'afterRenderer',\n/**\n * Fired after the order of rows has changed.\n * This hook is fired by changing row indexes of any type supported by the {@link IndexMapper}.\n *\n * @event Hooks#afterRowSequenceChange\n * @param {'init'|'remove'|'insert'|'move'|'update'} [source] A string that indicates what caused the change to the order of rows.\n */\n'afterRowSequenceChange',\n/**\n * Fired before the vertical viewport scroll. Triggered by the [`scrollViewportTo()`](@/api/core.md#scrollviewportto)\n * method or table internals.\n *\n * @since 14.0.0\n * @event Hooks#beforeViewportScrollVertically\n * @param {number} visualRow Visual row index.\n * @returns {number} Returns modified row index (or the same as passed in the method argument) to which the viewport will be scrolled.\n */\n'beforeViewportScrollVertically',\n/**\n * Fired before the horizontal viewport scroll. Triggered by the [`scrollViewportTo()`](@/api/core.md#scrollviewportto)\n * method or table internals.\n *\n * @since 14.0.0\n * @event Hooks#beforeViewportScrollHorizontally\n * @param {number} visualColumn Visual column index.\n * @returns {number} Returns modified column index (or the same as passed in the method argument) to which the viewport will be scrolled.\n */\n'beforeViewportScrollHorizontally',\n/**\n * Fired before the vertical or horizontal viewport scroll. Triggered by the [`scrollViewportTo()`](@/api/core.md#scrollviewportto)\n * method or table internals.\n *\n * @since 14.0.0\n * @event Hooks#beforeViewportScroll\n */\n'beforeViewportScroll',\n/**\n * Fired after the horizontal scroll event.\n *\n * @event Hooks#afterScrollHorizontally\n */\n'afterScrollHorizontally',\n/**\n * Fired after the vertical scroll event.\n *\n * @event Hooks#afterScrollVertically\n */\n'afterScrollVertically',\n/**\n * Fired after the vertical or horizontal scroll event.\n *\n * @since 14.0.0\n * @event Hooks#afterScroll\n */\n'afterScroll',\n/**\n * Fired after one or more cells are selected (e.g. During mouse move).\n *\n * @event Hooks#afterSelection\n * @param {number} row Selection start visual row index.\n * @param {number} column Selection start visual column index.\n * @param {number} row2 Selection end visual row index.\n * @param {number} column2 Selection end visual column index.\n * @param {object} preventScrolling A reference to the observable object with the `value` property.\n *                                  Property `preventScrolling.value` expects a boolean value that\n *                                  Handsontable uses to control scroll behavior after selection.\n * @param {object} preventScrolling Object with `value` property where its value change will be observed.\n * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.\n * @example\n * ::: only-for javascript\n * ```js\n * new Handsontable(element, {\n *   afterSelection: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {\n *     // If set to `false` (default): when cell selection is outside the viewport,\n *     // Handsontable scrolls the viewport to cell selection's end corner.\n *     // If set to `true`: when cell selection is outside the viewport,\n *     // Handsontable doesn't scroll to cell selection's end corner.\n *     preventScrolling.value = true;\n *   }\n * })\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   afterSelection={(row, column, row2, column2, preventScrolling, selectionLayerLevel) => {\n *     // If set to `false` (default): when cell selection is outside the viewport,\n *     // Handsontable scrolls the viewport to cell selection's end corner.\n *     // If set to `true`: when cell selection is outside the viewport,\n *     // Handsontable doesn't scroll to cell selection's end corner.\n *     preventScrolling.value = true;\n *   }}\n * />\n * ```\n * :::\n */\n'afterSelection',\n/**\n * Fired after one or more cells are selected.\n *\n * The `prop` and `prop2` arguments represent the source object property name instead of the column number.\n *\n * @event Hooks#afterSelectionByProp\n * @param {number} row Selection start visual row index.\n * @param {string} prop Selection start data source object property name.\n * @param {number} row2 Selection end visual row index.\n * @param {string} prop2 Selection end data source object property name.\n * @param {object} preventScrolling Object with `value` property where its value change will be observed.\n * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.\n * @example\n * ```js\n * ::: only-for javascript\n * new Handsontable(element, {\n *   afterSelectionByProp: (row, column, row2, column2, preventScrolling, selectionLayerLevel) => {\n *     // setting if prevent scrolling after selection\n *     preventScrolling.value = true;\n *   }\n * })\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   afterSelectionByProp={(row, column, row2, column2, preventScrolling, selectionLayerLevel) => {\n *     // setting if prevent scrolling after selection\n *     preventScrolling.value = true;\n *   }}\n * />\n * ```\n * :::\n */\n'afterSelectionByProp',\n/**\n * Fired after one or more cells are selected (e.g. On mouse up).\n *\n * @event Hooks#afterSelectionEnd\n * @param {number} row Selection start visual row index.\n * @param {number} column Selection start visual column index.\n * @param {number} row2 Selection end visual row index.\n * @param {number} column2 Selection end visual column index.\n * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.\n */\n'afterSelectionEnd',\n/**\n * Fired after one or more cells are selected (e.g. On mouse up).\n *\n * The `prop` and `prop2` arguments represent the source object property name instead of the column number.\n *\n * @event Hooks#afterSelectionEndByProp\n * @param {number} row Selection start visual row index.\n * @param {string} prop Selection start data source object property index.\n * @param {number} row2 Selection end visual row index.\n * @param {string} prop2 Selection end data source object property index.\n * @param {number} selectionLayerLevel The number which indicates what selection layer is currently modified.\n */\n'afterSelectionEndByProp',\n/**\n * Fired before one or more columns are selected (e.g. During mouse header click or {@link Core#selectColumns} API call).\n *\n * @since 14.0.0\n * @event Hooks#beforeSelectColumns\n * @param {CellCoords} from Selection start coords object.\n * @param {CellCoords} to Selection end coords object.\n * @param {CellCoords} highlight Selection cell focus coords object.\n * @example\n * ::: only-for javascript\n * ```js\n * new Handsontable(element, {\n *   beforeSelectColumns: (from, to, highlight) => {\n *     // Extend the column selection by one column left and one column right.\n *     from.col = Math.max(from.col - 1, 0);\n *     to.col = Math.min(to.col + 1, this.countCols() - 1);\n *   }\n * })\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   beforeSelectColumns={(from, to, highlight) => {\n *     // Extend the column selection by one column left and one column right.\n *     from.col = Math.max(from.col - 1, 0);\n *     to.col = Math.min(to.col + 1, this.countCols() - 1);\n *   }}\n * />\n * ```\n * :::\n */\n'beforeSelectColumns',\n/**\n * Fired after one or more columns are selected (e.g. During mouse header click or {@link Core#selectColumns} API call).\n *\n * @since 14.0.0\n * @event Hooks#afterSelectColumns\n * @param {CellCoords} from Selection start coords object.\n * @param {CellCoords} to Selection end coords object.\n * @param {CellCoords} highlight Selection cell focus coords object.\n */\n'afterSelectColumns',\n/**\n * Fired before one or more rows are selected (e.g. During mouse header click or {@link Core#selectRows} API call).\n *\n * @since 14.0.0\n * @event Hooks#beforeSelectRows\n * @param {CellCoords} from Selection start coords object.\n * @param {CellCoords} to Selection end coords object.\n * @param {CellCoords} highlight Selection cell focus coords object.\n * @example\n * ::: only-for javascript\n * ```js\n * new Handsontable(element, {\n *   beforeSelectRows: (from, to, highlight) => {\n *     // Extend the row selection by one row up and one row bottom more.\n *     from.row = Math.max(from.row - 1, 0);\n *     to.row = Math.min(to.row + 1, this.countRows() - 1);\n *   }\n * })\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   beforeSelectRows={(from, to, highlight) => {\n *     // Extend the row selection by one row up and one row bottom more.\n *     from.row = Math.max(from.row - 1, 0);\n *     to.row = Math.min(to.row + 1, this.countRows() - 1);\n *   }}\n * />\n * ```\n * :::\n */\n'beforeSelectRows',\n/**\n * Fired after one or more rows are selected (e.g. During mouse header click or {@link Core#selectRows} API call).\n *\n * @since 14.0.0\n * @event Hooks#afterSelectRows\n * @param {CellCoords} from Selection start coords object.\n * @param {CellCoords} to Selection end coords object.\n * @param {CellCoords} highlight Selection cell focus coords object.\n */\n'afterSelectRows',\n/**\n * Fired after cell meta is changed.\n *\n * @event Hooks#afterSetCellMeta\n * @param {number} row Visual row index.\n * @param {number} column Visual column index.\n * @param {string} key The updated meta key.\n * @param {*} value The updated meta value.\n */\n'afterSetCellMeta',\n/**\n * Fired after cell meta is removed.\n *\n * @event Hooks#afterRemoveCellMeta\n * @param {number} row Visual row index.\n * @param {number} column Visual column index.\n * @param {string} key The removed meta key.\n * @param {*} value Value which was under removed key of cell meta.\n */\n'afterRemoveCellMeta',\n/**\n * Fired after cell data was changed.\n *\n * @event Hooks#afterSetDataAtCell\n * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n */\n'afterSetDataAtCell',\n/**\n * Fired after cell data was changed.\n * Called only when `setDataAtRowProp` was executed.\n *\n * @event Hooks#afterSetDataAtRowProp\n * @param {Array} changes An array of changes in format `[[row, prop, oldValue, value], ...]`.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n */\n'afterSetDataAtRowProp',\n/**\n * Fired after cell source data was changed.\n *\n * @event Hooks#afterSetSourceDataAtCell\n * @since 8.0.0\n * @param {Array} changes An array of changes in format `[[row, column, oldValue, value], ...]`.\n * @param {string} [source] String that identifies source of hook call.\n */\n'afterSetSourceDataAtCell',\n/**\n * Fired after calling the `updateSettings` method.\n *\n * @event Hooks#afterUpdateSettings\n * @param {object} newSettings New settings object.\n */\n'afterUpdateSettings',\n/**\n * @description\n * A plugin hook executed after validator function, only if validator function is defined.\n * Validation result is the first parameter. This can be used to determinate if validation passed successfully or not.\n *\n * __Returning false from the callback will mark the cell as invalid__.\n *\n * @event Hooks#afterValidate\n * @param {boolean} isValid `true` if valid, `false` if not.\n * @param {*} value The value in question.\n * @param {number} row Visual row index.\n * @param {string|number} prop Property name / visual column index.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n * @returns {undefined | boolean} If `false` the cell will be marked as invalid, `true` otherwise.\n */\n'afterValidate',\n/**\n * Fired before successful change of language (when proper language code was set).\n *\n * @event Hooks#beforeLanguageChange\n * @since 0.35.0\n * @param {string} languageCode New language code.\n */\n'beforeLanguageChange',\n/**\n * Fired after successful change of language (when proper language code was set).\n *\n * @event Hooks#afterLanguageChange\n * @since 0.35.0\n * @param {string} languageCode New language code.\n */\n'afterLanguageChange',\n/**\n * Fired by {@link Autofill} plugin before populating the data in the autofill feature. This hook is fired when\n * {@link Options#fillHandle} option is enabled.\n *\n * @event Hooks#beforeAutofill\n * @param {Array[]} selectionData Data the autofill operation will start from.\n * @param {CellRange} sourceRange The range values will be filled from.\n * @param {CellRange} targetRange The range new values will be filled into.\n * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.\n *\n * @returns {boolean|Array[]} If false, the operation is cancelled. If array of arrays, the returned data\n *                              will be passed into `populateFromArray` instead of the default autofill\n *                              algorithm's result.\n */\n'beforeAutofill',\n/**\n * Fired by {@link Autofill} plugin after populating the data in the autofill feature. This hook is fired when\n * {@link Options#fillHandle} option is enabled.\n *\n * @event Hooks#afterAutofill\n * @since 8.0.0\n * @param {Array[]} fillData The data that was used to fill the `targetRange`. If `beforeAutofill` was used\n *                            and returned `[[]]`, this will be the same object that was returned from `beforeAutofill`.\n * @param {CellRange} sourceRange The range values will be filled from.\n * @param {CellRange} targetRange The range new values will be filled into.\n * @param {string} direction Declares the direction of the autofill. Possible values: `up`, `down`, `left`, `right`.\n */\n'afterAutofill',\n/**\n * Fired before aligning the cell contents.\n *\n * @event Hooks#beforeCellAlignment\n * @param {object} stateBefore An object with class names defining the cell alignment.\n * @param {CellRange[]} range An array of CellRange coordinates where the alignment will be applied.\n * @param {string} type Type of the alignment - either `horizontal` or `vertical`.\n * @param {string} alignmentClass String defining the alignment class added to the cell.\n * Possible values:\n * * `htLeft`\n * * `htCenter`\n * * `htRight`\n * * `htJustify`\n * * `htTop`\n * * `htMiddle`\n * * `htBottom`.\n */\n'beforeCellAlignment',\n/**\n * Fired before one or more cells are changed.\n *\n * Use this hook to silently alter the user's changes before Handsontable re-renders.\n *\n * To ignore the user's changes, use a nullified array or return `false`.\n *\n * @event Hooks#beforeChange\n * @param {Array[]} changes 2D array containing information about each of the edited cells `[[row, prop, oldVal, newVal], ...]`. `row` is a visual row index.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n * @returns {undefined | boolean} If `false` all changes were cancelled, `true` otherwise.\n * @example\n * ::: only-for javascript\n * ```js\n * // to alter a single change, overwrite the value with `changes[i][3]`\n * new Handsontable(element, {\n *   beforeChange: (changes, source) => {\n *     // [[row, prop, oldVal, newVal], ...]\n *     changes[0][3] = 10;\n *   }\n * });\n *\n * // to ignore a single change, set `changes[i]` to `null`\n * // or remove `changes[i]` from the array, by using `changes.splice(i, 1)`\n * new Handsontable(element, {\n *   beforeChange: (changes, source) => {\n *     // [[row, prop, oldVal, newVal], ...]\n *     changes[0] = null;\n *   }\n * });\n *\n * // to ignore all changes, return `false`\n * // or set the array's length to 0, by using `changes.length = 0`\n * new Handsontable(element, {\n *   beforeChange: (changes, source) => {\n *     // [[row, prop, oldVal, newVal], ...]\n *     return false;\n *   }\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * // to alter a single change, overwrite the desired value with `changes[i][3]`\n * <HotTable\n *   beforeChange={(changes, source) => {\n *     // [[row, prop, oldVal, newVal], ...]\n *     changes[0][3] = 10;\n *   }}\n * />\n *\n * // to ignore a single change, set `changes[i]` to `null`\n * // or remove `changes[i]` from the array, by using changes.splice(i, 1).\n * <HotTable\n *   beforeChange={(changes, source) => {\n *     // [[row, prop, oldVal, newVal], ...]\n *     changes[0] = null;\n *   }}\n * />\n *\n * // to ignore all changes, return `false`\n * // or set the array's length to 0 (`changes.length = 0`)\n * <HotTable\n *   beforeChange={(changes, source) => {\n *     // [[row, prop, oldVal, newVal], ...]\n *     return false;\n *   }}\n * />\n * ```\n * :::\n */\n'beforeChange',\n/**\n * Fired right before rendering the changes.\n *\n * @event Hooks#beforeChangeRender\n * @param {Array[]} changes Array in form of `[row, prop, oldValue, newValue]`.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n */\n'beforeChangeRender',\n/**\n * Fired before drawing the borders.\n *\n * @event Hooks#beforeDrawBorders\n * @param {Array} corners Array specifying the current selection borders.\n * @param {string} borderClassName Specifies the border class name.\n */\n'beforeDrawBorders',\n/**\n * Fired before getting cell settings.\n *\n * @event Hooks#beforeGetCellMeta\n * @param {number} row Visual row index.\n * @param {number} column Visual column index.\n * @param {object} cellProperties Object containing the cell's properties.\n */\n'beforeGetCellMeta',\n/**\n * Fired before cell meta is removed.\n *\n * @event Hooks#beforeRemoveCellMeta\n * @param {number} row Visual row index.\n * @param {number} column Visual column index.\n * @param {string} key The removed meta key.\n * @param {*} value Value which is under removed key of cell meta.\n * @returns {*|boolean} If false is returned the action is canceled.\n */\n'beforeRemoveCellMeta',\n/**\n * Fired before the Handsontable instance is initiated.\n *\n * @event Hooks#beforeInit\n */\n'beforeInit',\n/**\n * Fired before the Walkontable instance is initiated.\n *\n * @event Hooks#beforeInitWalkontable\n * @param {object} walkontableConfig Walkontable configuration object.\n */\n'beforeInitWalkontable',\n/**\n * Fired before Handsontable's [`data`](@/api/options.md#data)\n * gets modified by the [`loadData()`](@/api/core.md#loaddata) method\n * or the [`updateSettings()`](@/api/core.md#updatesettings) method.\n *\n * Read more:\n * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n * - [Saving data](@/guides/getting-started/saving-data.md)\n *\n * @event Hooks#beforeLoadData\n * @since 8.0.0\n * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data\n * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)\n * @param {string} source The source of the call\n * @returns {Array} The returned array will be used as Handsontable's new dataset.\n */\n'beforeLoadData',\n/**\n * Fired before the [`updateData()`](@/api/core.md#updatedata) method\n * modifies Handsontable's [`data`](@/api/options.md#data).\n *\n * Read more:\n * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n * - [Saving data](@/guides/getting-started/saving-data.md)\n *\n * @event Hooks#beforeUpdateData\n * @since 11.1.0\n * @param {Array} sourceData An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data\n * @param {boolean} initialLoad A flag that indicates whether the data was loaded at Handsontable's initialization (`true`) or later (`false`)\n * @param {string} source The source of the call\n * @returns {Array} The returned array will be used as Handsontable's new dataset.\n */\n'beforeUpdateData',\n/**\n * Hook fired before keydown event is handled. It can be used to stop default key bindings.\n *\n * __Note__: To prevent default behavior you need to call `false` in your `beforeKeyDown` handler.\n *\n * @event Hooks#beforeKeyDown\n * @param {Event} event Original DOM event.\n */\n'beforeKeyDown',\n/**\n * Fired after the user clicked a cell, but before all the calculations related with it.\n *\n * @event Hooks#beforeOnCellMouseDown\n * @param {Event} event The `mousedown` event object.\n * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.\n * @param {HTMLTableCellElement} TD TD element.\n * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n *                            a boolean value that allows or disallows changing the selection for that particular area.\n */\n'beforeOnCellMouseDown',\n/**\n * Fired after the user clicked a cell.\n *\n * @event Hooks#beforeOnCellMouseUp\n * @param {Event} event The `mouseup` event object.\n * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.\n * @param {HTMLTableCellElement} TD TD element.\n */\n'beforeOnCellMouseUp',\n/**\n * Fired after the user clicked a cell, but before all the calculations related with it.\n *\n * @event Hooks#beforeOnCellContextMenu\n * @since 4.1.0\n * @param {Event} event The `contextmenu` event object.\n * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.\n * @param {HTMLTableCellElement} TD TD element.\n */\n'beforeOnCellContextMenu',\n/**\n * Fired after the user moved cursor over a cell, but before all the calculations related with it.\n *\n * @event Hooks#beforeOnCellMouseOver\n * @param {Event} event The `mouseover` event object.\n * @param {CellCoords} coords CellCoords object containing the visual coordinates of the clicked cell.\n * @param {HTMLTableCellElement} TD TD element.\n * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n *                            a boolean value that allows or disallows changing the selection for that particular area.\n */\n'beforeOnCellMouseOver',\n/**\n * Fired after the user moved cursor out from a cell, but before all the calculations related with it.\n *\n * @event Hooks#beforeOnCellMouseOut\n * @param {Event} event The `mouseout` event object.\n * @param {CellCoords} coords CellCoords object containing the visual coordinates of the leaved cell.\n * @param {HTMLTableCellElement} TD TD element.\n */\n'beforeOnCellMouseOut',\n/**\n * Fired before one or more columns are about to be removed.\n *\n * @event Hooks#beforeRemoveCol\n * @param {number} index Visual index of starter column.\n * @param {number} amount Amount of columns to be removed.\n * @param {number[]} physicalColumns An array of physical columns removed from the data source.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n * @returns {*|boolean} If false is returned the action is canceled.\n */\n'beforeRemoveCol',\n/**\n * Fired when one or more rows are about to be removed.\n *\n * @event Hooks#beforeRemoveRow\n * @param {number} index Visual index of starter row.\n * @param {number} amount Amount of rows to be removed.\n * @param {number[]} physicalRows An array of physical rows removed from the data source.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n * @returns {*|boolean} If false is returned the action is canceled.\n */\n'beforeRemoveRow',\n/**\n * Fired before Handsontable's view-rendering engine is rendered.\n *\n * __Note:__ In Handsontable 9.x and earlier, the `beforeViewRender` hook was named `beforeRender`.\n *\n * @event Hooks#beforeViewRender\n * @since 10.0.0\n * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of\n *                           data, or a logic that needs a full Handsontable render cycle.\n *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.\n * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering cycle will be skipped.\n */\n'beforeViewRender',\n/**\n * Fired after Handsontable's view-rendering engine is rendered,\n * but before redrawing the selection borders and before scroll syncing.\n *\n * __Note:__ In Handsontable 9.x and earlier, the `afterViewRender` hook was named `afterRender`.\n *\n * @event Hooks#afterViewRender\n * @since 10.0.0\n * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of\n *                           data, or a logic that needs a full Handsontable render cycle.\n *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.\n */\n'afterViewRender',\n/**\n * Fired before Handsontable's view-rendering engine updates the view.\n *\n * The `beforeRender` event is fired right after the Handsontable\n * business logic is executed and right before the rendering engine starts calling\n * the Core logic, renderers, cell meta objects etc. to update the view.\n *\n * @event Hooks#beforeRender\n * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of\n *                           data, or a logic that needs a full Handsontable render cycle.\n *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.\n */\n'beforeRender',\n/**\n * Fired after Handsontable's view-rendering engine updates the view.\n *\n * @event Hooks#afterRender\n * @param {boolean} isForced If set to `true`, the rendering gets triggered by a change of settings, a change of\n *                           data, or a logic that needs a full Handsontable render cycle.\n *                           If set to `false`, the rendering gets triggered by scrolling or moving the selection.\n */\n'afterRender',\n/**\n * Fired before cell meta is changed.\n *\n * @event Hooks#beforeSetCellMeta\n * @since 8.0.0\n * @param {number} row Visual row index.\n * @param {number} column Visual column index.\n * @param {string} key The updated meta key.\n * @param {*} value The updated meta value.\n * @returns {boolean|undefined} If false is returned the action is canceled.\n */\n'beforeSetCellMeta',\n/**\n * Fired before setting range is started but not finished yet.\n *\n * @event Hooks#beforeSetRangeStartOnly\n * @param {CellCoords} coords CellCoords instance.\n */\n'beforeSetRangeStartOnly',\n/**\n * Fired before setting range is started.\n *\n * @event Hooks#beforeSetRangeStart\n * @param {CellCoords} coords CellCoords instance.\n */\n'beforeSetRangeStart',\n/**\n * Fired before setting range is ended.\n *\n * @event Hooks#beforeSetRangeEnd\n * @param {CellCoords} coords CellCoords instance.\n */\n'beforeSetRangeEnd',\n/**\n * Fired before applying selection coordinates to the renderable coordinates for Walkontable (rendering engine).\n *\n * @since 14.0.0\n * @event Hooks#beforeSelectionHighlightSet\n */\n'beforeSelectionHighlightSet',\n/**\n * Fired before the logic of handling a touch scroll, when user started scrolling on a touch-enabled device.\n *\n * @event Hooks#beforeTouchScroll\n */\n'beforeTouchScroll',\n/**\n * Fired before cell validation, only if validator function is defined. This can be used to manipulate the value\n * of changed cell before it is applied to the validator function.\n *\n * __Note:__ this will not affect values of changes. This will change value *ONLY* for validation.\n *\n * @event Hooks#beforeValidate\n * @param {*} value Value of the cell.\n * @param {number} row Visual row index.\n * @param {string|number} prop Property name / column index.\n * @param {string} [source] String that identifies source of hook call\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n */\n'beforeValidate',\n/**\n * Fired before cell value is rendered into the DOM (through renderer function). This can be used to manipulate the\n * value which is passed to the renderer without modifying the renderer itself.\n *\n * @event Hooks#beforeValueRender\n * @param {*} value Cell value to render.\n * @param {object} cellProperties An object containing the cell properties.\n */\n'beforeValueRender',\n/**\n * Fired after Handsontable instance is constructed (using `new` operator).\n *\n * @event Hooks#construct\n */\n'construct',\n/**\n * Fired after Handsontable instance is initiated but before table is rendered.\n *\n * @event Hooks#init\n */\n'init',\n/**\n * Fired when a column header index is about to be modified by a callback function.\n *\n * @event Hooks#modifyColHeader\n * @param {number} column Visual column header index.\n */\n'modifyColHeader',\n/**\n * Fired when a column width is about to be modified by a callback function.\n *\n * @event Hooks#modifyColWidth\n * @param {number} width Current column width.\n * @param {number} column Visual column index.\n */\n'modifyColWidth',\n/**\n * Fired when focusing a cell or a header element. Allows replacing the element to be focused by returning a\n * different HTML element.\n *\n * @since 14.0.0\n * @event Hooks#modifyFocusedElement\n * @param {number} row Row index.\n * @param {number} column Column index.\n * @param {HTMLElement|undefined} focusedElement The element to be focused.\n */\n'modifyFocusedElement',\n/**\n * Fired when a row header index is about to be modified by a callback function.\n *\n * @event Hooks#modifyRowHeader\n * @param {number} row Visual row header index.\n */\n'modifyRowHeader',\n/**\n * Fired when a row height is about to be modified by a callback function.\n *\n * @event Hooks#modifyRowHeight\n * @param {number} height Row height.\n * @param {number} row Visual row index.\n */\n'modifyRowHeight',\n/**\n * Fired when a data was retrieved or modified.\n *\n * @event Hooks#modifyData\n * @param {number} row Physical row index.\n * @param {number} column Visual column index.\n * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.\n * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).\n */\n'modifyData',\n/**\n * Fired when a data was retrieved or modified from the source data set.\n *\n * @event Hooks#modifySourceData\n * @since 8.0.0\n * @param {number} row Physical row index.\n * @param {number} column Physical column index or property name.\n * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value` property.\n * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).\n */\n'modifySourceData',\n/**\n * Fired when a data was retrieved or modified.\n *\n * @event Hooks#modifyRowData\n * @param {number} row Physical row index.\n */\n'modifyRowData',\n/**\n * Used to modify the cell coordinates when using the `getCell` method, opening editor, getting value from the editor\n * and saving values from the closed editor.\n *\n * @event Hooks#modifyGetCellCoords\n * @since 0.36.0\n * @param {number} row Visual row index.\n * @param {number} column Visual column index.\n * @param {boolean} topmost If set to `true`, it returns the TD element from the topmost overlay. For example,\n *                          if the wanted cell is in the range of fixed rows, it will return a TD element\n *                          from the `top` overlay.\n * @returns {undefined|number[]}\n */\n'modifyGetCellCoords',\n/**\n * Used to modify the cell coordinates when the table is activated (going into the listen mode).\n *\n * @event Hooks#modifyFocusOnTabNavigation\n * @since 14.0.0\n * @param {'from_above' | 'from_below'} tabActivationDir The browsers Tab navigation direction. Depending on\n * whether the user activated the table from the element above or below, another cell can be selected.\n * @param {CellCoords} visualCoords The coords that will be used to select a cell.\n */\n'modifyFocusOnTabNavigation',\n/**\n * Allows modify the visual row index that is used to retrieve the row header element (TH) before it's\n * highlighted (proper CSS class names are added). Modifying the visual row index allows building a custom\n * implementation of the nested headers feature or other features that require highlighting other DOM\n * elements than that the rendering engine, by default, would have highlighted.\n *\n * @event Hooks#beforeHighlightingRowHeader\n * @since 8.4.0\n * @param {number} row Visual row index.\n * @param {number} headerLevel Column header level (0 = most distant to the table).\n * @param {object} highlightMeta An object that contains additional information about processed selection.\n * @returns {number|undefined}\n */\n'beforeHighlightingRowHeader',\n/**\n * Allows modify the visual column index that is used to retrieve the column header element (TH) before it's\n * highlighted (proper CSS class names are added). Modifying the visual column index allows building a custom\n * implementation of the nested headers feature or other features that require highlighting other DOM\n * elements than that the rendering engine, by default, would have highlighted.\n *\n * @event Hooks#beforeHighlightingColumnHeader\n * @since 8.4.0\n * @param {number} column Visual column index.\n * @param {number} headerLevel Row header level (0 = most distant to the table).\n * @param {object} highlightMeta An object that contains additional information about processed selection.\n * @returns {number|undefined}\n */\n'beforeHighlightingColumnHeader',\n/**\n * Fired by {@link PersistentState} plugin, after loading value, saved under given key, from browser local storage.\n *\n * The `persistentStateLoad` hook is fired even when the {@link Options#persistentState} option is disabled.\n *\n * @event Hooks#persistentStateLoad\n * @param {string} key Key.\n * @param {object} valuePlaceholder Object containing the loaded value under `valuePlaceholder.value` (if no value have been saved, `value` key will be undefined).\n */\n'persistentStateLoad',\n/**\n * Fired by {@link PersistentState} plugin after resetting data from local storage. If no key is given, all values associated with table will be cleared.\n * This hook is fired when {@link Options#persistentState} option is enabled.\n *\n * @event Hooks#persistentStateReset\n * @param {string} [key] Key.\n */\n'persistentStateReset',\n/**\n * Fired by {@link PersistentState} plugin, after saving value under given key in browser local storage.\n *\n * The `persistentStateSave` hook is fired even when the {@link Options#persistentState} option is disabled.\n *\n * @event Hooks#persistentStateSave\n * @param {string} key Key.\n * @param {Mixed} value Value to save.\n */\n'persistentStateSave',\n/**\n * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins before sorting the column. If you return `false` value inside callback for hook, then sorting\n * will be not applied by the Handsontable (useful for server-side sorting).\n *\n * This hook is fired when {@link Options#columnSorting} or {@link Options#multiColumnSorting} option is enabled.\n *\n * @event Hooks#beforeColumnSort\n * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).\n * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).\n * @returns {boolean | undefined} If `false` the column will not be sorted, `true` otherwise.\n */\n'beforeColumnSort',\n/**\n * Fired by {@link ColumnSorting} and {@link MultiColumnSorting} plugins after sorting the column. This hook is fired when {@link Options#columnSorting}\n * or {@link Options#multiColumnSorting} option is enabled.\n *\n * @event Hooks#afterColumnSort\n * @param {Array} currentSortConfig Current sort configuration (for all sorted columns).\n * @param {Array} destinationSortConfigs Destination sort configuration (for all sorted columns).\n */\n'afterColumnSort',\n/**\n * Fired by {@link Autofill} plugin after setting range of autofill. This hook is fired when {@link Options#fillHandle}\n * option is enabled.\n *\n * @event Hooks#modifyAutofillRange\n * @param {Array} startArea Array of visual coordinates of the starting point for the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).\n * @param {Array} entireArea Array of visual coordinates of the entire area of the drag-down operation (`[startRow, startColumn, endRow, endColumn]`).\n */\n'modifyAutofillRange',\n/**\n * Fired to allow modifying the copyable range with a callback function.\n *\n * @event Hooks#modifyCopyableRange\n * @param {Array[]} copyableRanges Array of objects defining copyable cells.\n */\n'modifyCopyableRange',\n/**\n * Fired by {@link CopyPaste} plugin before copying the values to the clipboard and before clearing values of\n * the selected cells. This hook is fired when {@link Options#copyPaste} option is enabled.\n *\n * @event Hooks#beforeCut\n * @param {Array[]} data An array of arrays which contains data to cut.\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\n *                       which will be cut out.\n * @returns {*} If returns `false` then operation of the cutting out is canceled.\n * @example\n * ::: only-for javascript\n * ```js\n * // To disregard a single row, remove it from the array using data.splice(i, 1).\n * new Handsontable(element, {\n *   beforeCut: function(data, coords) {\n *     // data -> [[1, 2, 3], [4, 5, 6]]\n *     data.splice(0, 1);\n *     // data -> [[4, 5, 6]]\n *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]\n *   }\n * });\n * // To cancel a cutting action, just return `false`.\n * new Handsontable(element, {\n *   beforeCut: function(data, coords) {\n *     return false;\n *   }\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * // To disregard a single row, remove it from the array using data.splice(i, 1).\n * <HotTable\n *   beforeCut={(data, coords) => {\n *     // data -> [[1, 2, 3], [4, 5, 6]]\n *     data.splice(0, 1);\n *     // data -> [[4, 5, 6]]\n *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]\n *   }}\n * />\n * // To cancel a cutting action, just return `false`.\n * <HotTable\n *   beforeCut={(data, coords) => {\n *     return false;\n *   }}\n * />\n * ```\n * :::\n */\n'beforeCut',\n/**\n * Fired by {@link CopyPaste} plugin after data was cut out from the table. This hook is fired when\n * {@link Options#copyPaste} option is enabled.\n *\n * @event Hooks#afterCut\n * @param {Array[]} data An array of arrays with the cut data.\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\n *                       which was cut out.\n */\n'afterCut',\n/**\n * Fired before values are copied to the clipboard.\n *\n * @event Hooks#beforeCopy\n * @param {Array[]} data An array of arrays which contains data to copied.\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\n *                         which will copied.\n * @param {{ columnHeadersCount: number }} copiedHeadersCount (Since 12.3.0) The number of copied column headers.\n * @returns {*} If returns `false` then copying is canceled.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * // To disregard a single row, remove it from array using data.splice(i, 1).\n * ...\n * new Handsontable(document.getElementById('example'), {\n *   beforeCopy: (data, coords) => {\n *     // data -> [[1, 2, 3], [4, 5, 6]]\n *     data.splice(0, 1);\n *     // data -> [[4, 5, 6]]\n *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]\n *   }\n * });\n * ...\n *\n * // To cancel copying, return false from the callback.\n * ...\n * new Handsontable(document.getElementById('example'), {\n *   beforeCopy: (data, coords) => {\n *     return false;\n *   }\n * });\n * ...\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * // To disregard a single row, remove it from array using data.splice(i, 1).\n * ...\n * <HotTable\n *   beforeCopy={(data, coords) => {\n *     // data -> [[1, 2, 3], [4, 5, 6]]\n *     data.splice(0, 1);\n *     // data -> [[4, 5, 6]]\n *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]\n *   }}\n * />\n * ...\n *\n * // To cancel copying, return false from the callback.\n * ...\n * <HotTable\n *   beforeCopy={(data, coords) => {\n *     return false;\n *   }}\n * />\n * ...\n * ```\n * :::\n */\n'beforeCopy',\n/**\n * Fired by {@link CopyPaste} plugin after data are pasted into table. This hook is fired when {@link Options#copyPaste}\n * option is enabled.\n *\n * @event Hooks#afterCopy\n * @param {Array[]} data An array of arrays which contains the copied data.\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\n *                         which was copied.\n * @param {{ columnHeadersCount: number }} copiedHeadersCount (Since 12.3.0) The number of copied column headers.\n */\n'afterCopy',\n/**\n * Fired by {@link CopyPaste} plugin before values are pasted into table. This hook is fired when\n * {@link Options#copyPaste} option is enabled.\n *\n * @event Hooks#beforePaste\n * @param {Array[]} data An array of arrays which contains data to paste.\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\n *                       that correspond to the previously selected area.\n * @returns {*} If returns `false` then pasting is canceled.\n * @example\n * ```js\n * ::: only-for javascript\n * // To disregard a single row, remove it from array using data.splice(i, 1).\n * new Handsontable(example, {\n *   beforePaste: (data, coords) => {\n *     // data -> [[1, 2, 3], [4, 5, 6]]\n *     data.splice(0, 1);\n *     // data -> [[4, 5, 6]]\n *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]\n *   }\n * });\n * // To cancel pasting, return false from the callback.\n * new Handsontable(example, {\n *   beforePaste: (data, coords) => {\n *     return false;\n *   }\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * // To disregard a single row, remove it from array using data.splice(i, 1).\n * <HotTable\n *   beforePaste={(data, coords) => {\n *     // data -> [[1, 2, 3], [4, 5, 6]]\n *     data.splice(0, 1);\n *     // data -> [[4, 5, 6]]\n *     // coords -> [{startRow: 0, startCol: 0, endRow: 1, endCol: 2}]\n *   }}\n * />\n * // To cancel pasting, return false from the callback.\n * <HotTable\n *   beforePaste={(data, coords) => {\n *     return false;\n *   }}\n * />\n * ```\n * :::\n */\n'beforePaste',\n/**\n * Fired by {@link CopyPaste} plugin after values are pasted into table. This hook is fired when\n * {@link Options#copyPaste} option is enabled.\n *\n * @event Hooks#afterPaste\n * @param {Array[]} data An array of arrays with the pasted data.\n * @param {object[]} coords An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\n *                       that correspond to the previously selected area.\n */\n'afterPaste',\n/**\n * Fired by the {@link ManualColumnFreeze} plugin, before freezing a column.\n *\n * @event Hooks#beforeColumnFreeze\n * @since 12.1.0\n * @param {number} column The visual index of the column that is going to freeze.\n * @param {boolean} freezePerformed If `true`: the column is going to freeze. If `false`: the column is not going to freeze (which might happen if the column is already frozen).\n * @returns {boolean|undefined} If `false`: the column is not going to freeze, and the `afterColumnFreeze` hook won't fire.\n */\n'beforeColumnFreeze',\n/**\n * Fired by the {@link ManualColumnFreeze} plugin, right after freezing a column.\n *\n * @event Hooks#afterColumnFreeze\n * @since 12.1.0\n * @param {number} column The visual index of the frozen column.\n * @param {boolean} freezePerformed If `true`: the column got successfully frozen. If `false`: the column didn't get frozen.\n */\n'afterColumnFreeze',\n/**\n * Fired by {@link ManualColumnMove} plugin before change order of the visual indexes. This hook is fired when\n * {@link Options#manualColumnMove} option is enabled.\n *\n * @event Hooks#beforeColumnMove\n * @param {Array} movedColumns Array of visual column indexes to be moved.\n * @param {number} finalIndex Visual column index, being a start index for the moved columns.\n *                            Points to where the elements will be placed after the moving action.\n *                            To check visualization of final index please take a look at\n *                            [documentation](@/guides/columns/column-moving.md).\n * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns.\n *                                     Points to where we are going to drop the moved elements. To check\n *                                     visualization of drop index please take a look at\n *                                     [documentation](@/guides/columns/column-moving.md).\n *                                     It's `undefined` when `dragColumns` function wasn't called.\n * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.\n * @returns {undefined | boolean} If `false` the column will not be moved, `true` otherwise.\n */\n'beforeColumnMove',\n/**\n * Fired by {@link ManualColumnMove} plugin after changing order of the visual indexes.\n * This hook is fired when {@link Options#manualColumnMove} option is enabled.\n *\n * @event Hooks#afterColumnMove\n * @param {Array} movedColumns Array of visual column indexes to be moved.\n * @param {number} finalIndex Visual column index, being a start index for the moved columns.\n *                            Points to where the elements will be placed after the moving action.\n *                            To check visualization of final index please take a look at\n *                            [documentation](@/guides/columns/column-moving.md).\n * @param {number|undefined} dropIndex Visual column index, being a drop index for the moved columns.\n *                                     Points to where we are going to drop the moved elements.\n *                                     To check visualization of drop index please take a look at\n *                                     [documentation](@/guides/columns/column-moving.md).\n *                                     It's `undefined` when `dragColumns` function wasn't called.\n * @param {boolean} movePossible Indicates if it was possible to move columns to the desired position.\n * @param {boolean} orderChanged Indicates if order of columns was changed by move.\n */\n'afterColumnMove',\n/**\n * Fired by the {@link ManualColumnFreeze} plugin, before unfreezing a column.\n *\n * @event Hooks#beforeColumnUnfreeze\n * @since 12.1.0\n * @param {number} column The visual index of the column that is going to unfreeze.\n * @param {boolean} unfreezePerformed If `true`: the column is going to unfreeze. If `false`: the column is not going to unfreeze (which might happen if the column is already unfrozen).\n * @returns {boolean|undefined} If `false`: the column is not going to unfreeze, and the `afterColumnUnfreeze` hook won't fire.\n */\n'beforeColumnUnfreeze',\n/**\n * Fired by the {@link ManualColumnFreeze} plugin, right after unfreezing a column.\n *\n * @event Hooks#afterColumnUnfreeze\n * @since 12.1.0\n * @param {number} column The visual index of the unfrozen column.\n * @param {boolean} unfreezePerformed If `true`: the column got successfully unfrozen. If `false`: the column didn't get unfrozen.\n */\n'afterColumnUnfreeze',\n/**\n * Fired by {@link ManualRowMove} plugin before changing the order of the visual indexes. This hook is fired when\n * {@link Options#manualRowMove} option is enabled.\n *\n * @event Hooks#beforeRowMove\n * @param {Array} movedRows Array of visual row indexes to be moved.\n * @param {number} finalIndex Visual row index, being a start index for the moved rows.\n *                            Points to where the elements will be placed after the moving action.\n *                            To check visualization of final index please take a look at\n *                            [documentation](@/guides/rows/row-moving.md).\n * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows.\n *                                     Points to where we are going to drop the moved elements.\n *                                     To check visualization of drop index please take a look at\n *                                     [documentation](@/guides/rows/row-moving.md).\n *                                     It's `undefined` when `dragRows` function wasn't called.\n * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.\n * @returns {*|boolean} If false is returned the action is canceled.\n */\n'beforeRowMove',\n/**\n * Fired by {@link ManualRowMove} plugin after changing the order of the visual indexes.\n * This hook is fired when {@link Options#manualRowMove} option is enabled.\n *\n * @event Hooks#afterRowMove\n * @param {Array} movedRows Array of visual row indexes to be moved.\n * @param {number} finalIndex Visual row index, being a start index for the moved rows.\n *                            Points to where the elements will be placed after the moving action.\n *                            To check visualization of final index please take a look at\n *                            [documentation](@/guides/rows/row-moving.md).\n * @param {number|undefined} dropIndex Visual row index, being a drop index for the moved rows.\n *                                     Points to where we are going to drop the moved elements.\n *                                     To check visualization of drop index please take a look at\n *                                     [documentation](@/guides/rows/row-moving.md).\n *                                     It's `undefined` when `dragRows` function wasn't called.\n * @param {boolean} movePossible Indicates if it was possible to move rows to the desired position.\n * @param {boolean} orderChanged Indicates if order of rows was changed by move.\n */\n'afterRowMove',\n/**\n * Fired by {@link ManualColumnResize} plugin before rendering the table with modified column sizes. This hook is\n * fired when {@link Options#manualColumnResize} option is enabled.\n *\n * @event Hooks#beforeColumnResize\n * @param {number} newSize Calculated new column width.\n * @param {number} column Visual index of the resized column.\n * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.\n * @returns {number} Returns a new column size or `undefined`, if column size should be calculated automatically.\n */\n'beforeColumnResize',\n/**\n * Fired by {@link ManualColumnResize} plugin after rendering the table with modified column sizes. This hook is\n * fired when {@link Options#manualColumnResize} option is enabled.\n *\n * @event Hooks#afterColumnResize\n * @param {number} newSize Calculated new column width.\n * @param {number} column Visual index of the resized column.\n * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.\n */\n'afterColumnResize',\n/**\n * Fired by {@link ManualRowResize} plugin before rendering the table with modified row sizes. This hook is\n * fired when {@link Options#manualRowResize} option is enabled.\n *\n * @event Hooks#beforeRowResize\n * @param {number} newSize Calculated new row height.\n * @param {number} row Visual index of the resized row.\n * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.\n * @returns {number|undefined} Returns the new row size or `undefined` if row size should be calculated automatically.\n */\n'beforeRowResize',\n/**\n * Fired by {@link ManualRowResize} plugin after rendering the table with modified row sizes. This hook is\n * fired when {@link Options#manualRowResize} option is enabled.\n *\n * @event Hooks#afterRowResize\n * @param {number} newSize Calculated new row height.\n * @param {number} row Visual index of the resized row.\n * @param {boolean} isDoubleClick Flag that determines whether there was a double-click.\n */\n'afterRowResize',\n/**\n * Fired after getting the column header renderers.\n *\n * @event Hooks#afterGetColumnHeaderRenderers\n * @param {Function[]} renderers An array of the column header renderers.\n */\n'afterGetColumnHeaderRenderers',\n/**\n * Fired after getting the row header renderers.\n *\n * @event Hooks#afterGetRowHeaderRenderers\n * @param {Function[]} renderers An array of the row header renderers.\n */\n'afterGetRowHeaderRenderers',\n/**\n * Fired before applying stretched column width to column.\n *\n * @event Hooks#beforeStretchingColumnWidth\n * @param {number} stretchedWidth Calculated width.\n * @param {number} column Visual column index.\n * @returns {number|undefined} Returns new width which will be applied to the column element.\n */\n'beforeStretchingColumnWidth',\n/**\n * Fired by the [`Filters`](@/api/filters.md) plugin,\n * before a [column filter](@/guides/columns/column-filter.md) gets applied.\n *\n * [`beforeFilter`](#beforefilter) takes one argument (`conditionsStack`), which is an array of objects.\n * Each object represents one of your [column filters](@/api/filters.md#addcondition),\n * and consists of the following properties:\n *\n * | Property     | Possible values                                                         | Description                                                                                                              |\n * | ------------ | ----------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n * | `column`     | Number                                                                  | A visual index of the column to which the filter will be applied.                                                        |\n * | `conditions` | Array of objects                                                        | Each object represents one condition. For details, see [`addCondition()`](@/api/filters.md#addcondition).                |\n * | `operation`  | `'conjunction'` \\| `'disjunction'` \\| `'disjunctionWithExtraCondition'` | An operation to perform on your set of `conditions`. For details, see [`addCondition()`](@/api/filters.md#addcondition). |\n *\n * An example of the format of the `conditionsStack` argument:\n *\n * ```js\n * [\n *   {\n *     column: 2,\n *     conditions: [\n *       {name: 'begins_with', args: [['S']]}\n *     ],\n *     operation: 'conjunction'\n *   },\n *   {\n *     column: 4,\n *     conditions: [\n *       {name: 'not_empty', args: []}\n *     ],\n *     operation: 'conjunction'\n *   },\n * ]\n * ```\n *\n * To perform server-side filtering (i.e., to not apply filtering to Handsontable's UI),\n * set [`beforeFilter`](#beforefilter) to return `false`:\n *\n * ```js\n * new Handsontable(document.getElementById('example'), {\n *   beforeFilter: (conditionsStack) => {\n *     return false;\n *   }\n * });\n *```\n *\n * Read more:\n * - [Guides: Column filter](@/guides/columns/column-filter.md)\n * - [Hooks: `afterFilter`](#afterfilter)\n * - [Options: `filters`](@/api/options.md#filters)\n * - [Plugins: `Filters`](@/api/filters.md)\n * – [Plugin methods: `addCondition()`](@/api/filters.md#addcondition)\n *\n * @event Hooks#beforeFilter\n * @param {object[]} conditionsStack An array of objects with your [column filters](@/api/filters.md#addcondition).\n * @returns {boolean} To perform server-side filtering (i.e., to not apply filtering to Handsontable's UI), return `false`.\n */\n'beforeFilter',\n/**\n * Fired by the [`Filters`](@/api/filters.md) plugin,\n * after a [column filter](@/guides/columns/column-filter.md) gets applied.\n *\n * [`afterFilter`](#afterfilter) takes one argument (`conditionsStack`), which is an array of objects.\n * Each object represents one of your [column filters](@/api/filters.md#addcondition),\n * and consists of the following properties:\n *\n * | Property     | Possible values                                                         | Description                                                                                                              |\n * | ------------ | ----------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------------ |\n * | `column`     | Number                                                                  | A visual index of the column to which the filter was applied.                                                            |\n * | `conditions` | Array of objects                                                        | Each object represents one condition. For details, see [`addCondition()`](@/api/filters.md#addcondition).                |\n * | `operation`  | `'conjunction'` \\| `'disjunction'` \\| `'disjunctionWithExtraCondition'` | An operation to perform on your set of `conditions`. For details, see [`addCondition()`](@/api/filters.md#addcondition). |\n *\n * An example of the format of the `conditionsStack` argument:\n *\n * ```js\n * [\n *   {\n *     column: 2,\n *     conditions: [\n *       {name: 'begins_with', args: [['S']]}\n *     ],\n *     operation: 'conjunction'\n *   },\n *   {\n *     column: 4,\n *     conditions: [\n *       {name: 'not_empty', args: []}\n *     ],\n *     operation: 'conjunction'\n *   },\n * ]\n * ```\n *\n * Read more:\n * - [Guides: Column filter](@/guides/columns/column-filter.md)\n * - [Hooks: `beforeFilter`](#beforefilter)\n * - [Options: `filters`](@/api/options.md#filters)\n * - [Plugins: `Filters`](@/api/filters.md)\n * – [Plugin methods: `addCondition()`](@/api/filters.md#addcondition)\n *\n * @event Hooks#afterFilter\n * @param {object[]} conditionsStack An array of objects with your [column filters](@/api/filters.md#addcondition).\n */\n'afterFilter',\n/**\n * Fired by the {@link Formulas} plugin, when any cell value changes.\n *\n * Returns an array of objects that contains:\n * - The addresses (`sheet`, `row`, `col`) and new values (`newValue`) of the changed cells.\n * - The addresses and new values of any cells that had to be recalculated (because their formulas depend on the cells that changed).\n *\n * This hook gets also fired on Handsontable's initialization, returning the addresses and values of all cells.\n *\n * Read more:\n * - [Guides: Formula calculation](@/guides/formulas/formula-calculation.md)\n * - [HyperFormula documentation: `valuesUpdated`](https://hyperformula.handsontable.com/api/interfaces/listeners.html#valuesupdated)\n *\n * @since 9.0.0\n * @event Hooks#afterFormulasValuesUpdate\n * @param {Array} changes The addresses and new values of all the changed and recalculated cells.\n */\n'afterFormulasValuesUpdate',\n/**\n * Fired when a named expression is added to the Formulas' engine instance.\n *\n * @since 9.0.0\n * @event Hooks#afterNamedExpressionAdded\n * @param {string} namedExpressionName The name of the added expression.\n * @param {Array} changes The values and location of applied changes.\n */\n'afterNamedExpressionAdded',\n/**\n * Fired when a named expression is removed from the Formulas' engine instance.\n *\n * @since 9.0.0\n * @event Hooks#afterNamedExpressionRemoved\n * @param {string} namedExpressionName The name of the removed expression.\n * @param {Array} changes The values and location of applied changes.\n */\n'afterNamedExpressionRemoved',\n/**\n * Fired when a new sheet is added to the Formulas' engine instance.\n *\n * @since 9.0.0\n * @event Hooks#afterSheetAdded\n * @param {string} addedSheetDisplayName The name of the added sheet.\n */\n'afterSheetAdded',\n/**\n * Fired when a sheet in the Formulas' engine instance is renamed.\n *\n * @since 9.0.0\n * @event Hooks#afterSheetRenamed\n * @param {string} oldDisplayName The old name of the sheet.\n * @param {string} newDisplayName The new name of the sheet.\n */\n'afterSheetRenamed',\n/**\n * Fired when a sheet is removed from the Formulas' engine instance.\n *\n * @since 9.0.0\n * @event Hooks#afterSheetRemoved\n * @param {string} removedSheetDisplayName The removed sheet name.\n * @param {Array} changes The values and location of applied changes.\n */\n'afterSheetRemoved',\n/**\n * Fired while retrieving the column header height.\n *\n * @event Hooks#modifyColumnHeaderHeight\n */\n'modifyColumnHeaderHeight',\n/**\n * Fired while retrieving a column header's value.\n *\n * @since 12.3.0\n * @event Hooks#modifyColumnHeaderValue\n * @param {string} value A column header value.\n * @param {number} visualColumnIndex A visual column index.\n * @param {number} [headerLevel=0] Header level index. Accepts positive (0 to n)\n *                                 and negative (-1 to -n) values. For positive values, 0 points to the\n *                                 topmost header. For negative values, -1 points to the bottom-most\n *                                 header (the header closest to the cells).\n * @returns {string} The column header value to be updated.\n */\n'modifyColumnHeaderValue',\n/**\n * Fired by {@link UndoRedo} plugin before the undo action. Contains information about the action that is being undone.\n * This hook is fired when {@link Options#undo} option is enabled.\n *\n * @event Hooks#beforeUndo\n * @param {object} action The action object. Contains information about the action being undone. The `actionType`\n *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).\n * @returns {*|boolean} If false is returned the action is canceled.\n */\n'beforeUndo',\n/**\n * Fired by {@link UndoRedo} plugin before changing undo stack.\n *\n * @event Hooks#beforeUndoStackChange\n * @since 8.4.0\n * @param {Array} doneActions Stack of actions which may be undone.\n * @param {string} [source] String that identifies source of action\n *                          ([list of all available sources](@/guides/getting-started/events-and-hooks.md#definition-for-source-argument)).\n * @returns {*|boolean} If false is returned the action of changing undo stack is canceled.\n */\n'beforeUndoStackChange',\n/**\n * Fired by {@link UndoRedo} plugin after the undo action. Contains information about the action that is being undone.\n * This hook is fired when {@link Options#undo} option is enabled.\n *\n * @event Hooks#afterUndo\n * @param {object} action The action object. Contains information about the action being undone. The `actionType`\n *                        property of the object specifies the type of the action in a String format. (e.g. `'remove_row'`).\n */\n'afterUndo',\n/**\n * Fired by {@link UndoRedo} plugin after changing undo stack.\n *\n * @event Hooks#afterUndoStackChange\n * @since 8.4.0\n * @param {Array} doneActionsBefore Stack of actions which could be undone before performing new action.\n * @param {Array} doneActionsAfter Stack of actions which can be undone after performing new action.\n */\n'afterUndoStackChange',\n/**\n * Fired by {@link UndoRedo} plugin before the redo action. Contains information about the action that is being redone.\n * This hook is fired when {@link Options#undo} option is enabled.\n *\n * @event Hooks#beforeRedo\n * @param {object} action The action object. Contains information about the action being redone. The `actionType`\n *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).\n * @returns {*|boolean} If false is returned the action is canceled.\n */\n'beforeRedo',\n/**\n * Fired by {@link UndoRedo} plugin before changing redo stack.\n *\n * @event Hooks#beforeRedoStackChange\n * @since 8.4.0\n * @param {Array} undoneActions Stack of actions which may be redone.\n */\n'beforeRedoStackChange',\n/**\n * Fired by {@link UndoRedo} plugin after the redo action. Contains information about the action that is being redone.\n * This hook is fired when {@link Options#undo} option is enabled.\n *\n * @event Hooks#afterRedo\n * @param {object} action The action object. Contains information about the action being redone. The `actionType`\n *                        property of the object specifies the type of the action in a String format (e.g. `'remove_row'`).\n */\n'afterRedo',\n/**\n * Fired by {@link UndoRedo} plugin after changing redo stack.\n *\n * @event Hooks#afterRedoStackChange\n * @since 8.4.0\n * @param {Array} undoneActionsBefore Stack of actions which could be redone before performing new action.\n * @param {Array} undoneActionsAfter Stack of actions which can be redone after performing new action.\n */\n'afterRedoStackChange',\n/**\n * Fired while retrieving the row header width.\n *\n * @event Hooks#modifyRowHeaderWidth\n * @param {number} rowHeaderWidth Row header width.\n */\n'modifyRowHeaderWidth',\n/**\n * Fired when the start of the selection is being modified (e.g. Moving the selection with the arrow keys).\n *\n * @event Hooks#modifyTransformStart\n * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.\n */\n'modifyTransformStart',\n/**\n * Fired when the end of the selection is being modified (e.g. Moving the selection with the arrow keys).\n *\n * @event Hooks#modifyTransformEnd\n * @param {CellCoords} delta Cell coords object declaring the delta of the new selection relative to the previous one.\n */\n'modifyTransformEnd',\n/**\n * Fired after the start of the selection is being modified (e.g. Moving the selection with the arrow keys).\n *\n * @event Hooks#afterModifyTransformStart\n * @param {CellCoords} coords Coords of the freshly selected cell.\n * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.\n * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.\n */\n'afterModifyTransformStart',\n/**\n * Fired after the end of the selection is being modified (e.g. Moving the selection with the arrow keys).\n *\n * @event Hooks#afterModifyTransformEnd\n * @param {CellCoords} coords Visual coords of the freshly selected cell.\n * @param {number} rowTransformDir `-1` if trying to select a cell with a negative row index. `0` otherwise.\n * @param {number} colTransformDir `-1` if trying to select a cell with a negative column index. `0` otherwise.\n */\n'afterModifyTransformEnd',\n/**\n * Fired inside the `viewportRowCalculatorOverride` method. Allows modifying the row calculator parameters.\n *\n * @event Hooks#afterViewportRowCalculatorOverride\n * @param {object} calc The row calculator.\n */\n'afterViewportRowCalculatorOverride',\n/**\n * Fired inside the `viewportColumnCalculatorOverride` method. Allows modifying the row calculator parameters.\n *\n * @event Hooks#afterViewportColumnCalculatorOverride\n * @param {object} calc The row calculator.\n */\n'afterViewportColumnCalculatorOverride',\n/**\n * Fired after initializing all the plugins.\n * This hook should be added before Handsontable is initialized.\n *\n * @event Hooks#afterPluginsInitialized\n *\n * @example\n * ```js\n * Handsontable.hooks.add('afterPluginsInitialized', myCallback);\n * ```\n */\n'afterPluginsInitialized',\n/**\n * Fired by {@link HiddenRows} plugin before marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.\n * Returning `false` in the callback will prevent the hiding action from completing.\n *\n * @event Hooks#beforeHideRows\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.\n * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.\n * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.\n */\n'beforeHideRows',\n/**\n * Fired by {@link HiddenRows} plugin after marking the rows as hidden. Fired only if the {@link Options#hiddenRows} option is enabled.\n *\n * @event Hooks#afterHideRows\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.\n * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.\n * @param {boolean} stateChanged `true`, if the action affected any non-hidden rows, `false` otherwise.\n */\n'afterHideRows',\n/**\n * Fired by {@link HiddenRows} plugin before marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.\n * Returning `false` in the callback will prevent the row revealing action from completing.\n *\n * @event Hooks#beforeUnhideRows\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.\n * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.\n * @returns {undefined|boolean} If the callback returns `false`, the revealing action will not be completed.\n */\n'beforeUnhideRows',\n/**\n * Fired by {@link HiddenRows} plugin after marking the rows as not hidden. Fired only if the {@link Options#hiddenRows} option is enabled.\n *\n * @event Hooks#afterUnhideRows\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical row indexes.\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical row indexes.\n * @param {boolean} actionPossible `true`, if provided row indexes are valid, `false` otherwise.\n * @param {boolean} stateChanged `true`, if the action affected any hidden rows, `false` otherwise.\n */\n'afterUnhideRows',\n/**\n * Fired by {@link HiddenColumns} plugin before marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.\n * Returning `false` in the callback will prevent the hiding action from completing.\n *\n * @event Hooks#beforeHideColumns\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.\n * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.\n * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.\n */\n'beforeHideColumns',\n/**\n * Fired by {@link HiddenColumns} plugin after marking the columns as hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.\n *\n * @event Hooks#afterHideColumns\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.\n * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.\n * @param {boolean} stateChanged `true`, if the action affected any non-hidden columns, `false` otherwise.\n */\n'afterHideColumns',\n/**\n * Fired by {@link HiddenColumns} plugin before marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.\n * Returning `false` in the callback will prevent the column revealing action from completing.\n *\n * @event Hooks#beforeUnhideColumns\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.\n * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.\n * @returns {undefined|boolean} If the callback returns `false`, the hiding action will not be completed.\n */\n'beforeUnhideColumns',\n/**\n * Fired by {@link HiddenColumns} plugin after marking the columns as not hidden. Fired only if the {@link Options#hiddenColumns} option is enabled.\n *\n * @event Hooks#afterUnhideColumns\n * @param {Array} currentHideConfig Current hide configuration - a list of hidden physical column indexes.\n * @param {Array} destinationHideConfig Destination hide configuration - a list of hidden physical column indexes.\n * @param {boolean} actionPossible `true`, if the provided column indexes are valid, `false` otherwise.\n * @param {boolean} stateChanged `true`, if the action affected any hidden columns, `false` otherwise.\n */\n'afterUnhideColumns',\n/**\n * Fired by {@link TrimRows} plugin before trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.\n *\n * @event Hooks#beforeTrimRow\n * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.\n * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.\n * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.\n * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.\n */\n'beforeTrimRow',\n/**\n * Fired by {@link TrimRows} plugin after trimming rows. This hook is fired when {@link Options#trimRows} option is enabled.\n *\n * @event Hooks#afterTrimRow\n * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.\n * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.\n * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.\n * @param {boolean} stateChanged `true`, if the action affected any non-trimmed rows, `false` otherwise.\n * @returns {undefined|boolean} If the callback returns `false`, the trimming action will not be completed.\n */\n'afterTrimRow',\n/**\n * Fired by {@link TrimRows} plugin before untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.\n *\n * @event Hooks#beforeUntrimRow\n * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.\n * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.\n * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.\n * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.\n */\n'beforeUntrimRow',\n/**\n * Fired by {@link TrimRows} plugin after untrimming rows. This hook is fired when {@link Options#trimRows} option is enabled.\n *\n * @event Hooks#afterUntrimRow\n * @param {Array} currentTrimConfig Current trim configuration - a list of trimmed physical row indexes.\n * @param {Array} destinationTrimConfig Destination trim configuration - a list of trimmed physical row indexes.\n * @param {boolean} actionPossible `true`, if all of the row indexes are withing the bounds of the table, `false` otherwise.\n * @param {boolean} stateChanged `true`, if the action affected any trimmed rows, `false` otherwise.\n * @returns {undefined|boolean} If the callback returns `false`, the untrimming action will not be completed.\n */\n'afterUntrimRow',\n/**\n * Fired by {@link DropdownMenu} plugin before opening the dropdown menu. This hook is fired when {@link Options#dropdownMenu}\n * option is enabled.\n *\n * @event Hooks#beforeDropdownMenuShow\n * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.\n */\n'beforeDropdownMenuShow',\n/**\n * Fired by {@link DropdownMenu} plugin after opening the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}\n * option is enabled.\n *\n * @event Hooks#afterDropdownMenuShow\n * @param {DropdownMenu} dropdownMenu The DropdownMenu instance.\n */\n'afterDropdownMenuShow',\n/**\n * Fired by {@link DropdownMenu} plugin after hiding the Dropdown Menu. This hook is fired when {@link Options#dropdownMenu}\n * option is enabled.\n *\n * @event Hooks#afterDropdownMenuHide\n * @param {DropdownMenu} instance The DropdownMenu instance.\n */\n'afterDropdownMenuHide',\n/**\n * Fired by {@link NestedRows} plugin before adding a children to the NestedRows structure. This hook is fired when\n * {@link Options#nestedRows} option is enabled.\n *\n * @event Hooks#beforeAddChild\n * @param {object} parent The parent object.\n * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.\n * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.\n */\n'beforeAddChild',\n/**\n * Fired by {@link NestedRows} plugin after adding a children to the NestedRows structure. This hook is fired when\n * {@link Options#nestedRows} option is enabled.\n *\n * @event Hooks#afterAddChild\n * @param {object} parent The parent object.\n * @param {object|undefined} element The element added as a child. If `undefined`, a blank child was added.\n * @param {number|undefined} index The index within the parent where the new child was added. If `undefined`, the element was added as the last child.\n */\n'afterAddChild',\n/**\n * Fired by {@link NestedRows} plugin before detaching a child from its parent. This hook is fired when\n * {@link Options#nestedRows} option is enabled.\n *\n * @event Hooks#beforeDetachChild\n * @param {object} parent An object representing the parent from which the element is to be detached.\n * @param {object} element The detached element.\n */\n'beforeDetachChild',\n/**\n * Fired by {@link NestedRows} plugin after detaching a child from its parent. This hook is fired when\n * {@link Options#nestedRows} option is enabled.\n *\n * @event Hooks#afterDetachChild\n * @param {object} parent An object representing the parent from which the element was detached.\n * @param {object} element The detached element.\n * @param {number} finalElementPosition The final row index of the detached element.\n */\n'afterDetachChild',\n/**\n * Fired after the editor is opened and rendered.\n *\n * @event Hooks#afterBeginEditing\n * @param {number} row Visual row index of the edited cell.\n * @param {number} column Visual column index of the edited cell.\n */\n'afterBeginEditing',\n/**\n * Fired by {@link MergeCells} plugin before cell merging. This hook is fired when {@link Options#mergeCells}\n * option is enabled.\n *\n * @event Hooks#beforeMergeCells\n * @param {CellRange} cellRange Selection cell range.\n * @param {boolean} [auto=false] `true` if called automatically by the plugin.\n */\n'beforeMergeCells',\n/**\n * Fired by {@link MergeCells} plugin after cell merging. This hook is fired when {@link Options#mergeCells}\n * option is enabled.\n *\n * @event Hooks#afterMergeCells\n * @param {CellRange} cellRange Selection cell range.\n * @param {object} mergeParent The parent collection of the provided cell range.\n * @param {boolean} [auto=false] `true` if called automatically by the plugin.\n */\n'afterMergeCells',\n/**\n * Fired by {@link MergeCells} plugin before unmerging the cells. This hook is fired when {@link Options#mergeCells}\n * option is enabled.\n *\n * @event Hooks#beforeUnmergeCells\n * @param {CellRange} cellRange Selection cell range.\n * @param {boolean} [auto=false] `true` if called automatically by the plugin.\n */\n'beforeUnmergeCells',\n/**\n * Fired by {@link MergeCells} plugin after unmerging the cells. This hook is fired when {@link Options#mergeCells}\n * option is enabled.\n *\n * @event Hooks#afterUnmergeCells\n * @param {CellRange} cellRange Selection cell range.\n * @param {boolean} [auto=false] `true` if called automatically by the plugin.\n */\n'afterUnmergeCells',\n/**\n * Fired after the table was switched into listening mode. This allows Handsontable to capture keyboard events and\n * respond in the right way.\n *\n * @event Hooks#afterListen\n */\n'afterListen',\n/**\n * Fired after the table was switched off from the listening mode. This makes the Handsontable inert for any\n * keyboard events.\n *\n * @event Hooks#afterUnlisten\n */\n'afterUnlisten',\n/**\n * Fired after the window was resized or the size of the Handsontable root element was changed.\n *\n * @event Hooks#afterRefreshDimensions\n * @param {object} previousDimensions Previous dimensions of the container.\n * @param {object} currentDimensions Current dimensions of the container.\n * @param {boolean} stateChanged `true`, if the container was re-render, `false` otherwise.\n */\n'afterRefreshDimensions',\n/**\n * Cancellable hook, called after resizing a window or after detecting size change of the\n * Handsontable root element, but before redrawing a table.\n *\n * @event Hooks#beforeRefreshDimensions\n * @param {object} previousDimensions Previous dimensions of the container.\n * @param {object} currentDimensions Current dimensions of the container.\n * @param {boolean} actionPossible `true`, if current and previous dimensions are different, `false` otherwise.\n * @returns {undefined|boolean} If the callback returns `false`, the refresh action will not be completed.\n */\n'beforeRefreshDimensions',\n/**\n * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.\n *\n * @event Hooks#beforeColumnCollapse\n * @since 8.0.0\n * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.\n * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.\n * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.\n * @returns {undefined|boolean} If the callback returns `false`, the collapsing action will not be completed.\n */\n'beforeColumnCollapse',\n/**\n * Fired by {@link CollapsibleColumns} plugin before columns collapse. This hook is fired when {@link Options#collapsibleColumns} option is enabled.\n *\n * @event Hooks#afterColumnCollapse\n * @since 8.0.0\n * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.\n * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.\n * @param {boolean} collapsePossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.\n * @param {boolean} successfullyCollapsed `true`, if the action affected any non-collapsible column, `false` otherwise.\n */\n'afterColumnCollapse',\n/**\n * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.\n *\n * @event Hooks#beforeColumnExpand\n * @since 8.0.0\n * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.\n * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.\n * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.\n * @returns {undefined|boolean} If the callback returns `false`, the expanding action will not be completed.\n */\n'beforeColumnExpand',\n/**\n * Fired by {@link CollapsibleColumns} plugin before columns expand. This hook is fired when {@link Options#collapsibleColumns} option is enabled.\n *\n * @event Hooks#afterColumnExpand\n * @since 8.0.0\n * @param {Array} currentCollapsedColumns Current collapsible configuration - a list of collapsible physical column indexes.\n * @param {Array} destinationCollapsedColumns Destination collapsible configuration - a list of collapsible physical column indexes.\n * @param {boolean} expandPossible `true`, if all of the column indexes are withing the bounds of the collapsed sections, `false` otherwise.\n * @param {boolean} successfullyExpanded `true`, if the action affected any non-collapsible column, `false` otherwise.\n */\n'afterColumnExpand',\n/**\n * Fired by {@link AutoColumnSize} plugin within SampleGenerator utility.\n *\n * @event Hooks#modifyAutoColumnSizeSeed\n * @since 8.4.0\n * @param {string|undefined} seed Seed ID, unique name to categorize samples.\n * @param {object} cellProperties Object containing the cell properties.\n * @param {*} cellValue Value of the cell.\n */\n'modifyAutoColumnSizeSeed'];\n\n/**\n * Template warning message for removed hooks.\n *\n * @type {string}\n */\nconst REMOVED_MESSAGE = toSingleLine`The plugin hook \"[hookName]\" was removed in Handsontable [removedInVersion].\\x20\n  Please consult release notes https://github.com/handsontable/handsontable/releases/tag/[removedInVersion] to\\x20\n  learn about the migration path.`;\n\n/**\n * The list of the hooks which are removed from the API. The warning message is printed out in\n * the developer console when the hook is used.\n *\n * The Map key is represented by hook name and its value points to the Handsontable version\n * in which it was removed.\n *\n * @type {Map<string, string>}\n */\nconst REMOVED_HOOKS = new Map([['modifyRow', '8.0.0'], ['modifyCol', '8.0.0'], ['unmodifyRow', '8.0.0'], ['unmodifyCol', '8.0.0'], ['skipLengthCache', '8.0.0'], ['hiddenColumn', '8.0.0'], ['hiddenRow', '8.0.0']]);\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * The list of the hooks which are deprecated. The warning message is printed out in\n * the developer console when the hook is used.\n *\n * The Map key is represented by hook name and its value keeps message which whould be\n * printed out when the hook is used.\n *\n * Usage:\n * ```js\n * ...\n * New Map([\n *   ['beforeColumnExpand', 'The plugin hook \"beforeColumnExpand\" is deprecated. Use \"beforeColumnExpand2\" instead.'],\n * ])\n * ...\n * ```\n *\n *\n * @type {Map<string, string>}\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\nconst DEPRECATED_HOOKS = new Map([['beforeRemoveCellClassNames', 'The hook \"beforeRemoveCellClassNames\" is deprecated and will be removed in the next major release.']]);\nclass Hooks {\n  static getSingleton() {\n    return getGlobalSingleton();\n  }\n\n  /**\n   *\n   */\n  constructor() {\n    this.globalBucket = this.createEmptyBucket();\n  }\n\n  /**\n   * Returns a new object with empty handlers related to every registered hook name.\n   *\n   * @returns {object} The empty bucket object.\n   *\n   * @example\n   * ```js\n   * Handsontable.hooks.createEmptyBucket();\n   * // Results:\n   * {\n   * ...\n   * afterCreateCol: [],\n   * afterCreateRow: [],\n   * beforeInit: [],\n   * ...\n   * }\n   * ```\n   */\n  createEmptyBucket() {\n    const bucket = Object.create(null);\n\n    // eslint-disable-next-line no-return-assign\n    arrayEach(REGISTERED_HOOKS, hook => bucket[hook] = []);\n    return bucket;\n  }\n\n  /**\n   * Get hook bucket based on the context of the object or if argument is `undefined`, get the global hook bucket.\n   *\n   * @param {object} [context=null] A Handsontable instance.\n   * @returns {object} Returns a global or Handsontable instance bucket.\n   */\n  getBucket() {\n    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if (context) {\n      if (!context.pluginHookBucket) {\n        context.pluginHookBucket = this.createEmptyBucket();\n      }\n      return context.pluginHookBucket;\n    }\n    return this.globalBucket;\n  }\n\n  /**\n   * Adds a listener (globally or locally) to a specified hook name.\n   * If the `context` parameter is provided, the hook will be added only to the instance it references.\n   * Otherwise, the callback will be used everytime the hook fires on any Handsontable instance.\n   * You can provide an array of callback functions as the `callback` argument, this way they will all be fired\n   * once the hook is triggered.\n   *\n   * @see Core#addHook\n   * @param {string} key Hook name.\n   * @param {Function|Array} callback Callback function or an array of functions.\n   * @param {object} [context=null] The context for the hook callback to be added - a Handsontable instance or leave empty.\n   * @returns {Hooks} Instance of Hooks.\n   *\n   * @example\n   * ```js\n   * // single callback, added locally\n   * Handsontable.hooks.add('beforeInit', myCallback, hotInstance);\n   *\n   * // single callback, added globally\n   * Handsontable.hooks.add('beforeInit', myCallback);\n   *\n   * // multiple callbacks, added locally\n   * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback], hotInstance);\n   *\n   * // multiple callbacks, added globally\n   * Handsontable.hooks.add('beforeInit', [myCallback, anotherCallback]);\n   * ```\n   */\n  add(key, callback) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (Array.isArray(callback)) {\n      arrayEach(callback, c => this.add(key, c, context));\n    } else {\n      if (REMOVED_HOOKS.has(key)) {\n        warn(substitute(REMOVED_MESSAGE, {\n          hookName: key,\n          removedInVersion: REMOVED_HOOKS.get(key)\n        }));\n      }\n      if (DEPRECATED_HOOKS.has(key)) {\n        warn(DEPRECATED_HOOKS.get(key));\n      }\n      const bucket = this.getBucket(context);\n      if (typeof bucket[key] === 'undefined') {\n        this.register(key);\n        bucket[key] = [];\n      }\n      callback.skip = false;\n      if (bucket[key].indexOf(callback) === -1) {\n        // only add a hook if it has not already been added (adding the same hook twice is now silently ignored)\n        let foundInitialHook = false;\n        if (callback.initialHook) {\n          arrayEach(bucket[key], (cb, i) => {\n            if (cb.initialHook) {\n              bucket[key][i] = callback;\n              foundInitialHook = true;\n              return false;\n            }\n          });\n        }\n        if (!foundInitialHook) {\n          bucket[key].push(callback);\n        }\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Adds a listener to a specified hook. After the hook runs this listener will be automatically removed from the bucket.\n   *\n   * @see Core#addHookOnce\n   * @param {string} key Hook/Event name.\n   * @param {Function|Array} callback Callback function.\n   * @param {object} [context=null] A Handsontable instance.\n   *\n   * @example\n   * ```js\n   * Handsontable.hooks.once('beforeInit', myCallback, hotInstance);\n   * ```\n   */\n  once(key, callback) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    if (Array.isArray(callback)) {\n      arrayEach(callback, c => this.once(key, c, context));\n    } else {\n      callback.runOnce = true;\n      this.add(key, callback, context);\n    }\n  }\n\n  /**\n   * Removes a listener from a hook with a given name. If the `context` argument is provided, it removes a listener from a local hook assigned to the given Handsontable instance.\n   *\n   * @see Core#removeHook\n   * @param {string} key Hook/Event name.\n   * @param {Function} callback Callback function (needs the be the function that was previously added to the hook).\n   * @param {object} [context=null] Handsontable instance.\n   * @returns {boolean} Returns `true` if hook was removed, `false` otherwise.\n   *\n   * @example\n   * ```js\n   * Handsontable.hooks.remove('beforeInit', myCallback);\n   * ```\n   */\n  remove(key, callback) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    const bucket = this.getBucket(context);\n    if (typeof bucket[key] !== 'undefined') {\n      if (bucket[key].indexOf(callback) >= 0) {\n        callback.skip = true;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Checks whether there are any registered listeners for the provided hook name.\n   * If the `context` parameter is provided, it only checks for listeners assigned to the given Handsontable instance.\n   *\n   * @param {string} key Hook name.\n   * @param {object} [context=null] A Handsontable instance.\n   * @returns {boolean} `true` for success, `false` otherwise.\n   */\n  has(key) {\n    let context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    const bucket = this.getBucket(context);\n    return !!(bucket[key] !== void 0 && bucket[key].length);\n  }\n\n  /**\n   * Runs all local and global callbacks assigned to the hook identified by the `key` parameter.\n   * It returns either a return value from the last called callback or the first parameter (`p1`) passed to the `run` function.\n   *\n   * @see Core#runHooks\n   * @param {object} context Handsontable instance.\n   * @param {string} key Hook/Event name.\n   * @param {*} [p1] Parameter to be passed as an argument to the callback function.\n   * @param {*} [p2] Parameter to be passed as an argument to the callback function.\n   * @param {*} [p3] Parameter to be passed as an argument to the callback function.\n   * @param {*} [p4] Parameter to be passed as an argument to the callback function.\n   * @param {*} [p5] Parameter to be passed as an argument to the callback function.\n   * @param {*} [p6] Parameter to be passed as an argument to the callback function.\n   * @returns {*} Either a return value from the last called callback or `p1`.\n   *\n   * @example\n   * ```js\n   * Handsontable.hooks.run(hot, 'beforeInit');\n   * ```\n   */\n  run(context, key, p1, p2, p3, p4, p5, p6) {\n    {\n      const globalHandlers = this.globalBucket[key];\n      const length = globalHandlers ? globalHandlers.length : 0;\n      let index = 0;\n      if (length) {\n        // Do not optimise this loop with arrayEach or arrow function! If you do You'll decrease perf because of GC.\n        while (index < length) {\n          if (!globalHandlers[index] || globalHandlers[index].skip) {\n            index += 1;\n            /* eslint-disable no-continue */\n            continue;\n          }\n          const res = fastCall(globalHandlers[index], context, p1, p2, p3, p4, p5, p6);\n          if (res !== void 0) {\n            // eslint-disable-next-line no-param-reassign\n            p1 = res;\n          }\n          if (globalHandlers[index] && globalHandlers[index].runOnce) {\n            this.remove(key, globalHandlers[index]);\n          }\n          index += 1;\n        }\n      }\n    }\n    {\n      const localHandlers = this.getBucket(context)[key];\n      const length = localHandlers ? localHandlers.length : 0;\n      let index = 0;\n      if (length) {\n        // Do not optimise this loop with arrayEach or arrow function! If you do You'll decrease perf because of GC.\n        while (index < length) {\n          if (!localHandlers[index] || localHandlers[index].skip) {\n            index += 1;\n            /* eslint-disable no-continue */\n            continue;\n          }\n          const res = fastCall(localHandlers[index], context, p1, p2, p3, p4, p5, p6);\n          if (res !== void 0) {\n            // eslint-disable-next-line no-param-reassign\n            p1 = res;\n          }\n          if (localHandlers[index] && localHandlers[index].runOnce) {\n            this.remove(key, localHandlers[index], context);\n          }\n          index += 1;\n        }\n      }\n    }\n    return p1;\n  }\n\n  /**\n   * Destroy all listeners connected to the context. If no context is provided, the global listeners will be destroyed.\n   *\n   * @param {object} [context=null] A Handsontable instance.\n   * @example\n   * ```js\n   * // destroy the global listeners\n   * Handsontable.hooks.destroy();\n   *\n   * // destroy the local listeners\n   * Handsontable.hooks.destroy(hotInstance);\n   * ```\n   */\n  destroy() {\n    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    // eslint-disable-next-line no-return-assign\n    objectEach(this.getBucket(context), (value, key, bucket) => bucket[key].length = 0);\n  }\n\n  /**\n   * Registers a hook name (adds it to the list of the known hook names). Used by plugins.\n   * It is not necessary to call register, but if you use it, your plugin hook will be used returned by\n   * the `getRegistered` method. (which itself is used in the [demo](@/guides/getting-started/events-and-hooks.md)).\n   *\n   * @param {string} key The hook name.\n   *\n   * @example\n   * ```js\n   * Handsontable.hooks.register('myHook');\n   * ```\n   */\n  register(key) {\n    if (!this.isRegistered(key)) {\n      REGISTERED_HOOKS.push(key);\n    }\n  }\n\n  /**\n   * Deregisters a hook name (removes it from the list of known hook names).\n   *\n   * @param {string} key The hook name.\n   *\n   * @example\n   * ```js\n   * Handsontable.hooks.deregister('myHook');\n   * ```\n   */\n  deregister(key) {\n    if (this.isRegistered(key)) {\n      REGISTERED_HOOKS.splice(REGISTERED_HOOKS.indexOf(key), 1);\n    }\n  }\n\n  /**\n   * Returns a boolean value depending on if a hook by such name has been removed or deprecated.\n   *\n   * @param {string} hookName The hook name to check.\n   * @returns {boolean} Returns `true` if the provided hook name was marked as deprecated or\n   * removed from API, `false` otherwise.\n   * @example\n   * ```js\n   * Handsontable.hooks.isDeprecated('skipLengthCache');\n   *\n   * // Results:\n   * true\n   * ```\n   */\n  isDeprecated(hookName) {\n    return DEPRECATED_HOOKS.has(hookName) || REMOVED_HOOKS.has(hookName);\n  }\n\n  /**\n   * Returns a boolean depending on if a hook by such name has been registered.\n   *\n   * @param {string} hookName The hook name to check.\n   * @returns {boolean} `true` for success, `false` otherwise.\n   * @example\n   * ```js\n   * Handsontable.hooks.isRegistered('beforeInit');\n   *\n   * // Results:\n   * true\n   * ```\n   */\n  isRegistered(hookName) {\n    return REGISTERED_HOOKS.indexOf(hookName) >= 0;\n  }\n\n  /**\n   * Returns an array of registered hooks.\n   *\n   * @returns {Array} An array of registered hooks.\n   *\n   * @example\n   * ```js\n   * Handsontable.hooks.getRegistered();\n   *\n   * // Results:\n   * [\n   * ...\n   *   'beforeInit',\n   *   'beforeRender',\n   *   'beforeSetRangeEnd',\n   *   'beforeDrawBorders',\n   *   'beforeChange',\n   * ...\n   * ]\n   * ```\n   */\n  getRegistered() {\n    return REGISTERED_HOOKS;\n  }\n}\nconst globalSingleton = new Hooks();\n\n/**\n * @returns {Hooks}\n */\nfunction getGlobalSingleton() {\n  return globalSingleton;\n}\nexport default Hooks;","export const collection = new Map();\n\n/**\n * @param {string} namespace The namespace for the storage.\n * @returns {object}\n */\nexport default function staticRegister() {\n  let namespace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'common';\n  if (!collection.has(namespace)) {\n    collection.set(namespace, new Map());\n  }\n  const subCollection = collection.get(namespace);\n\n  /**\n   * Register an item to the collection. If the item under the same was exist earlier then this item will be replaced with new one.\n   *\n   * @param {string} name Identification of the item.\n   * @param {*} item Item to save in the collection.\n   */\n  function register(name, item) {\n    subCollection.set(name, item);\n  }\n\n  /**\n   * Retrieve the item from the collection.\n   *\n   * @param {string} name Identification of the item.\n   * @returns {*} Returns item which was saved in the collection.\n   */\n  function getItem(name) {\n    return subCollection.get(name);\n  }\n\n  /**\n   * Check if item under specified name is exists.\n   *\n   * @param {string} name Identification of the item.\n   * @returns {boolean} Returns `true` or `false` depends on if element exists in the collection.\n   */\n  function hasItem(name) {\n    return subCollection.has(name);\n  }\n\n  /**\n   * Retrieve list of names registered from the collection.\n   *\n   * @returns {Array} Returns an array of strings with all names under which objects are stored.\n   */\n  function getNames() {\n    return [...subCollection.keys()];\n  }\n\n  /**\n   * Retrieve all registered values from the collection.\n   *\n   * @returns {Array} Returns an array with all values stored in the collection.\n   */\n  function getValues() {\n    return [...subCollection.values()];\n  }\n  return {\n    register,\n    getItem,\n    hasItem,\n    getNames,\n    getValues\n  };\n}","import \"core-js/modules/es.error.cause.js\";\n/**\n * Utility to register editors and common namespace for keeping reference to all editor classes.\n */\nimport Hooks from \"../pluginHooks.mjs\";\nimport staticRegister from \"../utils/staticRegister.mjs\";\nconst registeredEditorClasses = new WeakMap();\nconst {\n  register,\n  getItem,\n  hasItem,\n  getNames,\n  getValues\n} = staticRegister('editors');\n\n/**\n * @param {BaseEditor} editorClass The editor constructor.\n */\nexport function RegisteredEditor(editorClass) {\n  const instances = {};\n  const Clazz = editorClass;\n  this.getConstructor = function () {\n    return editorClass;\n  };\n  this.getInstance = function (hotInstance) {\n    if (!(hotInstance.guid in instances)) {\n      instances[hotInstance.guid] = new Clazz(hotInstance);\n    }\n    return instances[hotInstance.guid];\n  };\n  Hooks.getSingleton().add('afterDestroy', function () {\n    instances[this.guid] = null;\n  });\n}\n\n/**\n * Returns instance (singleton) of editor class.\n *\n * @param {string} name Name of an editor under which it has been stored.\n * @param {object} hotInstance Instance of Handsontable.\n * @returns {Function} Returns instance of editor.\n */\nexport function _getEditorInstance(name, hotInstance) {\n  let editor;\n  if (typeof name === 'function') {\n    if (!registeredEditorClasses.get(name)) {\n      _register(null, name);\n    }\n    editor = registeredEditorClasses.get(name);\n  } else if (typeof name === 'string') {\n    editor = getItem(name);\n  } else {\n    throw Error('Only strings and functions can be passed as \"editor\" parameter');\n  }\n  if (!editor) {\n    throw Error(`No editor registered under name \"${name}\"`);\n  }\n  return editor.getInstance(hotInstance);\n}\n\n/**\n * Retrieve editor class.\n *\n * @param {string} name Editor identification.\n * @returns {Function} Returns editor class.\n */\nfunction _getItem(name) {\n  if (typeof name === 'function') {\n    return name;\n  }\n  if (!hasItem(name)) {\n    throw Error(`No registered editor found under \"${name}\" name`);\n  }\n  return getItem(name).getConstructor();\n}\n\n/**\n * Register editor class under specified name.\n *\n * @param {string} name Editor identification.\n * @param {Function} editorClass Editor class.\n */\nfunction _register(name, editorClass) {\n  if (name && typeof name !== 'string') {\n    editorClass = name;\n    name = editorClass.EDITOR_TYPE;\n  }\n  const editorWrapper = new RegisteredEditor(editorClass);\n  if (typeof name === 'string') {\n    register(name, editorWrapper);\n  }\n  registeredEditorClasses.set(editorClass, editorWrapper);\n}\nexport { _register as registerEditor, _getItem as getEditor, _getEditorInstance as getEditorInstance, hasItem as hasEditor, getNames as getRegisteredEditorNames, getValues as getRegisteredEditors };","import \"core-js/modules/es.array.push.js\";\nimport { stopImmediatePropagation as _stopImmediatePropagation } from \"./helpers/dom/event.mjs\";\n/**\n * Counter which tracks unregistered listeners (useful for detecting memory leaks).\n *\n * @type {number}\n */\nlet listenersCounter = 0;\n\n/**\n * Event DOM manager for internal use in Handsontable.\n *\n * @class EventManager\n * @util\n */\nclass EventManager {\n  /**\n   * @param {object} [context=null] An object to which event listeners will be stored.\n   * @private\n   */\n  constructor() {\n    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    this.context = context || this;\n\n    // TODO it modify external object. Rethink that.\n    if (!this.context.eventListeners) {\n      this.context.eventListeners = []; // TODO perf It would be more performant if every instance of EventManager tracked its own listeners only\n    }\n  }\n\n  /**\n   * Register specified listener (`eventName`) to the element.\n   *\n   * @param {Element} element Target element.\n   * @param {string} eventName Event name.\n   * @param {Function} callback Function which will be called after event occur.\n   * @param {AddEventListenerOptions|boolean} [options] Listener options if object or useCapture if boolean.\n   * @returns {Function} Returns function which you can easily call to remove that event.\n   */\n  addEventListener(element, eventName, callback) {\n    let options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    /**\n     * @param {Event} event The event object.\n     */\n    function callbackProxy(event) {\n      callback.call(this, extendEvent(event));\n    }\n    this.context.eventListeners.push({\n      element,\n      event: eventName,\n      callback,\n      callbackProxy,\n      options,\n      eventManager: this\n    });\n    element.addEventListener(eventName, callbackProxy, options);\n    listenersCounter += 1;\n    return () => {\n      this.removeEventListener(element, eventName, callback);\n    };\n  }\n\n  /**\n   * Remove the event listener previously registered.\n   *\n   * @param {Element} element Target element.\n   * @param {string} eventName Event name.\n   * @param {Function} callback Function to remove from the event target. It must be the same as during registration listener.\n   * @param {boolean} [onlyOwnEvents] Whether whould remove only events registered using this instance of EventManager.\n   */\n  removeEventListener(element, eventName, callback) {\n    let onlyOwnEvents = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let len = this.context.eventListeners.length;\n    let tmpEvent;\n    while (len) {\n      len -= 1;\n      tmpEvent = this.context.eventListeners[len];\n      if (tmpEvent.event === eventName && tmpEvent.element === element) {\n        if (callback && callback !== tmpEvent.callback) {\n          /* eslint-disable no-continue */\n          continue;\n        }\n        // TODO rethink that, main bulk is that it needs multi instances to handle same context, but with a different scopes.\n        // TODO I suppose much more efficient way will be comparing string with scope id, or any similar approach.\n        if (onlyOwnEvents && tmpEvent.eventManager !== this) {\n          continue;\n        }\n        this.context.eventListeners.splice(len, 1);\n        tmpEvent.element.removeEventListener(tmpEvent.event, tmpEvent.callbackProxy, tmpEvent.options);\n        listenersCounter -= 1;\n      }\n    }\n  }\n\n  /**\n   * Clear all previously registered events.\n   *\n   * @private\n   * @since 0.15.0-beta3\n   * @param {boolean} [onlyOwnEvents] Whether whould remove only events registered using this instance of EventManager.\n   */\n  clearEvents() {\n    let onlyOwnEvents = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!this.context) {\n      return;\n    }\n    let len = this.context.eventListeners.length;\n    while (len) {\n      len -= 1;\n      const event = this.context.eventListeners[len];\n      if (onlyOwnEvents && event.eventManager !== this) {\n        continue;\n      }\n      this.context.eventListeners.splice(len, 1);\n      event.element.removeEventListener(event.event, event.callbackProxy, event.options);\n      listenersCounter -= 1;\n    }\n  }\n\n  /**\n   * Clear all previously registered events.\n   */\n  clear() {\n    this.clearEvents();\n  }\n\n  /**\n   * Destroy instance of EventManager, clearing all events of the context.\n   */\n  destroy() {\n    this.clearEvents();\n    this.context = null;\n  }\n\n  /**\n   * Destroy instance of EventManager, clearing only the own events.\n   */\n  destroyWithOwnEventsOnly() {\n    this.clearEvents(true);\n    this.context = null;\n  }\n\n  /**\n   * Trigger event at the specified target element.\n   *\n   * @param {Element} element Target element.\n   * @param {string} eventName Event name.\n   */\n  fireEvent(element, eventName) {\n    let rootDocument = element.document;\n    let rootWindow = element;\n    if (!rootDocument) {\n      rootDocument = element.ownerDocument ? element.ownerDocument : element;\n      rootWindow = rootDocument.defaultView;\n    }\n    const options = {\n      bubbles: true,\n      cancelable: eventName !== 'mousemove',\n      view: rootWindow,\n      detail: 0,\n      screenX: 0,\n      screenY: 0,\n      clientX: 1,\n      clientY: 1,\n      ctrlKey: false,\n      altKey: false,\n      shiftKey: false,\n      metaKey: false,\n      button: 0,\n      relatedTarget: undefined\n    };\n    let event;\n    if (rootDocument.createEvent) {\n      event = rootDocument.createEvent('MouseEvents');\n      event.initMouseEvent(eventName, options.bubbles, options.cancelable, options.view, options.detail, options.screenX, options.screenY, options.clientX, options.clientY, options.ctrlKey, options.altKey, options.shiftKey, options.metaKey, options.button, options.relatedTarget || rootDocument.body.parentNode);\n    } else {\n      event = rootDocument.createEventObject();\n    }\n    if (element.dispatchEvent) {\n      element.dispatchEvent(event);\n    } else {\n      element.fireEvent(`on${eventName}`, event);\n    }\n  }\n}\n\n/**\n * @private\n * @param {Event} event The event object.\n * @returns {Event}\n */\nfunction extendEvent(event) {\n  const nativeStopImmediatePropagation = event.stopImmediatePropagation;\n  event.stopImmediatePropagation = function () {\n    nativeStopImmediatePropagation.apply(this);\n    _stopImmediatePropagation(this);\n  };\n  return event;\n}\nexport default EventManager;\n\n/**\n * @returns {number}\n */\nexport function getListenersCounter() {\n  return listenersCounter;\n}","import { isFunctionKey, isCtrlMetaKey } from \"./helpers/unicode.mjs\";\nimport { isImmediatePropagationStopped } from \"./helpers/dom/event.mjs\";\nimport { getEditorInstance } from \"./editors/registry.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { isDefined } from \"./helpers/mixed.mjs\";\nexport const SHORTCUTS_GROUP_NAVIGATION = 'editorManager.navigation';\nclass EditorManager {\n  /**\n   * @param {Core} instance The Handsontable instance.\n   * @param {TableMeta} tableMeta The table meta instance.\n   * @param {Selection} selection The selection instance.\n   */\n  constructor(instance, tableMeta, selection) {\n    /**\n     * Instance of {@link Handsontable}.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Reference to an instance's private GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n    this.tableMeta = tableMeta;\n    /**\n     * Instance of {@link Selection}.\n     *\n     * @private\n     * @type {Selection}\n     */\n    this.selection = selection;\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n    this.eventManager = new EventManager(instance);\n    /**\n     * Determines if EditorManager is destroyed.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.destroyed = false;\n    /**\n     * Determines if EditorManager is locked.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.lock = false;\n    /**\n     * A reference to an instance of the activeEditor.\n     *\n     * @private\n     * @type {BaseEditor}\n     */\n    this.activeEditor = void 0;\n    /**\n     * Keeps a reference to the cell's properties object.\n     *\n     * @type {object}\n     */\n    this.cellProperties = void 0;\n    this.instance.addHook('afterDocumentKeyDown', event => this.onAfterDocumentKeyDown(event));\n\n    // Open editor when text composition is started (IME editor)\n    this.eventManager.addEventListener(this.instance.rootDocument.documentElement, 'compositionstart', event => {\n      if (!this.destroyed && this.instance.isListening()) {\n        this.openEditor('', event);\n      }\n    });\n    this.instance.view._wt.update('onCellDblClick', (event, coords, elem) => this.onCellDblClick(event, coords, elem));\n  }\n\n  /**\n   * Lock the editor from being prepared and closed. Locking the editor prevents its closing and\n   * reinitialized after selecting the new cell. This feature is necessary for a mobile editor.\n   */\n  lockEditor() {\n    this.lock = true;\n  }\n\n  /**\n   * Unlock the editor from being prepared and closed. This method restores the original behavior of\n   * the editors where for every new selection its instances are closed.\n   */\n  unlockEditor() {\n    this.lock = false;\n  }\n\n  /**\n   * Destroy current editor, if exists.\n   *\n   * @param {boolean} revertOriginal If `false` and the cell using allowInvalid option,\n   *                                 then an editor won't be closed until validation is passed.\n   */\n  destroyEditor(revertOriginal) {\n    if (!this.lock) {\n      this.closeEditor(revertOriginal);\n    }\n  }\n\n  /**\n   * Get active editor.\n   *\n   * @returns {BaseEditor}\n   */\n  getActiveEditor() {\n    return this.activeEditor;\n  }\n\n  /**\n   * Prepare text input to be displayed at given grid cell.\n   */\n  prepareEditor() {\n    if (this.lock) {\n      return;\n    }\n    if (this.activeEditor && this.activeEditor.isWaiting()) {\n      this.closeEditor(false, false, dataSaved => {\n        if (dataSaved) {\n          this.prepareEditor();\n        }\n      });\n      return;\n    }\n    const {\n      highlight\n    } = this.instance.getSelectedRangeLast();\n    if (highlight.isHeader()) {\n      return;\n    }\n    const {\n      row,\n      col\n    } = highlight;\n    const modifiedCellCoords = this.instance.runHooks('modifyGetCellCoords', row, col);\n    let visualRowToCheck = row;\n    let visualColumnToCheck = col;\n    if (Array.isArray(modifiedCellCoords)) {\n      [visualRowToCheck, visualColumnToCheck] = modifiedCellCoords;\n    }\n\n    // Getting values using the modified coordinates.\n    this.cellProperties = this.instance.getCellMeta(visualRowToCheck, visualColumnToCheck);\n    if (!this.isCellEditable()) {\n      this.clearActiveEditor();\n      return;\n    }\n    const td = this.instance.getCell(row, col, true);\n\n    // Skip the preparation when the cell is not rendered in the DOM. The cell is scrolled out of\n    // the table's viewport.\n    if (td) {\n      const editorClass = this.instance.getCellEditor(this.cellProperties);\n      const prop = this.instance.colToProp(visualColumnToCheck);\n      const originalValue = this.instance.getSourceDataAtCell(this.instance.toPhysicalRow(visualRowToCheck), visualColumnToCheck);\n      this.activeEditor = getEditorInstance(editorClass, this.instance);\n      // Using not modified coordinates, as we need to get the table element using selection coordinates.\n      // There is an extra translation in the editor for saving value.\n      this.activeEditor.prepare(row, col, prop, td, originalValue, this.cellProperties);\n    }\n  }\n\n  /**\n   * Check is editor is opened/showed.\n   *\n   * @returns {boolean}\n   */\n  isEditorOpened() {\n    return this.activeEditor && this.activeEditor.isOpened();\n  }\n\n  /**\n   * Open editor with initial value.\n   *\n   * @param {null|string} newInitialValue New value from which editor will start if handled property it's not the `null`.\n   * @param {Event} event The event object.\n   * @param {boolean} [enableFullEditMode=false] When true, an editor works in full editing mode. Mode disallows closing an editor\n   *                                             when arrow keys are pressed.\n   */\n  openEditor(newInitialValue, event) {\n    let enableFullEditMode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!this.isCellEditable()) {\n      this.clearActiveEditor();\n      return;\n    }\n    if (!this.activeEditor) {\n      this.instance.scrollToFocusedCell();\n      this.prepareEditor();\n    }\n    if (this.activeEditor) {\n      if (enableFullEditMode) {\n        this.activeEditor.enableFullEditMode();\n      }\n      this.activeEditor.beginEditing(newInitialValue, event);\n    }\n  }\n\n  /**\n   * Close editor, finish editing cell.\n   *\n   * @param {boolean} restoreOriginalValue If `true`, then closes editor without saving value from the editor into a cell.\n   * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n   * @param {Function} callback The callback function, fired after editor closing.\n   */\n  closeEditor(restoreOriginalValue, isCtrlPressed, callback) {\n    if (this.activeEditor) {\n      this.activeEditor.finishEditing(restoreOriginalValue, isCtrlPressed, callback);\n    } else if (callback) {\n      callback(false);\n    }\n  }\n\n  /**\n   * Close editor and save changes.\n   *\n   * @param {boolean} isCtrlPressed If `true`, then editor will save value to each cell in the last selected range.\n   */\n  closeEditorAndSaveChanges(isCtrlPressed) {\n    this.closeEditor(false, isCtrlPressed);\n  }\n\n  /**\n   * Close editor and restore original value.\n   *\n   * @param {boolean} isCtrlPressed Indication of whether the CTRL button is pressed.\n   */\n  closeEditorAndRestoreOriginalValue(isCtrlPressed) {\n    this.closeEditor(true, isCtrlPressed);\n  }\n\n  /**\n   * Clears reference to an instance of the active editor.\n   *\n   * @private\n   */\n  clearActiveEditor() {\n    this.activeEditor = void 0;\n  }\n\n  /**\n   * Checks if the currently selected cell (pointed by selection highlight coords) is editable.\n   * Editable cell is when:\n   *   - the cell has defined an editor type;\n   *   - the cell is not marked as read-only;\n   *   - the cell is not hidden.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  isCellEditable() {\n    const selection = this.instance.getSelectedRangeLast();\n    if (!selection) {\n      return false;\n    }\n    const editorClass = this.instance.getCellEditor(this.cellProperties);\n    const {\n      row,\n      col\n    } = selection.highlight;\n    const {\n      rowIndexMapper,\n      columnIndexMapper\n    } = this.instance;\n    const isCellHidden = rowIndexMapper.isHidden(this.instance.toPhysicalRow(row)) || columnIndexMapper.isHidden(this.instance.toPhysicalColumn(col));\n    if (this.cellProperties.readOnly || !editorClass || isCellHidden) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Controls selection's behaviour after clicking `Enter`.\n   *\n   * @private\n   * @param {boolean} isShiftPressed If `true`, then the selection will move up after hit enter.\n   */\n  moveSelectionAfterEnter(isShiftPressed) {\n    const enterMoves = typeof this.tableMeta.enterMoves === 'function' ? this.tableMeta.enterMoves(event) : this.tableMeta.enterMoves;\n    if (isShiftPressed) {\n      // move selection up\n      this.selection.transformStart(-enterMoves.row, -enterMoves.col);\n    } else {\n      // move selection down (add a new row if needed)\n      this.selection.transformStart(enterMoves.row, enterMoves.col, true);\n    }\n  }\n\n  /**\n   * OnAfterDocumentKeyDown callback.\n   *\n   * @private\n   * @param {KeyboardEvent} event The keyboard event object.\n   */\n  onAfterDocumentKeyDown(event) {\n    const selection = this.instance.getSelectedRangeLast();\n    if (!this.instance.isListening() || !selection || selection.highlight.isHeader() || isImmediatePropagationStopped(event)) {\n      return;\n    }\n    const {\n      keyCode\n    } = event;\n\n    // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)\n    const isCtrlPressed = (event.ctrlKey || event.metaKey) && !event.altKey;\n    if (!this.activeEditor || this.activeEditor && !this.activeEditor.isWaiting()) {\n      if (!isFunctionKey(keyCode) && !isCtrlMetaKey(keyCode) && !isCtrlPressed && !this.isEditorOpened()) {\n        const shortcutManager = this.instance.getShortcutManager();\n        const editorContext = shortcutManager.getContext('editor');\n        const runOnlySelectedConfig = {\n          runOnlyIf: () => isDefined(this.instance.getSelected()),\n          group: SHORTCUTS_GROUP_NAVIGATION\n        };\n        editorContext.addShortcuts([{\n          keys: [['ArrowUp']],\n          callback: () => {\n            this.instance.selection.transformStart(-1, 0);\n          }\n        }, {\n          keys: [['ArrowDown']],\n          callback: () => {\n            this.instance.selection.transformStart(1, 0);\n          }\n        }, {\n          keys: [['ArrowLeft']],\n          callback: () => {\n            this.instance.selection.transformStart(0, -1 * this.instance.getDirectionFactor());\n          }\n        }, {\n          keys: [['ArrowRight']],\n          callback: () => {\n            this.instance.selection.transformStart(0, this.instance.getDirectionFactor());\n          }\n        }], runOnlySelectedConfig);\n        this.openEditor('', event);\n      }\n    }\n  }\n\n  /**\n   * OnCellDblClick callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   * @param {object} coords The cell coordinates.\n   * @param {HTMLTableCellElement|HTMLTableHeaderCellElement} elem The element which triggers the action.\n   */\n  onCellDblClick(event, coords, elem) {\n    // may be TD or TH\n    if (elem.nodeName === 'TD') {\n      this.openEditor(null, event, true);\n    }\n  }\n\n  /**\n   * Destroy the instance.\n   */\n  destroy() {\n    this.destroyed = true;\n    this.eventManager.destroy();\n  }\n}\nconst instances = new WeakMap();\n\n/**\n * @param {Core} hotInstance The Handsontable instance.\n * @param {TableMeta} tableMeta The table meta class instance.\n * @param {Selection} selection The selection instance.\n * @returns {EditorManager}\n */\nEditorManager.getInstance = function (hotInstance, tableMeta, selection) {\n  let editorManager = instances.get(hotInstance);\n  if (!editorManager) {\n    editorManager = new EditorManager(hotInstance, tableMeta, selection);\n    instances.set(hotInstance, editorManager);\n  }\n  return editorManager;\n};\nexport default EditorManager;","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { warn } from \"./helpers/console.mjs\";\nimport { isOutsideInput } from \"./helpers/dom/element.mjs\";\n/**\n * Possible focus modes.\n * - CELL - The browser's focus stays on the lastly selected cell element.\n * - MIXED - The browser's focus switches from the lastly selected cell element to the currently active editor's\n * `TEXTAREA` element after a delay defined in the manager.\n *\n * @type {{CELL: string, MIXED: string}}\n */\nconst FOCUS_MODES = Object.freeze({\n  CELL: 'cell',\n  MIXED: 'mixed'\n});\n\n/**\n * Manages the browser's focus in the table.\n */\nvar _hot = /*#__PURE__*/new WeakMap();\nvar _focusMode = /*#__PURE__*/new WeakMap();\nvar _refocusDelay = /*#__PURE__*/new WeakMap();\nvar _refocusElementGetter = /*#__PURE__*/new WeakMap();\nvar _getCurrentHighlightCoords = /*#__PURE__*/new WeakSet();\nvar _getSelectedCell = /*#__PURE__*/new WeakSet();\nvar _manageFocus = /*#__PURE__*/new WeakSet();\nvar _onUpdateSettings = /*#__PURE__*/new WeakSet();\nexport class FocusManager {\n  constructor(hotInstance) {\n    var _this = this;\n    /**\n     * Update the manager configuration after calling `updateSettings`.\n     *\n     * @private\n     * @param {object} newSettings The new settings passed to the `updateSettings` method.\n     */\n    _classPrivateMethodInitSpec(this, _onUpdateSettings);\n    /**\n     * Manage the browser's focus after cell selection.\n     *\n     * @private\n     */\n    _classPrivateMethodInitSpec(this, _manageFocus);\n    /**\n     * Get and return the currently selected and highlighted cell/header element.\n     *\n     * @private\n     * @returns {HTMLTableCellElement}\n     */\n    _classPrivateMethodInitSpec(this, _getSelectedCell);\n    /**\n     * Get the coordinates of the highlight of the currently selected cell/header.\n     *\n     * @returns {CellCoords}\n     */\n    _classPrivateMethodInitSpec(this, _getCurrentHighlightCoords);\n    /**\n     * The Handsontable instance.\n     */\n    _classPrivateFieldInitSpec(this, _hot, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The currently enabled focus mode.\n     * Can be either:\n     *\n     * - 'cell' - The browser's focus stays on the lastly selected cell element.\n     * - 'mixed' - The browser's focus switches from the lastly selected cell element to the currently active editor's\n     * `TEXTAREA` element after a delay defined in the manager.\n     *\n     * @type {string}\n     */\n    _classPrivateFieldInitSpec(this, _focusMode, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The delay after which the focus switches from the lastly selected cell to the active editor's `TEXTAREA`\n     * element if the focus mode is set to 'mixed'.\n     *\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _refocusDelay, {\n      writable: true,\n      value: 50\n    });\n    /**\n     * Getter function for the element to be used when refocusing the browser after a delay. If `null`, the active\n     * editor's `TEXTAREA` element will be used.\n     *\n     * @type {null|Function}\n     */\n    _classPrivateFieldInitSpec(this, _refocusElementGetter, {\n      writable: true,\n      value: null\n    });\n    const hotSettings = hotInstance.getSettings();\n    _classPrivateFieldSet(this, _hot, hotInstance);\n    _classPrivateFieldSet(this, _focusMode, hotSettings.imeFastEdit ? FOCUS_MODES.MIXED : FOCUS_MODES.CELL);\n    _classPrivateFieldGet(this, _hot).addHook('afterUpdateSettings', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _classPrivateMethodGet(_this, _onUpdateSettings, _onUpdateSettings2).call(_this, ...args);\n    });\n    _classPrivateFieldGet(this, _hot).addHook('afterSelection', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _classPrivateMethodGet(_this, _manageFocus, _manageFocus2).call(_this, ...args);\n    });\n  }\n\n  /**\n   * Get the current focus mode.\n   *\n   * @returns {'cell' | 'mixed'}\n   */\n  getFocusMode() {\n    return _classPrivateFieldGet(this, _focusMode);\n  }\n\n  /**\n   * Set the focus mode.\n   *\n   * @param {'cell' | 'mixed'} focusMode The new focus mode.\n   */\n  setFocusMode(focusMode) {\n    if (Object.values(FOCUS_MODES).includes(focusMode)) {\n      _classPrivateFieldSet(this, _focusMode, focusMode);\n    } else {\n      warn(`\"${focusMode}\" is not a valid focus mode.`);\n    }\n  }\n\n  /**\n   * Get the delay after which the focus will change from the cell elements to the active editor's `TEXTAREA`\n   * element if the focus mode is set to 'mixed'.\n   *\n   * @returns {number} Delay in milliseconds.\n   */\n  getRefocusDelay() {\n    return _classPrivateFieldGet(this, _refocusDelay);\n  }\n\n  /**\n   * Set the delay after which the focus will change from the cell elements to the active editor's `TEXTAREA`\n   * element if the focus mode is set to 'mixed'.\n   *\n   * @param {number} delay Delay in milliseconds.\n   */\n  setRefocusDelay(delay) {\n    _classPrivateFieldSet(this, _refocusDelay, delay);\n  }\n\n  /**\n   * Set the function to be used as the \"refocus element\" getter. It should return a focusable HTML element.\n   *\n   * @param {Function} getRefocusElementFunction The refocus element getter.\n   */\n  setRefocusElementGetter(getRefocusElementFunction) {\n    _classPrivateFieldSet(this, _refocusElementGetter, getRefocusElementFunction);\n  }\n\n  /**\n   * Get the element to be used when refocusing the browser after a delay in case of the focus mode being 'mixed'.\n   *\n   * @returns {HTMLTextAreaElement|HTMLElement|undefined}\n   */\n  getRefocusElement() {\n    if (typeof _classPrivateFieldGet(this, _refocusElementGetter) === 'function') {\n      return _classPrivateFieldGet(this, _refocusElementGetter).call(this);\n    } else {\n      var _classPrivateFieldGet2;\n      return (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _hot).getActiveEditor()) === null || _classPrivateFieldGet2 === void 0 ? void 0 : _classPrivateFieldGet2.TEXTAREA;\n    }\n  }\n\n  /**\n   * Set the browser's focus to the highlighted cell of the last selection.\n   *\n   * @param {HTMLTableCellElement} [selectedCell] The highlighted cell/header element.\n   */\n  focusOnHighlightedCell(selectedCell) {\n    var _classPrivateFieldGet3;\n    const currentHighlightCoords = _classPrivateMethodGet(this, _getCurrentHighlightCoords, _getCurrentHighlightCoords2).call(this);\n    const currentlySelectedHighlight = selectedCell || _classPrivateMethodGet(this, _getSelectedCell, _getSelectedCell2).call(this);\n    let elementToBeFocused = _classPrivateFieldGet(this, _hot).runHooks('modifyFocusedElement', currentHighlightCoords.row, currentHighlightCoords.col, currentlySelectedHighlight);\n    if (!(elementToBeFocused instanceof HTMLElement)) {\n      elementToBeFocused = currentlySelectedHighlight;\n    }\n    if (elementToBeFocused && !((_classPrivateFieldGet3 = _classPrivateFieldGet(this, _hot).getActiveEditor()) !== null && _classPrivateFieldGet3 !== void 0 && _classPrivateFieldGet3.isOpened())) {\n      elementToBeFocused.focus({\n        preventScroll: true\n      });\n    }\n  }\n\n  /**\n   * Set the focus to the active editor's `TEXTAREA` element after the provided delay. If no delay is provided, it\n   * will be taken from the manager's configuration.\n   *\n   * @param {number} delay Delay in milliseconds.\n   */\n  refocusToEditorTextarea() {\n    let delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _classPrivateFieldGet(this, _refocusDelay);\n    const refocusElement = this.getRefocusElement();\n\n    // Re-focus on the editor's `TEXTAREA` element (or a predefined element) if the `imeFastEdit` option is enabled.\n    if (_classPrivateFieldGet(this, _hot).getSettings().imeFastEdit && !!refocusElement) {\n      _classPrivateFieldGet(this, _hot)._registerTimeout(() => {\n        refocusElement.select();\n      }, delay);\n    }\n  }\n}\nfunction _getCurrentHighlightCoords2() {\n  const lastSelectedRange = _classPrivateFieldGet(this, _hot).getSelectedRangeLast();\n  return lastSelectedRange.highlight;\n}\nfunction _getSelectedCell2() {\n  const selectedCellCoords = _classPrivateMethodGet(this, _getCurrentHighlightCoords, _getCurrentHighlightCoords2).call(this);\n  return _classPrivateFieldGet(this, _hot).getCell(selectedCellCoords.row, selectedCellCoords.col, true);\n}\nfunction _manageFocus2() {\n  const selectedCell = _classPrivateMethodGet(this, _getSelectedCell, _getSelectedCell2).call(this);\n  const {\n    activeElement\n  } = _classPrivateFieldGet(this, _hot).rootDocument;\n\n  // Blurring the `activeElement` removes the unwanted border around the focusable element (#6877)\n  // and resets the `document.activeElement` property. The blurring should happen only when the\n  // previously selected input element has not belonged to the Handsontable editor. If blurring is\n  // triggered for all elements, there is a problem with the disappearing IME editor (#9672).\n  if (activeElement && isOutsideInput(activeElement)) {\n    activeElement.blur();\n  }\n  this.focusOnHighlightedCell(selectedCell);\n  if (this.getFocusMode() === FOCUS_MODES.MIXED && selectedCell.nodeName === 'TD') {\n    _classPrivateFieldGet(this, _hot).addHookOnce('afterSelectionEnd', () => {\n      this.refocusToEditorTextarea();\n    });\n  }\n}\nfunction _onUpdateSettings2(newSettings) {\n  if (newSettings.imeFastEdit && this.getFocusMode() !== FOCUS_MODES.MIXED) {\n    this.setFocusMode(FOCUS_MODES.MIXED);\n  } else if (!newSettings.imeFastEdit && this.getFocusMode() !== FOCUS_MODES.CELL) {\n    this.setFocusMode(FOCUS_MODES.CELL);\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { isEmpty } from \"./../helpers/mixed.mjs\";\nconst ESCAPED_HTML_CHARS = {\n  '&nbsp;': '\\x20',\n  '&amp;': '&',\n  '&lt;': '<',\n  '&gt;': '>'\n};\nconst regEscapedChars = new RegExp(Object.keys(ESCAPED_HTML_CHARS).map(key => `(${key})`).join('|'), 'gi');\n\n/**\n * Verifies if node is an HTMLTable element.\n *\n * @param {Node} element Node to verify if it's an HTMLTable.\n * @returns {boolean}\n */\nfunction isHTMLTable(element) {\n  return (element && element.nodeName || '') === 'TABLE';\n}\n\n/**\n * Converts Handsontable into HTMLTableElement.\n *\n * @param {Core} instance The Handsontable instance.\n * @returns {string} OuterHTML of the HTMLTableElement.\n */\nexport function instanceToHTML(instance) {\n  const hasColumnHeaders = instance.hasColHeaders();\n  const hasRowHeaders = instance.hasRowHeaders();\n  const coords = [hasColumnHeaders ? -1 : 0, hasRowHeaders ? -1 : 0, instance.countRows() - 1, instance.countCols() - 1];\n  const data = instance.getData(...coords);\n  const countRows = data.length;\n  const countCols = countRows > 0 ? data[0].length : 0;\n  const TABLE = ['<table>', '</table>'];\n  const THEAD = hasColumnHeaders ? ['<thead>', '</thead>'] : [];\n  const TBODY = ['<tbody>', '</tbody>'];\n  const rowModifier = hasRowHeaders ? 1 : 0;\n  const columnModifier = hasColumnHeaders ? 1 : 0;\n  for (let row = 0; row < countRows; row += 1) {\n    const isColumnHeadersRow = hasColumnHeaders && row === 0;\n    const CELLS = [];\n    for (let column = 0; column < countCols; column += 1) {\n      const isRowHeadersColumn = !isColumnHeadersRow && hasRowHeaders && column === 0;\n      let cell = '';\n      if (isColumnHeadersRow) {\n        cell = `<th>${instance.getColHeader(column - rowModifier)}</th>`;\n      } else if (isRowHeadersColumn) {\n        cell = `<th>${instance.getRowHeader(row - columnModifier)}</th>`;\n      } else {\n        const cellData = data[row][column];\n        const {\n          hidden,\n          rowspan,\n          colspan\n        } = instance.getCellMeta(row - columnModifier, column - rowModifier);\n        if (!hidden) {\n          const attrs = [];\n          if (rowspan) {\n            attrs.push(`rowspan=\"${rowspan}\"`);\n          }\n          if (colspan) {\n            attrs.push(`colspan=\"${colspan}\"`);\n          }\n          if (isEmpty(cellData)) {\n            cell = `<td ${attrs.join(' ')}></td>`;\n          } else {\n            const value = cellData.toString().replace('<', '&lt;').replace('>', '&gt;').replace(/(<br(\\s*|\\/)>(\\r\\n|\\n)?|\\r\\n|\\n)/g, '<br>\\r\\n').replace(/\\x20/gi, '&nbsp;').replace(/\\t/gi, '&#9;');\n            cell = `<td ${attrs.join(' ')}>${value}</td>`;\n          }\n        }\n      }\n      CELLS.push(cell);\n    }\n    const TR = ['<tr>', ...CELLS, '</tr>'].join('');\n    if (isColumnHeadersRow) {\n      THEAD.splice(1, 0, TR);\n    } else {\n      TBODY.splice(-1, 0, TR);\n    }\n  }\n  TABLE.splice(1, 0, THEAD.join(''), TBODY.join(''));\n  return TABLE.join('');\n}\n\n/**\n * Converts 2D array into HTMLTableElement.\n *\n * @param {Array} input Input array which will be converted to HTMLTable.\n * @returns {string} OuterHTML of the HTMLTableElement.\n */\n// eslint-disable-next-line no-restricted-globals\nexport function _dataToHTML(input) {\n  const inputLen = input.length;\n  const result = ['<table>'];\n  for (let row = 0; row < inputLen; row += 1) {\n    const rowData = input[row];\n    const columnsLen = rowData.length;\n    const columnsResult = [];\n    if (row === 0) {\n      result.push('<tbody>');\n    }\n    for (let column = 0; column < columnsLen; column += 1) {\n      const cellData = rowData[column];\n      const parsedCellData = isEmpty(cellData) ? '' : cellData.toString().replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/(<br(\\s*|\\/)>(\\r\\n|\\n)?|\\r\\n|\\n)/g, '<br>\\r\\n').replace(/\\x20{2,}/gi, substring => {\n        // The way how Excel serializes data with at least two spaces.\n        return `<span style=\"mso-spacerun: yes\">${'&nbsp;'.repeat(substring.length - 1)} </span>`;\n      }).replace(/\\t/gi, '&#9;');\n      columnsResult.push(`<td>${parsedCellData}</td>`);\n    }\n    result.push('<tr>', ...columnsResult, '</tr>');\n    if (row + 1 === inputLen) {\n      result.push('</tbody>');\n    }\n  }\n  result.push('</table>');\n  return result.join('');\n}\n\n/**\n * Converts HTMLTable or string into Handsontable configuration object.\n *\n * @param {Element|string} element Node element which should contain `<table>...</table>`.\n * @param {Document} [rootDocument] The document window owner.\n * @returns {object} Return configuration object. Contains keys as DefaultSettings.\n */\n// eslint-disable-next-line no-restricted-globals\nexport function htmlToGridSettings(element) {\n  let rootDocument = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;\n  const settingsObj = {};\n  const fragment = rootDocument.createDocumentFragment();\n  const tempElem = rootDocument.createElement('div');\n  fragment.appendChild(tempElem);\n  let checkElement = element;\n  if (typeof checkElement === 'string') {\n    const escapedAdjacentHTML = checkElement.replace(/<td\\b[^>]*?>([\\s\\S]*?)<\\/\\s*td>/g, cellFragment => {\n      const openingTag = cellFragment.match(/<td\\b[^>]*?>/g)[0];\n      const cellValue = cellFragment.substring(openingTag.length, cellFragment.lastIndexOf('<')).replace(/(<(?!br)([^>]+)>)/gi, '');\n      const closingTag = '</td>';\n      return `${openingTag}${cellValue}${closingTag}`;\n    });\n    tempElem.insertAdjacentHTML('afterbegin', `${escapedAdjacentHTML}`);\n    checkElement = tempElem.querySelector('table');\n  }\n  if (!checkElement || !isHTMLTable(checkElement)) {\n    return;\n  }\n  const generator = tempElem.querySelector('meta[name$=\"enerator\"]');\n  const hasRowHeaders = checkElement.querySelector('tbody th') !== null;\n  const trElement = checkElement.querySelector('tr');\n  const countCols = !trElement ? 0 : Array.from(trElement.cells).reduce((cols, cell) => cols + cell.colSpan, 0) - (hasRowHeaders ? 1 : 0);\n  const fixedRowsBottom = checkElement.tFoot && Array.from(checkElement.tFoot.rows) || [];\n  const fixedRowsTop = [];\n  let hasColHeaders = false;\n  let thRowsLen = 0;\n  let countRows = 0;\n  if (checkElement.tHead) {\n    const thRows = Array.from(checkElement.tHead.rows).filter(tr => {\n      const isDataRow = tr.querySelector('td') !== null;\n      if (isDataRow) {\n        fixedRowsTop.push(tr);\n      }\n      return !isDataRow;\n    });\n    thRowsLen = thRows.length;\n    hasColHeaders = thRowsLen > 0;\n    if (thRowsLen > 1) {\n      settingsObj.nestedHeaders = Array.from(thRows).reduce((rows, row) => {\n        const headersRow = Array.from(row.cells).reduce((headers, header, currentIndex) => {\n          if (hasRowHeaders && currentIndex === 0) {\n            return headers;\n          }\n          const {\n            colSpan: colspan,\n            innerHTML\n          } = header;\n          const nextHeader = colspan > 1 ? {\n            label: innerHTML,\n            colspan\n          } : innerHTML;\n          headers.push(nextHeader);\n          return headers;\n        }, []);\n        rows.push(headersRow);\n        return rows;\n      }, []);\n    } else if (hasColHeaders) {\n      settingsObj.colHeaders = Array.from(thRows[0].children).reduce((headers, header, index) => {\n        if (hasRowHeaders && index === 0) {\n          return headers;\n        }\n        headers.push(header.innerHTML);\n        return headers;\n      }, []);\n    }\n  }\n  if (fixedRowsTop.length) {\n    settingsObj.fixedRowsTop = fixedRowsTop.length;\n  }\n  if (fixedRowsBottom.length) {\n    settingsObj.fixedRowsBottom = fixedRowsBottom.length;\n  }\n  const dataRows = [...fixedRowsTop, ...Array.from(checkElement.tBodies).reduce((sections, section) => {\n    sections.push(...Array.from(section.rows));\n    return sections;\n  }, []), ...fixedRowsBottom];\n  countRows = dataRows.length;\n  const dataArr = new Array(countRows);\n  for (let r = 0; r < countRows; r++) {\n    dataArr[r] = new Array(countCols);\n  }\n  const mergeCells = [];\n  const rowHeaders = [];\n  for (let row = 0; row < countRows; row++) {\n    const tr = dataRows[row];\n    const cells = Array.from(tr.cells);\n    const cellsLen = cells.length;\n    for (let cellId = 0; cellId < cellsLen; cellId++) {\n      const cell = cells[cellId];\n      const {\n        nodeName,\n        innerHTML,\n        rowSpan: rowspan,\n        colSpan: colspan\n      } = cell;\n      const col = dataArr[row].findIndex(value => value === void 0);\n      if (nodeName === 'TD') {\n        if (rowspan > 1 || colspan > 1) {\n          for (let rstart = row; rstart < row + rowspan; rstart++) {\n            if (rstart < countRows) {\n              for (let cstart = col; cstart < col + colspan; cstart++) {\n                dataArr[rstart][cstart] = null;\n              }\n            }\n          }\n          const styleAttr = cell.getAttribute('style');\n          const ignoreMerge = styleAttr && styleAttr.includes('mso-ignore:colspan');\n          if (!ignoreMerge) {\n            mergeCells.push({\n              col,\n              row,\n              rowspan,\n              colspan\n            });\n          }\n        }\n        let cellValue = '';\n        if (generator && /excel/gi.test(generator.content)) {\n          cellValue = innerHTML.replace(/[\\r\\n][\\x20]{0,2}/g, '\\x20').replace(/<br(\\s*|\\/)>[\\r\\n]?[\\x20]{0,3}/gim, '\\r\\n');\n        } else {\n          cellValue = innerHTML.replace(/<br(\\s*|\\/)>[\\r\\n]?/gim, '\\r\\n');\n        }\n        dataArr[row][col] = cellValue.replace(regEscapedChars, match => ESCAPED_HTML_CHARS[match]);\n      } else {\n        rowHeaders.push(innerHTML);\n      }\n    }\n  }\n  if (mergeCells.length) {\n    settingsObj.mergeCells = mergeCells;\n  }\n  if (rowHeaders.length) {\n    settingsObj.rowHeaders = rowHeaders;\n  }\n  if (dataArr.length) {\n    settingsObj.data = dataArr;\n  }\n  return settingsObj;\n}","/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * Checks if the passed value is numeric one. For example these values (passed as string or number)\n * are considered as numeric values:\n *  - 0.001\n *  - .001\n *  - - 10000\n *  - 10000\n *  - 1e+26\n *  - 22e-26\n *  - .45e+26\n *  - 0xabcdef (hex)\n *  - 0x1 (hex)\n *\n * @param {*} value The value to check.\n * @param {string[]} additionalDelimiters An additional delimiters to be used while checking the numeric value.\n * @returns {boolean}\n */\nexport function isNumeric(value) {\n  let additionalDelimiters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const type = typeof value;\n  if (type === 'number') {\n    return !isNaN(value) && isFinite(value);\n  } else if (type === 'string') {\n    if (value.length === 0) {\n      return false;\n    } else if (value.length === 1) {\n      return /\\d/.test(value);\n    }\n    const delimiter = Array.from(new Set(['.', ...additionalDelimiters])).map(d => `\\\\${d}`).join('|');\n    return new RegExp(`^[+-]?\\\\s*(((${delimiter})?\\\\d+((${delimiter})\\\\d+)?(e[+-]?\\\\d+)?)|(0x[a-f\\\\d]+))$`, 'i').test(value.trim());\n  } else if (type === 'object') {\n    return !!value && typeof value.valueOf() === 'number' && !(value instanceof Date);\n  }\n  return false;\n}\n/* eslint-enable jsdoc/require-description-complete-sentence */\n\n/**\n * Checks if the passed value is numeric-like value. The helper returns `true` for the same\n * values as for the `isNumeric` function plus `true` for numbers delimited by comma.\n *\n * @param {*} value The value to check.\n * @returns {boolean}\n */\nexport function isNumericLike(value) {\n  return isNumeric(value, [',']);\n}\n\n/**\n * A specialized version of `.forEach` defined by ranges.\n *\n * @param {number} rangeFrom The number from start iterate.\n * @param {number|Function} rangeTo The number where finish iterate or function as a iteratee.\n * @param {Function} [iteratee] The function invoked per iteration.\n */\nexport function rangeEach(rangeFrom, rangeTo, iteratee) {\n  let index = -1;\n  if (typeof rangeTo === 'function') {\n    iteratee = rangeTo;\n    rangeTo = rangeFrom;\n  } else {\n    index = rangeFrom - 1;\n  }\n\n  /* eslint-disable-next-line no-plusplus */\n  while (++index <= rangeTo) {\n    if (iteratee(index) === false) {\n      break;\n    }\n  }\n}\n\n/**\n * A specialized version of `.forEach` defined by ranges iterable in reverse order.\n *\n * @param {number} rangeFrom The number from start iterate.\n * @param {number|Function} rangeTo The number where finish iterate or function as a iteratee.\n * @param {Function} [iteratee] The function invoked per iteration.\n */\nexport function rangeEachReverse(rangeFrom, rangeTo, iteratee) {\n  let index = rangeFrom + 1;\n  if (typeof rangeTo === 'function') {\n    iteratee = rangeTo;\n    rangeTo = 0;\n  }\n  /* eslint-disable-next-line no-plusplus */\n  while (--index >= rangeTo) {\n    if (iteratee(index) === false) {\n      break;\n    }\n  }\n}\n\n/**\n * Calculate value from percent.\n *\n * @param {number} value Base value from percent will be calculated.\n * @param {string|number} percent Can be number or string (eq. `'33%'`).\n * @returns {number}\n */\nexport function valueAccordingPercent(value, percent) {\n  percent = parseInt(percent.toString().replace('%', ''), 10);\n  percent = isNaN(percent) ? 0 : percent;\n  return parseInt(value * percent / 100, 10);\n}\n\n/**\n * Clamps the value between min and max.\n *\n * @param {number} value The base number value.\n * @param {number} minValue The max number value.\n * @param {number} maxValue The min number value.\n * @returns {number}\n */\nexport function clamp(value, minValue, maxValue) {\n  if (Math.min(value, minValue) === value) {\n    return minValue;\n  } else if (Math.max(value, maxValue) === value) {\n    return maxValue;\n  }\n  return value;\n}","import \"core-js/modules/es.error.cause.js\";\nimport { isNumeric } from \"../../helpers/number.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nexport const ASC = 'asc';\nexport const DESC = 'desc';\nconst ORDER_MAP = new Map([[ASC, [-1, 1]], [DESC, [1, -1]]]);\nconst DEFAULT_ERROR_PRIORITY_EXISTS = priority => `The priority '${priority}' is already declared in a map.`;\nconst DEFAULT_ERROR_PRIORITY_NAN = priority => `The priority '${priority}' is not a number.`;\n\n/**\n * @typedef {object} PriorityMap\n * @property {Function} addItem Adds items to the priority map.\n * @property {Function} getItems Gets items from the passed map in a ASC or DESC order of priorities.\n */\n/**\n * Creates a new priority map.\n *\n * @param {object} config The config for priority map.\n * @param {Function} config.errorPriorityExists The function to generate a custom error message if priority is already taken.\n * @param {Function} config.errorPriorityNaN The function to generate a custom error message if priority is not a number.\n * @returns {PriorityMap}\n */\nexport function createPriorityMap() {\n  let {\n    errorPriorityExists,\n    errorPriorityNaN\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const priorityMap = new Map();\n  errorPriorityExists = isFunction(errorPriorityExists) ? errorPriorityExists : DEFAULT_ERROR_PRIORITY_EXISTS;\n  errorPriorityNaN = isFunction(errorPriorityNaN) ? errorPriorityNaN : DEFAULT_ERROR_PRIORITY_NAN;\n\n  /**\n   * Adds items to priority map. Throws an error if `priority` is not a number or if is already added.\n   *\n   * @param {number} priority The priority for adding item.\n   * @param {*} item The adding item.\n   */\n  function addItem(priority, item) {\n    if (!isNumeric(priority)) {\n      throw new Error(errorPriorityNaN(priority));\n    }\n    if (priorityMap.has(priority)) {\n      throw new Error(errorPriorityExists(priority));\n    }\n    priorityMap.set(priority, item);\n  }\n\n  /**\n   * Gets items from the passed map in a ASC or DESC order of priorities.\n   *\n   * @param {string} [order] The order for getting items. ASC is an default.\n   * @returns {*}\n   */\n  function getItems() {\n    let order = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ASC;\n    const [left, right] = ORDER_MAP.get(order) || ORDER_MAP.get(ASC);\n    return [...priorityMap]\n    // we want to be sure we sort over a priority key\n    // if we are sure we can remove custom compare function\n    // then we should replace next line with a default `.sort()`\n    .sort((a, b) => a[0] < b[0] ? left : right).map(item => item[1]);\n  }\n  return {\n    addItem,\n    getItems\n  };\n}","import \"core-js/modules/es.error.cause.js\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nconst DEFAULT_ERROR_ID_EXISTS = id => `The id '${id}' is already declared in a map.`;\n\n/**\n * @typedef {object} UniqueMap\n * @property {Function} addItem Adds a new item to the unique map.\n * @property {Function} clear Clears the map.\n * @property {Function} getId Returns ID for the passed item.\n * @property {Function} getItem Gets item from the passed ID.\n * @property {Function} getItems Gets all items from the map.\n * @property {Function} hasItem Verifies if the passed ID exists in a map.\n * @property {Function} removeItem Removes item from the passed id if exists.\n */\n/**\n * Creates a new unique map.\n *\n * @param {object} config The config for priority queue.\n * @param {Function} config.errorIdExists The function to generate custom message if ID is already taken.\n * @returns {UniqueMap}\n */\nexport function createUniqueMap() {\n  let {\n    errorIdExists\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const uniqueMap = new Map();\n  errorIdExists = isFunction(errorIdExists) ? errorIdExists : DEFAULT_ERROR_ID_EXISTS;\n\n  /**\n   * Adds a new item to the unique map. Throws error if `id` is already added.\n   *\n   * @param {*} id The ID of the adding item.\n   * @param {*} item The adding item.\n   */\n  function addItem(id, item) {\n    if (hasItem(id)) {\n      throw new Error(errorIdExists(id));\n    }\n    uniqueMap.set(id, item);\n  }\n\n  /**\n   * Removes item from the passed id if exists.\n   *\n   * @param {*} id The ID to remove.\n   * @returns {boolean}\n   */\n  function removeItem(id) {\n    return uniqueMap.delete(id);\n  }\n\n  /**\n   * Clears the map.\n   */\n  function clear() {\n    uniqueMap.clear();\n  }\n\n  /**\n   * Returns ID for the passed item.\n   *\n   * @param {*} item The item of the getting ID.\n   * @returns {*}\n   */\n  function getId(item) {\n    const [itemId] = getItems().find(_ref => {\n      let [id, element] = _ref;\n      if (item === element) {\n        return id;\n      }\n      return false;\n    }) || [null];\n    return itemId;\n  }\n\n  /**\n   * Returns item from the passed ID.\n   *\n   * @param {*} id The ID of the getting item.\n   * @returns {*}\n   */\n  function getItem(id) {\n    return uniqueMap.get(id);\n  }\n\n  /**\n   * Gets all items from the map.\n   *\n   * @returns {Array}\n   */\n  function getItems() {\n    return [...uniqueMap];\n  }\n\n  /**\n   * Verifies if the passed ID exists in a map.\n   *\n   * @param {*} id The ID to check if registered.\n   * @returns {boolean}\n   */\n  function hasItem(id) {\n    return uniqueMap.has(id);\n  }\n  return {\n    addItem,\n    clear,\n    getId,\n    getItem,\n    getItems,\n    hasItem,\n    removeItem\n  };\n}","import \"core-js/modules/es.error.cause.js\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nconst DEFAULT_ERROR_ITEM_EXISTS = item => `'${item}' value is already declared in a unique set.`;\n\n/**\n * @typedef {object} UniqueSet\n * @property {Function} addItem Adds items to the priority set.\n * @property {Function} getItems Gets items from the set in order of addition.\n */\n/**\n * Creates a new unique set.\n *\n * @param {object} config The config for priority set.\n * @param {Function} config.errorItemExists The function to generate custom error message if item is already in the set.\n * @returns {UniqueSet}\n */\nexport function createUniqueSet() {\n  let {\n    errorItemExists\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const uniqueSet = new Set();\n  errorItemExists = isFunction(errorItemExists) ? errorItemExists : DEFAULT_ERROR_ITEM_EXISTS;\n\n  /**\n   * Adds items to the unique set. Throws an error if `item` is already added.\n   *\n   * @param {*} item The adding item.\n   */\n  function addItem(item) {\n    if (uniqueSet.has(item)) {\n      throw new Error(errorItemExists(item));\n    }\n    uniqueSet.add(item);\n  }\n\n  /**\n   * Gets items from the set in order of addition.\n   *\n   * @returns {*}\n   */\n  function getItems() {\n    return [...uniqueSet];\n  }\n\n  /**\n   * Clears the unique set.\n   */\n  function clear() {\n    uniqueSet.clear();\n  }\n  return {\n    addItem,\n    clear,\n    getItems\n  };\n}","import \"core-js/modules/es.error.cause.js\";\n/**\n * Utility to register plugins and common namespace for keeping the reference to all plugins classes.\n */\nimport { toUpperCaseFirst } from \"../helpers/string.mjs\";\nimport { createPriorityMap } from \"../utils/dataStructures/priorityMap.mjs\";\nimport { createUniqueMap } from \"../utils/dataStructures/uniqueMap.mjs\";\nimport { createUniqueSet } from \"../utils/dataStructures/uniqueSet.mjs\";\nconst ERROR_PLUGIN_REGISTERED = pluginName => `There is already registered \"${pluginName}\" plugin.`;\nconst ERROR_PRIORITY_REGISTERED = priority => `There is already registered plugin on priority \"${priority}\".`;\nconst ERROR_PRIORITY_NAN = priority => `The priority \"${priority}\" is not a number.`;\n\n/**\n * Stores plugins' names' queue with their priorities.\n */\nconst priorityPluginsQueue = createPriorityMap({\n  errorPriorityExists: ERROR_PRIORITY_REGISTERED,\n  errorPriorityNaN: ERROR_PRIORITY_NAN\n});\n/**\n * Stores plugins names' queue by registration order.\n */\nconst uniquePluginsQueue = createUniqueSet({\n  errorItemExists: ERROR_PLUGIN_REGISTERED\n});\n/**\n * Stores plugins references between their name and class.\n */\nconst uniquePluginsList = createUniqueMap({\n  errorIdExists: ERROR_PLUGIN_REGISTERED\n});\n\n/**\n * Gets registered plugins' names in the following order:\n * 1) Plugins registered with a defined priority attribute, in the ascending order of priority.\n * 2) Plugins registered without a defined priority attribute, in the registration order.\n *\n * @returns {string[]}\n */\nexport function getPluginsNames() {\n  return [...priorityPluginsQueue.getItems(), ...uniquePluginsQueue.getItems()];\n}\n\n/**\n * Gets registered plugin's class based on the given name.\n *\n * @param {string} pluginName Plugin's name.\n * @returns {BasePlugin}\n */\nexport function getPlugin(pluginName) {\n  const unifiedPluginName = toUpperCaseFirst(pluginName);\n  return uniquePluginsList.getItem(unifiedPluginName);\n}\n\n/**\n * Checks if the plugin under the name is already registered.\n *\n * @param {string} pluginName Plugin's name.\n * @returns {boolean}\n */\nexport function hasPlugin(pluginName) {\n  /* eslint-disable no-unneeded-ternary */\n  return getPlugin(pluginName) ? true : false;\n}\n\n/**\n * Registers plugin under the given name only once.\n *\n * @param {string|Function} pluginName The plugin name or plugin class.\n * @param {Function} [pluginClass] The plugin class.\n * @param {number} [priority] The plugin priority.\n */\nexport function registerPlugin(pluginName, pluginClass, priority) {\n  [pluginName, pluginClass, priority] = unifyPluginArguments(pluginName, pluginClass, priority);\n  if (getPlugin(pluginName) === void 0) {\n    _registerPlugin(pluginName, pluginClass, priority);\n  }\n}\n\n/**\n * Registers plugin under the given name.\n *\n * @param {string|Function} pluginName The plugin name or plugin class.\n * @param {Function} [pluginClass] The plugin class.\n * @param {number} [priority] The plugin priority.\n */\nfunction _registerPlugin(pluginName, pluginClass, priority) {\n  const unifiedPluginName = toUpperCaseFirst(pluginName);\n  if (uniquePluginsList.hasItem(unifiedPluginName)) {\n    throw new Error(ERROR_PLUGIN_REGISTERED(unifiedPluginName));\n  }\n  if (priority === void 0) {\n    uniquePluginsQueue.addItem(unifiedPluginName);\n  } else {\n    priorityPluginsQueue.addItem(priority, unifiedPluginName);\n  }\n  uniquePluginsList.addItem(unifiedPluginName, pluginClass);\n}\n\n/**\n * Unifies arguments to register the plugin.\n *\n * @param {string|Function} pluginName The plugin name or plugin class.\n * @param {Function} [pluginClass] The plugin class.\n * @param {number} [priority] The plugin priority.\n * @returns {Array}\n */\nfunction unifyPluginArguments(pluginName, pluginClass, priority) {\n  if (typeof pluginName === 'function') {\n    pluginClass = pluginName;\n    pluginName = pluginClass.PLUGIN_KEY;\n    priority = pluginClass.PLUGIN_PRIORITY;\n  }\n  return [pluginName, pluginClass, priority];\n}","import \"core-js/modules/es.error.cause.js\";\nimport staticRegister from \"../utils/staticRegister.mjs\";\nconst {\n  register,\n  getItem,\n  hasItem,\n  getNames,\n  getValues\n} = staticRegister('renderers');\n\n/**\n * Retrieve renderer function.\n *\n * @param {string} name Renderer identification.\n * @returns {Function} Returns renderer function.\n */\nfunction _getItem(name) {\n  if (typeof name === 'function') {\n    return name;\n  }\n  if (!hasItem(name)) {\n    throw Error(`No registered renderer found under \"${name}\" name`);\n  }\n  return getItem(name);\n}\n\n/**\n * Register renderer under its alias.\n *\n * @param {string|Function} name Renderer's alias or renderer function with its descriptor.\n * @param {Function} [renderer] Renderer function.\n */\nfunction _register(name, renderer) {\n  if (typeof name !== 'string') {\n    renderer = name;\n    name = renderer.RENDERER_TYPE;\n  }\n  register(name, renderer);\n}\nexport { _register as registerRenderer, _getItem as getRenderer, hasItem as hasRenderer, getNames as getRegisteredRendererNames, getValues as getRegisteredRenderers };","import \"core-js/modules/es.error.cause.js\";\nimport staticRegister from \"../utils/staticRegister.mjs\";\nconst {\n  register,\n  getItem,\n  hasItem,\n  getNames,\n  getValues\n} = staticRegister('validators');\n\n/**\n * Retrieve validator function.\n *\n * @param {string} name Validator identification.\n * @returns {Function} Returns validator function.\n */\nfunction _getItem(name) {\n  if (typeof name === 'function') {\n    return name;\n  }\n  if (!hasItem(name)) {\n    throw Error(`No registered validator found under \"${name}\" name`);\n  }\n  return getItem(name);\n}\n\n/**\n * Register validator under its alias.\n *\n * @param {string|Function} name Validator's alias or validator function with its descriptor.\n * @param {Function} [validator] Validator function.\n */\nfunction _register(name, validator) {\n  if (typeof name !== 'string') {\n    validator = name;\n    name = validator.VALIDATOR_TYPE;\n  }\n  register(name, validator);\n}\nexport { _register as registerValidator, _getItem as getValidator, hasItem as hasValidator, getNames as getRegisteredValidatorNames, getValues as getRegisteredValidators };","/* eslint-disable no-restricted-globals */\n/**\n * Polyfill for requestAnimationFrame.\n *\n * @param {Function} callback The function to call when it's time.\n * @returns {number}\n */\nexport function requestAnimationFrame(callback) {\n  return window.requestAnimationFrame(callback);\n}\n\n/**\n * Polyfill for cancelAnimationFrame.\n *\n * @param {number} id The request Id, generated by `requestAnimationFrame`.\n */\nexport function cancelAnimationFrame(id) {\n  window.cancelAnimationFrame(id);\n}\n\n/**\n * @returns {boolean}\n */\nexport function isTouchSupported() {\n  return 'ontouchstart' in window;\n}\nlet comparisonFunction;\n\n/**\n * Get string comparison function for sorting purposes. It supports multilingual string comparison base on Internationalization API.\n *\n * @param {string} [language] The language code used for phrases sorting.\n * @param {object} [options] Additional options for sort comparator.\n * @returns {*}\n */\nexport function getComparisonFunction(language) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (comparisonFunction) {\n    return comparisonFunction;\n  }\n  if (typeof Intl === 'object') {\n    comparisonFunction = new Intl.Collator(language, options).compare;\n  } else if (typeof String.prototype.localeCompare === 'function') {\n    comparisonFunction = (a, b) => `${a}`.localeCompare(b);\n  } else {\n    comparisonFunction = (a, b) => {\n      if (a === b) {\n        return 0;\n      }\n      return a > b ? -1 : 1;\n    };\n  }\n  return comparisonFunction;\n}","import { closestDown, hasClass, isChildOf, getParent } from \"../../../helpers/dom/element.mjs\";\nimport { partial } from \"../../../helpers/function.mjs\";\nimport { isTouchSupported } from \"../../../helpers/feature.mjs\";\nimport { isMobileBrowser, isChromeWebKit, isFirefoxWebKit, isIOS } from \"../../../helpers/browser.mjs\";\nimport { isDefined } from \"../../../helpers/mixed.mjs\";\nconst privatePool = new WeakMap();\n\n/**\n * @class Event\n */\nclass Event {\n  /**\n   * @param {FacadeGetter} facadeGetter Gets an instance facade.\n   * @param {DomBindings} domBindings Bindings into dom.\n   * @param {Settings} wtSettings The walkontable settings.\n   * @param {EventManager} eventManager The walkontable event manager.\n   * @param {Table} wtTable The table.\n   * @param {SelectionManager} selectionManager Selections.\n   * @param {Event} [parent=null] The main Event instance.\n   */\n  constructor(facadeGetter, domBindings, wtSettings, eventManager, wtTable, selectionManager) {\n    let parent = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n    this.wtSettings = wtSettings;\n    this.domBindings = domBindings;\n    this.wtTable = wtTable;\n    this.selectionManager = selectionManager;\n    this.parent = parent;\n\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n    this.eventManager = eventManager;\n\n    /**\n     * Should be use only for passing face called external origin methods, like registered event listeners.\n     * It provides backward compatibility by getting instance facade.\n     *\n     * @todo Consider about removing this from Event class, because it make relationship into facade (implicit circular\n     *   dependency).\n     * @todo Con. Maybe passing listener caller as an ioc from faced resolves this issue. To rethink later.\n     *\n     * @type {FacadeGetter}\n     * @private\n     */\n    this.facadeGetter = facadeGetter;\n    privatePool.set(this, {\n      selectedCellBeforeTouchEnd: void 0,\n      dblClickTimeout: [null, null],\n      dblClickOrigin: [null, null]\n    });\n    this.registerEvents();\n  }\n\n  /**\n   * Adds listeners for mouse and touch events.\n   *\n   * @private\n   */\n  registerEvents() {\n    this.eventManager.addEventListener(this.wtTable.holder, 'contextmenu', event => this.onContextMenu(event));\n    this.eventManager.addEventListener(this.wtTable.TABLE, 'mouseover', event => this.onMouseOver(event));\n    this.eventManager.addEventListener(this.wtTable.TABLE, 'mouseout', event => this.onMouseOut(event));\n    const initTouchEvents = () => {\n      this.eventManager.addEventListener(this.wtTable.holder, 'touchstart', event => this.onTouchStart(event));\n      this.eventManager.addEventListener(this.wtTable.holder, 'touchend', event => this.onTouchEnd(event));\n      if (!this.momentumScrolling) {\n        this.momentumScrolling = {};\n      }\n      this.eventManager.addEventListener(this.wtTable.holder, 'scroll', () => {\n        clearTimeout(this.momentumScrolling._timeout);\n        if (!this.momentumScrolling.ongoing) {\n          this.wtSettings.getSetting('onBeforeTouchScroll');\n        }\n        this.momentumScrolling.ongoing = true;\n        this.momentumScrolling._timeout = setTimeout(() => {\n          if (!this.touchApplied) {\n            this.momentumScrolling.ongoing = false;\n            this.wtSettings.getSetting('onAfterMomentumScroll');\n          }\n        }, 200);\n      });\n    };\n    const initMouseEvents = () => {\n      this.eventManager.addEventListener(this.wtTable.holder, 'mouseup', event => this.onMouseUp(event));\n      this.eventManager.addEventListener(this.wtTable.holder, 'mousedown', event => this.onMouseDown(event));\n    };\n    if (isMobileBrowser()) {\n      initTouchEvents();\n    } else {\n      // PC like devices which support both methods (touchscreen and ability to plug-in mouse).\n      if (isTouchSupported()) {\n        initTouchEvents();\n      }\n      initMouseEvents();\n    }\n  }\n\n  /**\n   * Checks if an element is already selected.\n   *\n   * @private\n   * @param {Element} touchTarget An element to check.\n   * @returns {boolean}\n   */\n  selectedCellWasTouched(touchTarget) {\n    const priv = privatePool.get(this);\n    const cellUnderFinger = this.parentCell(touchTarget);\n    const coordsOfCellUnderFinger = cellUnderFinger.coords;\n    if (priv.selectedCellBeforeTouchEnd && coordsOfCellUnderFinger) {\n      const [rowTouched, rowSelected] = [coordsOfCellUnderFinger.row, priv.selectedCellBeforeTouchEnd.from.row];\n      const [colTouched, colSelected] = [coordsOfCellUnderFinger.col, priv.selectedCellBeforeTouchEnd.from.col];\n      return rowTouched === rowSelected && colTouched === colSelected;\n    }\n    return false;\n  }\n\n  /**\n   * Gets closest TD or TH element.\n   *\n   * @private\n   * @param {Element} elem An element from the traversing starts.\n   * @returns {object} Contains coordinates and reference to TD or TH if it exists. Otherwise it's empty object.\n   */\n  parentCell(elem) {\n    const cell = {};\n    const TABLE = this.wtTable.TABLE;\n    const TD = closestDown(elem, ['TD', 'TH'], TABLE);\n    if (TD) {\n      cell.coords = this.wtTable.getCoords(TD);\n      cell.TD = TD;\n    } else if (hasClass(elem, 'wtBorder') && hasClass(elem, 'current')) {\n      cell.coords = this.selectionManager.getFocusSelection().cellRange.highlight;\n      cell.TD = this.wtTable.getCell(cell.coords);\n    } else if (hasClass(elem, 'wtBorder') && hasClass(elem, 'area')) {\n      if (this.selectionManager.getAreaSelection().cellRange) {\n        cell.coords = this.selectionManager.getAreaSelection().cellRange.to;\n        cell.TD = this.wtTable.getCell(cell.coords);\n      }\n    }\n    return cell;\n  }\n\n  /**\n   * OnMouseDown callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onMouseDown(event) {\n    const priv = privatePool.get(this);\n    const activeElement = this.domBindings.rootDocument.activeElement;\n    const getParentNode = partial(getParent, event.target);\n    const realTarget = event.target;\n\n    // ignore non-TD focusable elements from mouse down processing\n    // (https://github.com/handsontable/handsontable/issues/3555)\n    if (!['TD', 'TH'].includes(activeElement.nodeName) && (realTarget === activeElement || getParentNode(0) === activeElement || getParentNode(1) === activeElement)) {\n      return;\n    }\n    const cell = this.parentCell(realTarget);\n    if (hasClass(realTarget, 'corner')) {\n      this.wtSettings.getSetting('onCellCornerMouseDown', event, realTarget);\n    } else if (cell.TD && this.wtSettings.has('onCellMouseDown')) {\n      this.callListener('onCellMouseDown', event, cell.coords, cell.TD);\n    }\n\n    // doubleclick reacts only for left mouse button or from touch events\n    if ((event.button === 0 || this.touchApplied) && cell.TD) {\n      priv.dblClickOrigin[0] = cell.TD;\n      clearTimeout(priv.dblClickTimeout[0]);\n      priv.dblClickTimeout[0] = setTimeout(() => {\n        priv.dblClickOrigin[0] = null;\n      }, 1000);\n    }\n  }\n\n  /**\n   * OnContextMenu callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onContextMenu(event) {\n    if (this.wtSettings.has('onCellContextMenu')) {\n      const cell = this.parentCell(event.target);\n      if (cell.TD) {\n        this.callListener('onCellContextMenu', event, cell.coords, cell.TD);\n      }\n    }\n  }\n\n  /**\n   * OnMouseOver callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onMouseOver(event) {\n    if (!this.wtSettings.has('onCellMouseOver')) {\n      return;\n    }\n    const table = this.wtTable.TABLE;\n    const td = closestDown(event.target, ['TD', 'TH'], table);\n    const parent = this.parent || this;\n    if (td && td !== parent.lastMouseOver && isChildOf(td, table)) {\n      parent.lastMouseOver = td;\n      this.callListener('onCellMouseOver', event, this.wtTable.getCoords(td), td);\n    }\n  }\n\n  /**\n   * OnMouseOut callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onMouseOut(event) {\n    if (!this.wtSettings.has('onCellMouseOut')) {\n      return;\n    }\n    const table = this.wtTable.TABLE;\n    const lastTD = closestDown(event.target, ['TD', 'TH'], table);\n    const nextTD = closestDown(event.relatedTarget, ['TD', 'TH'], table);\n    const parent = this.parent || this;\n    if (lastTD && lastTD !== nextTD && isChildOf(lastTD, table)) {\n      this.callListener('onCellMouseOut', event, this.wtTable.getCoords(lastTD), lastTD);\n      if (nextTD === null) {\n        parent.lastMouseOver = null;\n      }\n    }\n  }\n\n  /**\n   * OnMouseUp callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onMouseUp(event) {\n    const priv = privatePool.get(this);\n    const cell = this.parentCell(event.target);\n    if (cell.TD && this.wtSettings.has('onCellMouseUp')) {\n      this.callListener('onCellMouseUp', event, cell.coords, cell.TD);\n    }\n\n    // if not left mouse button, and the origin event is not comes from touch\n    if (event.button !== 0 && !this.touchApplied) {\n      return;\n    }\n    if (cell.TD === priv.dblClickOrigin[0] && cell.TD === priv.dblClickOrigin[1]) {\n      if (hasClass(event.target, 'corner')) {\n        this.callListener('onCellCornerDblClick', event, cell.coords, cell.TD);\n      } else {\n        this.callListener('onCellDblClick', event, cell.coords, cell.TD);\n      }\n      priv.dblClickOrigin[0] = null;\n      priv.dblClickOrigin[1] = null;\n    } else if (cell.TD === priv.dblClickOrigin[0]) {\n      priv.dblClickOrigin[1] = cell.TD;\n      clearTimeout(priv.dblClickTimeout[1]);\n      priv.dblClickTimeout[1] = setTimeout(() => {\n        priv.dblClickOrigin[1] = null;\n      }, 500);\n    }\n  }\n\n  /**\n   * OnTouchStart callback. Simulates mousedown event.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onTouchStart(event) {\n    const priv = privatePool.get(this);\n    priv.selectedCellBeforeTouchEnd = this.selectionManager.getFocusSelection().cellRange;\n    this.touchApplied = true;\n    this.onMouseDown(event);\n  }\n\n  /**\n   * OnTouchEnd callback. Simulates mouseup event.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onTouchEnd(event) {\n    var _this$parentCell;\n    const target = event.target;\n    const parentCellCoords = (_this$parentCell = this.parentCell(target)) === null || _this$parentCell === void 0 ? void 0 : _this$parentCell.coords;\n    const isCellsRange = isDefined(parentCellCoords) && parentCellCoords.row >= 0 && parentCellCoords.col >= 0;\n    const isEventCancelable = event.cancelable && isCellsRange && this.wtSettings.getSetting('isDataViewInstance');\n\n    // To prevent accidental redirects or other actions that the interactive elements (e.q \"A\" link) do\n    // while the cell is highlighted, all touch events that are triggered on different cells are\n    // \"preventDefault\"'ed. The user can interact with the element (e.q. click on the link that opens\n    // a new page) only when the same cell was previously selected (see related PR #7980).\n    if (isEventCancelable) {\n      const interactiveElements = ['A', 'BUTTON', 'INPUT'];\n\n      // For browsers that use the WebKit as an engine (excluding Safari), there is a bug. The prevent\n      // default has to be called all the time. Otherwise, the second tap won't be triggered (probably\n      // caused by the native ~300ms delay - https://webkit.org/blog/5610/more-responsive-tapping-on-ios/).\n      // To make the interactive elements work, the event target element has to be check. If the element\n      // matches the allow-list, the event is not prevented.\n      if (isIOS() && (isChromeWebKit() || isFirefoxWebKit()) && this.selectedCellWasTouched(target) && !interactiveElements.includes(target.tagName)) {\n        event.preventDefault();\n      } else if (!this.selectedCellWasTouched(target)) {\n        // For other browsers, prevent default is fired only for the first tap and only when the previous\n        // highlighted cell was different.\n        event.preventDefault();\n      }\n    }\n    this.onMouseUp(event);\n    this.touchApplied = false;\n  }\n\n  /**\n   * Call listener with backward compatibility.\n   *\n   * @private\n   * @param {string} name Name of listener.\n   * @param {MouseEvent} event The event object.\n   * @param {CellCoords} coords Coordinates.\n   * @param {HTMLElement} target Event target.\n   */\n  callListener(name, event, coords, target) {\n    const listener = this.wtSettings.getSettingPure(name);\n    if (listener) {\n      listener(event, coords, target, this.facadeGetter());\n    }\n  }\n\n  /**\n   * Clears double-click timeouts and destroys the internal eventManager instance.\n   */\n  destroy() {\n    const priv = privatePool.get(this);\n    clearTimeout(priv.dblClickTimeout[0]);\n    clearTimeout(priv.dblClickTimeout[1]);\n    this.eventManager.destroy();\n  }\n}\nexport default Event;","/**\n * @class ColumnFilter\n */\nclass ColumnFilter {\n  /**\n   * @param {number} offset The scroll horizontal offset.\n   * @param {number} total The total width of the table.\n   * @param {number} countTH The number of rendered row headers.\n   */\n  constructor(offset, total, countTH) {\n    this.offset = offset;\n    this.total = total;\n    this.countTH = countTH;\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  offsetted(index) {\n    return index + this.offset;\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  unOffsetted(index) {\n    return index - this.offset;\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  renderedToSource(index) {\n    return this.offsetted(index);\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  sourceToRendered(index) {\n    return this.unOffsetted(index);\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  offsettedTH(index) {\n    return index - this.countTH;\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  unOffsettedTH(index) {\n    return index + this.countTH;\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  visibleRowHeadedColumnToSourceColumn(index) {\n    return this.renderedToSource(this.offsettedTH(index));\n  }\n\n  /**\n   * @param {number} index The visual column index.\n   * @returns {number}\n   */\n  sourceColumnToVisibleRowHeadedColumn(index) {\n    return this.unOffsettedTH(this.sourceToRendered(index));\n  }\n}\nexport default ColumnFilter;","/**\n * @class RowFilter\n */\nclass RowFilter {\n  /**\n   * @param {number} offset The scroll vertical offset.\n   * @param {number} total The total height of the table.\n   * @param {number} countTH The number of rendered column headers.\n   */\n  constructor(offset, total, countTH) {\n    this.offset = offset;\n    this.total = total;\n    this.countTH = countTH;\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  offsetted(index) {\n    return index + this.offset;\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  unOffsetted(index) {\n    return index - this.offset;\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  renderedToSource(index) {\n    return this.offsetted(index);\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  sourceToRendered(index) {\n    return this.unOffsetted(index);\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  offsettedTH(index) {\n    return index - this.countTH;\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  unOffsettedTH(index) {\n    return index + this.countTH;\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  visibleColHeadedRowToSourceRow(index) {\n    return this.renderedToSource(this.offsettedTH(index));\n  }\n\n  /**\n   * @param {number} index The visual row index.\n   * @returns {number}\n   */\n  sourceRowToVisibleColHeadedRow(index) {\n    return this.unOffsettedTH(this.sourceToRendered(index));\n  }\n}\nexport default RowFilter;","/**\n * Describes that ViewSizeSet instance doesn't share sizes with another\n * instance (root node can contain only one type of children nodes).\n *\n * @type {number}\n */\nexport const WORKING_SPACE_ALL = 0;\n/**\n * Describes that ViewSizeSet instance share sizes with another instance and\n * set working space for this instance to 'top' (root node can contain multiple\n * types of children and this instance will be occupied top space of the root node).\n *\n * @type {number}\n */\nexport const WORKING_SPACE_TOP = 1;\n/**\n * Describes that ViewSizeSet instance share sizes with another instance and\n * set working space for this instance to 'bottom' (root node can contain multiple\n * types of children and this instance will be occupied bottom space of the root node).\n *\n * @type {number}\n */\nexport const WORKING_SPACE_BOTTOM = 2;","/**\n * Holder for current and next size (count of rendered and to render DOM elements) and offset.\n *\n * @class {ViewSize}\n */\nexport default class ViewSize {\n  constructor() {\n    /**\n     * Current size of the rendered DOM elements.\n     *\n     * @type {number}\n     */\n    this.currentSize = 0;\n    /**\n     * Next size of the rendered DOM elements which should be fulfilled.\n     *\n     * @type {number}\n     */\n    this.nextSize = 0;\n    /**\n     * Current offset.\n     *\n     * @type {number}\n     */\n    this.currentOffset = 0;\n    /**\n     * Next ofset.\n     *\n     * @type {number}\n     */\n    this.nextOffset = 0;\n  }\n\n  /**\n   * Sets new size of the rendered DOM elements.\n   *\n   * @param {number} size The size.\n   */\n  setSize(size) {\n    this.currentSize = this.nextSize;\n    this.nextSize = size;\n  }\n\n  /**\n   * Sets new offset.\n   *\n   * @param {number} offset The offset.\n   */\n  setOffset(offset) {\n    this.currentOffset = this.nextOffset;\n    this.nextOffset = offset;\n  }\n}","import ViewSize from \"./viewSize.mjs\";\nimport { WORKING_SPACE_ALL, WORKING_SPACE_TOP, WORKING_SPACE_BOTTOM } from \"./constants.mjs\";\n/**\n * The class is a source of the truth of information about the current and\n * next size of the rendered DOM elements and current and next offset of\n * the view. That information allows us to calculate diff between current\n * DOM order and this which should be rendered without touching the DOM API at all.\n *\n * Mostly the ViewSizeSet is created for each individual renderer. But in\n * the table, there is one case where this size information should be shared\n * between two different instances (different table renderers). This is a TR\n * element which can contain TH elements - managed by own renderer and\n * TD elements - managed by another renderer. To generate correct DOM order\n * for them it is required to connect these two instances by reference\n * through `sharedSize`.\n *\n * @class {ViewSizeSet}\n */\nexport default class ViewSizeSet {\n  constructor() {\n    /**\n     * Holder for current and next view size and offset.\n     *\n     * @type {ViewSize}\n     */\n    this.size = new ViewSize();\n    /**\n     * Defines if this instance shares its size with another instance. If it's in the shared\n     * mode it defines what space it occupies ('top' or 'bottom').\n     *\n     * @type {number}\n     */\n    this.workingSpace = WORKING_SPACE_ALL;\n    /**\n     * Shared Size instance.\n     *\n     * @type {ViewSize}\n     */\n    this.sharedSize = null;\n  }\n\n  /**\n   * Sets the size for rendered elements. It can be a size for rows, cells or size for row\n   * headers etc.\n   *\n   * @param {number} size The size.\n   */\n  setSize(size) {\n    this.size.setSize(size);\n  }\n\n  /**\n   * Sets the offset for rendered elements. The offset describes the shift between 0 and\n   * the first rendered element according to the scroll position.\n   *\n   * @param {number} offset The offset.\n   */\n  setOffset(offset) {\n    this.size.setOffset(offset);\n  }\n\n  /**\n   * Returns ViewSize instance.\n   *\n   * @returns {ViewSize}\n   */\n  getViewSize() {\n    return this.size;\n  }\n\n  /**\n   * Checks if this ViewSizeSet is sharing the size with another instance.\n   *\n   * @returns {boolean}\n   */\n  isShared() {\n    return this.sharedSize instanceof ViewSize;\n  }\n\n  /**\n   * Checks what working space describes this size instance.\n   *\n   * @param {number} workingSpace The number which describes the type of the working space (see constants.js).\n   * @returns {boolean}\n   */\n  isPlaceOn(workingSpace) {\n    return this.workingSpace === workingSpace;\n  }\n\n  /**\n   * Appends the ViewSizeSet instance to this instance that turns it into a shared mode.\n   *\n   * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\n   */\n  append(viewSize) {\n    this.workingSpace = WORKING_SPACE_TOP;\n    viewSize.workingSpace = WORKING_SPACE_BOTTOM;\n    this.sharedSize = viewSize.getViewSize();\n  }\n\n  /**\n   * Prepends the ViewSize instance to this instance that turns it into a shared mode.\n   *\n   * @param {ViewSizeSet} viewSize The instance of the ViewSizeSet class.\n   */\n  prepend(viewSize) {\n    this.workingSpace = WORKING_SPACE_BOTTOM;\n    viewSize.workingSpace = WORKING_SPACE_TOP;\n    this.sharedSize = viewSize.getViewSize();\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { WORKING_SPACE_TOP, WORKING_SPACE_BOTTOM } from \"./constants.mjs\";\nimport ViewSizeSet from \"./viewSizeSet.mjs\";\n/**\n * Executive model for each table renderer. It's responsible for injecting DOM nodes in a\n * specified order and adjusting the number of elements in the root node.\n *\n * Only this class have rights to juggling DOM elements within the root node (see render method).\n *\n * @class {OrderView}\n */\nexport default class OrderView {\n  constructor(rootNode, nodesPool, childNodeType) {\n    /**\n     * The root node to manage with.\n     *\n     * @type {HTMLElement}\n     */\n    this.rootNode = rootNode;\n    /**\n     * Factory for newly created DOM elements.\n     *\n     * @type {Function}\n     */\n    this.nodesPool = nodesPool;\n    /**\n     * Holder for sizing and positioning of the view.\n     *\n     * @type {ViewSizeSet}\n     */\n    this.sizeSet = new ViewSizeSet();\n    /**\n     * Node type which the order view will manage while rendering the DOM elements.\n     *\n     * @type {string}\n     */\n    this.childNodeType = childNodeType.toUpperCase();\n    /**\n     * The visual index of currently processed row.\n     *\n     * @type {number}\n     */\n    this.visualIndex = 0;\n    /**\n     * The list of DOM elements which are rendered for this render cycle.\n     *\n     * @type {HTMLElement[]}\n     */\n    this.collectedNodes = [];\n  }\n\n  /**\n   * Sets the size for rendered elements. It can be a size for rows, cells or size for row\n   * headers etc. It depends for what table renderer this instance was created.\n   *\n   * @param {number} size The size.\n   * @returns {OrderView}\n   */\n  setSize(size) {\n    this.sizeSet.setSize(size);\n    return this;\n  }\n\n  /**\n   * Sets the offset for rendered elements. The offset describes the shift between 0 and\n   * the first rendered element according to the scroll position.\n   *\n   * @param {number} offset The offset.\n   * @returns {OrderView}\n   */\n  setOffset(offset) {\n    this.sizeSet.setOffset(offset);\n    return this;\n  }\n\n  /**\n   * Checks if this instance of the view shares the root node with another instance. This happens only once when\n   * a row (TR) as a root node is managed by two OrderView instances. If this happens another DOM injection\n   * algorithm is performed to achieve consistent order.\n   *\n   * @returns {boolean}\n   */\n  isSharedViewSet() {\n    return this.sizeSet.isShared();\n  }\n\n  /**\n   * Returns rendered DOM element based on visual index.\n   *\n   * @param {number} visualIndex The visual index.\n   * @returns {HTMLElement}\n   */\n  getNode(visualIndex) {\n    return visualIndex < this.collectedNodes.length ? this.collectedNodes[visualIndex] : null;\n  }\n\n  /**\n   * Returns currently processed DOM element.\n   *\n   * @returns {HTMLElement}\n   */\n  getCurrentNode() {\n    const length = this.collectedNodes.length;\n    return length > 0 ? this.collectedNodes[length - 1] : null;\n  }\n\n  /**\n   * Returns rendered child count for this instance.\n   *\n   * @returns {number}\n   */\n  getRenderedChildCount() {\n    const {\n      rootNode,\n      sizeSet\n    } = this;\n    let childElementCount = 0;\n    if (this.isSharedViewSet()) {\n      let element = rootNode.firstElementChild;\n      while (element) {\n        if (element.tagName === this.childNodeType) {\n          childElementCount += 1;\n        } else if (sizeSet.isPlaceOn(WORKING_SPACE_TOP)) {\n          break;\n        }\n        element = element.nextElementSibling;\n      }\n    } else {\n      childElementCount = rootNode.childElementCount;\n    }\n    return childElementCount;\n  }\n\n  /**\n   * Setups and prepares all necessary properties and start the rendering process.\n   * This method has to be called only once (at the start) for the render cycle.\n   */\n  start() {\n    this.collectedNodes.length = 0;\n    this.visualIndex = 0;\n    const {\n      rootNode,\n      sizeSet\n    } = this;\n    const isShared = this.isSharedViewSet();\n    const {\n      nextSize\n    } = sizeSet.getViewSize();\n    let childElementCount = this.getRenderedChildCount();\n    while (childElementCount < nextSize) {\n      const newNode = this.nodesPool();\n      if (!isShared || isShared && sizeSet.isPlaceOn(WORKING_SPACE_BOTTOM)) {\n        rootNode.appendChild(newNode);\n      } else {\n        rootNode.insertBefore(newNode, rootNode.firstChild);\n      }\n      childElementCount += 1;\n    }\n    const isSharedPlacedOnTop = isShared && sizeSet.isPlaceOn(WORKING_SPACE_TOP);\n    while (childElementCount > nextSize) {\n      rootNode.removeChild(isSharedPlacedOnTop ? rootNode.firstChild : rootNode.lastChild);\n      childElementCount -= 1;\n    }\n  }\n\n  /**\n   * Renders the DOM element based on visual index (which is calculated internally).\n   * This method has to be called as many times as the size count is met (to cover all previously rendered DOM elements).\n   */\n  render() {\n    const {\n      rootNode,\n      sizeSet\n    } = this;\n    let visualIndex = this.visualIndex;\n    if (this.isSharedViewSet() && sizeSet.isPlaceOn(WORKING_SPACE_BOTTOM)) {\n      visualIndex += sizeSet.sharedSize.nextSize;\n    }\n    let node = rootNode.childNodes[visualIndex];\n    if (node.tagName !== this.childNodeType) {\n      const newNode = this.nodesPool();\n      rootNode.replaceChild(newNode, node);\n      node = newNode;\n    }\n    this.collectedNodes.push(node);\n    this.visualIndex += 1;\n  }\n\n  /**\n   * Ends the render process.\n   * This method has to be called only once (at the end) for the render cycle.\n   */\n  end() {}\n}","import OrderView from \"./view.mjs\";\n/**\n * Executive model for TR root nodes.\n *\n * @class {SharedOrderView}\n */\nexport default class SharedOrderView extends OrderView {\n  /**\n   * The method results in merging external order view into the current order. This happens only for order views which\n   * operate on the same root node.\n   *\n   * In the table, there is only one scenario when this happens. TR root element\n   * has a common root node with cells order view and row headers order view. Both classes have to share\n   * information about their order sizes to make proper diff calculations.\n   *\n   * @param {OrderView} orderView The order view to merging with. The view will be added at the beginning of the list.\n   * @returns {SharedOrderView}\n   */\n  prependView(orderView) {\n    this.sizeSet.prepend(orderView.sizeSet);\n    orderView.sizeSet.append(this.sizeSet);\n    return this;\n  }\n\n  /**\n   * The method results in merging external order view into the current order. This happens only for order views which\n   * operate on the same root node.\n   *\n   * In the table, there is only one scenario when this happens. TR root element\n   * has a common root node with cells order view and row headers order view. Both classes have to share\n   * information about their order sizes to make proper diff calculations.\n   *\n   * @param {OrderView} orderView The order view to merging with. The view will be added at the end of the list.\n   * @returns {SharedOrderView}\n   */\n  appendView(orderView) {\n    this.sizeSet.append(orderView.sizeSet);\n    orderView.sizeSet.prepend(this.sizeSet);\n    return this;\n  }\n}","/**\n * Factory for newly created DOM elements.\n *\n * @class {NodesPool}\n */\nexport default class NodesPool {\n  constructor(nodeType) {\n    /**\n     * Node type to generate (ew 'th', 'td').\n     *\n     * @type {string}\n     */\n    this.nodeType = nodeType.toUpperCase();\n  }\n\n  /**\n   * Set document owner for this instance.\n   *\n   * @param {HTMLDocument} rootDocument The document window owner.\n   */\n  setRootDocument(rootDocument) {\n    this.rootDocument = rootDocument;\n  }\n\n  /**\n   * Obtains an element. The returned elements in the feature can be cached.\n   *\n   * @returns {HTMLElement}\n   */\n  obtain() {\n    return this.rootDocument.createElement(this.nodeType);\n  }\n}","import NodesPool from \"./../utils/nodesPool.mjs\";\n/**\n * Base renderer class, abstract logic for specialized renderers.\n *\n * @class BaseRenderer\n */\nexport default class BaseRenderer {\n  constructor(nodeType, rootNode) {\n    /**\n     * Factory for newly created DOM elements.\n     *\n     * NodePool should be used for each renderer. For the first stage of the refactoring\n     * process, only some of the renderers are implemented a new approach.\n     *\n     * @type {NodesPool|null}\n     */\n    this.nodesPool = typeof nodeType === 'string' ? new NodesPool(nodeType) : null;\n    /**\n     * Node type which the renderer will manage while building the table (eg. 'TD', 'TR', 'TH').\n     *\n     * @type {string}\n     */\n    this.nodeType = nodeType;\n    /**\n     * The root node to which newly created elements will be inserted.\n     *\n     * @type {HTMLElement}\n     */\n    this.rootNode = rootNode;\n    /**\n     * The instance of the Table class, a wrapper for all renderers and holder for properties describe table state.\n     *\n     * @type {TableRenderer}\n     */\n    this.table = null;\n    /**\n     * Counter of nodes already added.\n     *\n     * @type {number}\n     */\n    this.renderedNodes = 0;\n  }\n\n  /**\n   * Sets the table renderer instance to the current renderer.\n   *\n   * @param {TableRenderer} table The TableRenderer instance.\n   */\n  setTable(table) {\n    if (this.nodesPool) {\n      this.nodesPool.setRootDocument(table.rootDocument);\n    }\n    this.table = table;\n  }\n\n  /**\n   * Adjusts the number of rendered nodes.\n   */\n  adjust() {}\n\n  /**\n   * Renders the contents to the elements.\n   */\n  render() {}\n}","import { SharedOrderView } from \"./../utils/orderView/index.mjs\";\nimport BaseRenderer from \"./_base.mjs\";\nimport { setAttribute } from \"../../../../helpers/dom/element.mjs\";\nimport { A11Y_COLINDEX, A11Y_ROWHEADER, A11Y_SCOPE_ROW, A11Y_TABINDEX } from \"../../../../helpers/a11y.mjs\";\n/**\n * Row headers renderer responsible for managing (inserting, tracking, rendering) TR elements belongs to TR.\n *\n *   <tr> (root node)\n *     ├ <th>   --- RowHeadersRenderer\n *     ├ <td>   \\\n *     ├ <td>    \\\n *     ├ <td>     - CellsRenderer\n *     ├ <td>    /\n *     └ <td>   /.\n *\n * @class {CellsRenderer}\n */\nexport default class RowHeadersRenderer extends BaseRenderer {\n  constructor() {\n    super('TH');\n    /**\n     * Cache for OrderView classes connected to specified node.\n     *\n     * @type {WeakMap}\n     */\n    this.orderViews = new WeakMap();\n    /**\n     * Row index which specifies the row position of the processed row header.\n     *\n     * @type {number}\n     */\n    this.sourceRowIndex = 0;\n  }\n\n  /**\n   * Obtains the instance of the SharedOrderView class which is responsible for rendering the nodes to the root node.\n   *\n   * @param {HTMLTableRowElement} rootNode The TR element, which is root element for row headers (TH).\n   * @returns {SharedOrderView}\n   */\n  obtainOrderView(rootNode) {\n    let orderView;\n    if (this.orderViews.has(rootNode)) {\n      orderView = this.orderViews.get(rootNode);\n    } else {\n      orderView = new SharedOrderView(rootNode, sourceColumnIndex => this.nodesPool.obtain(this.sourceRowIndex, sourceColumnIndex), this.nodeType);\n      this.orderViews.set(rootNode, orderView);\n    }\n    return orderView;\n  }\n\n  /**\n   * Renders the cells.\n   */\n  render() {\n    const {\n      rowsToRender,\n      rowHeaderFunctions,\n      rowHeadersCount,\n      rows,\n      cells\n    } = this.table;\n    for (let visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n      const sourceRowIndex = this.table.renderedRowToSource(visibleRowIndex);\n      const TR = rows.getRenderedNode(visibleRowIndex);\n      this.sourceRowIndex = sourceRowIndex;\n      const orderView = this.obtainOrderView(TR);\n      const cellsView = cells.obtainOrderView(TR);\n      orderView.appendView(cellsView).setSize(rowHeadersCount).setOffset(this.table.renderedColumnToSource(0)).start();\n      for (let visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n        orderView.render();\n        const TH = orderView.getCurrentNode();\n        TH.className = '';\n        TH.removeAttribute('style');\n        if (this.table.isAriaEnabled()) {\n          setAttribute(TH, [A11Y_ROWHEADER(), A11Y_SCOPE_ROW(), A11Y_COLINDEX(visibleColumnIndex + 1), A11Y_TABINDEX(-1)]);\n        }\n        rowHeaderFunctions[visibleColumnIndex](sourceRowIndex, TH, visibleColumnIndex);\n      }\n      orderView.end();\n    }\n  }\n}","import { empty, setAttribute } from \"./../../../../helpers/dom/element.mjs\";\nimport BaseRenderer from \"./_base.mjs\";\nimport { A11Y_COLINDEX, A11Y_COLUMNHEADER, A11Y_PRESENTATION, A11Y_ROW, A11Y_ROWINDEX, A11Y_SCOPE_COL, A11Y_TABINDEX } from \"../../../../helpers/a11y.mjs\";\n/**\n * Column headers renderer responsible for managing (inserting, tracking, rendering) TR and TH elements.\n *\n *   <thead> (root node)\n *     ├ <tr>   \\\n *     ├ <tr>    \\\n *     ├ <tr>     - ColumnHeadersRenderer\n *     ├ <tr>    /\n *     └ <tr>   /.\n *\n * @class {ColumnHeadersRenderer}\n */\nexport default class ColumnHeadersRenderer extends BaseRenderer {\n  constructor(rootNode) {\n    super(null, rootNode); // NodePool is not implemented for this renderer yet\n  }\n\n  /**\n   * Adjusts the number of the rendered elements.\n   */\n  adjust() {\n    const {\n      columnHeadersCount,\n      rowHeadersCount\n    } = this.table;\n    let TR = this.rootNode.firstChild;\n    if (columnHeadersCount) {\n      const {\n        columnsToRender\n      } = this.table;\n      const allColumnsToRender = columnsToRender + rowHeadersCount;\n      for (let i = 0, len = columnHeadersCount; i < len; i++) {\n        TR = this.rootNode.childNodes[i];\n        if (!TR) {\n          TR = this.table.rootDocument.createElement('tr');\n          this.rootNode.appendChild(TR);\n        }\n        this.renderedNodes = TR.childNodes.length;\n        while (this.renderedNodes < allColumnsToRender) {\n          TR.appendChild(this.table.rootDocument.createElement('th'));\n          this.renderedNodes += 1;\n        }\n        while (this.renderedNodes > allColumnsToRender) {\n          TR.removeChild(TR.lastChild);\n          this.renderedNodes -= 1;\n        }\n      }\n      const theadChildrenLength = this.rootNode.childNodes.length;\n      if (theadChildrenLength > columnHeadersCount) {\n        for (let i = columnHeadersCount; i < theadChildrenLength; i++) {\n          this.rootNode.removeChild(this.rootNode.lastChild);\n        }\n      }\n    } else if (TR) {\n      empty(TR);\n    }\n  }\n\n  /**\n   * Renders the TH elements.\n   */\n  render() {\n    const {\n      columnHeadersCount\n    } = this.table;\n    if (this.table.isAriaEnabled()) {\n      setAttribute(this.rootNode, [A11Y_PRESENTATION()]);\n    }\n    for (let rowHeaderIndex = 0; rowHeaderIndex < columnHeadersCount; rowHeaderIndex += 1) {\n      const {\n        columnHeaderFunctions,\n        columnsToRender,\n        rowHeadersCount\n      } = this.table;\n      const TR = this.rootNode.childNodes[rowHeaderIndex];\n      if (this.table.isAriaEnabled()) {\n        setAttribute(TR, [A11Y_ROW(), A11Y_ROWINDEX(rowHeaderIndex + 1)]);\n      }\n      for (let renderedColumnIndex = -1 * rowHeadersCount; renderedColumnIndex < columnsToRender; renderedColumnIndex += 1) {\n        // eslint-disable-line max-len\n        const sourceColumnIndex = this.table.renderedColumnToSource(renderedColumnIndex);\n        const TH = TR.childNodes[renderedColumnIndex + rowHeadersCount];\n        TH.className = '';\n        TH.removeAttribute('style');\n        if (this.table.isAriaEnabled()) {\n          setAttribute(TH, [A11Y_COLINDEX(renderedColumnIndex + 1 + this.table.rowHeadersCount), A11Y_TABINDEX(-1), ...(renderedColumnIndex < 0 ? [A11Y_PRESENTATION()] : [A11Y_COLUMNHEADER(), A11Y_SCOPE_COL()])]);\n        }\n        columnHeaderFunctions[rowHeaderIndex](sourceColumnIndex, TH, rowHeaderIndex);\n      }\n    }\n  }\n}","import BaseRenderer from \"./_base.mjs\";\nimport { addClass } from \"./../../../../helpers/dom/element.mjs\";\n/**\n * Colgroup renderer responsible for managing (inserting, tracking, rendering) COL elements.\n *\n *   <colgroup> (root node)\n *     ├ <col>   \\\n *     ├ <col>    \\\n *     ├ <col>     - ColGroupRenderer\n *     ├ <col>    /\n *     └ <col>   /.\n *\n * @class {ColGroupRenderer}\n */\nexport default class ColGroupRenderer extends BaseRenderer {\n  constructor(rootNode) {\n    super(null, rootNode); // NodePool is not implemented for this renderer yet\n  }\n\n  /**\n   * Adjusts the number of the rendered elements.\n   */\n  adjust() {\n    const {\n      columnsToRender,\n      rowHeadersCount\n    } = this.table;\n    const allColumnsToRender = columnsToRender + rowHeadersCount;\n    while (this.renderedNodes < allColumnsToRender) {\n      this.rootNode.appendChild(this.table.rootDocument.createElement('col'));\n      this.renderedNodes += 1;\n    }\n    while (this.renderedNodes > allColumnsToRender) {\n      this.rootNode.removeChild(this.rootNode.lastChild);\n      this.renderedNodes -= 1;\n    }\n  }\n\n  /**\n   * Renders the col group elements.\n   */\n  render() {\n    this.adjust();\n    const {\n      columnsToRender,\n      rowHeadersCount\n    } = this.table;\n\n    // Render column nodes for row headers\n    for (let visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n      const sourceColumnIndex = this.table.renderedColumnToSource(visibleColumnIndex);\n      const width = this.table.columnUtils.getHeaderWidth(sourceColumnIndex);\n      this.rootNode.childNodes[visibleColumnIndex].style.width = `${width}px`;\n    }\n\n    // Render column nodes for cells\n    for (let visibleColumnIndex = 0; visibleColumnIndex < columnsToRender; visibleColumnIndex++) {\n      const sourceColumnIndex = this.table.renderedColumnToSource(visibleColumnIndex);\n      const width = this.table.columnUtils.getStretchedColumnWidth(sourceColumnIndex);\n      this.rootNode.childNodes[visibleColumnIndex + rowHeadersCount].style.width = `${width}px`;\n    }\n    const firstChild = this.rootNode.firstChild;\n    if (firstChild) {\n      addClass(firstChild, 'rowHeader');\n    }\n  }\n}","import { warn } from \"./../../../../helpers/console.mjs\";\nimport { toSingleLine } from \"./../../../../helpers/templateLiteralTag.mjs\";\nimport { OrderView } from \"./../utils/orderView/index.mjs\";\nimport BaseRenderer from \"./_base.mjs\";\nimport { setAttribute } from \"../../../../helpers/dom/element.mjs\";\nimport { A11Y_PRESENTATION, A11Y_ROW, A11Y_ROWINDEX } from \"../../../../helpers/a11y.mjs\";\nlet performanceWarningAppeared = false;\n\n/**\n * Rows renderer responsible for managing (inserting, tracking, rendering) TR elements belongs to TBODY.\n *\n *   <tbody> (root node)\n *     ├ <tr>   \\\n *     ├ <tr>    \\\n *     ├ <tr>     - RowsRenderer\n *     ├ <tr>    /\n *     └ <tr>   /.\n *\n * @class {RowsRenderer}\n */\nexport default class RowsRenderer extends BaseRenderer {\n  constructor(rootNode) {\n    super('TR', rootNode);\n    /**\n     * Cache for OrderView classes connected to specified node.\n     *\n     * @type {WeakMap}\n     */\n    this.orderView = new OrderView(rootNode, sourceRowIndex => this.nodesPool.obtain(sourceRowIndex), this.nodeType);\n  }\n\n  /**\n   * Returns currently rendered node.\n   *\n   * @param {string} visualIndex Visual index of the rendered node (it always goeas from 0 to N).\n   * @returns {HTMLTableRowElement}\n   */\n  getRenderedNode(visualIndex) {\n    return this.orderView.getNode(visualIndex);\n  }\n\n  /**\n   * Renders the cells.\n   */\n  render() {\n    const {\n      rowsToRender\n    } = this.table;\n    if (!performanceWarningAppeared && rowsToRender > 1000) {\n      performanceWarningAppeared = true;\n      warn(toSingleLine`Performance tip: Handsontable rendered more than 1000 visible rows. Consider limiting\\x20\n        the number of rendered rows by specifying the table height and/or turning off the \"renderAllRows\" option.`);\n    }\n    if (this.table.isAriaEnabled()) {\n      setAttribute(this.rootNode, [A11Y_PRESENTATION()]);\n    }\n    this.orderView.setSize(rowsToRender).setOffset(this.table.renderedRowToSource(0)).start();\n    for (let visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n      this.orderView.render();\n      const TR = this.orderView.getCurrentNode();\n      const sourceRowIndex = this.table.renderedRowToSource(visibleRowIndex);\n      if (this.table.isAriaEnabled()) {\n        var _this$table$rowUtils$, _this$table$rowUtils;\n        setAttribute(TR, [A11Y_ROW(),\n        // `aria-rowindex` is incremented by both tbody and thead rows.\n        A11Y_ROWINDEX(sourceRowIndex + ((_this$table$rowUtils$ = (_this$table$rowUtils = this.table.rowUtils) === null || _this$table$rowUtils === void 0 || (_this$table$rowUtils = _this$table$rowUtils.dataAccessObject) === null || _this$table$rowUtils === void 0 ? void 0 : _this$table$rowUtils.columnHeaders.length) !== null && _this$table$rowUtils$ !== void 0 ? _this$table$rowUtils$ : 0) + 1)]);\n      }\n    }\n    this.orderView.end();\n  }\n}","import { hasClass, removeAttribute, setAttribute } from \"./../../../../helpers/dom/element.mjs\";\nimport { SharedOrderView } from \"./../utils/orderView/index.mjs\";\nimport BaseRenderer from \"./_base.mjs\";\nimport { A11Y_COLINDEX, A11Y_GRIDCELL, A11Y_TABINDEX } from \"../../../../helpers/a11y.mjs\";\n/**\n * Cell renderer responsible for managing (inserting, tracking, rendering) TD elements.\n *\n *   <tr> (root node)\n *     ├ <th>   --- RowHeadersRenderer\n *     ├ <td>   \\\n *     ├ <td>    \\\n *     ├ <td>     - CellsRenderer\n *     ├ <td>    /\n *     └ <td>   /.\n *\n * @class {CellsRenderer}\n */\nexport default class CellsRenderer extends BaseRenderer {\n  constructor() {\n    super('TD');\n    /**\n     * Cache for OrderView classes connected to specified node.\n     *\n     * @type {WeakMap}\n     */\n    this.orderViews = new WeakMap();\n    /**\n     * Row index which specifies the row position of the processed cell.\n     *\n     * @type {number}\n     */\n    this.sourceRowIndex = 0;\n  }\n\n  /**\n   * Obtains the instance of the SharedOrderView class which is responsible for rendering the nodes to the root node.\n   *\n   * @param {HTMLTableRowElement} rootNode The TR element, which is root element for cells (TD).\n   * @returns {SharedOrderView}\n   */\n  obtainOrderView(rootNode) {\n    let orderView;\n    if (this.orderViews.has(rootNode)) {\n      orderView = this.orderViews.get(rootNode);\n    } else {\n      orderView = new SharedOrderView(rootNode, sourceColumnIndex => this.nodesPool.obtain(this.sourceRowIndex, sourceColumnIndex), this.nodeType);\n      this.orderViews.set(rootNode, orderView);\n    }\n    return orderView;\n  }\n\n  /**\n   * Renders the cells.\n   */\n  render() {\n    const {\n      rowsToRender,\n      columnsToRender,\n      rows,\n      rowHeaders\n    } = this.table;\n    for (let visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n      const sourceRowIndex = this.table.renderedRowToSource(visibleRowIndex);\n      const TR = rows.getRenderedNode(visibleRowIndex);\n      this.sourceRowIndex = sourceRowIndex;\n      const orderView = this.obtainOrderView(TR);\n      const rowHeadersView = rowHeaders.obtainOrderView(TR);\n\n      // @TODO(perf-tip): For cells other than \"visual 0\" generating diff leads/commands can be skipped. New order view\n      // should share state between next orderViews.\n      orderView.prependView(rowHeadersView).setSize(columnsToRender).setOffset(this.table.renderedColumnToSource(0)).start();\n      for (let visibleColumnIndex = 0; visibleColumnIndex < columnsToRender; visibleColumnIndex++) {\n        orderView.render();\n        const TD = orderView.getCurrentNode();\n        const sourceColumnIndex = this.table.renderedColumnToSource(visibleColumnIndex);\n        if (!hasClass(TD, 'hide')) {\n          // Workaround for hidden columns plugin\n          TD.className = '';\n        }\n        TD.removeAttribute('style');\n        TD.removeAttribute('dir');\n\n        // Remove all accessibility-related attributes for the cell to start fresh.\n        removeAttribute(TD, [new RegExp('aria-(.*)'), new RegExp('role')]);\n        this.table.cellRenderer(sourceRowIndex, sourceColumnIndex, TD);\n        if (this.table.isAriaEnabled()) {\n          var _this$table$rowUtils$, _this$table$rowUtils;\n          setAttribute(TD, [...(TD.hasAttribute('role') ? [] : [A11Y_GRIDCELL()]), A11Y_TABINDEX(-1),\n          // `aria-colindex` is incremented by both tbody and thead rows.\n          A11Y_COLINDEX(sourceColumnIndex + ((_this$table$rowUtils$ = (_this$table$rowUtils = this.table.rowUtils) === null || _this$table$rowUtils === void 0 || (_this$table$rowUtils = _this$table$rowUtils.dataAccessObject) === null || _this$table$rowUtils === void 0 ? void 0 : _this$table$rowUtils.rowHeaders.length) !== null && _this$table$rowUtils$ !== void 0 ? _this$table$rowUtils$ : 0) + 1)]);\n        }\n      }\n      orderView.end();\n    }\n  }\n}","/**\n * TableRenderer class collects all renderers and properties necessary for table creation. It's\n * responsible for adjusting and rendering each renderer.\n *\n * Below is a diagram of the renderers together with an indication of what they are responisble for.\n *   <table>\n *     <colgroup>  \\ (root node)\n *       <col>      \\\n *       <col>       \\___ ColGroupRenderer\n *       <col>       /\n *       <col>      /\n *     </colgroup> /\n *     <thead>     \\ (root node)\n *       <tr>       \\\n *         <th>      \\\n *         <th>       \\____ ColumnHeadersRenderer\n *         <th>       /\n *         <th>      /\n *       </tr>      /\n *     </thead>    /\n *     <tbody>   ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯\\ (root node)\n *       <tr>   (root node)          \\\n *         <th>  --- RowHeadersRenderer\n *         <td>  \\                     \\\n *         <td>   -- CellsRenderer      \\\n *         <td>  /                       \\\n *       </tr>                            \\\n *       <tr>   (root node)                \\\n *         <th>  --- RowHeadersRenderer     \\\n *         <td>  \\                           \\___ RowsRenderer\n *         <td>   -- CellsRenderer           /\n *         <td>  /                          /\n *       </tr>                             /\n *       <tr>   (root node)               /\n *         <th>  --- RowHeadersRenderer  /\n *         <td>  \\                      /\n *         <td>   -- CellsRenderer     /\n *         <td>  /                    /\n *       </tr>                       /\n *     </tbody>  ___________________/\n *   </table>.\n *\n * @class {RowsRenderer}\n */\nexport default class TableRenderer {\n  constructor(rootNode) {\n    let {\n      cellRenderer\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    /**\n     * Table element which will be used to render the children element.\n     *\n     * @type {HTMLTableElement}\n     */\n    this.rootNode = rootNode;\n    /**\n     * Document owner of the root node.\n     *\n     * @type {HTMLDocument}\n     */\n    this.rootDocument = this.rootNode.ownerDocument;\n    /**\n     * Renderer class responsible for rendering row headers.\n     *\n     * @type {RowsRenderer}\n     */\n    this.rowHeaders = null;\n    /**\n     * Renderer class responsible for rendering column headers.\n     *\n     * @type {ColumnHeadersRenderer}\n     */\n    this.columnHeaders = null;\n    /**\n     * Renderer class responsible for rendering col in colgroup.\n     *\n     * @type {ColGroupRenderer}\n     */\n    this.colGroup = null;\n    /**\n     * Renderer class responsible for rendering rows in tbody.\n     *\n     * @type {RowsRenderer}\n     */\n    this.rows = null;\n    /**\n     * Renderer class responsible for rendering cells.\n     *\n     * @type {CellsRenderer}\n     */\n    this.cells = null;\n    /**\n     * Row filter which contains all necessary information about row index transformation.\n     *\n     * @type {RowFilter}\n     */\n    this.rowFilter = null;\n    /**\n     * Column filter which contains all necessary information about column index transformation.\n     *\n     * @type {ColumnFilter}\n     */\n    this.columnFilter = null;\n    /**\n     * Row utils class which contains all necessary information about sizes of the rows.\n     *\n     * @type {RowUtils}\n     */\n    this.rowUtils = null;\n    /**\n     * Column utils class which contains all necessary information about sizes of the columns.\n     *\n     * @type {ColumnUtils}\n     */\n    this.columnUtils = null;\n    /**\n     * Indicates how much rows should be rendered to fill whole table viewport.\n     *\n     * @type {number}\n     */\n    this.rowsToRender = 0;\n    /**\n     * Indicates how much columns should be rendered to fill whole table viewport.\n     *\n     * @type {number}\n     */\n    this.columnsToRender = 0;\n    /**\n     * An array of functions to be used as a content factory to row headers.\n     *\n     * @type {Function[]}\n     */\n    this.rowHeaderFunctions = [];\n    /**\n     * Count of the function used to render row headers.\n     *\n     * @type {number}\n     */\n    this.rowHeadersCount = 0;\n    /**\n     * An array of functions to be used as a content factory to column headers.\n     *\n     * @type {Function[]}\n     */\n    this.columnHeaderFunctions = [];\n    /**\n     * Count of the function used to render column headers.\n     *\n     * @type {number}\n     */\n    this.columnHeadersCount = 0;\n    /**\n     * Cell renderer used to render cells content.\n     *\n     * @type {Function}\n     */\n    this.cellRenderer = cellRenderer;\n  }\n\n  /**\n   * Set row and column util classes.\n   *\n   * @param {RowUtils} rowUtils RowUtils instance which provides useful methods related to row sizes.\n   * @param {ColumnUtils} columnUtils ColumnUtils instance which provides useful methods related to row sizes.\n   */\n  setAxisUtils(rowUtils, columnUtils) {\n    this.rowUtils = rowUtils;\n    this.columnUtils = columnUtils;\n  }\n\n  /**\n   * Sets viewport size of the table.\n   *\n   * @param {number} rowsCount An amount of rows to render.\n   * @param {number} columnsCount An amount of columns to render.\n   */\n  setViewportSize(rowsCount, columnsCount) {\n    this.rowsToRender = rowsCount;\n    this.columnsToRender = columnsCount;\n  }\n\n  /**\n   * Sets row and column filter instances.\n   *\n   * @param {RowFilter} rowFilter Row filter instance which contains all necessary information about row index transformation.\n   * @param {ColumnFilter} columnFilter Column filter instance which contains all necessary information about row\n   * index transformation.\n   */\n  setFilters(rowFilter, columnFilter) {\n    this.rowFilter = rowFilter;\n    this.columnFilter = columnFilter;\n  }\n\n  /**\n   * Sets row and column header functions.\n   *\n   * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.\n   * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.\n   */\n  setHeaderContentRenderers(rowHeaders, columnHeaders) {\n    this.rowHeaderFunctions = rowHeaders;\n    this.rowHeadersCount = rowHeaders.length;\n    this.columnHeaderFunctions = columnHeaders;\n    this.columnHeadersCount = columnHeaders.length;\n  }\n\n  /**\n   * Sets table renderers.\n   *\n   * @param {renderers} renderers The renderer units.\n   * @param {RowHeadersRenderer} renderers.rowHeaders Row headers renderer.\n   * @param {ColumnHeadersRenderer} renderers.columnHeaders Column headers renderer.\n   * @param {ColGroupRenderer} renderers.colGroup Col group renderer.\n   * @param {RowsRenderer} renderers.rows Rows renderer.\n   * @param {CellsRenderer} renderers.cells Cells renderer.\n   */\n  setRenderers() {\n    let {\n      rowHeaders,\n      columnHeaders,\n      colGroup,\n      rows,\n      cells\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    rowHeaders.setTable(this);\n    columnHeaders.setTable(this);\n    colGroup.setTable(this);\n    rows.setTable(this);\n    cells.setTable(this);\n    this.rowHeaders = rowHeaders;\n    this.columnHeaders = columnHeaders;\n    this.colGroup = colGroup;\n    this.rows = rows;\n    this.cells = cells;\n  }\n\n  /**\n   * Transforms visual/rendered row index to source index.\n   *\n   * @param {number} rowIndex Rendered index.\n   * @returns {number}\n   */\n  renderedRowToSource(rowIndex) {\n    return this.rowFilter.renderedToSource(rowIndex);\n  }\n\n  /**\n   * Transforms visual/rendered column index to source index.\n   *\n   * @param {number} columnIndex Rendered index.\n   * @returns {number}\n   */\n  renderedColumnToSource(columnIndex) {\n    return this.columnFilter.renderedToSource(columnIndex);\n  }\n\n  /**\n   * Returns `true` if the accessibility-related ARIA tags should be added to the table, `false` otherwise.\n   *\n   * @returns {boolean}\n   */\n  isAriaEnabled() {\n    return this.rowUtils.wtSettings.getSetting('ariaTags');\n  }\n\n  /**\n   * Renders the table.\n   */\n  render() {\n    this.colGroup.adjust();\n    this.columnHeaders.adjust();\n    this.rows.adjust();\n    this.rowHeaders.adjust();\n    this.columnHeaders.render();\n    this.rows.render();\n    this.rowHeaders.render();\n    this.cells.render();\n\n    // After the cells are rendered calculate columns width (or columns stretch width) to prepare proper values\n    // for colGroup renderer (which renders COL elements).\n    this.columnUtils.calculateWidths();\n    this.colGroup.render();\n    const {\n      rowsToRender,\n      rows\n    } = this;\n\n    // Fix for multi-line content and for supporting `rowHeights` option.\n    for (let visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n      const TR = rows.getRenderedNode(visibleRowIndex);\n      if (TR.firstChild) {\n        const sourceRowIndex = this.renderedRowToSource(visibleRowIndex);\n        const rowHeight = this.rowUtils.getHeight(sourceRowIndex);\n        if (rowHeight) {\n          // Decrease height. 1 pixel will be \"replaced\" by 1px border top\n          TR.firstChild.style.height = `${rowHeight - 1}px`;\n        } else {\n          TR.firstChild.style.height = '';\n        }\n      }\n    }\n  }\n}","import RowHeadersRenderer from \"./rowHeaders.mjs\";\nimport ColumnHeadersRenderer from \"./columnHeaders.mjs\";\nimport ColGroupRenderer from \"./colGroup.mjs\";\nimport RowsRenderer from \"./rows.mjs\";\nimport CellsRenderer from \"./cells.mjs\";\nimport TableRenderer from \"./table.mjs\";\n/**\n * Content renderer.\n *\n * @class Renderer\n */\nclass Renderer {\n  constructor() {\n    let {\n      TABLE,\n      THEAD,\n      COLGROUP,\n      TBODY,\n      rowUtils,\n      columnUtils,\n      cellRenderer\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    /**\n     * General renderer class used to render Walkontable content on screen.\n     *\n     * @type {TableRenderer}\n     */\n    this.renderer = new TableRenderer(TABLE, {\n      cellRenderer\n    });\n    this.renderer.setRenderers({\n      rowHeaders: new RowHeadersRenderer(),\n      columnHeaders: new ColumnHeadersRenderer(THEAD),\n      colGroup: new ColGroupRenderer(COLGROUP),\n      rows: new RowsRenderer(TBODY),\n      cells: new CellsRenderer()\n    });\n    this.renderer.setAxisUtils(rowUtils, columnUtils);\n  }\n\n  /**\n   * Sets filter calculators for newly calculated row and column position. The filters are used to transform visual\n   * indexes (0 to N) to source indexes provided by Handsontable.\n   *\n   * @param {RowFilter} rowFilter The row filter instance.\n   * @param {ColumnFilter} columnFilter The column filter instance.\n   * @returns {Renderer}\n   */\n  setFilters(rowFilter, columnFilter) {\n    this.renderer.setFilters(rowFilter, columnFilter);\n    return this;\n  }\n\n  /**\n   * Sets the viewport size of the rendered table.\n   *\n   * @param {number} rowsCount An amount of rows to render.\n   * @param {number} columnsCount An amount of columns to render.\n   * @returns {Renderer}\n   */\n  setViewportSize(rowsCount, columnsCount) {\n    this.renderer.setViewportSize(rowsCount, columnsCount);\n    return this;\n  }\n\n  /**\n   * Sets row and column header functions.\n   *\n   * @param {Function[]} rowHeaders Row header functions. Factories for creating content for row headers.\n   * @param {Function[]} columnHeaders Column header functions. Factories for creating content for column headers.\n   * @returns {Renderer}\n   */\n  setHeaderContentRenderers(rowHeaders, columnHeaders) {\n    this.renderer.setHeaderContentRenderers(rowHeaders, columnHeaders);\n    return this;\n  }\n\n  /**\n   * Adjusts the table (preparing for render).\n   */\n  adjust() {\n    this.renderer.adjust();\n  }\n\n  /**\n   * Renders the table.\n   */\n  render() {\n    this.renderer.render();\n  }\n}\nexport { RowHeadersRenderer, ColumnHeadersRenderer, ColGroupRenderer, RowsRenderer, CellsRenderer, TableRenderer, Renderer };","import { getScrollbarWidth } from \"./../../../../helpers/dom/element.mjs\";\n/**\n * Column utils class contains all necessary information about sizes of the columns.\n *\n * @class {ColumnUtils}\n */\nexport default class ColumnUtils {\n  /**\n   * @param {TableDao} dataAccessObject The table Data Access Object.\n   * @param {Settings} wtSettings The walkontable settings.\n   */\n  constructor(dataAccessObject, wtSettings) {\n    this.dataAccessObject = dataAccessObject;\n    this.wtSettings = wtSettings;\n    this.headerWidths = new Map();\n  }\n\n  /**\n   * Returns column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getWidth(sourceIndex) {\n    return this.wtSettings.getSetting('columnWidth', sourceIndex) || this.wtSettings.getSetting('defaultColumnWidth');\n  }\n\n  /**\n   * Returns stretched column width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getStretchedColumnWidth(sourceIndex) {\n    const calculator = this.dataAccessObject.wtViewport.columnsRenderCalculator;\n    let width = this.getWidth(sourceIndex);\n    if (calculator) {\n      const stretchedWidth = calculator.getStretchedColumnWidth(sourceIndex, width);\n      if (stretchedWidth) {\n        width = stretchedWidth;\n      }\n    }\n    return width;\n  }\n\n  /**\n   * Returns column header height based on passed header level.\n   *\n   * @param {number} level Column header level.\n   * @returns {number}\n   */\n  getHeaderHeight(level) {\n    let height = this.wtSettings.getSetting('defaultRowHeight');\n    const oversizedHeight = this.dataAccessObject.wtViewport.oversizedColumnHeaders[level];\n    if (oversizedHeight !== void 0) {\n      height = height ? Math.max(height, oversizedHeight) : oversizedHeight;\n    }\n    return height;\n  }\n\n  /**\n   * Returns column header width based on passed source index.\n   *\n   * @param {number} sourceIndex Column source index.\n   * @returns {number}\n   */\n  getHeaderWidth(sourceIndex) {\n    return this.headerWidths.get(this.dataAccessObject.wtTable.columnFilter.sourceToRendered(sourceIndex));\n  }\n\n  /**\n   * Calculates column header widths that can be retrieved from the cache.\n   */\n  calculateWidths() {\n    const {\n      wtSettings\n    } = this;\n    const {\n      wtTable,\n      wtViewport,\n      cloneSource\n    } = this.dataAccessObject;\n    const mainHolder = cloneSource ? cloneSource.wtTable.holder : wtTable.holder;\n    const scrollbarCompensation = mainHolder.offsetHeight < mainHolder.scrollHeight ? getScrollbarWidth() : 0;\n    let rowHeaderWidthSetting = wtSettings.getSetting('rowHeaderWidth');\n    wtViewport.columnsRenderCalculator.refreshStretching(wtViewport.getViewportWidth() - scrollbarCompensation);\n    rowHeaderWidthSetting = wtSettings.getSetting('onModifyRowHeaderWidth', rowHeaderWidthSetting);\n    if (rowHeaderWidthSetting !== null && rowHeaderWidthSetting !== void 0) {\n      const rowHeadersCount = wtSettings.getSetting('rowHeaders').length;\n      const defaultColumnWidth = wtSettings.getSetting('defaultColumnWidth');\n      for (let visibleColumnIndex = 0; visibleColumnIndex < rowHeadersCount; visibleColumnIndex++) {\n        let width = Array.isArray(rowHeaderWidthSetting) ? rowHeaderWidthSetting[visibleColumnIndex] : rowHeaderWidthSetting;\n        width = width === null || width === void 0 ? defaultColumnWidth : width;\n        this.headerWidths.set(visibleColumnIndex, width);\n      }\n    }\n  }\n}","/**\n * Row utils class contains all necessary information about sizes of the rows.\n *\n * @class {RowUtils}\n */\nexport default class RowUtils {\n  /**\n   * @param {TableDao} dataAccessObject The table Data Access Object.\n   * @param {Settings} wtSettings The walkontable settings.\n   */\n  constructor(dataAccessObject, wtSettings) {\n    this.dataAccessObject = dataAccessObject;\n    this.wtSettings = wtSettings;\n  }\n\n  /**\n   * Returns row height based on passed source index.\n   *\n   * @param {number} sourceIndex Row source index.\n   * @returns {number}\n   */\n  getHeight(sourceIndex) {\n    let height = this.wtSettings.getSetting('rowHeight', sourceIndex);\n    const oversizedHeight = this.dataAccessObject.wtViewport.oversizedRows[sourceIndex];\n    if (oversizedHeight !== void 0) {\n      height = height === void 0 ? oversizedHeight : Math.max(height, oversizedHeight);\n    }\n    return height;\n  }\n}","/**\n * @typedef {'top'|'bottom'|'inline_start'|'top_inline_start_corner'|'bottom_inline_start_corner'} CLONE_TYPES_ENUM\n */\nexport const CLONE_TOP = 'top';\nexport const CLONE_BOTTOM = 'bottom';\nexport const CLONE_INLINE_START = 'inline_start';\nexport const CLONE_TOP_INLINE_START_CORNER = 'top_inline_start_corner';\nexport const CLONE_BOTTOM_INLINE_START_CORNER = 'bottom_inline_start_corner';\nexport const CLONE_TYPES = [CLONE_TOP, CLONE_BOTTOM, CLONE_INLINE_START, CLONE_TOP_INLINE_START_CORNER, CLONE_BOTTOM_INLINE_START_CORNER];\nexport const CLONE_CLASS_NAMES = new Map([[CLONE_TOP, `ht_clone_${CLONE_TOP}`], [CLONE_BOTTOM, `ht_clone_${CLONE_BOTTOM}`], [CLONE_INLINE_START, `ht_clone_${CLONE_INLINE_START} ht_clone_left`], [CLONE_TOP_INLINE_START_CORNER, `ht_clone_${CLONE_TOP_INLINE_START_CORNER} ht_clone_top_left_corner`], [CLONE_BOTTOM_INLINE_START_CORNER, `ht_clone_${CLONE_BOTTOM_INLINE_START_CORNER} ht_clone_bottom_left_corner`]]);","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { hasClass, index, offset, removeTextNodes, overlayContainsElement, closest, outerHeight, outerWidth, innerHeight, isVisible, setAttribute } from \"../../../helpers/dom/element.mjs\";\nimport { isFunction } from \"../../../helpers/function.mjs\";\nimport ColumnFilter from \"./filter/column.mjs\";\nimport RowFilter from \"./filter/row.mjs\";\nimport { Renderer } from \"./renderer/index.mjs\";\nimport ColumnUtils from \"./utils/column.mjs\";\nimport RowUtils from \"./utils/row.mjs\";\nimport { CLONE_TOP, CLONE_BOTTOM, CLONE_INLINE_START, CLONE_TOP_INLINE_START_CORNER, CLONE_BOTTOM_INLINE_START_CORNER } from \"./overlay/index.mjs\";\nimport { A11Y_PRESENTATION } from \"../../../helpers/a11y.mjs\";\n/**\n * @todo These mixes are never added to the class Table, however their members are used here.\n * @todo Continue: Potentially it works only, because some of these mixes are added to every inherited class.\n * @todo Refactoring, move code from `if(this.isMaster)` into MasterTable, and others like that.\n * @mixes stickyColumnsStart\n * @mixes stickyRowsBottom\n * @mixes stickyRowsTop\n * @mixes calculatedRows\n * @mixes calculatedColumns\n * @abstract\n */\nclass Table {\n  /**\n   *\n   * @abstract\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {'master'|CLONE_TYPES_ENUM} name Overlay name.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings, name) {\n    /**\n     * The walkontable settings.\n     *\n     * @protected\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", null);\n    _defineProperty(this, \"domBindings\", void 0);\n    _defineProperty(this, \"TBODY\", null);\n    _defineProperty(this, \"THEAD\", null);\n    _defineProperty(this, \"COLGROUP\", null);\n    /**\n     * Indicates if the table has height bigger than 0px.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"hasTableHeight\", true);\n    /**\n     * Indicates if the table has width bigger than 0px.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"hasTableWidth\", true);\n    /**\n     * Indicates if the table is visible. By visible, it means that the holder\n     * element has CSS 'display' property different than 'none'.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"isTableVisible\", false);\n    _defineProperty(this, \"tableOffset\", 0);\n    _defineProperty(this, \"holderOffset\", 0);\n    this.domBindings = domBindings;\n    /**\n     * Indicates if this instance is of type `MasterTable` (i.e. It is NOT an overlay).\n     *\n     * @type {boolean}\n     */\n    this.isMaster = name === 'master';\n    this.name = name;\n    this.dataAccessObject = dataAccessObject;\n    this.facadeGetter = facadeGetter;\n    this.wtSettings = wtSettings;\n\n    // legacy support\n    this.instance = this.dataAccessObject.wot; // TODO refactoring: it might be removed here, and provides legacy support through facade.\n    this.wot = this.dataAccessObject.wot;\n    this.TABLE = domBindings.rootTable;\n    removeTextNodes(this.TABLE);\n\n    // TODO refactoring, to recognize the legitimacy of moving them into domBidings\n    this.spreader = this.createSpreader(this.TABLE);\n    this.hider = this.createHider(this.spreader);\n    this.holder = this.createHolder(this.hider);\n    this.wtRootElement = this.holder.parentNode;\n    if (this.isMaster) {\n      this.alignOverlaysWithTrimmingContainer(); // todo wow, It calls method from child class (MasterTable).\n    }\n\n    this.fixTableDomTree();\n    this.rowFilter = null; // TODO refactoring, eliminate all (re)creations of this object, then updates state when needed.\n    this.columnFilter = null; // TODO refactoring, eliminate all (re)creations of this object, then updates state when needed.\n    this.correctHeaderWidth = false;\n    const origRowHeaderWidth = this.wtSettings.getSettingPure('rowHeaderWidth');\n\n    // Fix for jumping row headers (https://github.com/handsontable/handsontable/issues/3850)\n    this.wtSettings.update('rowHeaderWidth', () => this._modifyRowHeaderWidth(origRowHeaderWidth));\n    this.rowUtils = new RowUtils(this.dataAccessObject, this.wtSettings); // TODO refactoring, It can be passed through IOC.\n    this.columnUtils = new ColumnUtils(this.dataAccessObject, this.wtSettings); // TODO refactoring, It can be passed through IOC.\n\n    this.tableRenderer = new Renderer({\n      // TODO refactoring, It can be passed through IOC.\n      TABLE: this.TABLE,\n      THEAD: this.THEAD,\n      COLGROUP: this.COLGROUP,\n      TBODY: this.TBODY,\n      rowUtils: this.rowUtils,\n      columnUtils: this.columnUtils,\n      cellRenderer: this.wtSettings.getSettingPure('cellRenderer')\n    });\n  }\n\n  /**\n   * Returns a boolean that is true if this Table represents a specific overlay, identified by the overlay name.\n   * For MasterTable, it returns false.\n   *\n   * @param {string} overlayTypeName The overlay type.\n   * @returns {boolean}\n   */\n  is(overlayTypeName) {\n    // todo refactoring: eliminate all protected and private usages\n    return this.name === overlayTypeName;\n  }\n\n  /**\n   *\n   */\n  fixTableDomTree() {\n    const rootDocument = this.domBindings.rootDocument;\n    this.TBODY = this.TABLE.querySelector('tbody');\n    if (!this.TBODY) {\n      this.TBODY = rootDocument.createElement('tbody');\n      this.TABLE.appendChild(this.TBODY);\n    }\n    this.THEAD = this.TABLE.querySelector('thead');\n    if (!this.THEAD) {\n      this.THEAD = rootDocument.createElement('thead');\n      this.TABLE.insertBefore(this.THEAD, this.TBODY);\n    }\n    this.COLGROUP = this.TABLE.querySelector('colgroup');\n    if (!this.COLGROUP) {\n      this.COLGROUP = rootDocument.createElement('colgroup');\n      this.TABLE.insertBefore(this.COLGROUP, this.THEAD);\n    }\n  }\n\n  /**\n   * @param {HTMLTableElement} table An element to process.\n   * @returns {HTMLElement}\n   */\n  createSpreader(table) {\n    const parent = table.parentNode;\n    let spreader;\n    if (!parent || parent.nodeType !== Node.ELEMENT_NODE || !hasClass(parent, 'wtHolder')) {\n      spreader = this.domBindings.rootDocument.createElement('div');\n      spreader.className = 'wtSpreader';\n      if (parent) {\n        // if TABLE is detached (e.g. in Jasmine test), it has no parentNode so we cannot attach holder to it\n        parent.insertBefore(spreader, table);\n      }\n      spreader.appendChild(table);\n    }\n    spreader.style.position = 'relative';\n    if (this.wtSettings.getSetting('ariaTags')) {\n      setAttribute(spreader, [A11Y_PRESENTATION()]);\n    }\n    return spreader;\n  }\n\n  /**\n   * @param {HTMLElement} spreader An element to the hider element is injected.\n   * @returns {HTMLElement}\n   */\n  createHider(spreader) {\n    const parent = spreader.parentNode;\n    let hider;\n    if (!parent || parent.nodeType !== Node.ELEMENT_NODE || !hasClass(parent, 'wtHolder')) {\n      hider = this.domBindings.rootDocument.createElement('div');\n      hider.className = 'wtHider';\n      if (parent) {\n        // if TABLE is detached (e.g. in Jasmine test), it has no parentNode so we cannot attach holder to it\n        parent.insertBefore(hider, spreader);\n      }\n      hider.appendChild(spreader);\n    }\n    if (this.wtSettings.getSetting('ariaTags')) {\n      setAttribute(hider, [A11Y_PRESENTATION()]);\n    }\n    return hider;\n  }\n\n  /**\n   *\n   * @param {HTMLElement} hider An element to the holder element is injected.\n   * @returns {HTMLElement}\n   */\n  createHolder(hider) {\n    const parent = hider.parentNode;\n    let holder;\n    if (!parent || parent.nodeType !== Node.ELEMENT_NODE || !hasClass(parent, 'wtHolder')) {\n      holder = this.domBindings.rootDocument.createElement('div');\n      holder.style.position = 'relative';\n      holder.className = 'wtHolder';\n      if (parent) {\n        // if TABLE is detached (e.g. in Jasmine test), it has no parentNode so we cannot attach holder to it\n        parent.insertBefore(holder, hider);\n      }\n      if (this.isMaster) {\n        holder.parentNode.className += 'ht_master handsontable';\n        holder.parentNode.setAttribute('dir', this.wtSettings.getSettingPure('rtlMode') ? 'rtl' : 'ltr');\n        if (this.wtSettings.getSetting('ariaTags')) {\n          setAttribute(holder.parentNode, [A11Y_PRESENTATION()]);\n        }\n      }\n      holder.appendChild(hider);\n    }\n    if (this.wtSettings.getSetting('ariaTags')) {\n      setAttribute(holder, [A11Y_PRESENTATION()]);\n    }\n    return holder;\n  }\n\n  /**\n   * Redraws the table.\n   *\n   * @param {boolean} [fastDraw=false] If TRUE, will try to avoid full redraw and only update the border positions.\n   *                                   If FALSE or UNDEFINED, will perform a full redraw.\n   * @returns {Table}\n   */\n  draw() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const {\n      wtSettings\n    } = this;\n    const {\n      wtOverlays,\n      wtViewport\n    } = this.dataAccessObject;\n    const totalRows = wtSettings.getSetting('totalRows');\n    const totalColumns = wtSettings.getSetting('totalColumns');\n    const rowHeaders = wtSettings.getSetting('rowHeaders');\n    const rowHeadersCount = rowHeaders.length;\n    const columnHeaders = wtSettings.getSetting('columnHeaders');\n    const columnHeadersCount = columnHeaders.length;\n    let syncScroll = false;\n    let runFastDraw = fastDraw;\n    if (this.isMaster) {\n      this.holderOffset = offset(this.holder);\n      runFastDraw = wtViewport.createRenderCalculators(runFastDraw);\n      if (rowHeadersCount && !wtSettings.getSetting('fixedColumnsStart')) {\n        const leftScrollPos = wtOverlays.inlineStartOverlay.getScrollPosition();\n        const previousState = this.correctHeaderWidth;\n        this.correctHeaderWidth = leftScrollPos !== 0;\n        if (previousState !== this.correctHeaderWidth) {\n          runFastDraw = false;\n        }\n      }\n    }\n    if (this.isMaster) {\n      syncScroll = wtOverlays.updateStateOfRendering();\n    }\n    if (runFastDraw) {\n      if (this.isMaster) {\n        // in case we only scrolled without redraw, update visible rows information in oldRowsCalculator\n        wtViewport.createVisibleCalculators();\n      }\n      if (wtOverlays) {\n        wtOverlays.refresh(true);\n      }\n    } else {\n      if (this.isMaster) {\n        this.tableOffset = offset(this.TABLE);\n      } else {\n        this.tableOffset = this.dataAccessObject.parentTableOffset;\n      }\n      const startRow = totalRows > 0 ? this.getFirstRenderedRow() : 0;\n      const startColumn = totalColumns > 0 ? this.getFirstRenderedColumn() : 0;\n      this.rowFilter = new RowFilter(startRow, totalRows, columnHeadersCount);\n      this.columnFilter = new ColumnFilter(startColumn, totalColumns, rowHeadersCount);\n      let performRedraw = true;\n\n      // Only master table rendering can be skipped\n      if (this.isMaster) {\n        this.alignOverlaysWithTrimmingContainer(); // todo It calls method from child class (MasterTable).\n        const skipRender = {};\n        this.wtSettings.getSetting('beforeDraw', true, skipRender);\n        performRedraw = skipRender.skipRender !== true;\n      }\n      if (performRedraw) {\n        this.tableRenderer.setHeaderContentRenderers(rowHeaders, columnHeaders);\n        if (this.is(CLONE_BOTTOM) || this.is(CLONE_BOTTOM_INLINE_START_CORNER)) {\n          // do NOT render headers on the bottom or bottom-left corner overlay\n          this.tableRenderer.setHeaderContentRenderers(rowHeaders, []);\n        }\n        this.resetOversizedRows();\n        this.tableRenderer.setViewportSize(this.getRenderedRowsCount(), this.getRenderedColumnsCount()).setFilters(this.rowFilter, this.columnFilter).render();\n        let workspaceWidth;\n        if (this.isMaster) {\n          workspaceWidth = this.dataAccessObject.workspaceWidth;\n          this.dataAccessObject.wtViewport.containerWidth = null;\n          this.markOversizedColumnHeaders();\n        }\n        this.adjustColumnHeaderHeights();\n        if (this.isMaster || this.is(CLONE_BOTTOM)) {\n          this.markOversizedRows();\n        }\n        if (this.isMaster) {\n          this.dataAccessObject.wtViewport.createVisibleCalculators();\n          this.dataAccessObject.wtOverlays.refresh(false);\n          this.dataAccessObject.wtOverlays.applyToDOM();\n          const hiderWidth = outerWidth(this.hider);\n          const tableWidth = outerWidth(this.TABLE);\n          if (hiderWidth !== 0 && tableWidth !== hiderWidth) {\n            // Recalculate the column widths, if width changes made in the overlays removed the scrollbar, thus changing the viewport width.\n            this.columnUtils.calculateWidths();\n            this.tableRenderer.renderer.colGroup.render();\n          }\n          if (workspaceWidth !== this.dataAccessObject.wtViewport.getWorkspaceWidth()) {\n            // workspace width changed though to shown/hidden vertical scrollbar. Let's reapply stretching\n            this.dataAccessObject.wtViewport.containerWidth = null;\n            this.columnUtils.calculateWidths();\n            this.tableRenderer.renderer.colGroup.render();\n          }\n          this.wtSettings.getSetting('onDraw', true);\n        } else if (this.is(CLONE_BOTTOM)) {\n          this.dataAccessObject.cloneSource.wtOverlays.adjustElementsSize();\n        }\n      }\n    }\n    let positionChanged = false;\n    if (this.isMaster) {\n      positionChanged = wtOverlays.topOverlay.resetFixedPosition();\n      if (wtOverlays.bottomOverlay.clone) {\n        positionChanged = wtOverlays.bottomOverlay.resetFixedPosition() || positionChanged;\n      }\n      positionChanged = wtOverlays.inlineStartOverlay.resetFixedPosition() || positionChanged;\n      if (wtOverlays.topInlineStartCornerOverlay) {\n        wtOverlays.topInlineStartCornerOverlay.resetFixedPosition();\n      }\n      if (wtOverlays.bottomInlineStartCornerOverlay && wtOverlays.bottomInlineStartCornerOverlay.clone) {\n        wtOverlays.bottomInlineStartCornerOverlay.resetFixedPosition();\n      }\n    }\n    if (positionChanged) {\n      // It refreshes the cells borders caused by a 1px shift (introduced by overlays which add or\n      // remove `innerBorderTop` and `innerBorderInlineStart` CSS classes to the DOM element. This happens\n      // when there is a switch between rendering from 0 to N rows/columns and vice versa).\n      wtOverlays.refreshAll(); // `refreshAll()` internally already calls `refreshSelections()` method\n      wtOverlays.adjustElementsSize();\n    } else {\n      this.dataAccessObject.selectionManager.setActiveOverlay(this.facadeGetter()).render(runFastDraw);\n    }\n    if (syncScroll) {\n      wtOverlays.syncScrollWithMaster();\n    }\n    this.dataAccessObject.drawn = true;\n    return this;\n  }\n\n  /**\n   * @param {number} col The visual column index.\n   */\n  markIfOversizedColumnHeader(col) {\n    const sourceColIndex = this.columnFilter.renderedToSource(col);\n    let level = this.wtSettings.getSetting('columnHeaders').length;\n    const defaultRowHeight = this.wtSettings.getSetting('defaultRowHeight');\n    let previousColHeaderHeight;\n    let currentHeader;\n    let currentHeaderHeight;\n    const columnHeaderHeightSetting = this.wtSettings.getSetting('columnHeaderHeight') || [];\n    while (level) {\n      level -= 1;\n      previousColHeaderHeight = this.getColumnHeaderHeight(level);\n      currentHeader = this.getColumnHeader(sourceColIndex, level);\n      if (!currentHeader) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n      currentHeaderHeight = innerHeight(currentHeader);\n      if (!previousColHeaderHeight && defaultRowHeight < currentHeaderHeight || previousColHeaderHeight < currentHeaderHeight) {\n        this.dataAccessObject.wtViewport.oversizedColumnHeaders[level] = currentHeaderHeight;\n      }\n      if (Array.isArray(columnHeaderHeightSetting)) {\n        if (columnHeaderHeightSetting[level] !== null && columnHeaderHeightSetting[level] !== void 0) {\n          this.dataAccessObject.wtViewport.oversizedColumnHeaders[level] = columnHeaderHeightSetting[level];\n        }\n      } else if (!isNaN(columnHeaderHeightSetting)) {\n        this.dataAccessObject.wtViewport.oversizedColumnHeaders[level] = columnHeaderHeightSetting;\n      }\n      if (this.dataAccessObject.wtViewport.oversizedColumnHeaders[level] < (columnHeaderHeightSetting[level] || columnHeaderHeightSetting)) {\n        this.dataAccessObject.wtViewport.oversizedColumnHeaders[level] = columnHeaderHeightSetting[level] || columnHeaderHeightSetting; // eslint-disable-line max-len\n      }\n    }\n  }\n\n  /**\n   *\n   */\n  adjustColumnHeaderHeights() {\n    const {\n      wtSettings\n    } = this;\n    const children = this.THEAD.childNodes;\n    const oversizedColumnHeaders = this.dataAccessObject.wtViewport.oversizedColumnHeaders;\n    const columnHeaders = wtSettings.getSetting('columnHeaders');\n    for (let i = 0, len = columnHeaders.length; i < len; i++) {\n      if (oversizedColumnHeaders[i]) {\n        if (!children[i] || children[i].childNodes.length === 0) {\n          return;\n        }\n        children[i].childNodes[0].style.height = `${oversizedColumnHeaders[i]}px`;\n      }\n    }\n  }\n\n  /**\n   * Resets cache of row heights. The cache should be cached for each render cycle in a case\n   * when new cell values have content which increases/decreases cell height.\n   */\n  resetOversizedRows() {\n    const {\n      wtSettings\n    } = this;\n    const {\n      wtViewport\n    } = this.dataAccessObject;\n    if (!this.isMaster && !this.is(CLONE_BOTTOM)) {\n      return;\n    }\n    if (!wtSettings.getSetting('externalRowCalculator')) {\n      const rowsToRender = this.getRenderedRowsCount();\n\n      // Reset the oversized row cache for rendered rows\n      for (let visibleRowIndex = 0; visibleRowIndex < rowsToRender; visibleRowIndex++) {\n        const sourceRow = this.rowFilter.renderedToSource(visibleRowIndex);\n        if (wtViewport.oversizedRows && wtViewport.oversizedRows[sourceRow]) {\n          wtViewport.oversizedRows[sourceRow] = void 0;\n        }\n      }\n    }\n  }\n\n  /**\n   * Get cell element at coords.\n   * Negative coords.row or coords.col are used to retrieve header cells. If there are multiple header levels, the\n   * negative value corresponds to the distance from the working area. For example, when there are 3 levels of column\n   * headers, coords.col=-1 corresponds to the most inner header element, while coords.col=-3 corresponds to the\n   * outmost header element.\n   *\n   * In case an element for the coords is not rendered, the method returns an error code.\n   * To produce the error code, the input parameters are validated in the order in which they\n   * are given. Thus, if both the row and the column coords are out of the rendered bounds,\n   * the method returns the error code for the row.\n   *\n   * @param {CellCoords} coords The cell coordinates.\n   * @returns {HTMLElement|number} HTMLElement on success or Number one of the exit codes on error:\n   *  -1 row before viewport\n   *  -2 row after viewport\n   *  -3 column before viewport\n   *  -4 column after viewport.\n   */\n  getCell(coords) {\n    let row = coords.row;\n    let column = coords.col;\n    const hookResult = this.wtSettings.getSetting('onModifyGetCellCoords', row, column);\n    if (hookResult && Array.isArray(hookResult)) {\n      [row, column] = hookResult;\n    }\n    if (this.isRowBeforeRenderedRows(row)) {\n      // row before rendered rows\n      return -1;\n    } else if (this.isRowAfterRenderedRows(row)) {\n      // row after rendered rows\n      return -2;\n    } else if (this.isColumnBeforeRenderedColumns(column)) {\n      // column before rendered columns\n      return -3;\n    } else if (this.isColumnAfterRenderedColumns(column)) {\n      // column after rendered columns\n      return -4;\n    }\n    const TR = this.getRow(row);\n    if (!TR && row >= 0) {\n      throw new Error('TR was expected to be rendered but is not');\n    }\n    const TD = TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(column)];\n    if (!TD && column >= 0) {\n      throw new Error('TD or TH was expected to be rendered but is not');\n    }\n    return TD;\n  }\n\n  /**\n   * Get the DOM element of the row with the provided index.\n   *\n   * @param {number} rowIndex Row index.\n   * @returns {HTMLTableRowElement|boolean} Return the row's DOM element or `false` if the row with the provided\n   * index doesn't exist.\n   */\n  getRow(rowIndex) {\n    let renderedRowIndex = null;\n    let parentElement = null;\n    if (rowIndex < 0) {\n      var _this$rowFilter;\n      renderedRowIndex = (_this$rowFilter = this.rowFilter) === null || _this$rowFilter === void 0 ? void 0 : _this$rowFilter.sourceRowToVisibleColHeadedRow(rowIndex);\n      parentElement = this.THEAD;\n    } else {\n      var _this$rowFilter2;\n      renderedRowIndex = (_this$rowFilter2 = this.rowFilter) === null || _this$rowFilter2 === void 0 ? void 0 : _this$rowFilter2.sourceToRendered(rowIndex);\n      parentElement = this.TBODY;\n    }\n    if (renderedRowIndex !== void 0 && parentElement !== void 0) {\n      if (parentElement.childNodes.length < renderedRowIndex + 1) {\n        return false;\n      } else {\n        return parentElement.childNodes[renderedRowIndex];\n      }\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * GetColumnHeader.\n   *\n   * @param {number} col Column index.\n   * @param {number} [level=0] Header level (0 = most distant to the table).\n   * @returns {object} HTMLElement on success or undefined on error.\n   */\n  getColumnHeader(col) {\n    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const TR = this.THEAD.childNodes[level];\n    return TR === null || TR === void 0 ? void 0 : TR.childNodes[this.columnFilter.sourceColumnToVisibleRowHeadedColumn(col)];\n  }\n\n  /**\n   * Gets all columns headers (TH elements) from the table.\n   *\n   * @param {number} column A source column index.\n   * @returns {HTMLTableCellElement[]}\n   */\n  getColumnHeaders(column) {\n    const THs = [];\n    const visibleColumn = this.columnFilter.sourceColumnToVisibleRowHeadedColumn(column);\n    this.THEAD.childNodes.forEach(TR => {\n      const TH = TR.childNodes[visibleColumn];\n      if (TH) {\n        THs.push(TH);\n      }\n    });\n    return THs;\n  }\n\n  /**\n   * GetRowHeader.\n   *\n   * @param {number} row Row index.\n   * @param {number} [level=0] Header level (0 = most distant to the table).\n   * @returns {HTMLElement} HTMLElement on success or Number one of the exit codes on error: `null table doesn't have\n   *   row headers`.\n   */\n  getRowHeader(row) {\n    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const rowHeadersCount = this.wtSettings.getSetting('rowHeaders').length;\n    if (level >= rowHeadersCount) {\n      return;\n    }\n    const renderedRow = this.rowFilter.sourceToRendered(row);\n    const visibleRow = renderedRow < 0 ? this.rowFilter.sourceRowToVisibleColHeadedRow(row) : renderedRow;\n    const parentElement = renderedRow < 0 ? this.THEAD : this.TBODY;\n    const TR = parentElement.childNodes[visibleRow];\n    return TR === null || TR === void 0 ? void 0 : TR.childNodes[level];\n  }\n\n  /**\n   * Gets all rows headers (TH elements) from the table.\n   *\n   * @param {number} row A source row index.\n   * @returns {HTMLTableCellElement[]}\n   */\n  getRowHeaders(row) {\n    const THs = [];\n    const rowHeadersCount = this.wtSettings.getSetting('rowHeaders').length;\n    for (let renderedRowIndex = 0; renderedRowIndex < rowHeadersCount; renderedRowIndex++) {\n      const TR = this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];\n      const TH = TR === null || TR === void 0 ? void 0 : TR.childNodes[renderedRowIndex];\n      if (TH) {\n        THs.push(TH);\n      }\n    }\n    return THs;\n  }\n\n  /**\n   * Returns cell coords object for a given TD (or a child element of a TD element).\n   *\n   * @param {HTMLTableCellElement} TD A cell DOM element (or a child of one).\n   * @returns {CellCoords|null} The coordinates of the provided TD element (or the closest TD element) or null, if the\n   *   provided element is not applicable.\n   */\n  getCoords(TD) {\n    let cellElement = TD;\n    if (cellElement.nodeName !== 'TD' && cellElement.nodeName !== 'TH') {\n      cellElement = closest(cellElement, ['TD', 'TH']);\n    }\n    if (cellElement === null) {\n      return null;\n    }\n    const TR = cellElement.parentNode;\n    const CONTAINER = TR.parentNode;\n    let row = index(TR);\n    let col = cellElement.cellIndex;\n    if (overlayContainsElement(CLONE_TOP_INLINE_START_CORNER, cellElement, this.wtRootElement) || overlayContainsElement(CLONE_TOP, cellElement, this.wtRootElement)) {\n      if (CONTAINER.nodeName === 'THEAD') {\n        row -= CONTAINER.childNodes.length;\n      }\n    } else if (overlayContainsElement(CLONE_BOTTOM_INLINE_START_CORNER, cellElement, this.wtRootElement) || overlayContainsElement(CLONE_BOTTOM, cellElement, this.wtRootElement)) {\n      const totalRows = this.wtSettings.getSetting('totalRows');\n      row = totalRows - CONTAINER.childNodes.length + row;\n    } else if (CONTAINER === this.THEAD) {\n      row = this.rowFilter.visibleColHeadedRowToSourceRow(row);\n    } else {\n      row = this.rowFilter.renderedToSource(row);\n    }\n    if (overlayContainsElement(CLONE_TOP_INLINE_START_CORNER, cellElement, this.wtRootElement) || overlayContainsElement(CLONE_INLINE_START, cellElement, this.wtRootElement) || overlayContainsElement(CLONE_BOTTOM_INLINE_START_CORNER, cellElement, this.wtRootElement)) {\n      col = this.columnFilter.offsettedTH(col);\n    } else {\n      col = this.columnFilter.visibleRowHeadedColumnToSourceColumn(col);\n    }\n    return this.wot.createCellCoords(row, col);\n  }\n\n  /**\n   * Check if any of the rendered rows is higher than expected, and if so, cache them.\n   */\n  markOversizedRows() {\n    if (this.wtSettings.getSetting('externalRowCalculator')) {\n      return;\n    }\n    let rowCount = this.TBODY.childNodes.length;\n    const expectedTableHeight = rowCount * this.wtSettings.getSetting('defaultRowHeight');\n    const actualTableHeight = innerHeight(this.TBODY) - 1;\n    let previousRowHeight;\n    let rowInnerHeight;\n    let sourceRowIndex;\n    let currentTr;\n    let rowHeader;\n    if (expectedTableHeight === actualTableHeight && !this.wtSettings.getSetting('fixedRowsBottom')) {\n      // If the actual table height equals rowCount * default single row height, no row is oversized -> no need to iterate over them\n      return;\n    }\n    while (rowCount) {\n      rowCount -= 1;\n      sourceRowIndex = this.rowFilter.renderedToSource(rowCount);\n      previousRowHeight = this.getRowHeight(sourceRowIndex);\n      currentTr = this.getTrForRow(sourceRowIndex);\n      rowHeader = currentTr.querySelector('th');\n      if (rowHeader) {\n        rowInnerHeight = innerHeight(rowHeader);\n      } else {\n        rowInnerHeight = innerHeight(currentTr) - 1;\n      }\n      if (!previousRowHeight && this.wtSettings.getSetting('defaultRowHeight') < rowInnerHeight || previousRowHeight < rowInnerHeight) {\n        rowInnerHeight += 1;\n        this.dataAccessObject.wtViewport.oversizedRows[sourceRowIndex] = rowInnerHeight;\n      }\n    }\n  }\n\n  /**\n   * @param {number} row The visual row index.\n   * @returns {HTMLTableElement}\n   */\n  getTrForRow(row) {\n    return this.TBODY.childNodes[this.rowFilter.sourceToRendered(row)];\n  }\n\n  /**\n   * Checks if the column index (negative value from -1 to N) is rendered.\n   *\n   * @param {number} column The column index (negative value from -1 to N).\n   * @returns {boolean}\n   */\n  isColumnHeaderRendered(column) {\n    if (column >= 0) {\n      return false;\n    }\n    const rowHeaders = this.wtSettings.getSetting('rowHeaders');\n    const rowHeadersCount = rowHeaders.length;\n    return Math.abs(column) <= rowHeadersCount;\n  }\n\n  /**\n   * Checks if the row index (negative value from -1 to N) is rendered.\n   *\n   * @param {number} row The row index (negative value from -1 to N).\n   * @returns {boolean}\n   */\n  isRowHeaderRendered(row) {\n    if (row >= 0) {\n      return false;\n    }\n    const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n    const columnHeadersCount = columnHeaders.length;\n    return Math.abs(row) <= columnHeadersCount;\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Check if the given row index is lower than the index of the first row that\n   * is currently rendered and return TRUE in that case, or FALSE otherwise.\n   *\n   * Negative row index is used to check the columns' headers.\n   *\n   *  Headers\n   *           +--------------+                                     │\n   *       -3  │    │    │    │                                     │\n   *           +--------------+                                     │\n   *       -2  │    │    │    │                                     │ TRUE\n   *           +--------------+                                     │\n   *       -1  │    │    │    │                                     │\n   *  Cells  +==================+                                   │\n   *        0  ┇    ┇    ┇    ┇ <--- For fixedRowsTop: 1            │\n   *           +--------------+      the master overlay do       ---+ first rendered row (index 1)\n   *        1  │ A2 │ B2 │ C2 │      not render the first row.      │\n   *           +--------------+                                     │ FALSE\n   *        2  │ A3 │ B3 │ C3 │                                     │\n   *           +--------------+                                  ---+ last rendered row\n   *                                                                │\n   *                                                                │ FALSE\n   *\n   * @param {number} row The visual row index.\n   * @memberof Table#\n   * @function isRowBeforeRenderedRows\n   * @returns {boolean}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  isRowBeforeRenderedRows(row) {\n    const first = this.getFirstRenderedRow();\n\n    // Check the headers only in case when the first rendered row is -1 or 0.\n    // This is an indication that the overlay is placed on the most top position.\n    if (row < 0 && first <= 0) {\n      return !this.isRowHeaderRendered(row);\n    }\n    return row < first;\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Check if the given column index is greater than the index of the last column that\n   * is currently rendered and return TRUE in that case, or FALSE otherwise.\n   *\n   * The negative row index is used to check the columns' headers. However,\n   * keep in mind that for negative indexes, the method always returns FALSE as\n   * it is not possible to render headers partially. The \"after\" index can not be\n   * lower than -1.\n   *\n   *  Headers\n   *           +--------------+                                     │\n   *       -3  │    │    │    │                                     │\n   *           +--------------+                                     │\n   *       -2  │    │    │    │                                     │ FALSE\n   *           +--------------+                                     │\n   *       -1  │    │    │    │                                     │\n   *  Cells  +==================+                                   │\n   *        0  ┇    ┇    ┇    ┇ <--- For fixedRowsTop: 1            │\n   *           +--------------+      the master overlay do       ---+ first rendered row (index 1)\n   *        1  │ A2 │ B2 │ C2 │      not render the first rows      │\n   *           +--------------+                                     │ FALSE\n   *        2  │ A3 │ B3 │ C3 │                                     │\n   *           +--------------+                                  ---+ last rendered row\n   *                                                                │\n   *                                                                │ TRUE\n   *\n   * @param {number} row The visual row index.\n   * @memberof Table#\n   * @function isRowAfterRenderedRows\n   * @returns {boolean}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  isRowAfterRenderedRows(row) {\n    return row > this.getLastRenderedRow();\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Check if the given column index is lower than the index of the first column that\n   * is currently rendered and return TRUE in that case, or FALSE otherwise.\n   *\n   * Negative column index is used to check the rows' headers.\n   *\n   *                            For fixedColumnsStart: 1 the master overlay\n   *                            do not render this first columns.\n   *  Headers    -3   -2   -1    |\n   *           +----+----+----║┄ ┄ +------+------+\n   *           │    │    │    ║    │  B1  │  C1  │\n   *           +--------------║┄ ┄ --------------│\n   *           │    │    │    ║    │  B2  │  C2  │\n   *           +--------------║┄ ┄ --------------│\n   *           │    │    │    ║    │  B3  │  C3  │\n   *           +----+----+----║┄ ┄ +------+------+\n   *                               ╷             ╷\n   *      -------------------------+-------------+---------------->\n   *          TRUE             first    FALSE   last         FALSE\n   *                           rendered         rendered\n   *                           column           column\n   *\n   * @param {number} column The visual column index.\n   * @memberof Table#\n   * @function isColumnBeforeRenderedColumns\n   * @returns {boolean}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  isColumnBeforeRenderedColumns(column) {\n    const first = this.getFirstRenderedColumn();\n\n    // Check the headers only in case when the first rendered column is -1 or 0.\n    // This is an indication that the overlay is placed on the most left position.\n    if (column < 0 && first <= 0) {\n      return !this.isColumnHeaderRendered(column);\n    }\n    return column < first;\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Check if the given column index is greater than the index of the last column that\n   * is currently rendered and return TRUE in that case, or FALSE otherwise.\n   *\n   * The negative column index is used to check the rows' headers. However,\n   * keep in mind that for negative indexes, the method always returns FALSE as\n   * it is not possible to render headers partially. The \"after\" index can not be\n   * lower than -1.\n   *\n   *                            For fixedColumnsStart: 1 the master overlay\n   *                            do not render this first columns.\n   *  Headers    -3   -2   -1    |\n   *           +----+----+----║┄ ┄ +------+------+\n   *           │    │    │    ║    │  B1  │  C1  │\n   *           +--------------║┄ ┄ --------------│\n   *           │    │    │    ║    │  B2  │  C2  │\n   *           +--------------║┄ ┄ --------------│\n   *           │    │    │    ║    │  B3  │  C3  │\n   *           +----+----+----║┄ ┄ +------+------+\n   *                               ╷             ╷\n   *      -------------------------+-------------+---------------->\n   *          FALSE             first    FALSE   last         TRUE\n   *                           rendered         rendered\n   *                           column           column\n   *\n   * @param {number} column The visual column index.\n   * @memberof Table#\n   * @function isColumnAfterRenderedColumns\n   * @returns {boolean}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  isColumnAfterRenderedColumns(column) {\n    return this.columnFilter && column > this.getLastRenderedColumn();\n  }\n  isColumnAfterViewport(column) {\n    return this.columnFilter && column > this.getLastVisibleColumn();\n  }\n  isRowAfterViewport(row) {\n    return this.rowFilter && row > this.getLastVisibleRow();\n  }\n  isColumnBeforeViewport(column) {\n    return this.columnFilter && this.columnFilter.sourceToRendered(column) < 0 && column >= 0;\n  }\n  isLastRowFullyVisible() {\n    return this.getLastVisibleRow() === this.getLastRenderedRow();\n  }\n  isLastColumnFullyVisible() {\n    return this.getLastVisibleColumn() === this.getLastRenderedColumn();\n  }\n  allRowsInViewport() {\n    return this.wtSettings.getSetting('totalRows') === this.getVisibleRowsCount();\n  }\n  allColumnsInViewport() {\n    return this.wtSettings.getSetting('totalColumns') === this.getVisibleColumnsCount();\n  }\n\n  /**\n   * Checks if any of the row's cells content exceeds its initial height, and if so, returns the oversized height.\n   *\n   * @param {number} sourceRow The physical row index.\n   * @returns {number}\n   */\n  getRowHeight(sourceRow) {\n    return this.rowUtils.getHeight(sourceRow);\n  }\n\n  /**\n   * @param {number} level The column level.\n   * @returns {number}\n   */\n  getColumnHeaderHeight(level) {\n    return this.columnUtils.getHeaderHeight(level);\n  }\n\n  /**\n   * @param {number} sourceColumn The physical column index.\n   * @returns {number}\n   */\n  getColumnWidth(sourceColumn) {\n    return this.columnUtils.getWidth(sourceColumn);\n  }\n\n  /**\n   * @param {number} sourceColumn The physical column index.\n   * @returns {number}\n   */\n  getStretchedColumnWidth(sourceColumn) {\n    return this.columnUtils.getStretchedColumnWidth(sourceColumn);\n  }\n\n  /**\n   * Checks if the table has defined size. It returns `true` when the table has width and height\n   * set bigger than `0px`.\n   *\n   * @returns {boolean}\n   */\n  hasDefinedSize() {\n    return this.hasTableHeight && this.hasTableWidth;\n  }\n\n  /**\n   * Gets table's width. The returned width is the width of the rendered cells that fit in the\n   * current viewport. The value may change depends on the viewport position (scroll position).\n   *\n   * @returns {number}\n   */\n  getWidth() {\n    return outerWidth(this.TABLE);\n  }\n\n  /**\n   * Gets table's height. The returned height is the height of the rendered cells that fit in the\n   * current viewport. The value may change depends on the viewport position (scroll position).\n   *\n   * @returns {number}\n   */\n  getHeight() {\n    return outerHeight(this.TABLE);\n  }\n\n  /**\n   * Gets table's total width. The returned width is the width of all rendered cells (including headers)\n   * that can be displayed in the table.\n   *\n   * @returns {number}\n   */\n  getTotalWidth() {\n    const width = outerWidth(this.hider);\n\n    // when the overlay's table does not have any cells the hider returns 0, get then width from the table element\n    return width !== 0 ? width : this.getWidth();\n  }\n\n  /**\n   * Gets table's total height. The returned height is the height of all rendered cells (including headers)\n   * that can be displayed in the table.\n   *\n   * @returns {number}\n   */\n  getTotalHeight() {\n    const height = outerHeight(this.hider);\n\n    // when the overlay's table does not have any cells the hider returns 0, get then height from the table element\n    return height !== 0 ? height : this.getHeight();\n  }\n\n  /**\n   * Checks if the table is visible. It returns `true` when the holder element (or its parents)\n   * has CSS 'display' property different than 'none'.\n   *\n   * @returns {boolean}\n   */\n  isVisible() {\n    return isVisible(this.TABLE);\n  }\n\n  /**\n   * Modify row header widths provided by user in class contructor.\n   *\n   * @private\n   * @param {Function} rowHeaderWidthFactory The function which can provide default width values for rows..\n   * @returns {number}\n   */\n  _modifyRowHeaderWidth(rowHeaderWidthFactory) {\n    let widths = isFunction(rowHeaderWidthFactory) ? rowHeaderWidthFactory() : null;\n    if (Array.isArray(widths)) {\n      widths = [...widths];\n      widths[widths.length - 1] = this._correctRowHeaderWidth(widths[widths.length - 1]);\n    } else {\n      widths = this._correctRowHeaderWidth(widths);\n    }\n    return widths;\n  }\n\n  /**\n   * Correct row header width if necessary.\n   *\n   * @private\n   * @param {number} width The width to process.\n   * @returns {number}\n   */\n  _correctRowHeaderWidth(width) {\n    let rowHeaderWidth = width;\n    if (typeof width !== 'number') {\n      rowHeaderWidth = this.wtSettings.getSetting('defaultColumnWidth');\n    }\n    if (this.correctHeaderWidth) {\n      rowHeaderWidth += 1;\n    }\n    return rowHeaderWidth;\n  }\n}\nexport default Table;","import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'stickyRowsTop';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the top rows in the vertical axis.\n *\n * @type {object}\n */\nconst stickyRowsTop = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedRow() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    if (totalRows === 0) {\n      return -1;\n    }\n    return 0;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedRow() {\n    return this.getRenderedRowsCount() - 1;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedRowsCount() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    return Math.min(this.wtSettings.getSetting('fixedRowsTop'), totalRows);\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  },\n  /**\n   * Get the number of rendered column headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getColumnHeadersCount() {\n    return this.dataAccessObject.columnHeaders.length;\n  }\n};\ndefineGetter(stickyRowsTop, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsTop;","import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'calculatedColumns';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the horizontal axis.\n *\n * @type {object}\n */\nconst calculatedColumns = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedColumn() {\n    const startColumn = this.dataAccessObject.startColumnRendered;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleColumn() {\n    const startColumn = this.dataAccessObject.startColumnVisible;\n    if (startColumn === null) {\n      return -1;\n    }\n    return startColumn;\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedColumn() {\n    const endColumn = this.dataAccessObject.endColumnRendered;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleColumn() {\n    const endColumn = this.dataAccessObject.endColumnVisible;\n    if (endColumn === null) {\n      return -1;\n    }\n    return endColumn;\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedColumnsCount() {\n    return this.dataAccessObject.countColumnsRendered;\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleColumnsCount() {\n    return this.dataAccessObject.countColumnsVisible;\n  },\n  /**\n   * Get the number of rendered row headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRowHeadersCount() {\n    return this.dataAccessObject.rowHeaders.length;\n  }\n};\ndefineGetter(calculatedColumns, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedColumns;","import Table from \"../table.mjs\";\nimport stickyRowsTop from \"./mixin/stickyRowsTop.mjs\";\nimport calculatedColumns from \"./mixin/calculatedColumns.mjs\";\nimport { mixin } from \"../../../../helpers/object.mjs\";\nimport { CLONE_TOP } from \"../overlay/index.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to TopOverlay, implemented through mixins.\n *\n * @mixes stickyRowsTop\n * @mixes calculatedColumns\n */\nclass TopOverlayTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, CLONE_TOP);\n  }\n}\nmixin(TopOverlayTable, stickyRowsTop);\nmixin(TopOverlayTable, calculatedColumns);\nexport default TopOverlayTable;","import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { innerHeight, innerWidth, getScrollLeft, getScrollTop, offset } from \"../../../helpers/dom/element.mjs\";\n/**\n * @class Scroll\n */\nclass Scroll {\n  /**\n   * @param {ScrollDao} dataAccessObject Tha data access object.\n   */\n  constructor(dataAccessObject) {\n    /**\n     * The data access object.\n     *\n     * @protected\n     * @type {ScrollDao}\n     */\n    _defineProperty(this, \"dataAccessObject\", void 0);\n    /**\n     * Holds the last column reached by the scroll, which determines the scroll snapping direction\n     * (left or right) for a next horizontal scroll.\n     *\n     * @protected\n     * @type {number}\n     */\n    _defineProperty(this, \"lastScrolledColumnPos\", -1);\n    /**\n     * Holds the last row reached by the scroll, which determines the scroll snapping direction\n     * (top or bottom) for a next vertical scroll.\n     *\n     * @protected\n     * @type {number}\n     */\n    _defineProperty(this, \"lastScrolledRowPos\", -1);\n    this.dataAccessObject = dataAccessObject;\n  }\n\n  /**\n   * Scrolls viewport to a cell.\n   *\n   * @param {CellCoords} coords The cell coordinates.\n   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.\n   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.\n   * @returns {boolean}\n   */\n  scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {\n    const scrolledHorizontally = this.scrollViewportHorizontally(coords.col, snapToRight, snapToLeft);\n    const scrolledVertically = this.scrollViewportVertically(coords.row, snapToTop, snapToBottom);\n    return scrolledHorizontally || scrolledVertically;\n  }\n\n  /**\n   * Scrolls viewport to a column.\n   *\n   * @param {number} column Visual column index.\n   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.\n   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.\n   * @returns {boolean}\n   */\n  scrollViewportHorizontally(column, snapToRight, snapToLeft) {\n    const {\n      drawn,\n      totalColumns\n    } = this.dataAccessObject;\n\n    // do not scroll the viewport when the column points to a range outside of the dataset\n    if (!drawn || !Number.isInteger(column) || column < 0 || column > totalColumns) {\n      return false;\n    }\n    const firstVisibleColumn = this.getFirstVisibleColumn();\n    const lastVisibleColumn = this.getLastVisibleColumn();\n    const autoSnapping = snapToRight === void 0 && snapToLeft === void 0;\n    const {\n      fixedColumnsStart,\n      inlineStartOverlay\n    } = this.dataAccessObject;\n\n    // for auto-snapping (both snap* arguments are undefined) do not scroll the viewport\n    // when the columns points to the overlays\n    if (autoSnapping && column < fixedColumnsStart) {\n      return false;\n    }\n    let result = false;\n    column = this.dataAccessObject.wtSettings.getSetting('onBeforeViewportScrollHorizontally', column);\n\n    // if there is no fully visible columns use the supporting variable (lastScrolledColumnPos) to\n    // determine the snapping direction (left or right)\n    if (firstVisibleColumn === -1) {\n      result = inlineStartOverlay.scrollTo(column, autoSnapping ? column > this.lastScrolledColumnPos : snapToRight);\n    } else if (autoSnapping && (column < firstVisibleColumn || column > lastVisibleColumn) || !autoSnapping) {\n      // if there is at least one fully visible column determine the snapping direction based on\n      // that columns or by snapToRight/snapToLeft flags, if provided.\n      result = inlineStartOverlay.scrollTo(column, autoSnapping ? column > lastVisibleColumn : snapToRight);\n    }\n    if (result) {\n      this.lastScrolledColumnPos = column;\n    }\n    return result;\n  }\n\n  /**\n   * Scrolls viewport to a row.\n   *\n   * @param {number} row Visual row index.\n   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n   * @returns {boolean}\n   */\n  scrollViewportVertically(row, snapToTop, snapToBottom) {\n    const {\n      drawn,\n      totalRows\n    } = this.dataAccessObject;\n\n    // do not scroll the viewport when the row points to a range outside of the dataset\n    if (!drawn || !Number.isInteger(row) || row < 0 || row > totalRows) {\n      return false;\n    }\n    const firstVisibleRow = this.getFirstVisibleRow();\n    const lastVisibleRow = this.getLastVisibleRow();\n    const autoSnapping = snapToTop === void 0 && snapToBottom === void 0;\n    const {\n      fixedRowsBottom,\n      fixedRowsTop,\n      topOverlay\n    } = this.dataAccessObject;\n\n    // for auto-snapping (both snap* arguments are undefined) do not scroll the viewport\n    // when the rows points to the overlays\n    if (autoSnapping && (row < fixedRowsTop || row > totalRows - fixedRowsBottom - 1)) {\n      return false;\n    }\n    let result = false;\n    row = this.dataAccessObject.wtSettings.getSetting('onBeforeViewportScrollVertically', row);\n\n    // if there is no fully visible rows use the supporting variable (lastScrolledRowPos) to\n    // determine the snapping direction (top or bottom)\n    if (firstVisibleRow === -1) {\n      result = topOverlay.scrollTo(row, autoSnapping ? row > this.lastScrolledRowPos : snapToBottom);\n    } else if (autoSnapping && (row < firstVisibleRow || row > lastVisibleRow) || !autoSnapping) {\n      // if there is at least one fully visible row determine the snapping direction based on\n      // that rows or by snapToTop/snapToBottom flags, if provided.\n      result = topOverlay.scrollTo(row, autoSnapping ? row > lastVisibleRow : snapToBottom);\n    }\n    if (result) {\n      this.lastScrolledRowPos = row;\n    }\n    return result;\n  }\n\n  /**\n   * Get first visible row based on virtual dom and how table is visible in browser window viewport.\n   *\n   * @returns {number}\n   */\n  getFirstVisibleRow() {\n    const {\n      topOverlay,\n      wtTable,\n      wtViewport,\n      totalRows,\n      fixedRowsTop,\n      rootWindow\n    } = this.dataAccessObject;\n    let firstVisibleRow = wtTable.getFirstVisibleRow();\n    if (topOverlay.mainTableScrollableElement === rootWindow) {\n      const rootElementOffset = offset(wtTable.wtRootElement);\n      const totalTableHeight = innerHeight(wtTable.hider);\n      const windowHeight = innerHeight(rootWindow);\n      const windowScrollTop = getScrollTop(rootWindow, rootWindow);\n\n      // Only calculate firstVisibleRow when table didn't filled (from up) whole viewport space\n      if (rootElementOffset.top + totalTableHeight - windowHeight <= windowScrollTop) {\n        let rowsHeight = wtViewport.getColumnHeaderHeight();\n        rowsHeight += topOverlay.sumCellSizes(0, fixedRowsTop);\n        for (let row = totalRows; row > 0; row--) {\n          rowsHeight += topOverlay.sumCellSizes(row - 1, row);\n          if (rootElementOffset.top + totalTableHeight - rowsHeight <= windowScrollTop) {\n            // Return physical row + 1\n            firstVisibleRow = row;\n            break;\n          }\n        }\n      }\n    }\n    return firstVisibleRow;\n  }\n\n  /**\n   * Get last visible row based on virtual dom and how table is visible in browser window viewport.\n   *\n   * @returns {number}\n   */\n  getLastVisibleRow() {\n    const {\n      topOverlay,\n      wtTable,\n      wtViewport,\n      totalRows,\n      rootWindow\n    } = this.dataAccessObject;\n    let lastVisibleRow = wtTable.getLastVisibleRow();\n    if (topOverlay.mainTableScrollableElement === rootWindow) {\n      const rootElementOffset = offset(wtTable.wtRootElement);\n      const windowScrollTop = getScrollTop(rootWindow, rootWindow);\n\n      // Only calculate lastVisibleRow when table didn't filled (from bottom) whole viewport space\n      if (rootElementOffset.top > windowScrollTop) {\n        const windowHeight = innerHeight(rootWindow);\n        let rowsHeight = wtViewport.getColumnHeaderHeight();\n        for (let row = 1; row <= totalRows; row++) {\n          rowsHeight += topOverlay.sumCellSizes(row - 1, row);\n          if (rootElementOffset.top + rowsHeight - windowScrollTop >= windowHeight) {\n            // Return physical row - 1 (-2 because rangeEach gives row index + 1 - sumCellSizes requirements)\n            lastVisibleRow = row - 2;\n            break;\n          }\n        }\n      }\n    }\n    return lastVisibleRow;\n  }\n\n  /**\n   * Get first visible column based on virtual dom and how table is visible in browser window viewport.\n   *\n   * @returns {number}\n   */\n  getFirstVisibleColumn() {\n    const {\n      inlineStartOverlay,\n      wtTable,\n      wtViewport,\n      totalColumns,\n      rootWindow\n    } = this.dataAccessObject;\n    let firstVisibleColumn = wtTable.getFirstVisibleColumn();\n    if (inlineStartOverlay.mainTableScrollableElement === rootWindow) {\n      const rootElementOffset = offset(wtTable.wtRootElement);\n      const totalTableWidth = innerWidth(wtTable.hider);\n      const windowWidth = innerWidth(rootWindow);\n      const windowScrollLeft = Math.abs(getScrollLeft(rootWindow, rootWindow));\n\n      // Only calculate firstVisibleColumn when table didn't filled (from left) whole viewport space\n      if (rootElementOffset.left + totalTableWidth - windowWidth <= windowScrollLeft) {\n        let columnsWidth = wtViewport.getRowHeaderWidth();\n        for (let column = totalColumns; column > 0; column--) {\n          columnsWidth += inlineStartOverlay.sumCellSizes(column - 1, column);\n          if (rootElementOffset.left + totalTableWidth - columnsWidth <= windowScrollLeft) {\n            // Return physical column + 1\n            firstVisibleColumn = column;\n            break;\n          }\n        }\n      }\n    }\n    return firstVisibleColumn;\n  }\n\n  /**\n   * Get last visible column based on virtual dom and how table is visible in browser window viewport.\n   *\n   * @returns {number}\n   */\n  getLastVisibleColumn() {\n    const {\n      wtSettings,\n      inlineStartOverlay,\n      wtTable,\n      wtViewport,\n      totalColumns,\n      rootWindow\n    } = this.dataAccessObject;\n    let lastVisibleColumn = wtTable.getLastVisibleColumn();\n    if (inlineStartOverlay.mainTableScrollableElement === rootWindow) {\n      const isRtl = wtSettings.getSetting('rtlMode');\n      let inlineStartRootElementOffset = null;\n      if (isRtl) {\n        const tableRect = wtTable.TABLE.getBoundingClientRect();\n        const rootDocument = this.dataAccessObject.rootWindow.document;\n        const docOffsetWidth = rootDocument.documentElement.offsetWidth;\n        inlineStartRootElementOffset = Math.abs(tableRect.right - docOffsetWidth);\n      } else {\n        const rootElementOffset = offset(wtTable.wtRootElement);\n        inlineStartRootElementOffset = rootElementOffset.left;\n      }\n      const windowScrollLeft = Math.abs(getScrollLeft(rootWindow, rootWindow));\n\n      // Only calculate lastVisibleColumn when table didn't filled (from right) whole viewport space\n      if (inlineStartRootElementOffset > windowScrollLeft) {\n        const windowWidth = innerWidth(rootWindow);\n        let columnsWidth = wtViewport.getRowHeaderWidth();\n        for (let column = 1; column <= totalColumns; column++) {\n          columnsWidth += inlineStartOverlay.sumCellSizes(column - 1, column);\n          if (inlineStartRootElementOffset + columnsWidth - windowScrollLeft >= windowWidth) {\n            // Return physical column - 1 (-2 because rangeEach gives column index + 1 - sumCellSizes requirements)\n            lastVisibleColumn = column - 2;\n            break;\n          }\n        }\n      }\n    }\n    return lastVisibleColumn;\n  }\n}\nexport default Scroll;","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nvar _isRtl = /*#__PURE__*/new WeakMap();\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @description\n *\n * The `CellCoords` class holds the coordinates (`row`, `col`) of a single cell.\n *\n * It also contains methods for validating the coordinates\n * and retrieving them as an object.\n *\n * To import the `CellCoords` class:\n *\n * ```js\n * import Handsontable, { CellCoords } from '/handsontable';\n *\n * // or, using modules\n * import Handsontable, { CellCoords } from '/handsontable/base';\n * ```\n */\nclass CellCoords {\n  constructor(row, column) {\n    let isRtl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    /**\n     * A visual row index.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"row\", null);\n    /**\n     * A visual column index.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"col\", null);\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isRtl, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldSet(this, _isRtl, isRtl);\n    if (typeof row !== 'undefined' && typeof column !== 'undefined') {\n      this.row = row;\n      this.col = column;\n    }\n  }\n\n  /**\n   * Checks if the coordinates in your `CellCoords` instance are valid\n   * in the context of given table parameters.\n   *\n   * The `row` index:\n   * - Must be an integer.\n   * - Must be higher than the number of column headers in the table.\n   * - Must be lower than the total number of rows in the table.\n   *\n   * The `col` index:\n   * - Must be an integer.\n   * - Must be higher than the number of row headers in the table.\n   * - Must be lower than the total number of columns in the table.\n   *\n   * @param {object} [tableParams] An object with a defined table size.\n   * @param {number} [tableParams.countRows=0] The total number of rows.\n   * @param {number} [tableParams.countCols=0] The total number of columns.\n   * @param {number} [tableParams.countRowHeaders=0] A number of row headers.\n   * @param {number} [tableParams.countColHeaders=0] A number of column headers.\n   * @returns {boolean} `true`: The coordinates are valid.\n   */\n  isValid(tableParams) {\n    const {\n      countRows,\n      countCols,\n      countRowHeaders,\n      countColHeaders\n    } = {\n      countRows: 0,\n      countCols: 0,\n      countRowHeaders: 0,\n      countColHeaders: 0,\n      ...tableParams\n    };\n    if (!Number.isInteger(this.row) || !Number.isInteger(this.col)) {\n      return false;\n    }\n    if (this.row < -countColHeaders || this.col < -countRowHeaders) {\n      return false;\n    }\n    if (this.row >= countRows || this.col >= countCols) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Checks if another set of coordinates (`cellCoords`)\n   * is equal to the coordinates in your `CellCoords` instance.\n   *\n   * @param {CellCoords} cellCoords Coordinates to check.\n   * @returns {boolean}\n   */\n  isEqual(cellCoords) {\n    if (cellCoords === this) {\n      return true;\n    }\n    return this.row === cellCoords.row && this.col === cellCoords.col;\n  }\n\n  /**\n   * Checks if the coordinates point to the headers range. If one of the axis (row or col) point to\n   * the header (negative value) then method returns `true`.\n   *\n   * @returns {boolean}\n   */\n  isHeader() {\n    return !this.isCell();\n  }\n\n  /**\n   * Checks if the coordinates point to the cells range. If all axis (row and col) point to\n   * the cell (positive value) then method returns `true`.\n   *\n   * @returns {boolean}\n   */\n  isCell() {\n    return this.row >= 0 && this.col >= 0;\n  }\n\n  /**\n   * Checks if another set of coordinates (`testedCoords`)\n   * is south-east of the coordinates in your `CellCoords` instance.\n   *\n   * @param {CellCoords} testedCoords Coordinates to check.\n   * @returns {boolean}\n   */\n  isSouthEastOf(testedCoords) {\n    return this.row >= testedCoords.row && (_classPrivateFieldGet(this, _isRtl) ? this.col <= testedCoords.col : this.col >= testedCoords.col);\n  }\n\n  /**\n   * Checks if another set of coordinates (`testedCoords`)\n   * is north-west of the coordinates in your `CellCoords` instance.\n   *\n   * @param {CellCoords} testedCoords Coordinates to check.\n   * @returns {boolean}\n   */\n  isNorthWestOf(testedCoords) {\n    return this.row <= testedCoords.row && (_classPrivateFieldGet(this, _isRtl) ? this.col >= testedCoords.col : this.col <= testedCoords.col);\n  }\n\n  /**\n   * Checks if another set of coordinates (`testedCoords`)\n   * is south-west of the coordinates in your `CellCoords` instance.\n   *\n   * @param {CellCoords} testedCoords Coordinates to check.\n   * @returns {boolean}\n   */\n  isSouthWestOf(testedCoords) {\n    return this.row >= testedCoords.row && (_classPrivateFieldGet(this, _isRtl) ? this.col >= testedCoords.col : this.col <= testedCoords.col);\n  }\n\n  /**\n   * Checks if another set of coordinates (`testedCoords`)\n   * is north-east of the coordinates in your `CellCoords` instance.\n   *\n   * @param {CellCoords} testedCoords Coordinates to check.\n   * @returns {boolean}\n   */\n  isNorthEastOf(testedCoords) {\n    return this.row <= testedCoords.row && (_classPrivateFieldGet(this, _isRtl) ? this.col <= testedCoords.col : this.col >= testedCoords.col);\n  }\n\n  /**\n   * Normalizes the coordinates in your `CellCoords` instance to the nearest valid position.\n   *\n   * Coordinates that point to headers (negative values) are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  normalize() {\n    this.row = this.row === null ? this.row : Math.max(this.row, 0);\n    this.col = this.col === null ? this.col : Math.max(this.col, 0);\n    return this;\n  }\n\n  /**\n   * Clones your `CellCoords` instance.\n   *\n   * @returns {CellCoords}\n   */\n  clone() {\n    return new CellCoords(this.row, this.col, _classPrivateFieldGet(this, _isRtl));\n  }\n\n  /**\n   * Converts your `CellCoords` instance into an object literal with `row` and `col` properties.\n   *\n   * @returns {{row: number, col: number}} An object literal with `row` and `col` properties.\n   */\n  toObject() {\n    return {\n      row: this.row,\n      col: this.col\n    };\n  }\n}\nexport default CellCoords;","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport CellCoords from \"./../cell/coords.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @description\n *\n * The `CellRange` class holds a set of cell coordinates ([`CellCoords`](@/api/cellCoords.md) instances)\n * that form a [selection range](@/guides/cell-features/selection.md#select-ranges).\n *\n * A single `CellRange` instance represents a single unit of selection\n * that contains either a single cell or multiple adjacent cells.\n *\n * To import the `CellRange` class:\n *\n * ```js\n * import Handsontable, { CellRange } from '/handsontable';\n *\n * // or, using modules\n * import Handsontable, { CellRange } from '/handsontable/base';\n * ```\n */\nvar _isRtl = /*#__PURE__*/new WeakMap();\nclass CellRange {\n  constructor(highlight) {\n    let from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : highlight;\n    let to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : highlight;\n    let isRtl = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    /**\n     * Used to draw bold border around a cell where selection was started and to edit the cell\n     * when you press Enter. The highlight cannot point to headers (negative values) so its\n     * coordinates object is normalized while assigning.\n     *\n     * @private\n     * @type {CellCoords}\n     */\n    _defineProperty(this, \"highlight\", null);\n    /**\n     * Usually the same as highlight, but in Excel there is distinction - one can change\n     * highlight within a selection.\n     *\n     * @private\n     * @type {CellCoords}\n     */\n    _defineProperty(this, \"from\", null);\n    /**\n     * End selection.\n     *\n     * @private\n     * @type {CellCoords}\n     */\n    _defineProperty(this, \"to\", null);\n    /**\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isRtl, {\n      writable: true,\n      value: false\n    });\n    this.highlight = highlight.clone();\n    this.from = from.clone();\n    this.to = to.clone();\n    _classPrivateFieldSet(this, _isRtl, isRtl);\n  }\n\n  /**\n   * Highlights cell selection at the `coords` coordinates.\n   *\n   * @param {CellCoords} coords Coordinates to use.\n   * @returns {CellRange}\n   */\n  setHighlight(coords) {\n    this.highlight = coords.clone();\n    return this;\n  }\n\n  /**\n   * Sets the `coords` coordinates as the start of your range.\n   *\n   * @param {CellCoords} coords Coordinates to use.\n   * @returns {CellRange}\n   */\n  setFrom(coords) {\n    this.from = coords.clone();\n    return this;\n  }\n\n  /**\n   * Sets the `coords` coordinates as the end of your range.\n   *\n   * @param {CellCoords} coords Coordinates to use.\n   * @returns {CellRange}\n   */\n  setTo(coords) {\n    this.to = coords.clone();\n    return this;\n  }\n\n  /**\n   * Checks if the coordinates in your `CellRange` instance are valid\n   * in the context of given table parameters.\n   *\n   * See the [`isValid()`](@/api/cellCoords.md#isvalid) method of the [`CellCoords`](@/api/cellCoords.md) class.\n   *\n   * @param {object} tableParams An object with a defined table size.\n   * @param {number} tableParams.countRows The total number of rows.\n   * @param {number} tableParams.countCols The total number of columns.\n   * @param {number} tableParams.countRowHeaders A number of row headers.\n   * @param {number} tableParams.countColHeaders A number of column headers.\n   * @returns {boolean}\n   */\n  isValid(tableParams) {\n    return this.from.isValid(tableParams) && this.to.isValid(tableParams);\n  }\n\n  /**\n   * Checks if your range is just a single cell or header.\n   *\n   * @returns {boolean}\n   */\n  isSingle() {\n    return this.isSingleCell() || this.isSingleHeader();\n  }\n\n  /**\n   * Checks if your range is just a single cell.\n   *\n   * @returns {boolean}\n   */\n  isSingleCell() {\n    return this.from.row >= 0 && this.from.row === this.to.row && this.from.col >= 0 && this.from.col === this.to.col;\n  }\n\n  /**\n   * Checks if your range is just a single header.\n   *\n   * @returns {boolean}\n   */\n  isSingleHeader() {\n    return (this.from.row < 0 || this.from.col < 0) && this.from.row === this.to.row && this.from.col === this.to.col;\n  }\n\n  /**\n   * Checks if your range overlaps headers range (negative coordinates).\n   *\n   * @returns {boolean}\n   */\n  containsHeaders() {\n    return this.from.isHeader() || this.to.isHeader();\n  }\n\n  /**\n   * Returns the height of your range (as a number of rows, including row headers).\n   *\n   * @returns {number}\n   */\n  getOuterHeight() {\n    return Math.max(this.from.row, this.to.row) - Math.min(this.from.row, this.to.row) + 1;\n  }\n\n  /**\n   * Returns the width of your range (as a number of columns, including column headers).\n   *\n   * @returns {number}\n   */\n  getOuterWidth() {\n    return Math.max(this.from.col, this.to.col) - Math.min(this.from.col, this.to.col) + 1;\n  }\n\n  /**\n   * Returns the height of your range (as a number of rows, excluding row headers).\n   *\n   * @returns {number}\n   */\n  getHeight() {\n    // if the selection contains only row headers, return 0\n    if (this.from.row < 0 && this.to.row < 0) {\n      return 0;\n    }\n    const fromRow = Math.max(this.from.row, 0);\n    const toRow = Math.max(this.to.row, 0);\n    return Math.max(fromRow, toRow) - Math.min(fromRow, toRow) + 1;\n  }\n\n  /**\n   * Returns the width of your range (as a number of columns, excluding column headers).\n   *\n   * @returns {number}\n   */\n  getWidth() {\n    // if the selection contains only column headers, return 0\n    if (this.from.col < 0 && this.to.col < 0) {\n      return 0;\n    }\n    const fromCol = Math.max(this.from.col, 0);\n    const toCol = Math.max(this.to.col, 0);\n    return Math.max(fromCol, toCol) - Math.min(fromCol, toCol) + 1;\n  }\n\n  /**\n   * Returns the number of cells within your range (excluding column and row headers).\n   *\n   * @returns {number}\n   */\n  getCellsCount() {\n    return this.getWidth() * this.getHeight();\n  }\n\n  /**\n   * Checks if another set of coordinates (`cellCoords`)\n   * is within the `from` and `to` coordinates of your range.\n   *\n   * @param {CellCoords} cellCoords Coordinates to check.\n   * @returns {boolean}\n   */\n  includes(cellCoords) {\n    const {\n      row,\n      col\n    } = cellCoords;\n    const topStart = this.getOuterTopStartCorner();\n    const bottomEnd = this.getOuterBottomEndCorner();\n    return topStart.row <= row && bottomEnd.row >= row && topStart.col <= col && bottomEnd.col >= col;\n  }\n\n  /**\n   * Checks if another range (`cellRange`) is within your range.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  includesRange(cellRange) {\n    return this.includes(cellRange.getOuterTopStartCorner()) && this.includes(cellRange.getOuterBottomEndCorner());\n  }\n\n  /**\n   * Checks if another range (`cellRange`) is equal to your range.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  isEqual(cellRange) {\n    return Math.min(this.from.row, this.to.row) === Math.min(cellRange.from.row, cellRange.to.row) && Math.max(this.from.row, this.to.row) === Math.max(cellRange.from.row, cellRange.to.row) && Math.min(this.from.col, this.to.col) === Math.min(cellRange.from.col, cellRange.to.col) && Math.max(this.from.col, this.to.col) === Math.max(cellRange.from.col, cellRange.to.col);\n  }\n\n  /**\n   * Checks if another range (`cellRange`) overlaps your range.\n   *\n   * Range A overlaps range B if the intersection of A and B (or B and A) is not empty.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  overlaps(cellRange) {\n    return cellRange.isSouthEastOf(this.getOuterTopLeftCorner()) && cellRange.isNorthWestOf(this.getOuterBottomRightCorner());\n  }\n\n  /**\n   * Checks if another range (`cellRange`) is south-east of your range.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  isSouthEastOf(cellRange) {\n    return this.getOuterTopLeftCorner().isSouthEastOf(cellRange) || this.getOuterBottomRightCorner().isSouthEastOf(cellRange);\n  }\n\n  /**\n   * Checks if another range (`cellRange`) is north-west of your range.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  isNorthWestOf(cellRange) {\n    return this.getOuterTopLeftCorner().isNorthWestOf(cellRange) || this.getOuterBottomRightCorner().isNorthWestOf(cellRange);\n  }\n\n  /**\n   * Checks if another range (`cellRange`) overlaps your range horizontally.\n   *\n   * For example: returns `true` if the last column of your range is `5`\n   * and the first column of the `cellRange` range is `3`.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  isOverlappingHorizontally(cellRange) {\n    return this.getOuterTopRightCorner().col >= cellRange.getOuterTopLeftCorner().col && this.getOuterTopRightCorner().col <= cellRange.getOuterTopRightCorner().col || this.getOuterTopLeftCorner().col <= cellRange.getOuterTopRightCorner().col && this.getOuterTopLeftCorner().col >= cellRange.getOuterTopLeftCorner().col;\n  }\n\n  /**\n   * Checks if another range (`cellRange`) overlaps your range vertically.\n   *\n   * For example: returns `true` if the last row of your range is `5`\n   * and the first row of the `cellRange` range is `3`.\n   *\n   * @param {CellRange} cellRange A range to check.\n   * @returns {boolean}\n   */\n  isOverlappingVertically(cellRange) {\n    return this.getOuterBottomRightCorner().row >= cellRange.getOuterTopRightCorner().row && this.getOuterBottomRightCorner().row <= cellRange.getOuterBottomRightCorner().row || this.getOuterTopRightCorner().row <= cellRange.getOuterBottomRightCorner().row && this.getOuterTopRightCorner().row >= cellRange.getOuterTopRightCorner().row;\n  }\n\n  /**\n   * Adds a cell to your range, at `cellCoords` coordinates.\n   *\n   * The `cellCoords` coordinates must exceed a corner of your range.\n   *\n   * @param {CellCoords} cellCoords A new cell's coordinates.\n   * @returns {boolean}\n   */\n  expand(cellCoords) {\n    const topStart = this.getOuterTopStartCorner();\n    const bottomEnd = this.getOuterBottomEndCorner();\n    if (cellCoords.row < topStart.row || cellCoords.col < topStart.col || cellCoords.row > bottomEnd.row || cellCoords.col > bottomEnd.col) {\n      this.from = this._createCellCoords(Math.min(topStart.row, cellCoords.row), Math.min(topStart.col, cellCoords.col));\n      this.to = this._createCellCoords(Math.max(bottomEnd.row, cellCoords.row), Math.max(bottomEnd.col, cellCoords.col));\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Expand your range with another range (`expandingRange`).\n   *\n   * @param {CellRange} expandingRange A new range.\n   * @returns {boolean}\n   */\n  expandByRange(expandingRange) {\n    if (this.includesRange(expandingRange) || !this.overlaps(expandingRange)) {\n      return false;\n    }\n    const topStart = this.getOuterTopStartCorner();\n    const bottomEnd = this.getOuterBottomEndCorner();\n    const initialDirection = this.getDirection();\n    const expandingTopStart = expandingRange.getOuterTopStartCorner();\n    const expandingBottomEnd = expandingRange.getOuterBottomEndCorner();\n    const resultTopRow = Math.min(topStart.row, expandingTopStart.row);\n    const resultTopCol = Math.min(topStart.col, expandingTopStart.col);\n    const resultBottomRow = Math.max(bottomEnd.row, expandingBottomEnd.row);\n    const resultBottomCol = Math.max(bottomEnd.col, expandingBottomEnd.col);\n    const finalFrom = this._createCellCoords(resultTopRow, resultTopCol);\n    const finalTo = this._createCellCoords(resultBottomRow, resultBottomCol);\n    this.from = finalFrom;\n    this.to = finalTo;\n    this.setDirection(initialDirection);\n    if (this.highlight.row === this.getOuterBottomRightCorner().row && this.getVerticalDirection() === 'N-S') {\n      this.flipDirectionVertically();\n    }\n    if (this.highlight.col === this.getOuterTopRightCorner().col && this.getHorizontalDirection() === 'W-E') {\n      this.flipDirectionHorizontally();\n    }\n    return true;\n  }\n\n  /**\n   * Gets the direction of the selection.\n   *\n   * @returns {string} Returns one of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.\n   */\n  getDirection() {\n    if (this.from.isNorthWestOf(this.to)) {\n      // NorthWest - SouthEast\n      return 'NW-SE';\n    } else if (this.from.isNorthEastOf(this.to)) {\n      // NorthEast - SouthWest\n      return 'NE-SW';\n    } else if (this.from.isSouthEastOf(this.to)) {\n      // SouthEast - NorthWest\n      return 'SE-NW';\n    } else if (this.from.isSouthWestOf(this.to)) {\n      // SouthWest - NorthEast\n      return 'SW-NE';\n    }\n  }\n\n  /**\n   * Sets the direction of the selection.\n   *\n   * @param {string} direction One of the values: `'NW-SE'`, `'NE-SW'`, `'SE-NW'`, `'SW-NE'`.\n   */\n  setDirection(direction) {\n    switch (direction) {\n      case 'NW-SE':\n        [this.from, this.to] = [this.getOuterTopLeftCorner(), this.getOuterBottomRightCorner()];\n        break;\n      case 'NE-SW':\n        [this.from, this.to] = [this.getOuterTopRightCorner(), this.getOuterBottomLeftCorner()];\n        break;\n      case 'SE-NW':\n        [this.from, this.to] = [this.getOuterBottomRightCorner(), this.getOuterTopLeftCorner()];\n        break;\n      case 'SW-NE':\n        [this.from, this.to] = [this.getOuterBottomLeftCorner(), this.getOuterTopRightCorner()];\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Gets the vertical direction of the selection.\n   *\n   * @returns {string} Returns one of the values: `N-S` (north->south), `S-N` (south->north).\n   */\n  getVerticalDirection() {\n    return ['NE-SW', 'NW-SE'].indexOf(this.getDirection()) > -1 ? 'N-S' : 'S-N';\n  }\n\n  /**\n   * Gets the horizontal direction of the selection.\n   *\n   * @returns {string} Returns one of the values: `W-E` (west->east), `E-W` (east->west).\n   */\n  getHorizontalDirection() {\n    return ['NW-SE', 'SW-NE'].indexOf(this.getDirection()) > -1 ? 'W-E' : 'E-W';\n  }\n\n  /**\n   * Flips the direction of your range vertically (e.g., `NW-SE` changes to `SW-NE`).\n   */\n  flipDirectionVertically() {\n    const direction = this.getDirection();\n    switch (direction) {\n      case 'NW-SE':\n        this.setDirection('SW-NE');\n        break;\n      case 'NE-SW':\n        this.setDirection('SE-NW');\n        break;\n      case 'SE-NW':\n        this.setDirection('NE-SW');\n        break;\n      case 'SW-NE':\n        this.setDirection('NW-SE');\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Flips the direction of your range horizontally (e.g., `NW-SE` changes to `NE-SW`).\n   */\n  flipDirectionHorizontally() {\n    const direction = this.getDirection();\n    switch (direction) {\n      case 'NW-SE':\n        this.setDirection('NE-SW');\n        break;\n      case 'NE-SW':\n        this.setDirection('NW-SE');\n        break;\n      case 'SE-NW':\n        this.setDirection('SW-NE');\n        break;\n      case 'SW-NE':\n        this.setDirection('SE-NW');\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Gets the top-left (in LTR) or top-right (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getTopStartCorner() {\n    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col)).normalize();\n  }\n\n  /**\n   * Gets the top-left corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getTopLeftCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getTopEndCorner() : this.getTopStartCorner();\n  }\n\n  /**\n   * Gets the bottom right (in LTR) or bottom left (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getBottomEndCorner() {\n    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col)).normalize();\n  }\n\n  /**\n   * Gets the bottom right corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getBottomRightCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getBottomStartCorner() : this.getBottomEndCorner();\n  }\n\n  /**\n   * Gets the top right (in LTR) or top left (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getTopEndCorner() {\n    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col)).normalize();\n  }\n\n  /**\n   * Gets the top right corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getTopRightCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getTopStartCorner() : this.getTopEndCorner();\n  }\n\n  /**\n   * Gets the bottom left (in LTR) or bottom right (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getBottomStartCorner() {\n    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col)).normalize();\n  }\n\n  /**\n   * Gets the bottom left corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the corner coordinates are normalized to `0`.\n   *\n   * @returns {CellCoords}\n   */\n  getBottomLeftCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getBottomEndCorner() : this.getBottomStartCorner();\n  }\n\n  /**\n   * Gets the top left (in LTR) or top right (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and start coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterTopStartCorner() {\n    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));\n  }\n\n  /**\n   * Gets the top left corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and left coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterTopLeftCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getOuterTopEndCorner() : this.getOuterTopStartCorner();\n  }\n\n  /**\n   * Gets the bottom right (in LTR) or bottom left (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and start coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterBottomEndCorner() {\n    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));\n  }\n\n  /**\n   * Gets the bottom right corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and left coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterBottomRightCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getOuterBottomStartCorner() : this.getOuterBottomEndCorner();\n  }\n\n  /**\n   * Gets the top right (in LTR) or top left (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and start coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterTopEndCorner() {\n    return this._createCellCoords(Math.min(this.from.row, this.to.row), Math.max(this.from.col, this.to.col));\n  }\n\n  /**\n   * Gets the top right corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and left coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterTopRightCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getOuterTopStartCorner() : this.getOuterTopEndCorner();\n  }\n\n  /**\n   * Gets the bottom left (in LTR) or bottom right (in RTL) corner coordinates of your range.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and start coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterBottomStartCorner() {\n    return this._createCellCoords(Math.max(this.from.row, this.to.row), Math.min(this.from.col, this.to.col));\n  }\n\n  /**\n   * Gets the bottom left corner coordinates of your range,\n   * both in the LTR and RTL layout direction.\n   *\n   * If the corner contains header coordinates (negative values),\n   * the top and left coordinates are pointed to that header.\n   *\n   * @returns {CellCoords}\n   */\n  getOuterBottomLeftCorner() {\n    return _classPrivateFieldGet(this, _isRtl) ? this.getOuterBottomEndCorner() : this.getOuterBottomStartCorner();\n  }\n\n  /**\n   * Checks if a set of coordinates (`coords`) matches one of the 4 corners of your range.\n   *\n   * @param {CellCoords} coords Coordinates to check.\n   * @param {CellRange} [expandedRange] A range to compare with.\n   * @returns {boolean}\n   */\n  isCorner(coords, expandedRange) {\n    if (expandedRange && expandedRange.includes(coords) && (this.getOuterTopLeftCorner().isEqual(this._createCellCoords(expandedRange.from.row, expandedRange.from.col)) || this.getOuterTopRightCorner().isEqual(this._createCellCoords(expandedRange.from.row, expandedRange.to.col)) || this.getOuterBottomLeftCorner().isEqual(this._createCellCoords(expandedRange.to.row, expandedRange.from.col)) || this.getOuterBottomRightCorner().isEqual(this._createCellCoords(expandedRange.to.row, expandedRange.to.col)))) {\n      return true;\n    }\n    return coords.isEqual(this.getOuterTopLeftCorner()) || coords.isEqual(this.getOuterTopRightCorner()) || coords.isEqual(this.getOuterBottomLeftCorner()) || coords.isEqual(this.getOuterBottomRightCorner());\n  }\n\n  /**\n   * Gets the coordinates of a range corner opposite to the provided `coords`.\n   *\n   * For example: if the `coords` coordinates match the bottom-right corner of your range,\n   * the coordinates of the top-left corner of your range are returned.\n   *\n   * @param {CellCoords} coords Coordinates to check.\n   * @param {CellRange} [expandedRange] A range to compare with.\n   * @returns {CellCoords}\n   */\n  getOppositeCorner(coords, expandedRange) {\n    if (!(coords instanceof CellCoords)) {\n      return false;\n    }\n    if (expandedRange) {\n      const {\n        from,\n        to\n      } = expandedRange;\n      if (expandedRange.includes(coords)) {\n        if (this.getOuterTopStartCorner().isEqual(this._createCellCoords(from.row, from.col))) {\n          return this.getOuterBottomEndCorner();\n        }\n        if (this.getOuterTopEndCorner().isEqual(this._createCellCoords(from.row, to.col))) {\n          return this.getOuterBottomStartCorner();\n        }\n        if (this.getOuterBottomStartCorner().isEqual(this._createCellCoords(to.row, from.col))) {\n          return this.getOuterTopEndCorner();\n        }\n        if (this.getOuterBottomEndCorner().isEqual(this._createCellCoords(to.row, to.col))) {\n          return this.getOuterTopStartCorner();\n        }\n      }\n    }\n    if (coords.isEqual(this.getOuterBottomEndCorner())) {\n      return this.getOuterTopStartCorner();\n    } else if (coords.isEqual(this.getOuterTopStartCorner())) {\n      return this.getOuterBottomEndCorner();\n    } else if (coords.isEqual(this.getOuterTopEndCorner())) {\n      return this.getOuterBottomStartCorner();\n    } else if (coords.isEqual(this.getOuterBottomStartCorner())) {\n      return this.getOuterTopEndCorner();\n    }\n  }\n\n  /**\n   * Indicates which borders (top, right, bottom, left) are shared between\n   * your `CellRange`instance and another `range` that's within your range.\n   *\n   * @param {CellRange} range A range to compare with.\n   * @returns {Array<'top' | 'right' | 'bottom' | 'left'>}\n   */\n  getBordersSharedWith(range) {\n    if (!this.includesRange(range)) {\n      return [];\n    }\n    const thisBorders = {\n      top: Math.min(this.from.row, this.to.row),\n      bottom: Math.max(this.from.row, this.to.row),\n      left: Math.min(this.from.col, this.to.col),\n      right: Math.max(this.from.col, this.to.col)\n    };\n    const rangeBorders = {\n      top: Math.min(range.from.row, range.to.row),\n      bottom: Math.max(range.from.row, range.to.row),\n      left: Math.min(range.from.col, range.to.col),\n      right: Math.max(range.from.col, range.to.col)\n    };\n    const result = [];\n    if (thisBorders.top === rangeBorders.top) {\n      result.push('top');\n    }\n    if (thisBorders.right === rangeBorders.right) {\n      result.push('right');\n    }\n    if (thisBorders.bottom === rangeBorders.bottom) {\n      result.push('bottom');\n    }\n    if (thisBorders.left === rangeBorders.left) {\n      result.push('left');\n    }\n    return result;\n  }\n\n  /**\n   * Gets the coordinates of the inner cells of your range.\n   *\n   * @returns {CellCoords[]}\n   */\n  getInner() {\n    const topStart = this.getOuterTopStartCorner();\n    const bottomEnd = this.getOuterBottomEndCorner();\n    const out = [];\n    for (let r = topStart.row; r <= bottomEnd.row; r++) {\n      for (let c = topStart.col; c <= bottomEnd.col; c++) {\n        if (!(this.from.row === r && this.from.col === c) && !(this.to.row === r && this.to.col === c)) {\n          out.push(this._createCellCoords(r, c));\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * Gets the coordinates of all cells of your range.\n   *\n   * @returns {CellCoords[]}\n   */\n  getAll() {\n    const topStart = this.getOuterTopStartCorner();\n    const bottomEnd = this.getOuterBottomEndCorner();\n    const out = [];\n    for (let r = topStart.row; r <= bottomEnd.row; r++) {\n      for (let c = topStart.col; c <= bottomEnd.col; c++) {\n        if (topStart.row === r && topStart.col === c) {\n          out.push(topStart);\n        } else if (bottomEnd.row === r && bottomEnd.col === c) {\n          out.push(bottomEnd);\n        } else {\n          out.push(this._createCellCoords(r, c));\n        }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * Runs a callback function on all cells within your range.\n   *\n   * You can break the iteration by returning `false` in the callback function.\n   *\n   * @param {function(number, number): boolean} callback A callback function.\n   */\n  forAll(callback) {\n    const topStart = this.getOuterTopStartCorner();\n    const bottomEnd = this.getOuterBottomEndCorner();\n    for (let r = topStart.row; r <= bottomEnd.row; r++) {\n      for (let c = topStart.col; c <= bottomEnd.col; c++) {\n        const breakIteration = callback(r, c);\n        if (breakIteration === false) {\n          return;\n        }\n      }\n    }\n  }\n\n  /**\n   * Clones your `CellRange` instance.\n   *\n   * @returns {CellRange}\n   */\n  clone() {\n    return new CellRange(this.highlight, this.from, this.to, _classPrivateFieldGet(this, _isRtl));\n  }\n\n  /**\n   * Converts your `CellRange` instance into an object literal with the following properties:\n   *\n   * - `from`\n   *    - `row`\n   *    - `col`\n   * - `to`\n   *    - `row`\n   *    - `col`\n   *\n   * @returns {{from: {row: number, col: number}, to: {row: number, col: number}}} An object literal with `from` and `to` properties.\n   */\n  toObject() {\n    return {\n      from: this.from.toObject(),\n      to: this.to.toObject()\n    };\n  }\n\n  /**\n   * Creates and returns a new instance of the `CellCoords` class.\n   *\n   * The new `CellCoords` instance automatically inherits the LTR/RTL flag\n   * from your `CellRange` instance.\n   *\n   * @private\n   * @param {number} row A row index.\n   * @param {number} column A column index.\n   * @returns {CellCoords}\n   */\n  _createCellCoords(row, column) {\n    return new CellCoords(row, column, _classPrivateFieldGet(this, _isRtl));\n  }\n}\nexport default CellRange;","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { fastInnerText } from \"../../../../helpers/dom/element.mjs\";\nimport { randomString } from \"../../../../helpers/string.mjs\";\nimport EventManager from \"../../../../eventManager.mjs\";\nimport Scroll from \"../scroll.mjs\";\nimport CellCoords from \"../cell/coords.mjs\";\nimport CellRange from \"../cell/range.mjs\";\n/**\n * @abstract\n * @class Walkontable\n */\nexport default class CoreAbstract {\n  get eventManager() {\n    return new EventManager(this);\n  }\n\n  /**\n   * @param {HTMLTableElement} table Main table.\n   * @param {Settings} settings The Walkontable settings.\n   */\n  constructor(table, settings) {\n    _defineProperty(this, \"wtTable\", void 0);\n    _defineProperty(this, \"wtScroll\", void 0);\n    _defineProperty(this, \"wtViewport\", void 0);\n    _defineProperty(this, \"wtOverlays\", void 0);\n    _defineProperty(this, \"selectionManager\", void 0);\n    _defineProperty(this, \"wtEvent\", void 0);\n    /**\n     * The walkontable instance id.\n     *\n     * @public\n     * @type {Readonly<string>}\n     */\n    _defineProperty(this, \"guid\", `wt_${randomString()}`);\n    _defineProperty(this, \"drawInterrupted\", false);\n    _defineProperty(this, \"drawn\", false);\n    /**\n     * The DOM bindings.\n     *\n     * @public\n     * @type {DomBindings}\n     */\n    _defineProperty(this, \"domBindings\", void 0);\n    /**\n     * Settings.\n     *\n     * @public\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", void 0);\n    this.domBindings = {\n      rootTable: table,\n      rootDocument: table.ownerDocument,\n      rootWindow: table.ownerDocument.defaultView\n    };\n    this.wtSettings = settings;\n    this.wtScroll = new Scroll(this.createScrollDao());\n  }\n  findOriginalHeaders() {\n    const originalHeaders = [];\n\n    // find original headers\n    if (this.wtTable.THEAD.childNodes.length && this.wtTable.THEAD.childNodes[0].childNodes.length) {\n      for (let c = 0, clen = this.wtTable.THEAD.childNodes[0].childNodes.length; c < clen; c++) {\n        originalHeaders.push(this.wtTable.THEAD.childNodes[0].childNodes[c].innerHTML);\n      }\n      if (!this.wtSettings.getSetting('columnHeaders').length) {\n        this.wtSettings.update('columnHeaders', [function (column, TH) {\n          fastInnerText(TH, originalHeaders[column]);\n        }]);\n      }\n    }\n  }\n\n  /**\n   * Creates and returns the CellCoords object.\n   *\n   * @param {*} row The row index.\n   * @param {*} column The column index.\n   * @returns {CellCoords}\n   */\n  createCellCoords(row, column) {\n    return new CellCoords(row, column, this.wtSettings.getSetting('rtlMode'));\n  }\n\n  /**\n   * Creates and returns the CellRange object.\n   *\n   * @param {CellCoords} highlight The highlight coordinates.\n   * @param {CellCoords} from The from coordinates.\n   * @param {CellCoords} to The to coordinates.\n   * @returns {CellRange}\n   */\n  createCellRange(highlight, from, to) {\n    return new CellRange(highlight, from, to, this.wtSettings.getSetting('rtlMode'));\n  }\n\n  /**\n   * Force rerender of Walkontable.\n   *\n   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering\n   *                                   the data. It will only work if Table.draw() does not force\n   *                                   rendering anyway.\n   * @returns {Walkontable}\n   */\n  draw() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.drawInterrupted = false;\n    if (!fastDraw && !this.wtTable.isVisible()) {\n      // draw interrupted because TABLE is not visible\n      this.drawInterrupted = true;\n    } else {\n      this.wtTable.draw(fastDraw);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the TD at coords. If topmost is set to true, returns TD from the topmost overlay layer,\n   * if not set or set to false, returns TD from the master table.\n   *\n   * @param {CellCoords} coords The cell coordinates.\n   * @param {boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,\n   *                                  if the wanted cell is in the range of fixed rows, it will return a TD element\n   *                                  from the top overlay.\n   * @returns {HTMLElement}\n   */\n  getCell(coords) {\n    let topmost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!topmost) {\n      return this.wtTable.getCell(coords);\n    }\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    const fixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n    const fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n    const fixedColumnsStart = this.wtSettings.getSetting('fixedColumnsStart');\n    if (coords.row < fixedRowsTop && coords.col < fixedColumnsStart) {\n      return this.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.getCell(coords);\n    } else if (coords.row < fixedRowsTop) {\n      return this.wtOverlays.topOverlay.clone.wtTable.getCell(coords);\n    } else if (coords.col < fixedColumnsStart && coords.row >= totalRows - fixedRowsBottom) {\n      if (this.wtOverlays.bottomInlineStartCornerOverlay && this.wtOverlays.bottomInlineStartCornerOverlay.clone) {\n        return this.wtOverlays.bottomInlineStartCornerOverlay.clone.wtTable.getCell(coords);\n      }\n    } else if (coords.col < fixedColumnsStart) {\n      return this.wtOverlays.inlineStartOverlay.clone.wtTable.getCell(coords);\n    } else if (coords.row < totalRows && coords.row >= totalRows - fixedRowsBottom) {\n      if (this.wtOverlays.bottomOverlay && this.wtOverlays.bottomOverlay.clone) {\n        return this.wtOverlays.bottomOverlay.clone.wtTable.getCell(coords);\n      }\n    }\n    return this.wtTable.getCell(coords);\n  }\n\n  /**\n   * Scrolls the viewport to a cell (rerenders if needed).\n   *\n   * @param {CellCoords} coords The cell coordinates to scroll to.\n   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.\n   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.\n   * @returns {boolean}\n   */\n  scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {\n    if (coords.col < 0 || coords.row < 0) {\n      return false;\n    }\n    return this.wtScroll.scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft);\n  }\n\n  /**\n   * Scrolls the viewport to a column (rerenders if needed).\n   *\n   * @param {number} column Visual column index.\n   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right of the table.\n   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left of the table.\n   * @returns {boolean}\n   */\n  scrollViewportHorizontally(column, snapToRight, snapToLeft) {\n    if (column < 0) {\n      return false;\n    }\n    return this.wtScroll.scrollViewportHorizontally(column, snapToRight, snapToLeft);\n  }\n\n  /**\n   * Scrolls the viewport to a row (rerenders if needed).\n   *\n   * @param {number} row Visual row index.\n   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom of the table.\n   * @returns {boolean}\n   */\n  scrollViewportVertically(row, snapToTop, snapToBottom) {\n    if (row < 0) {\n      return false;\n    }\n    return this.wtScroll.scrollViewportVertically(row, snapToTop, snapToBottom);\n  }\n\n  /**\n   * @returns {Array}\n   */\n  getViewport() {\n    return [this.wtTable.getFirstVisibleRow(), this.wtTable.getFirstVisibleColumn(), this.wtTable.getLastVisibleRow(), this.wtTable.getLastVisibleColumn()];\n  }\n\n  /**\n   * Destroy instance.\n   */\n  destroy() {\n    this.wtOverlays.destroy();\n    this.wtEvent.destroy();\n  }\n\n  /**\n   * Create data access object for scroll.\n   *\n   * @protected\n   * @returns {ScrollDao}\n   */\n  createScrollDao() {\n    const wot = this;\n    return {\n      get drawn() {\n        return wot.drawn; // TODO refactoring: consider about injecting `isDrawn` function : ()=>return wot.drawn. (it'll enables remove dao layer)\n      },\n\n      get topOverlay() {\n        return wot.wtOverlays.topOverlay; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get inlineStartOverlay() {\n        return wot.wtOverlays.inlineStartOverlay; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get wtTable() {\n        return wot.wtTable; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get wtViewport() {\n        return wot.wtViewport; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get wtSettings() {\n        return wot.wtSettings;\n      },\n      get rootWindow() {\n        return wot.domBindings.rootWindow; // TODO refactoring: move outside dao\n      },\n\n      // TODO refactoring, consider about using injecting wtSettings into scroll (it'll enables remove dao layer)\n      get totalRows() {\n        return wot.wtSettings.getSetting('totalRows');\n      },\n      get totalColumns() {\n        return wot.wtSettings.getSetting('totalColumns');\n      },\n      get fixedRowsTop() {\n        return wot.wtSettings.getSetting('fixedRowsTop');\n      },\n      get fixedRowsBottom() {\n        return wot.wtSettings.getSetting('fixedRowsBottom');\n      },\n      get fixedColumnsStart() {\n        return wot.wtSettings.getSetting('fixedColumnsStart');\n      }\n    };\n  }\n  // TODO refactoring: it will be much better to not use DAO objects. They are needed for now to provide\n  // dynamically access to related objects\n  /**\n   * Create data access object for wtTable.\n   *\n   * @protected\n   * @returns {TableDao}\n   */\n  getTableDao() {\n    const wot = this;\n    return {\n      get wot() {\n        return wot;\n      },\n      get parentTableOffset() {\n        return wot.cloneSource.wtTable.tableOffset; // TODO rethink: cloneSource exists only in Clone type.\n      },\n\n      get cloneSource() {\n        return wot.cloneSource; // TODO rethink: cloneSource exists only in Clone type.\n      },\n\n      get workspaceWidth() {\n        return wot.wtViewport.getWorkspaceWidth();\n      },\n      get wtViewport() {\n        return wot.wtViewport; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get wtOverlays() {\n        return wot.wtOverlays; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get selectionManager() {\n        return wot.selectionManager; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get drawn() {\n        return wot.drawn;\n      },\n      set drawn(v) {\n        // TODO rethink: this breaks assumes of data access object, however it is required until invent better way to handle WOT state.\n        wot.drawn = v;\n      },\n      get wtTable() {\n        return wot.wtTable; // TODO refactoring: it provides itself\n      },\n\n      get startColumnRendered() {\n        return wot.wtViewport.columnsRenderCalculator.startColumn;\n      },\n      get startColumnVisible() {\n        return wot.wtViewport.columnsVisibleCalculator.startColumn;\n      },\n      get endColumnRendered() {\n        return wot.wtViewport.columnsRenderCalculator.endColumn;\n      },\n      get endColumnVisible() {\n        return wot.wtViewport.columnsVisibleCalculator.endColumn;\n      },\n      get countColumnsRendered() {\n        return wot.wtViewport.columnsRenderCalculator.count;\n      },\n      get countColumnsVisible() {\n        return wot.wtViewport.columnsVisibleCalculator.count;\n      },\n      get startRowRendered() {\n        return wot.wtViewport.rowsRenderCalculator.startRow;\n      },\n      get startRowVisible() {\n        return wot.wtViewport.rowsVisibleCalculator.startRow;\n      },\n      get endRowRendered() {\n        return wot.wtViewport.rowsRenderCalculator.endRow;\n      },\n      get endRowVisible() {\n        return wot.wtViewport.rowsVisibleCalculator.endRow;\n      },\n      get countRowsRendered() {\n        return wot.wtViewport.rowsRenderCalculator.count;\n      },\n      get countRowsVisible() {\n        return wot.wtViewport.rowsVisibleCalculator.count;\n      },\n      get columnHeaders() {\n        return wot.wtSettings.getSetting('columnHeaders');\n      },\n      get rowHeaders() {\n        return wot.wtSettings.getSetting('rowHeaders');\n      }\n    };\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport Event from \"../event.mjs\";\nimport CoreAbstract from \"./_base.mjs\";\n/**\n * @class Walkontable\n */\nexport default class Clone extends CoreAbstract {\n  /**\n   * @param {HTMLTableElement} table Main table.\n   * @param {SettingsPure|Settings} settings The Walkontable settings.\n   * @param {WalkontableCloneOptions} clone Clone data.\n   */\n  constructor(table, settings, clone) {\n    super(table, settings);\n    _defineProperty(this, \"cloneSource\", void 0);\n    _defineProperty(this, \"cloneOverlay\", void 0);\n    const facadeGetter = this.wtSettings.getSetting('facade', this);\n    this.cloneSource = clone.source;\n    this.cloneOverlay = clone.overlay;\n    this.wtTable = this.cloneOverlay.createTable(this.getTableDao(), facadeGetter, this.domBindings, this.wtSettings);\n    this.wtViewport = clone.viewport;\n    this.selectionManager = clone.selectionManager;\n    this.wtEvent = new Event(facadeGetter, this.domBindings, this.wtSettings, this.eventManager, this.wtTable, this.selectionManager, clone.event);\n    this.findOriginalHeaders();\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { getScrollableElement, getTrimmingContainer, getScrollbarWidth, setAttribute } from \"../../../../helpers/dom/element.mjs\";\nimport { defineGetter } from \"../../../../helpers/object.mjs\";\nimport { arrayEach } from \"../../../../helpers/array.mjs\";\nimport { warn } from \"../../../../helpers/console.mjs\";\nimport { CLONE_TYPES, CLONE_CLASS_NAMES, CLONE_TOP, CLONE_INLINE_START } from \"./constants.mjs\";\nimport Clone from \"../core/clone.mjs\";\nimport { A11Y_PRESENTATION } from \"../../../../helpers/a11y.mjs\";\n/**\n * Creates an overlay over the original Walkontable instance. The overlay renders the clone of the original Walkontable\n * and (optionally) implements behavior needed for native horizontal and vertical scrolling.\n *\n * @abstract\n * @class Overlay\n * @property {Walkontable} wot The Walkontable instance.\n */\nexport class Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {CLONE_TYPES_ENUM} type The overlay type name (clone name).\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, type, wtSettings, domBindings) {\n    /**\n     *  The Walkontable settings.\n     *\n     * @private\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", null);\n    defineGetter(this, 'wot', wotInstance, {\n      writable: false\n    });\n    this.domBindings = domBindings;\n    this.facadeGetter = facadeGetter;\n    this.wtSettings = wtSettings;\n    const {\n      TABLE,\n      hider,\n      spreader,\n      holder,\n      wtRootElement\n    } = this.wot.wtTable; // todo ioc\n\n    // legacy support, deprecated in the future\n    this.instance = this.wot;\n    this.type = type;\n    this.mainTableScrollableElement = null;\n    this.TABLE = TABLE;\n    this.hider = hider;\n    this.spreader = spreader;\n    this.holder = holder;\n    this.wtRootElement = wtRootElement;\n    this.trimmingContainer = getTrimmingContainer(this.hider.parentNode.parentNode);\n    this.updateStateOfRendering();\n    this.clone = this.makeClone();\n  }\n\n  /**\n   * Update internal state of object with an information about the need of full rendering of the overlay.\n   *\n   * @returns {boolean} Returns `true` if the state has changed since the last check.\n   */\n  updateStateOfRendering() {\n    // todo refactoring: conceive introducing final state machine, normal -> changed (once) -> needs-full-render -> ...? -> normal\n    const previousState = this.needFullRender;\n    this.needFullRender = this.shouldBeRendered();\n    const changed = previousState !== this.needFullRender;\n    if (changed && !this.needFullRender) {\n      this.reset();\n    }\n    return changed;\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return true;\n  }\n\n  /**\n   * Update the trimming container.\n   */\n  updateTrimmingContainer() {\n    this.trimmingContainer = getTrimmingContainer(this.hider.parentNode.parentNode);\n  }\n\n  /**\n   * Update the main scrollable element.\n   */\n  updateMainScrollableElement() {\n    const {\n      wtTable\n    } = this.wot;\n    const {\n      rootWindow\n    } = this.domBindings;\n    if (rootWindow.getComputedStyle(wtTable.wtRootElement.parentNode).getPropertyValue('overflow') === 'hidden') {\n      this.mainTableScrollableElement = this.wot.wtTable.holder;\n    } else {\n      this.mainTableScrollableElement = getScrollableElement(wtTable.TABLE);\n    }\n  }\n\n  /**\n   * Calculates coordinates of the provided element, relative to the root Handsontable element.\n   * NOTE: The element needs to be a child of the overlay in order for the method to work correctly.\n   *\n   * @param {HTMLElement} element The cell element to calculate the position for.\n   * @param {number} rowIndex Visual row index.\n   * @param {number} columnIndex Visual column index.\n   * @returns {{top: number, start: number}|undefined}\n   */\n  getRelativeCellPosition(element, rowIndex, columnIndex) {\n    if (this.clone.wtTable.holder.contains(element) === false) {\n      warn(`The provided element is not a child of the ${this.type} overlay`);\n      return;\n    }\n    const windowScroll = this.mainTableScrollableElement === this.domBindings.rootWindow;\n    const fixedColumnStart = columnIndex < this.wtSettings.getSetting('fixedColumnsStart');\n    const fixedRowTop = rowIndex < this.wtSettings.getSetting('fixedRowsTop');\n    const fixedRowBottom = rowIndex >= this.wtSettings.getSetting('totalRows') - this.wtSettings.getSetting('fixedRowsBottom');\n    const spreader = this.clone.wtTable.spreader;\n    const spreaderOffset = {\n      start: this.getRelativeStartPosition(spreader),\n      top: spreader.offsetTop\n    };\n    const elementOffset = {\n      start: this.getRelativeStartPosition(element),\n      top: element.offsetTop\n    };\n    let offsetObject = null;\n    if (windowScroll) {\n      offsetObject = this.getRelativeCellPositionWithinWindow(fixedRowTop, fixedColumnStart, elementOffset, spreaderOffset);\n    } else {\n      offsetObject = this.getRelativeCellPositionWithinHolder(fixedRowTop, fixedRowBottom, fixedColumnStart, elementOffset, spreaderOffset);\n    }\n    return offsetObject;\n  }\n\n  /**\n   * Get inline start value depending of direction.\n   *\n   * @param {HTMLElement} el Element.\n   * @returns {number}\n   */\n  getRelativeStartPosition(el) {\n    return this.isRtl() ? el.offsetParent.offsetWidth - el.offsetLeft - el.offsetWidth : el.offsetLeft;\n  }\n\n  /**\n   * Calculates coordinates of the provided element, relative to the root Handsontable element within a table with window\n   * as a scrollable element.\n   *\n   * @private\n   * @param {boolean} onFixedRowTop `true` if the coordinates point to a place within the top fixed rows.\n   * @param {boolean} onFixedColumn `true` if the coordinates point to a place within the fixed columns.\n   * @param {number} elementOffset Offset position of the cell element.\n   * @param {number} spreaderOffset Offset position of the spreader element.\n   * @returns {{top: number, left: number}}\n   */\n  getRelativeCellPositionWithinWindow(onFixedRowTop, onFixedColumn, elementOffset, spreaderOffset) {\n    const absoluteRootElementPosition = this.wot.wtTable.wtRootElement.getBoundingClientRect(); // todo refactoring: DEMETER\n    let horizontalOffset = 0;\n    let verticalOffset = 0;\n    if (!onFixedColumn) {\n      horizontalOffset = spreaderOffset.start;\n    } else {\n      let absoluteRootElementStartPosition = absoluteRootElementPosition.left;\n      if (this.isRtl()) {\n        absoluteRootElementStartPosition = this.domBindings.rootWindow.innerWidth - (absoluteRootElementPosition.left + absoluteRootElementPosition.width + getScrollbarWidth());\n      }\n      horizontalOffset = absoluteRootElementStartPosition <= 0 ? -1 * absoluteRootElementStartPosition : 0;\n    }\n    if (onFixedRowTop) {\n      const absoluteOverlayPosition = this.clone.wtTable.TABLE.getBoundingClientRect();\n      verticalOffset = absoluteOverlayPosition.top - absoluteRootElementPosition.top;\n    } else {\n      verticalOffset = spreaderOffset.top;\n    }\n    return {\n      start: elementOffset.start + horizontalOffset,\n      top: elementOffset.top + verticalOffset\n    };\n  }\n\n  /**\n   * Calculates coordinates of the provided element, relative to the root Handsontable element within a table with window\n   * as a scrollable element.\n   *\n   * @private\n   * @param {boolean} onFixedRowTop `true` if the coordinates point to a place within the top fixed rows.\n   * @param {boolean} onFixedRowBottom `true` if the coordinates point to a place within the bottom fixed rows.\n   * @param {boolean} onFixedColumn `true` if the coordinates point to a place within the fixed columns.\n   * @param {number} elementOffset Offset position of the cell element.\n   * @param {number} spreaderOffset Offset position of the spreader element.\n   * @returns {{top: number, left: number}}\n   */\n  getRelativeCellPositionWithinHolder(onFixedRowTop, onFixedRowBottom, onFixedColumn, elementOffset, spreaderOffset) {\n    const tableScrollPosition = {\n      horizontal: this.wot.wtOverlays.inlineStartOverlay.getScrollPosition(),\n      vertical: this.wot.wtOverlays.topOverlay.getScrollPosition()\n    };\n    let horizontalOffset = 0;\n    let verticalOffset = 0;\n    if (!onFixedColumn) {\n      horizontalOffset = tableScrollPosition.horizontal - spreaderOffset.start;\n    }\n    if (onFixedRowBottom) {\n      const absoluteRootElementPosition = this.wot.wtTable.wtRootElement.getBoundingClientRect(); // todo refactoring: DEMETER\n      const absoluteOverlayPosition = this.clone.wtTable.TABLE.getBoundingClientRect(); // todo refactoring: DEMETER\n\n      verticalOffset = absoluteOverlayPosition.top * -1 + absoluteRootElementPosition.top;\n    } else if (!onFixedRowTop) {\n      verticalOffset = tableScrollPosition.vertical - spreaderOffset.top;\n    }\n    return {\n      start: elementOffset.start - horizontalOffset,\n      top: elementOffset.top - verticalOffset\n    };\n  }\n\n  /**\n   * Make a clone of table for overlay.\n   *\n   * @returns {Clone}\n   */\n  makeClone() {\n    if (CLONE_TYPES.indexOf(this.type) === -1) {\n      throw new Error(`Clone type \"${this.type}\" is not supported.`);\n    }\n    const {\n      wtTable,\n      wtSettings\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const clone = rootDocument.createElement('DIV');\n    const clonedTable = rootDocument.createElement('TABLE');\n    const tableParent = wtTable.wtRootElement.parentNode;\n    clone.className = `${CLONE_CLASS_NAMES.get(this.type)} handsontable`;\n    clone.setAttribute('dir', this.isRtl() ? 'rtl' : 'ltr');\n    clone.style.position = 'absolute';\n    clone.style.top = 0;\n    clone.style.overflow = 'visible';\n    if (this.isRtl()) {\n      clone.style.right = 0;\n    } else {\n      clone.style.left = 0;\n    }\n    if (wtSettings.getSetting('ariaTags')) {\n      setAttribute(clone, [A11Y_PRESENTATION()]);\n    }\n    clonedTable.className = wtTable.TABLE.className;\n\n    // Clone the main table's `role` attribute to the cloned table.\n    const mainTableRole = wtTable.TABLE.getAttribute('role');\n    if (mainTableRole) {\n      clonedTable.setAttribute('role', wtTable.TABLE.getAttribute('role'));\n    }\n    clone.appendChild(clonedTable);\n    tableParent.appendChild(clone);\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (preventOverflow === true || preventOverflow === 'horizontal' && this.type === CLONE_TOP || preventOverflow === 'vertical' && this.type === CLONE_INLINE_START) {\n      this.mainTableScrollableElement = rootWindow;\n    } else if (rootWindow.getComputedStyle(tableParent).getPropertyValue('overflow') === 'hidden') {\n      this.mainTableScrollableElement = wtTable.holder;\n    } else {\n      this.mainTableScrollableElement = getScrollableElement(wtTable.TABLE);\n    }\n\n    // Create a new instance of the Walkontable class\n    return new Clone(clonedTable, this.wtSettings, {\n      // todo ioc factory\n      source: this.wot,\n      overlay: this,\n      viewport: this.wot.wtViewport,\n      // todo ioc , or factor func if used only here\n      event: this.wot.wtEvent,\n      // todo ioc , or factory func if used only here\n      selectionManager: this.wot.selectionManager // todo ioc , or factory func if used only here\n    });\n  }\n\n  /**\n   * Refresh/Redraw overlay.\n   *\n   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering\n   *                                   the data. It will only work if Table.draw() does not force\n   *                                   rendering anyway.\n   */\n  refresh() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    // When hot settings are changed we allow to refresh overlay once before blocking\n    const nextCycleRenderFlag = this.shouldBeRendered();\n    if (this.clone && (this.needFullRender || nextCycleRenderFlag)) {\n      this.clone.draw(fastDraw);\n    }\n    this.needFullRender = nextCycleRenderFlag;\n  }\n\n  /**\n   * Reset overlay styles to initial values.\n   */\n  reset() {\n    if (!this.clone) {\n      return;\n    }\n    const holder = this.clone.wtTable.holder; // todo refactoring: DEMETER\n    const hider = this.clone.wtTable.hider; // todo refactoring: DEMETER\n    const holderStyle = holder.style;\n    const hiderStyle = hider.style;\n    const rootStyle = holder.parentNode.style;\n    arrayEach([holderStyle, hiderStyle, rootStyle], style => {\n      style.width = '';\n      style.height = '';\n    });\n  }\n\n  /**\n   * Determine if Walkontable is running in RTL mode.\n   *\n   * @returns {boolean}\n   */\n  isRtl() {\n    return this.wtSettings.getSetting('rtlMode');\n  }\n\n  /**\n   * Destroy overlay instance.\n   */\n  destroy() {\n    this.clone.eventManager.destroy(); // todo check if it is good place for that operation\n  }\n}","/**\n * Default border corner style.\n *\n * @type {object}\n */\nexport const CORNER_DEFAULT_STYLE = Object.freeze({\n  width: '6px',\n  height: '6px',\n  borderWidth: '1px',\n  borderStyle: 'solid',\n  borderColor: '#FFF'\n});","import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { addClass, getScrollbarWidth, getScrollTop, getWindowScrollLeft, hasClass, outerHeight, removeClass, setOverlayPosition, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport TopOverlayTable from \"./../table/top.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CORNER_DEFAULT_STYLE } from \"../selection/index.mjs\";\nimport { CLONE_TOP } from \"./constants.mjs\";\n/**\n * @class TopOverlay\n */\nexport class TopOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_TOP, wtSettings, domBindings);\n    /**\n     * Cached value which holds the previous value of the `fixedRowsTop` option.\n     * It is used as a comparison value that can be used to detect changes in this value.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"cachedFixedRowsTop\", -1);\n    this.cachedFixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {TopOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new TopOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderTopOverlay');\n  }\n\n  /**\n   * Updates the top overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayPosition = 0;\n    let skipInnerBorderAdjusting = false;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const {\n        wtTable\n      } = this.wot;\n      const hiderRect = wtTable.hider.getBoundingClientRect();\n      const bottom = Math.ceil(hiderRect.bottom);\n      const rootHeight = overlayRoot.offsetHeight;\n\n      // This checks if the overlay is going to an infinite loop caused by added (or removed)\n      // `innerBorderTop` class name. Toggling the class name shifts the viewport by 1px and\n      // triggers the `scroll` event. It causes the table to render. The new render cycle takes into,\n      // account the shift and toggles the class name again. This causes the next loops. This\n      // happens only on Chrome (#7256).\n      //\n      // When we detect that the table bottom position is the same as the overlay bottom,\n      // do not toggle the class name.\n      //\n      // This workaround will be able to be cleared after merging the SVG borders, which introduces\n      // frozen lines (no more `innerBorderTop` workaround).\n      skipInnerBorderAdjusting = bottom === rootHeight;\n      overlayPosition = this.getOverlayOffset();\n      setOverlayPosition(overlayRoot, '0px', `${overlayPosition}px`);\n    } else {\n      overlayPosition = this.getScrollPosition();\n      resetCssTransform(overlayRoot);\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition, skipInnerBorderAdjusting);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Sets the main overlay's vertical scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const rootWindow = this.domBindings.rootWindow;\n    let result = false;\n    if (this.mainTableScrollableElement === rootWindow && rootWindow.scrollY !== pos) {\n      rootWindow.scrollTo(getWindowScrollLeft(rootWindow), pos);\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollTop !== pos) {\n      this.mainTableScrollableElement.scrollTop = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollHorizontally');\n  }\n\n  /**\n   * Calculates total sum cells height.\n   *\n   * @param {number} from Row index which calculates started from.\n   * @param {number} to Row index where calculation is finished.\n   * @returns {number} Height sum.\n   */\n  sumCellSizes(from, to) {\n    const defaultRowHeight = this.wtSettings.getSetting('defaultRowHeight');\n    let row = from;\n    let sum = 0;\n    while (row < to) {\n      const height = this.wot.wtTable.getRowHeight(row);\n      sum += height === void 0 ? defaultRowHeight : height;\n      row += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, childs and master table element sizes (width, height).\n   *\n   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.\n   */\n  adjustElementsSize() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.updateTrimmingContainer();\n    if (this.needFullRender || force) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarWidth = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'horizontal') {\n      let width = this.wot.wtViewport.getWorkspaceWidth();\n      if (this.wot.wtOverlays.hasScrollbarRight) {\n        width -= scrollbarWidth;\n      }\n      width = Math.min(width, wtTable.wtRootElement.scrollWidth);\n      overlayRootStyle.width = `${width}px`;\n    } else {\n      overlayRootStyle.width = '';\n    }\n    this.clone.wtTable.holder.style.width = overlayRootStyle.width;\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRootStyle.height = `${tableHeight}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    const selectionCornerOffset = this.wot.selectionManager.getFocusSelection() ? parseInt(CORNER_DEFAULT_STYLE.height, 10) / 2 : 0;\n    this.clone.wtTable.hider.style.width = this.hider.style.width;\n    holder.style.width = holder.parentNode.style.width;\n    // Add selection corner protruding part to the holder total height to make sure that\n    // borders' corner won't be cut after vertical scroll (#6937).\n    holder.style.height = `${parseInt(holder.parentNode.style.height, 10) + selectionCornerOffset}px`;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalRows');\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      // can happen if there are 0 rows\n      this.spreader.style.top = '0';\n    } else {\n      throw new Error('Incorrect value of the rowsRenderCalculator');\n    }\n    this.spreader.style.bottom = '';\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated left position to an element.\n   */\n  syncOverlayOffset() {\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    const {\n      spreader\n    } = this.clone.wtTable;\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else {\n      spreader.style[styleProperty] = '';\n    }\n  }\n\n  /**\n   * Scrolls vertically to a row.\n   *\n   * @param {number} sourceRow Row index which you want to scroll to.\n   * @param {boolean} [bottomEdge] If `true`, scrolls according to the bottom edge (top edge is by default).\n   * @returns {boolean}\n   */\n  scrollTo(sourceRow, bottomEdge) {\n    const {\n      wot,\n      wtSettings\n    } = this;\n    const sourceInstance = wot.cloneSource ? wot.cloneSource : wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    let newY = this.getTableParentOffset();\n    let scrollbarCompensation = 0;\n    if (bottomEdge) {\n      const rowHeight = this.wot.wtTable.getRowHeight(sourceRow);\n      const viewportHeight = this.wot.wtViewport.getViewportHeight();\n      if (rowHeight > viewportHeight) {\n        bottomEdge = false;\n      }\n    }\n    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (bottomEdge) {\n      const fixedRowsBottom = wtSettings.getSetting('fixedRowsBottom');\n      const totalRows = wtSettings.getSetting('totalRows');\n      newY += this.sumCellSizes(0, sourceRow + 1);\n      newY -= wot.wtViewport.getViewportHeight() - this.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n      // Fix 1 pixel offset when cell is selected\n      newY += 1;\n    } else {\n      newY += this.sumCellSizes(wtSettings.getSetting('fixedRowsTop'), sourceRow);\n    }\n    newY += scrollbarCompensation;\n    return this.setScrollPosition(newY);\n  }\n\n  /**\n   * Gets table parent top position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    if (this.mainTableScrollableElement === this.domBindings.rootWindow) {\n      return this.wot.wtTable.holderOffset.top;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets the main overlay's vertical scroll position.\n   *\n   * @returns {number} Main table's vertical scroll position.\n   */\n  getScrollPosition() {\n    return getScrollTop(this.mainTableScrollableElement, this.domBindings.rootWindow);\n  }\n\n  /**\n   * Gets the main overlay's vertical overlay offset.\n   *\n   * @returns {number} Main table's vertical overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const rootHeight = this.wot.wtTable.getTotalHeight();\n      const overlayRootHeight = this.clone.wtTable.getTotalHeight();\n      const maxOffset = rootHeight - overlayRootHeight;\n      overlayOffset = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header Y position if trimming container is window or scroll top if not.\n   * @param {boolean} [skipInnerBorderAdjusting=false] If `true` the inner border adjusting will be skipped.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    let skipInnerBorderAdjusting = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const masterParent = this.wot.wtTable.holder.parentNode;\n    const totalColumns = this.wtSettings.getSetting('totalColumns');\n    if (totalColumns) {\n      removeClass(masterParent, 'emptyColumns');\n    } else {\n      addClass(masterParent, 'emptyColumns');\n    }\n    let positionChanged = false;\n    if (!skipInnerBorderAdjusting) {\n      const fixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n      const areFixedRowsTopChanged = this.cachedFixedRowsTop !== fixedRowsTop;\n      const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n      if ((areFixedRowsTopChanged || fixedRowsTop === 0) && columnHeaders.length > 0) {\n        const previousState = hasClass(masterParent, 'innerBorderTop');\n        this.cachedFixedRowsTop = this.wtSettings.getSetting('fixedRowsTop');\n        if (position || this.wtSettings.getSetting('totalRows') === 0) {\n          addClass(masterParent, 'innerBorderTop');\n          positionChanged = !previousState;\n        } else {\n          removeClass(masterParent, 'innerBorderTop');\n          positionChanged = previousState;\n        }\n      }\n    }\n    return positionChanged;\n  }\n}","import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'stickyRowsBottom';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the bottom rows in the vertical axis.\n *\n * @type {object}\n */\nconst stickyRowsBottom = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedRow() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    const fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n    const index = totalRows - fixedRowsBottom;\n    if (totalRows === 0 || fixedRowsBottom === 0) {\n      return -1;\n    }\n    if (index < 0) {\n      return 0;\n    }\n    return index;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleRow() {\n    return this.getFirstRenderedRow();\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedRow() {\n    return this.wtSettings.getSetting('totalRows') - 1;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleRow() {\n    return this.getLastRenderedRow();\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedRowsCount() {\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    return Math.min(this.wtSettings.getSetting('fixedRowsBottom'), totalRows);\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   * Assumes that all rendered rows are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleRowsCount() {\n    return this.getRenderedRowsCount();\n  },\n  /**\n   * Get the number of rendered column headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getColumnHeadersCount() {\n    return 0;\n  }\n};\ndefineGetter(stickyRowsBottom, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyRowsBottom;","import Table from \"../table.mjs\";\nimport stickyRowsBottom from \"./mixin/stickyRowsBottom.mjs\";\nimport calculatedColumns from \"./mixin/calculatedColumns.mjs\";\nimport { mixin } from \"../../../../helpers/object.mjs\";\nimport { CLONE_BOTTOM } from \"../overlay/index.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to BottomOverlay, implemented through mixins.\n *\n * @mixes stickyRowsBottom\n * @mixes calculatedColumns\n */\nclass BottomOverlayTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, CLONE_BOTTOM);\n  }\n}\nmixin(BottomOverlayTable, stickyRowsBottom);\nmixin(BottomOverlayTable, calculatedColumns);\nexport default BottomOverlayTable;","import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { addClass, getScrollbarWidth, getScrollTop, getWindowScrollLeft, hasClass, outerHeight, removeClass } from \"../../../../helpers/dom/element.mjs\";\nimport BottomOverlayTable from \"./../table/bottom.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CLONE_BOTTOM } from \"./constants.mjs\";\n/**\n * @class BottomOverlay\n */\nexport class BottomOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_BOTTOM, wtSettings, domBindings);\n    /**\n     * Cached value which holds the previous value of the `fixedRowsBottom` option.\n     * It is used as a comparison value that can be used to detect changes in that value.\n     *\n     * @type {number}\n     */\n    _defineProperty(this, \"cachedFixedRowsBottom\", -1);\n    this.cachedFixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {BottomOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new BottomOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderBottomOverlay');\n  }\n\n  /**\n   * Updates the top overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    if (!this.needFullRender || !this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const {\n      rootWindow\n    } = this.domBindings;\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    overlayRoot.style.top = '';\n    let overlayPosition = 0;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      overlayPosition = this.getOverlayOffset();\n      overlayRoot.style.bottom = `${overlayPosition}px`;\n    } else {\n      overlayPosition = this.getScrollPosition();\n      this.repositionOverlay();\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Updates the bottom overlay position.\n   */\n  repositionOverlay() {\n    const {\n      wtTable,\n      wtViewport\n    } = this.wot;\n    const {\n      rootDocument\n    } = this.domBindings;\n    const cloneRoot = this.clone.wtTable.holder.parentNode;\n    let bottomOffset = 0;\n    if (!wtViewport.hasVerticalScroll()) {\n      bottomOffset += wtViewport.getWorkspaceHeight() - wtTable.getTotalHeight();\n    }\n    if (wtViewport.hasVerticalScroll() && wtViewport.hasHorizontalScroll()) {\n      bottomOffset += getScrollbarWidth(rootDocument);\n    }\n    cloneRoot.style.bottom = `${bottomOffset}px`;\n  }\n\n  /**\n   * Sets the main overlay's vertical scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const {\n      rootWindow\n    } = this.domBindings;\n    let result = false;\n    if (this.mainTableScrollableElement === rootWindow) {\n      rootWindow.scrollTo(getWindowScrollLeft(rootWindow), pos);\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollTop !== pos) {\n      this.mainTableScrollableElement.scrollTop = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollHorizontally');\n  }\n\n  /**\n   * Calculates total sum cells height.\n   *\n   * @param {number} from Row index which calculates started from.\n   * @param {number} to Row index where calculation is finished.\n   * @returns {number} Height sum.\n   */\n  sumCellSizes(from, to) {\n    const {\n      wtTable,\n      wtSettings\n    } = this.wot;\n    const defaultRowHeight = wtSettings.getSetting('defaultRowHeight');\n    let row = from;\n    let sum = 0;\n    while (row < to) {\n      const height = wtTable.getRowHeight(row);\n      sum += height === void 0 ? defaultRowHeight : height;\n      row += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, childs and master table element sizes (width, height).\n   *\n   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.\n   */\n  adjustElementsSize() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.updateTrimmingContainer();\n    if (this.needFullRender || force) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable,\n      wtViewport\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarWidth = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'horizontal') {\n      let width = wtViewport.getWorkspaceWidth();\n      if (this.wot.wtOverlays.hasScrollbarRight) {\n        width -= scrollbarWidth;\n      }\n      width = Math.min(width, wtTable.wtRootElement.scrollWidth);\n      overlayRootStyle.width = `${width}px`;\n    } else {\n      overlayRootStyle.width = '';\n    }\n    this.clone.wtTable.holder.style.width = overlayRootStyle.width;\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRootStyle.height = `${tableHeight}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    this.clone.wtTable.hider.style.width = this.hider.style.width;\n    holder.style.width = holder.parentNode.style.width;\n    holder.style.height = holder.parentNode.style.height;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalRows');\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      // can happen if there are 0 rows\n      this.spreader.style.top = '0';\n    } else {\n      throw new Error('Incorrect value of the rowsRenderCalculator');\n    }\n    this.spreader.style.bottom = '';\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated left position to an element.\n   */\n  syncOverlayOffset() {\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    const {\n      spreader\n    } = this.clone.wtTable;\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else {\n      spreader.style[styleProperty] = '';\n    }\n  }\n\n  /**\n   * Scrolls vertically to a row.\n   *\n   * @param {number} sourceRow Row index which you want to scroll to.\n   * @param {boolean} [bottomEdge=false] If `true`, scrolls according to the bottom edge (top edge is by default).\n   */\n  scrollTo(sourceRow, bottomEdge) {\n    let newY = this.getTableParentOffset();\n    const sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    let scrollbarCompensation = 0;\n    if (bottomEdge && mainHolder.offsetHeight !== mainHolder.clientHeight) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (bottomEdge) {\n      newY += this.sumCellSizes(0, sourceRow + 1);\n      newY -= this.wot.wtViewport.getViewportHeight();\n      // Fix 1 pixel offset when cell is selected\n      newY += 1;\n    } else {\n      newY += this.sumCellSizes(this.wtSettings.getSetting('fixedRowsBottom'), sourceRow);\n    }\n    newY += scrollbarCompensation;\n    this.setScrollPosition(newY);\n  }\n\n  /**\n   * Gets table parent top position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    if (this.mainTableScrollableElement === this.domBindings.rootWindow) {\n      return this.wot.wtTable.holderOffset.top;\n    }\n    return 0;\n  }\n\n  /**\n   * Gets the main overlay's vertical scroll position.\n   *\n   * @returns {number} Main table's vertical scroll position.\n   */\n  getScrollPosition() {\n    return getScrollTop(this.mainTableScrollableElement, this.domBindings.rootWindow);\n  }\n\n  /**\n   * Gets the main overlay's vertical overlay offset.\n   *\n   * @returns {number} Main table's vertical overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'vertical')) {\n      const rootHeight = this.wot.wtTable.getTotalHeight();\n      const overlayRootHeight = this.clone.wtTable.getTotalHeight();\n      const maxOffset = rootHeight - overlayRootHeight;\n      const docClientHeight = this.domBindings.rootDocument.documentElement.clientHeight;\n      overlayOffset = Math.max(this.getTableParentOffset() - this.getScrollPosition() - docClientHeight + rootHeight, 0);\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header Y position if trimming container is window or scroll top if not.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    const fixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n    const areFixedRowsBottomChanged = this.cachedFixedRowsBottom !== fixedRowsBottom;\n    const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n    let positionChanged = false;\n    if ((areFixedRowsBottomChanged || fixedRowsBottom === 0) && columnHeaders.length > 0) {\n      const masterParent = this.wot.wtTable.holder.parentNode;\n      const previousState = hasClass(masterParent, 'innerBorderBottom');\n      this.cachedFixedRowsBottom = this.wtSettings.getSetting('fixedRowsBottom');\n      if (position || this.wtSettings.getSetting('totalRows') === 0) {\n        addClass(masterParent, 'innerBorderBottom');\n        positionChanged = !previousState;\n      } else {\n        removeClass(masterParent, 'innerBorderBottom');\n        positionChanged = previousState;\n      }\n    }\n    return positionChanged;\n  }\n}","import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'calculatedRows';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to rows.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use virtual rendering in the vertical axis.\n *\n * @type {object}\n */\nconst calculatedRows = {\n  /**\n   * Get the source index of the first rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedRow() {\n    const startRow = this.dataAccessObject.startRowRendered;\n    if (startRow === null) {\n      return -1;\n    }\n    return startRow;\n  },\n  /**\n   * Get the source index of the first row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleRow() {\n    const startRow = this.dataAccessObject.startRowVisible;\n    if (startRow === null) {\n      return -1;\n    }\n    return startRow;\n  },\n  /**\n   * Get the source index of the last rendered row. If no rows are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedRow() {\n    const endRow = this.dataAccessObject.endRowRendered;\n    if (endRow === null) {\n      return -1;\n    }\n    return endRow;\n  },\n  /**\n   * Get the source index of the last row fully visible in the viewport. If no rows are fully visible, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleRow() {\n    const endRow = this.dataAccessObject.endRowVisible;\n    if (endRow === null) {\n      return -1;\n    }\n    return endRow;\n  },\n  /**\n   * Get the number of rendered rows.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedRowsCount() {\n    return this.dataAccessObject.countRowsRendered;\n  },\n  /**\n   * Get the number of fully visible rows in the viewport.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleRowsCount() {\n    return this.dataAccessObject.countRowsVisible;\n  },\n  /**\n   * Get the number of rendered column headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getColumnHeadersCount() {\n    return this.dataAccessObject.columnHeaders.length;\n  }\n};\ndefineGetter(calculatedRows, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default calculatedRows;","import { defineGetter } from \"../../../../../helpers/object.mjs\";\nconst MIXIN_NAME = 'stickyColumnsStart';\n\n/**\n * Mixin for the subclasses of `Table` with implementations of\n * helper methods that are related to columns.\n * This mixin is meant to be applied in the subclasses of `Table`\n * that use sticky rendering of the first columns in the horizontal axis.\n *\n * @type {object}\n */\nconst stickyColumnsStart = {\n  /**\n   * Get the source index of the first rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstRenderedColumn() {\n    const totalColumns = this.wtSettings.getSetting('totalColumns');\n    if (totalColumns === 0) {\n      return -1;\n    }\n    return 0;\n  },\n  /**\n   * Get the source index of the first column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getFirstVisibleColumn() {\n    return this.getFirstRenderedColumn();\n  },\n  /**\n   * Get the source index of the last rendered column. If no columns are rendered, returns an error code: -1.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastRenderedColumn() {\n    return this.getRenderedColumnsCount() - 1;\n  },\n  /**\n   * Get the source index of the last column fully visible in the viewport. If no columns are fully visible, returns an error code: -1.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getLastVisibleColumn() {\n    return this.getLastRenderedColumn();\n  },\n  /**\n   * Get the number of rendered columns.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRenderedColumnsCount() {\n    const totalColumns = this.wtSettings.getSetting('totalColumns');\n    return Math.min(this.wtSettings.getSetting('fixedColumnsStart'), totalColumns);\n  },\n  /**\n   * Get the number of fully visible columns in the viewport.\n   * Assumes that all rendered columns are fully visible.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getVisibleColumnsCount() {\n    return this.getRenderedColumnsCount();\n  },\n  /**\n   * Get the number of rendered row headers.\n   *\n   * @returns {number}\n   * @this Table\n   */\n  getRowHeadersCount() {\n    return this.dataAccessObject.rowHeaders.length;\n  }\n};\ndefineGetter(stickyColumnsStart, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default stickyColumnsStart;","import Table from \"../table.mjs\";\nimport calculatedRows from \"./mixin/calculatedRows.mjs\";\nimport stickyColumnsStart from \"./mixin/stickyColumnsStart.mjs\";\nimport { mixin } from \"../../../../helpers/object.mjs\";\nimport { CLONE_INLINE_START } from \"../overlay/index.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to InlineStartOverlayTable, implemented through mixins.\n */\nclass InlineStartOverlayTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, CLONE_INLINE_START);\n  }\n}\nmixin(InlineStartOverlayTable, calculatedRows);\nmixin(InlineStartOverlayTable, stickyColumnsStart);\nexport default InlineStartOverlayTable;","import \"core-js/modules/es.error.cause.js\";\nimport { addClass, getScrollbarWidth, getScrollLeft, getWindowScrollTop, hasClass, outerWidth, removeClass, setOverlayPosition, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport InlineStartOverlayTable from \"../table/inlineStart.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CORNER_DEFAULT_STYLE } from \"../selection/index.mjs\";\nimport { CLONE_INLINE_START } from \"./constants.mjs\";\n/**\n * @class InlineStartOverlay\n */\nexport class InlineStartOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings) {\n    super(wotInstance, facadeGetter, CLONE_INLINE_START, wtSettings, domBindings);\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {InlineStartOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new InlineStartOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderInlineStartOverlay');\n  }\n\n  /**\n   * Updates the left overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    const {\n      wtTable\n    } = this.wot;\n    if (!this.needFullRender || !wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const {\n      rootWindow\n    } = this.domBindings;\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayPosition = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'horizontal')) {\n      overlayPosition = this.getOverlayOffset() * (this.isRtl() ? -1 : 1);\n      setOverlayPosition(overlayRoot, `${overlayPosition}px`, '0px');\n    } else {\n      overlayPosition = this.getScrollPosition();\n      resetCssTransform(overlayRoot);\n    }\n    const positionChanged = this.adjustHeaderBordersPosition(overlayPosition);\n    this.adjustElementsSize();\n    return positionChanged;\n  }\n\n  /**\n   * Sets the main overlay's horizontal scroll position.\n   *\n   * @param {number} pos The scroll position.\n   * @returns {boolean}\n   */\n  setScrollPosition(pos) {\n    const {\n      rootWindow\n    } = this.domBindings;\n    let result = false;\n    if (this.isRtl()) {\n      pos = -pos;\n    }\n    if (this.mainTableScrollableElement === rootWindow && rootWindow.scrollX !== pos) {\n      rootWindow.scrollTo(pos, getWindowScrollTop(rootWindow));\n      result = true;\n    } else if (this.mainTableScrollableElement.scrollLeft !== pos) {\n      this.mainTableScrollableElement.scrollLeft = pos;\n      result = true;\n    }\n    return result;\n  }\n\n  /**\n   * Triggers onScroll hook callback.\n   */\n  onScroll() {\n    this.wtSettings.getSetting('onScrollVertically');\n  }\n\n  /**\n   * Calculates total sum cells width.\n   *\n   * @param {number} from Column index which calculates started from.\n   * @param {number} to Column index where calculation is finished.\n   * @returns {number} Width sum.\n   */\n  sumCellSizes(from, to) {\n    const defaultColumnWidth = this.wtSettings.getSetting('defaultColumnWidth');\n    let column = from;\n    let sum = 0;\n    while (column < to) {\n      sum += this.wot.wtTable.getStretchedColumnWidth(column) || defaultColumnWidth;\n      column += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * Adjust overlay root element, childs and master table element sizes (width, height).\n   *\n   * @param {boolean} [force=false] When `true`, it adjusts the DOM nodes sizes for that overlay.\n   */\n  adjustElementsSize() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.updateTrimmingContainer();\n    if (this.needFullRender || force) {\n      this.adjustRootElementSize();\n      this.adjustRootChildrenSize();\n    }\n  }\n\n  /**\n   * Adjust overlay root element size (width and height).\n   */\n  adjustRootElementSize() {\n    const {\n      wtTable\n    } = this.wot;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const scrollbarHeight = getScrollbarWidth(rootDocument);\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    const overlayRootStyle = overlayRoot.style;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    if (this.trimmingContainer !== rootWindow || preventOverflow === 'vertical') {\n      let height = this.wot.wtViewport.getWorkspaceHeight();\n      if (this.wot.wtOverlays.hasScrollbarBottom) {\n        height -= scrollbarHeight;\n      }\n      height = Math.min(height, wtTable.wtRootElement.scrollHeight);\n      overlayRootStyle.height = `${height}px`;\n    } else {\n      overlayRootStyle.height = '';\n    }\n    this.clone.wtTable.holder.style.height = overlayRootStyle.height;\n    const tableWidth = outerWidth(this.clone.wtTable.TABLE);\n    overlayRootStyle.width = `${tableWidth}px`;\n  }\n\n  /**\n   * Adjust overlay root childs size.\n   */\n  adjustRootChildrenSize() {\n    const {\n      holder\n    } = this.clone.wtTable;\n    const selectionCornerOffset = this.wot.selectionManager.getFocusSelection() ? parseInt(CORNER_DEFAULT_STYLE.width, 10) / 2 : 0;\n    this.clone.wtTable.hider.style.height = this.hider.style.height;\n    holder.style.height = holder.parentNode.style.height;\n    // Add selection corner protruding part to the holder total width to make sure that\n    // borders' corner won't be cut after horizontal scroll (#6937).\n    holder.style.width = `${parseInt(holder.parentNode.style.width, 10) + selectionCornerOffset}px`;\n  }\n\n  /**\n   * Adjust the overlay dimensions and position.\n   */\n  applyToDOM() {\n    const total = this.wtSettings.getSetting('totalColumns');\n    const styleProperty = this.isRtl() ? 'right' : 'left';\n    if (typeof this.wot.wtViewport.columnsRenderCalculator.startPosition === 'number') {\n      this.spreader.style[styleProperty] = `${this.wot.wtViewport.columnsRenderCalculator.startPosition}px`;\n    } else if (total === 0) {\n      this.spreader.style[styleProperty] = '0';\n    } else {\n      throw new Error('Incorrect value of the columnsRenderCalculator');\n    }\n    if (this.isRtl()) {\n      this.spreader.style.left = '';\n    } else {\n      this.spreader.style.right = '';\n    }\n    if (this.needFullRender) {\n      this.syncOverlayOffset();\n    }\n  }\n\n  /**\n   * Synchronize calculated top position to an element.\n   */\n  syncOverlayOffset() {\n    if (typeof this.wot.wtViewport.rowsRenderCalculator.startPosition === 'number') {\n      this.clone.wtTable.spreader.style.top = `${this.wot.wtViewport.rowsRenderCalculator.startPosition}px`;\n    } else {\n      this.clone.wtTable.spreader.style.top = '';\n    }\n  }\n\n  /**\n   * Scrolls horizontally to a column at the left edge of the viewport.\n   *\n   * @param {number} sourceCol  Column index which you want to scroll to.\n   * @param {boolean} [beyondRendered]  If `true`, scrolls according to the right\n   *                                    edge (left edge is by default).\n   * @returns {boolean}\n   */\n  scrollTo(sourceCol, beyondRendered) {\n    let newX = this.getTableParentOffset();\n    const sourceInstance = this.wot.cloneSource ? this.wot.cloneSource : this.wot;\n    const mainHolder = sourceInstance.wtTable.holder;\n    let scrollbarCompensation = 0;\n    if (beyondRendered) {\n      const columnWidth = this.wot.wtTable.getColumnWidth(sourceCol);\n      const viewportWidth = this.wot.wtViewport.getViewportWidth();\n      if (columnWidth > viewportWidth) {\n        beyondRendered = false;\n      }\n    }\n    if (beyondRendered && mainHolder.offsetWidth !== mainHolder.clientWidth) {\n      scrollbarCompensation = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    if (beyondRendered) {\n      newX += this.sumCellSizes(0, sourceCol + 1);\n      newX -= this.wot.wtViewport.getViewportWidth();\n    } else {\n      newX += this.sumCellSizes(this.wtSettings.getSetting('fixedColumnsStart'), sourceCol);\n    }\n    newX += scrollbarCompensation;\n    return this.setScrollPosition(newX);\n  }\n\n  /**\n   * Gets table parent left position.\n   *\n   * @returns {number}\n   */\n  getTableParentOffset() {\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let offset = 0;\n    if (!preventOverflow && this.trimmingContainer === this.domBindings.rootWindow) {\n      offset = this.wot.wtTable.holderOffset.left;\n    }\n    return offset;\n  }\n\n  /**\n   * Gets the main overlay's horizontal scroll position.\n   *\n   * @returns {number} Main table's horizontal scroll position.\n   */\n  getScrollPosition() {\n    return Math.abs(getScrollLeft(this.mainTableScrollableElement, this.domBindings.rootWindow));\n  }\n\n  /**\n   * Gets the main overlay's horizontal overlay offset.\n   *\n   * @returns {number} Main table's horizontal overlay offset.\n   */\n  getOverlayOffset() {\n    const {\n      rootWindow\n    } = this.domBindings;\n    const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n    let overlayOffset = 0;\n    if (this.trimmingContainer === rootWindow && (!preventOverflow || preventOverflow !== 'horizontal')) {\n      if (this.isRtl()) {\n        overlayOffset = Math.abs(Math.min(this.getTableParentOffset() - this.getScrollPosition(), 0));\n      } else {\n        overlayOffset = Math.max(this.getScrollPosition() - this.getTableParentOffset(), 0);\n      }\n      const rootWidth = this.wot.wtTable.getTotalWidth();\n      const overlayRootWidth = this.clone.wtTable.getTotalWidth();\n      const maxOffset = rootWidth - overlayRootWidth;\n      if (overlayOffset > maxOffset) {\n        overlayOffset = 0;\n      }\n    }\n    return overlayOffset;\n  }\n\n  /**\n   * Adds css classes to hide the header border's header (cell-selection border hiding issue).\n   *\n   * @param {number} position Header X position if trimming container is window or scroll top if not.\n   * @returns {boolean}\n   */\n  adjustHeaderBordersPosition(position) {\n    const masterParent = this.wot.wtTable.holder.parentNode;\n    const rowHeaders = this.wtSettings.getSetting('rowHeaders');\n    const fixedColumnsStart = this.wtSettings.getSetting('fixedColumnsStart');\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    if (totalRows) {\n      removeClass(masterParent, 'emptyRows');\n    } else {\n      addClass(masterParent, 'emptyRows');\n    }\n    let positionChanged = false;\n    if (fixedColumnsStart && !rowHeaders.length) {\n      // \"innerBorderLeft\" is for backward compatibility\n      addClass(masterParent, 'innerBorderLeft innerBorderInlineStart');\n    } else if (!fixedColumnsStart && rowHeaders.length) {\n      const previousState = hasClass(masterParent, 'innerBorderInlineStart');\n      if (position) {\n        addClass(masterParent, 'innerBorderLeft innerBorderInlineStart');\n        positionChanged = !previousState;\n      } else {\n        removeClass(masterParent, 'innerBorderLeft innerBorderInlineStart');\n        positionChanged = previousState;\n      }\n    }\n    return positionChanged;\n  }\n}","import Table from \"../table.mjs\";\nimport stickyRowsTop from \"./mixin/stickyRowsTop.mjs\";\nimport stickyColumnsStart from \"./mixin/stickyColumnsStart.mjs\";\nimport { mixin } from \"../../../../helpers/object.mjs\";\nimport { CLONE_TOP_INLINE_START_CORNER } from \"../overlay/index.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to topInlineStartCornerOverlay\n * (in RTL mode the overlay sits on the right of the screen), implemented through mixins.\n *\n * @mixes stickyRowsTop\n * @mixes stickyColumnsStart\n */\nclass TopInlineStartCornerOverlayTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, CLONE_TOP_INLINE_START_CORNER);\n  }\n}\nmixin(TopInlineStartCornerOverlayTable, stickyRowsTop);\nmixin(TopInlineStartCornerOverlayTable, stickyColumnsStart);\nexport default TopInlineStartCornerOverlayTable;","import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { outerHeight, outerWidth, setOverlayPosition, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport TopInlineStartCornerOverlayTable from \"../table/topInlineStartCorner.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CLONE_TOP_INLINE_START_CORNER } from \"./constants.mjs\";\n/**\n * @class TopInlineStartCornerOverlay\n */\nexport class TopInlineStartCornerOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   * @param {TopOverlay} topOverlay The instance of the Top overlay.\n   * @param {InlineStartOverlay} inlineStartOverlay The instance of the InlineStart overlay.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings, topOverlay, inlineStartOverlay) {\n    super(wotInstance, facadeGetter, CLONE_TOP_INLINE_START_CORNER, wtSettings, domBindings);\n    /**\n     * The instance of the Top overlay.\n     *\n     * @type {TopOverlay}\n     */\n    _defineProperty(this, \"topOverlay\", void 0);\n    /**\n     * The instance of the InlineStart overlay.\n     *\n     * @type {InlineStartOverlay}\n     */\n    _defineProperty(this, \"inlineStartOverlay\", void 0);\n    this.topOverlay = topOverlay;\n    this.inlineStartOverlay = inlineStartOverlay;\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {TopInlineStartCornerOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new TopInlineStartCornerOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderTopOverlay') && this.wtSettings.getSetting('shouldRenderInlineStartOverlay');\n  }\n\n  /**\n   * Updates the corner overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    this.updateTrimmingContainer();\n    if (!this.wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    if (this.trimmingContainer === this.domBindings.rootWindow) {\n      const left = this.inlineStartOverlay.getOverlayOffset() * (this.isRtl() ? -1 : 1);\n      const top = this.topOverlay.getOverlayOffset();\n      setOverlayPosition(overlayRoot, `${left}px`, `${top}px`);\n    } else {\n      resetCssTransform(overlayRoot);\n    }\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    const tableWidth = outerWidth(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRoot.style.height = `${tableHeight}px`;\n    overlayRoot.style.width = `${tableWidth}px`;\n    return false;\n  }\n}","import Table from \"../table.mjs\";\nimport stickyRowsBottom from \"./mixin/stickyRowsBottom.mjs\";\nimport stickyColumnsStart from \"./mixin/stickyColumnsStart.mjs\";\nimport { mixin } from \"../../../../helpers/object.mjs\";\nimport { CLONE_BOTTOM_INLINE_START_CORNER } from \"../overlay/index.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to bottomInlineStartCornerOverlay\n * (in RTL mode the overlay sits on the right of the screen), implemented through mixins.\n *\n * @mixes stickyRowsBottom\n * @mixes stickyColumnsStart\n */\nclass BottomInlineStartCornerOverlayTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, CLONE_BOTTOM_INLINE_START_CORNER);\n  }\n}\nmixin(BottomInlineStartCornerOverlayTable, stickyRowsBottom);\nmixin(BottomInlineStartCornerOverlayTable, stickyColumnsStart);\nexport default BottomInlineStartCornerOverlayTable;","import { getScrollbarWidth, outerHeight, outerWidth, resetCssTransform } from \"../../../../helpers/dom/element.mjs\";\nimport BottomInlineStartCornerOverlayTable from \"../table/bottomInlineStartCorner.mjs\";\nimport { Overlay } from \"./_base.mjs\";\nimport { CLONE_BOTTOM_INLINE_START_CORNER } from \"./constants.mjs\";\n/**\n * @class BottomInlineStartCornerOverlay\n */\nexport class BottomInlineStartCornerOverlay extends Overlay {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @TODO refactoring: check if can be deleted.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {DomBindings} domBindings Dom elements bound to the current instance.\n   * @param {BottomOverlay} bottomOverlay The instance of the Top overlay.\n   * @param {InlineStartOverlay} inlineStartOverlay The instance of the InlineStart overlay.\n   */\n  constructor(wotInstance, facadeGetter, wtSettings, domBindings, bottomOverlay, inlineStartOverlay) {\n    super(wotInstance, facadeGetter, CLONE_BOTTOM_INLINE_START_CORNER, wtSettings, domBindings);\n    this.bottomOverlay = bottomOverlay;\n    this.inlineStartOverlay = inlineStartOverlay;\n  }\n\n  /**\n   * Factory method to create a subclass of `Table` that is relevant to this overlay.\n   *\n   * @see Table#constructor\n   * @param {...*} args Parameters that will be forwarded to the `Table` constructor.\n   * @returns {BottomInlineStartCornerOverlayTable}\n   */\n  createTable() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new BottomInlineStartCornerOverlayTable(...args);\n  }\n\n  /**\n   * Checks if overlay should be fully rendered.\n   *\n   * @returns {boolean}\n   */\n  shouldBeRendered() {\n    return this.wtSettings.getSetting('shouldRenderBottomOverlay') && this.wtSettings.getSetting('shouldRenderInlineStartOverlay');\n  }\n\n  /**\n   * Updates the corner overlay position.\n   *\n   * @returns {boolean}\n   */\n  resetFixedPosition() {\n    const {\n      wot\n    } = this;\n    this.updateTrimmingContainer();\n    if (!wot.wtTable.holder.parentNode) {\n      // removed from DOM\n      return false;\n    }\n    const overlayRoot = this.clone.wtTable.holder.parentNode;\n    overlayRoot.style.top = '';\n    if (this.trimmingContainer === this.domBindings.rootWindow) {\n      const inlineStartOffset = this.inlineStartOverlay.getOverlayOffset();\n      const bottom = this.bottomOverlay.getOverlayOffset();\n      overlayRoot.style[this.isRtl() ? 'right' : 'left'] = `${inlineStartOffset}px`;\n      overlayRoot.style.bottom = `${bottom}px`;\n    } else {\n      resetCssTransform(overlayRoot);\n      this.repositionOverlay();\n    }\n    let tableHeight = outerHeight(this.clone.wtTable.TABLE);\n    const tableWidth = outerWidth(this.clone.wtTable.TABLE);\n    if (!this.wot.wtTable.hasDefinedSize()) {\n      tableHeight = 0;\n    }\n    overlayRoot.style.height = `${tableHeight}px`;\n    overlayRoot.style.width = `${tableWidth}px`;\n    return false;\n  }\n\n  /**\n   * Reposition the overlay.\n   */\n  repositionOverlay() {\n    const {\n      wtTable,\n      wtViewport\n    } = this.wot;\n    const {\n      rootDocument\n    } = this.domBindings;\n    const cloneRoot = this.clone.wtTable.holder.parentNode;\n    let bottomOffset = 0;\n    if (!wtViewport.hasVerticalScroll()) {\n      bottomOffset += wtViewport.getWorkspaceHeight() - wtTable.getTotalHeight();\n    }\n    if (wtViewport.hasVerticalScroll() && wtViewport.hasHorizontalScroll()) {\n      bottomOffset += getScrollbarWidth(rootDocument);\n    }\n    cloneRoot.style.bottom = `${bottomOffset}px`;\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { getScrollableElement, getScrollbarWidth } from \"../../../helpers/dom/element.mjs\";\nimport { requestAnimationFrame } from \"../../../helpers/feature.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport { isKey } from \"../../../helpers/unicode.mjs\";\nimport { isChrome } from \"../../../helpers/browser.mjs\";\nimport { InlineStartOverlay, TopOverlay, TopInlineStartCornerOverlay, BottomOverlay, BottomInlineStartCornerOverlay } from \"./overlay/index.mjs\";\n/**\n * @class Overlays\n */\nclass Overlays {\n  /**\n   * @param {Walkontable} wotInstance The Walkontable instance. @todo refactoring remove.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {EventManager} eventManager The walkontable event manager.\n   * @param {MasterTable} wtTable The master table.\n   */\n  constructor(wotInstance, facadeGetter, domBindings, wtSettings, eventManager, wtTable) {\n    /**\n     * Walkontable instance's reference.\n     *\n     * @protected\n     * @type {Walkontable}\n     */\n    _defineProperty(this, \"wot\", null);\n    /**\n     * Refer to the TopOverlay instance.\n     *\n     * @protected\n     * @type {TopOverlay}\n     */\n    _defineProperty(this, \"topOverlay\", null);\n    /**\n     * Refer to the BottomOverlay instance.\n     *\n     * @protected\n     * @type {BottomOverlay}\n     */\n    _defineProperty(this, \"bottomOverlay\", null);\n    /**\n     * Refer to the InlineStartOverlay or instance.\n     *\n     * @protected\n     * @type {InlineStartOverlay}\n     */\n    _defineProperty(this, \"inlineStartOverlay\", null);\n    /**\n     * Refer to the TopInlineStartCornerOverlay instance.\n     *\n     * @protected\n     * @type {TopInlineStartCornerOverlay}\n     */\n    _defineProperty(this, \"topInlineStartCornerOverlay\", null);\n    /**\n     * Refer to the BottomInlineStartCornerOverlay instance.\n     *\n     * @protected\n     * @type {BottomInlineStartCornerOverlay}\n     */\n    _defineProperty(this, \"bottomInlineStartCornerOverlay\", null);\n    /**\n     * Browser line height for purposes of translating mouse wheel.\n     *\n     * @private\n     * @type {number}\n     */\n    _defineProperty(this, \"browserLineHeight\", undefined);\n    /**\n     * The walkontable settings.\n     *\n     * @protected\n     * @type {Settings}\n     */\n    _defineProperty(this, \"wtSettings\", null);\n    /**\n     * The instance of the ResizeObserver that observes the size of the Walkontable wrapper element.\n     * In case of the size change detection the `onContainerElementResize` is fired.\n     *\n     * @private\n     * @type {ResizeObserver}\n     */\n    _defineProperty(this, \"resizeObserver\", new ResizeObserver(entries => {\n      requestAnimationFrame(() => {\n        if (!Array.isArray(entries) || !entries.length) {\n          return;\n        }\n        this.wtSettings.getSetting('onContainerElementResize');\n      });\n    }));\n    this.wot = wotInstance;\n    this.wtSettings = wtSettings;\n    this.domBindings = domBindings;\n    this.facadeGetter = facadeGetter;\n    this.wtTable = wtTable;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n\n    // legacy support\n    this.instance = this.wot; // todo refactoring: move to facade\n    this.eventManager = eventManager;\n\n    // TODO refactoring: probably invalid place to this logic\n    this.scrollbarSize = getScrollbarWidth(rootDocument);\n    const isOverflowHidden = rootWindow.getComputedStyle(wtTable.wtRootElement.parentNode).getPropertyValue('overflow') === 'hidden';\n    this.scrollableElement = isOverflowHidden ? wtTable.holder : getScrollableElement(wtTable.TABLE);\n    this.initOverlays();\n    this.hasScrollbarBottom = false;\n    this.hasScrollbarRight = false;\n    this.destroyed = false;\n    this.keyPressed = false;\n    this.spreaderLastSize = {\n      width: null,\n      height: null\n    };\n    this.verticalScrolling = false;\n    this.horizontalScrolling = false;\n    this.initBrowserLineHeight();\n    this.registerListeners();\n    this.lastScrollX = rootWindow.scrollX;\n    this.lastScrollY = rootWindow.scrollY;\n  }\n\n  /**\n   * Get the list of references to all overlays.\n   *\n   * @param {boolean} [includeMaster = false] If set to `true`, the list will contain the master table as the last\n   * element.\n   * @returns {(TopOverlay|TopInlineStartCornerOverlay|InlineStartOverlay|BottomOverlay|BottomInlineStartCornerOverlay)[]}\n   */\n  getOverlays() {\n    let includeMaster = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const overlays = [this.topOverlay, this.topInlineStartCornerOverlay, this.inlineStartOverlay, this.bottomOverlay, this.bottomInlineStartCornerOverlay];\n    if (includeMaster) {\n      overlays.push(this.wtTable);\n    }\n    return overlays;\n  }\n\n  /**\n   * Retrieve browser line height and apply its value to `browserLineHeight`.\n   *\n   * @private\n   */\n  initBrowserLineHeight() {\n    const {\n      rootWindow,\n      rootDocument\n    } = this.domBindings;\n    const computedStyle = rootWindow.getComputedStyle(rootDocument.body);\n    /**\n     * Sometimes `line-height` might be set to 'normal'. In that case, a default `font-size` should be multiplied by roughly 1.2.\n     * Https://developer.mozilla.org/pl/docs/Web/CSS/line-height#Values.\n     */\n    const lineHeight = parseInt(computedStyle.lineHeight, 10);\n    const lineHeightFalback = parseInt(computedStyle.fontSize, 10) * 1.2;\n    this.browserLineHeight = lineHeight || lineHeightFalback;\n  }\n\n  /**\n   * Prepare overlays based on user settings.\n   *\n   * @private\n   */\n  initOverlays() {\n    const args = [this.wot, this.facadeGetter, this.wtSettings, this.domBindings];\n\n    // todo refactoring: IOC, collection or factories.\n    // TODO refactoring, conceive about using generic collection of overlays.\n    this.topOverlay = new TopOverlay(...args);\n    this.bottomOverlay = new BottomOverlay(...args);\n    this.inlineStartOverlay = new InlineStartOverlay(...args);\n\n    // TODO discuss, the controversial here would be removing the lazy creation mechanism for corners.\n    // TODO cond. Has no any visual impact. They're initially hidden in same way like left, top, and bottom overlays.\n    this.topInlineStartCornerOverlay = new TopInlineStartCornerOverlay(...args, this.topOverlay, this.inlineStartOverlay);\n    this.bottomInlineStartCornerOverlay = new BottomInlineStartCornerOverlay(...args, this.bottomOverlay, this.inlineStartOverlay);\n  }\n\n  /**\n   * Update state of rendering, check if changed.\n   *\n   * @package\n   * @returns {boolean} Returns `true` if changes applied to overlay needs scroll synchronization.\n   */\n  updateStateOfRendering() {\n    let syncScroll = this.topOverlay.updateStateOfRendering();\n    syncScroll = this.bottomOverlay.updateStateOfRendering() || syncScroll;\n    syncScroll = this.inlineStartOverlay.updateStateOfRendering() || syncScroll;\n\n    // todo refactoring: move conditions into updateStateOfRendering(),\n    if (this.inlineStartOverlay.needFullRender) {\n      if (this.topOverlay.needFullRender) {\n        syncScroll = this.topInlineStartCornerOverlay.updateStateOfRendering() || syncScroll;\n      }\n      if (this.bottomOverlay.needFullRender) {\n        syncScroll = this.bottomInlineStartCornerOverlay.updateStateOfRendering() || syncScroll;\n      }\n    }\n    return syncScroll;\n  }\n\n  /**\n   * Refresh and redraw table.\n   */\n  refreshAll() {\n    if (!this.wot.drawn) {\n      return;\n    }\n    if (!this.wtTable.holder.parentNode) {\n      // Walkontable was detached from DOM, but this handler was not removed\n      this.destroy();\n      return;\n    }\n    this.wot.draw(true);\n    if (this.verticalScrolling) {\n      this.inlineStartOverlay.onScroll(); // todo the inlineStartOverlay.onScroll() fires hook. Why is it needed there, not in any another place?\n    }\n\n    if (this.horizontalScrolling) {\n      this.topOverlay.onScroll();\n    }\n    this.verticalScrolling = false;\n    this.horizontalScrolling = false;\n  }\n\n  /**\n   * Register all necessary event listeners.\n   */\n  registerListeners() {\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const {\n      mainTableScrollableElement: topOverlayScrollableElement\n    } = this.topOverlay;\n    const {\n      mainTableScrollableElement: inlineStartOverlayScrollableElement\n    } = this.inlineStartOverlay;\n    this.eventManager.addEventListener(rootDocument.documentElement, 'keydown', event => this.onKeyDown(event));\n    this.eventManager.addEventListener(rootDocument.documentElement, 'keyup', () => this.onKeyUp());\n    this.eventManager.addEventListener(rootDocument, 'visibilitychange', () => this.onKeyUp());\n    this.eventManager.addEventListener(topOverlayScrollableElement, 'scroll', event => this.onTableScroll(event), {\n      passive: true\n    });\n    if (topOverlayScrollableElement !== inlineStartOverlayScrollableElement) {\n      this.eventManager.addEventListener(inlineStartOverlayScrollableElement, 'scroll', event => this.onTableScroll(event), {\n        passive: true\n      });\n    }\n    const isHighPixelRatio = rootWindow.devicePixelRatio && rootWindow.devicePixelRatio > 1;\n    const isScrollOnWindow = this.scrollableElement === rootWindow;\n    const preventWheel = this.wtSettings.getSetting('preventWheel');\n    const wheelEventOptions = {\n      passive: isScrollOnWindow\n    };\n    if (preventWheel || isHighPixelRatio || !isChrome()) {\n      this.eventManager.addEventListener(this.wtTable.wtRootElement, 'wheel', event => this.onCloneWheel(event, preventWheel), wheelEventOptions);\n    }\n    const overlays = [this.topOverlay, this.bottomOverlay, this.inlineStartOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];\n    overlays.forEach(overlay => {\n      if (overlay && overlay.needFullRender) {\n        const {\n          holder\n        } = overlay.clone.wtTable; // todo rethink, maybe: overlay.getHolder()\n\n        this.eventManager.addEventListener(holder, 'wheel', event => this.onCloneWheel(event, preventWheel), wheelEventOptions);\n      }\n    });\n    let resizeTimeout;\n    this.eventManager.addEventListener(rootWindow, 'resize', () => {\n      clearTimeout(resizeTimeout);\n      resizeTimeout = setTimeout(() => {\n        this.wtSettings.getSetting('onWindowResize');\n      }, 200);\n    });\n    if (!isScrollOnWindow) {\n      this.resizeObserver.observe(this.wtTable.wtRootElement.parentElement);\n    }\n  }\n\n  /**\n   * Deregister all previously registered listeners.\n   */\n  deregisterListeners() {\n    this.eventManager.clearEvents(true);\n  }\n\n  /**\n   * Scroll listener.\n   *\n   * @param {Event} event The mouse event object.\n   */\n  onTableScroll(event) {\n    // There was if statement which controlled flow of this function. It avoided the execution of the next lines\n    // on mobile devices. It was changed. Broader description of this case is included within issue #4856.\n    const rootWindow = this.domBindings.rootWindow;\n    const masterHorizontal = this.inlineStartOverlay.mainTableScrollableElement;\n    const masterVertical = this.topOverlay.mainTableScrollableElement;\n    const target = event.target;\n\n    // For key press, sync only master -> overlay position because while pressing Walkontable.render is triggered\n    // by hot.refreshBorder\n    if (this.keyPressed) {\n      if (masterVertical !== rootWindow && target !== rootWindow && !event.target.contains(masterVertical) || masterHorizontal !== rootWindow && target !== rootWindow && !event.target.contains(masterHorizontal)) {\n        return;\n      }\n    }\n    this.syncScrollPositions(event);\n  }\n\n  /**\n   * Wheel listener for cloned overlays.\n   *\n   * @param {Event} event The mouse event object.\n   * @param {boolean} preventDefault If `true`, the `preventDefault` will be called on event object.\n   */\n  onCloneWheel(event, preventDefault) {\n    const {\n      rootWindow\n    } = this.domBindings;\n\n    // There was if statement which controlled flow of this function. It avoided the execution of the next lines\n    // on mobile devices. It was changed. Broader description of this case is included within issue #4856.\n\n    const masterHorizontal = this.inlineStartOverlay.mainTableScrollableElement;\n    const masterVertical = this.topOverlay.mainTableScrollableElement;\n    const target = event.target;\n\n    // For key press, sync only master -> overlay position because while pressing Walkontable.render is triggered\n    // by hot.refreshBorder\n    const shouldNotWheelVertically = masterVertical !== rootWindow && target !== rootWindow && !target.contains(masterVertical);\n    const shouldNotWheelHorizontally = masterHorizontal !== rootWindow && target !== rootWindow && !target.contains(masterHorizontal);\n    if (this.keyPressed && (shouldNotWheelVertically || shouldNotWheelHorizontally)) {\n      return;\n    }\n    const isScrollPossible = this.translateMouseWheelToScroll(event);\n    if (preventDefault || this.scrollableElement !== rootWindow && isScrollPossible) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Key down listener.\n   *\n   * @param {Event} event The keyboard event object.\n   */\n  onKeyDown(event) {\n    this.keyPressed = isKey(event.keyCode, 'ARROW_UP|ARROW_RIGHT|ARROW_DOWN|ARROW_LEFT');\n  }\n\n  /**\n   * Key up listener.\n   */\n  onKeyUp() {\n    this.keyPressed = false;\n  }\n\n  /**\n   * Translate wheel event into scroll event and sync scroll overlays position.\n   *\n   * @private\n   * @param {Event} event The mouse event object.\n   * @returns {boolean}\n   */\n  translateMouseWheelToScroll(event) {\n    let deltaY = isNaN(event.deltaY) ? -1 * event.wheelDeltaY : event.deltaY;\n    let deltaX = isNaN(event.deltaX) ? -1 * event.wheelDeltaX : event.deltaX;\n    if (event.deltaMode === 1) {\n      deltaX += deltaX * this.browserLineHeight;\n      deltaY += deltaY * this.browserLineHeight;\n    }\n    const isScrollVerticallyPossible = this.scrollVertically(deltaY);\n    const isScrollHorizontallyPossible = this.scrollHorizontally(deltaX);\n    return isScrollVerticallyPossible || isScrollHorizontallyPossible;\n  }\n\n  /**\n   * Scrolls main scrollable element horizontally.\n   *\n   * @param {number} delta Relative value to scroll.\n   * @returns {boolean}\n   */\n  scrollVertically(delta) {\n    const previousScroll = this.scrollableElement.scrollTop;\n    this.scrollableElement.scrollTop += delta;\n    return previousScroll !== this.scrollableElement.scrollTop;\n  }\n\n  /**\n   * Scrolls main scrollable element horizontally.\n   *\n   * @param {number} delta Relative value to scroll.\n   * @returns {boolean}\n   */\n  scrollHorizontally(delta) {\n    const previousScroll = this.scrollableElement.scrollLeft;\n    this.scrollableElement.scrollLeft += delta;\n    return previousScroll !== this.scrollableElement.scrollLeft;\n  }\n\n  /**\n   * Synchronize scroll position between master table and overlay table.\n   *\n   * @private\n   */\n  syncScrollPositions() {\n    if (this.destroyed) {\n      return;\n    }\n    const {\n      rootWindow\n    } = this.domBindings;\n    const topHolder = this.topOverlay.clone.wtTable.holder; // todo rethink\n    const leftHolder = this.inlineStartOverlay.clone.wtTable.holder; // todo rethink\n\n    const [scrollLeft, scrollTop] = [this.scrollableElement.scrollLeft, this.scrollableElement.scrollTop];\n    this.horizontalScrolling = topHolder.scrollLeft !== scrollLeft || this.lastScrollX !== rootWindow.scrollX;\n    this.verticalScrolling = leftHolder.scrollTop !== scrollTop || this.lastScrollY !== rootWindow.scrollY;\n    this.lastScrollX = rootWindow.scrollX;\n    this.lastScrollY = rootWindow.scrollY;\n    if (this.horizontalScrolling) {\n      topHolder.scrollLeft = scrollLeft;\n      const bottomHolder = this.bottomOverlay.needFullRender ? this.bottomOverlay.clone.wtTable.holder : null; // todo rethink\n\n      if (bottomHolder) {\n        bottomHolder.scrollLeft = scrollLeft;\n      }\n    }\n    if (this.verticalScrolling) {\n      leftHolder.scrollTop = scrollTop;\n    }\n    this.refreshAll();\n  }\n\n  /**\n   * Synchronize overlay scrollbars with the master scrollbar.\n   */\n  syncScrollWithMaster() {\n    const master = this.topOverlay.mainTableScrollableElement;\n    const {\n      scrollLeft,\n      scrollTop\n    } = master;\n    if (this.topOverlay.needFullRender) {\n      this.topOverlay.clone.wtTable.holder.scrollLeft = scrollLeft; // todo rethink, *overlay.setScroll*()\n    }\n\n    if (this.bottomOverlay.needFullRender) {\n      this.bottomOverlay.clone.wtTable.holder.scrollLeft = scrollLeft; // todo rethink, *overlay.setScroll*()\n    }\n\n    if (this.inlineStartOverlay.needFullRender) {\n      this.inlineStartOverlay.clone.wtTable.holder.scrollTop = scrollTop; // todo rethink, *overlay.setScroll*()\n    }\n  }\n\n  /**\n   * Update the main scrollable elements for all the overlays.\n   */\n  updateMainScrollableElements() {\n    this.deregisterListeners();\n    this.inlineStartOverlay.updateMainScrollableElement();\n    this.topOverlay.updateMainScrollableElement();\n    if (this.bottomOverlay.needFullRender) {\n      this.bottomOverlay.updateMainScrollableElement();\n    }\n    const {\n      wtTable\n    } = this;\n    const {\n      rootWindow\n    } = this.domBindings;\n    if (rootWindow.getComputedStyle(wtTable.wtRootElement.parentNode).getPropertyValue('overflow') === 'hidden') {\n      this.scrollableElement = wtTable.holder;\n    } else {\n      this.scrollableElement = getScrollableElement(wtTable.TABLE);\n    }\n    this.registerListeners();\n  }\n\n  /**\n   *\n   */\n  destroy() {\n    this.resizeObserver.disconnect();\n    this.eventManager.destroy();\n    // todo, probably all below `destory` calls has no sense. To analyze\n    this.topOverlay.destroy();\n    if (this.bottomOverlay.clone) {\n      this.bottomOverlay.destroy();\n    }\n    this.inlineStartOverlay.destroy();\n    if (this.topInlineStartCornerOverlay) {\n      this.topInlineStartCornerOverlay.destroy();\n    }\n    if (this.bottomInlineStartCornerOverlay && this.bottomInlineStartCornerOverlay.clone) {\n      this.bottomInlineStartCornerOverlay.destroy();\n    }\n    this.destroyed = true;\n  }\n\n  /**\n   * @param {boolean} [fastDraw=false] When `true`, try to refresh only the positions of borders without rerendering\n   *                                   the data. It will only work if Table.draw() does not force\n   *                                   rendering anyway.\n   */\n  refresh() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const wasSpreaderSizeUpdated = this.updateLastSpreaderSize();\n    if (wasSpreaderSizeUpdated) {\n      this.adjustElementsSize();\n    }\n    if (this.bottomOverlay.clone) {\n      this.bottomOverlay.refresh(fastDraw);\n    }\n    this.inlineStartOverlay.refresh(fastDraw);\n    this.topOverlay.refresh(fastDraw);\n    if (this.topInlineStartCornerOverlay) {\n      this.topInlineStartCornerOverlay.refresh(fastDraw);\n    }\n    if (this.bottomInlineStartCornerOverlay && this.bottomInlineStartCornerOverlay.clone) {\n      this.bottomInlineStartCornerOverlay.refresh(fastDraw);\n    }\n  }\n\n  /**\n   * Update the last cached spreader size with the current size.\n   *\n   * @returns {boolean} `true` if the lastSpreaderSize cache was updated, `false` otherwise.\n   */\n  updateLastSpreaderSize() {\n    const spreader = this.wtTable.spreader;\n    const width = spreader.clientWidth;\n    const height = spreader.clientHeight;\n    const needsUpdating = width !== this.spreaderLastSize.width || height !== this.spreaderLastSize.height;\n    if (needsUpdating) {\n      this.spreaderLastSize.width = width;\n      this.spreaderLastSize.height = height;\n    }\n    return needsUpdating;\n  }\n\n  /**\n   * Adjust overlays elements size and master table size.\n   *\n   * @param {boolean} [force=false] When `true`, it adjust the DOM nodes sizes for all overlays.\n   */\n  adjustElementsSize() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const {\n      wtViewport\n    } = this.wot;\n    const {\n      wtTable\n    } = this;\n    const totalColumns = this.wtSettings.getSetting('totalColumns');\n    const totalRows = this.wtSettings.getSetting('totalRows');\n    const headerRowSize = wtViewport.getRowHeaderWidth();\n    const headerColumnSize = wtViewport.getColumnHeaderHeight();\n    const hiderStyle = wtTable.hider.style;\n    hiderStyle.width = `${headerRowSize + this.inlineStartOverlay.sumCellSizes(0, totalColumns)}px`;\n    hiderStyle.height = `${headerColumnSize + this.topOverlay.sumCellSizes(0, totalRows) + 1}px`;\n    if (this.scrollbarSize > 0) {\n      // todo refactoring, looking as a part of logic which should be moved outside the class\n      const {\n        scrollHeight: rootElemScrollHeight,\n        scrollWidth: rootElemScrollWidth\n      } = wtTable.wtRootElement;\n      const {\n        scrollHeight: holderScrollHeight,\n        scrollWidth: holderScrollWidth\n      } = wtTable.holder;\n      this.hasScrollbarRight = rootElemScrollHeight < holderScrollHeight;\n      this.hasScrollbarBottom = rootElemScrollWidth < holderScrollWidth;\n      if (this.hasScrollbarRight && wtTable.hider.scrollWidth + this.scrollbarSize > rootElemScrollWidth) {\n        this.hasScrollbarBottom = true;\n      } else if (this.hasScrollbarBottom && wtTable.hider.scrollHeight + this.scrollbarSize > rootElemScrollHeight) {\n        this.hasScrollbarRight = true;\n      }\n    }\n    this.topOverlay.adjustElementsSize(force);\n    this.inlineStartOverlay.adjustElementsSize(force);\n    this.bottomOverlay.adjustElementsSize(force);\n  }\n\n  /**\n   *\n   */\n  applyToDOM() {\n    if (!this.wtTable.isVisible()) {\n      return;\n    }\n    this.topOverlay.applyToDOM();\n    if (this.bottomOverlay.clone) {\n      this.bottomOverlay.applyToDOM();\n    }\n    this.inlineStartOverlay.applyToDOM();\n  }\n\n  /**\n   * Get the parent overlay of the provided element.\n   *\n   * @param {HTMLElement} element An element to process.\n   * @returns {object|null}\n   */\n  getParentOverlay(element) {\n    if (!element) {\n      return null;\n    }\n    const overlays = [this.topOverlay, this.inlineStartOverlay, this.bottomOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];\n    let result = null;\n    arrayEach(overlays, overlay => {\n      if (!overlay) {\n        return;\n      }\n      if (overlay.clone && overlay.clone.wtTable.TABLE.contains(element)) {\n        // todo demeter\n        result = overlay.clone;\n      }\n    });\n    return result;\n  }\n\n  /**\n   * Synchronize the class names between the main overlay table and the tables on the other overlays.\n   *\n   */\n  syncOverlayTableClassNames() {\n    const masterTable = this.wtTable.TABLE;\n    const overlays = [this.topOverlay, this.inlineStartOverlay, this.bottomOverlay, this.topInlineStartCornerOverlay, this.bottomInlineStartCornerOverlay];\n    arrayEach(overlays, elem => {\n      if (!elem) {\n        return;\n      }\n      elem.clone.wtTable.TABLE.className = masterTable.className; // todo demeter\n    });\n  }\n}\n\nexport default Overlays;","import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { fastInnerText } from \"../../../helpers/dom/element.mjs\";\nimport { objectEach } from \"../../../helpers/object.mjs\";\n/**\n * @todo Describe options.\n * @typedef SettingsPure\n *\n * @property {Option} facade @todo desc.\n * @property {Option} ariaTags Option `ariaTags`.\n * @property {Option} cellRenderer Option `cellRenderer`.\n * @property {Option} columnHeaders Option `columnHeaders`.\n * @property {Option} columnWidth Option `columnWidth`.\n * @property {Option} currentRowClassName Option `currentRowClassName`.\n * @property {Option} data Option `data`.\n * @property {Option} defaultColumnWidth Option `defaultColumnWidth`.\n * @property {Option} defaultRowHeight Option `defaultRowHeight`.\n * @property {Option} externalRowCalculator Option `externalRowCalculator`.\n * @property {Option} fixedColumnsStart Option `fixedColumnsStart`.\n * @property {Option} fixedRowsBottom Option `fixedRowsBottom`.\n * @property {Option} fixedRowsTop Option `fixedRowsTop`.\n * @property {Option} freezeOverlays Option `freezeOverlays`.\n * @property {Option} groups Option `groups`.\n * @property {Option} hideBorderOnMouseDownOver Option `hideBorderOnMouseDownOver`.\n * @property {Option} isRtl Option `isRtl`.\n * @property {Option} isDataViewInstance Option `isDataViewInstance`.\n * @property {Option} minSpareRows Option `minSpareRows`.\n * @property {Option} onBeforeHighlightingColumnHeader Option `onBeforeHighlightingColumnHeader`.\n * @property {Option} onBeforeHighlightingRowHeader Option `onBeforeHighlightingRowHeader`.\n * @property {Option} onBeforeRemoveCellClassNames Option `onBeforeRemoveCellClassNames`.\n * @property {Option} onBeforeStretchingColumnWidth Option `onBeforeStretchingColumnWidth`.\n * @property {Option} preventOverflow Option `preventOverflow`.\n * @property {Option} preventWheel Option `preventWheel`.\n * @property {Option} renderAllRows Option `renderAllRows`.\n * @property {Option} rowHeaders Option `rowHeaders`.\n * @property {Option} rowHeight Option `,`.\n * @property {Option} shouldRenderBottomOverlay Option `shouldRenderBottomOverlay`.\n * @property {Option} shouldRenderInlineStartOverlay Option `shouldRenderInlineStartOverlay`.\n * @property {Option} shouldRenderTopOverlay Option `shouldRenderTopOverlay`.\n * @property {Option} stretchH Option `stretchH`.\n * @property {Option} table Option `table`.\n * @property {Option} totalColumns Option `totalColumns`.\n * @property {Option} totalRows Option `totalRows`.\n * @property {?Option} beforeDraw Option `beforeDraw`.\n * @property {?Option} columnHeaderHeight Option `columnHeaderHeight`.\n * @property {?Option} currentColumnClassName Option `currentColumnClassName`.\n * @property {?Option} headerClassName Option `headerClassName`.\n * @property {?Option} onAfterDrawSelection Option `onAfterDrawSelection`.\n * @property {?Option} onAfterMomentumScroll Option `onAfterMomentumScroll`.\n * @property {?Option} onBeforeDrawBorders Option `onBeforeDrawBorders`.\n * @property {?Option} onBeforeTouchScroll Option `onBeforeTouchScroll`.\n * @property {?Option} onCellContextMenu Option `onCellContextMenu`.\n * @property {?Option} onCellCornerDblClick Option `onCellCornerDblClick`.\n * @property {?Option} onCellCornerMouseDown Option `onCellCornerMouseDown`.\n * @property {?Option} onCellDblClick Option `onCellDblClick`.\n * @property {?Option} onCellMouseDown Option `onCellMouseDown`.\n * @property {?Option} onCellMouseOut Option `onCellMouseOut`.\n * @property {?Option} onCellMouseOver Option `onCellMouseOver`.\n * @property {?Option} onCellMouseUp Option `onCellMouseUp`.\n * @property {?Option} onDraw Option `onDraw`.\n * @property {?Option} onModifyGetCellCoords Option `onModifyGetCellCoords`.\n * @property {?Option} onModifyRowHeaderWidth Option `onModifyRowHeaderWidth`.\n * @property {?Option} onBeforeViewportScrollHorizontally Option `onBeforeViewportScrollHorizontally`.\n * @property {?Option} onBeforeViewportScrollVertically Option `onBeforeViewportScrollVertically`.\n * @property {?Option} onScrollHorizontally Option `onScrollHorizontally`.\n * @property {?Option} onScrollVertically Option `onScrollVertically`.\n * @property {?Option} onWindowResize Option `onWindowResize`.\n * @property {?Option} rowHeaderWidth Option `rowHeaderWidth`.\n * @property {?Option} selections Option `selections`.\n * @property {?Option} viewportColumnCalculatorOverride Option `viewportColumnCalculatorOverride`.\n * @property {?Option} viewportRowCalculatorOverride Option `viewportRowCalculatorOverride`.\n */\n/**\n * @template TValue.\n * @typedef { TValue | Array.<TValue> | (function(...*): TValue) } Option\n */\n/**\n * @class Settings\n */\nexport default class Settings {\n  /**\n   * @param {SettingsPure} settings The user defined settings.\n   */\n  constructor(settings) {\n    /**\n     * Reference to settings.\n     *\n     * @protected\n     * @type {SettingsPure}\n     */\n    _defineProperty(this, \"settings\", {});\n    /**\n     * The defaults values of settings.\n     * Void 0 means it is required, null means it can be empty.\n     *\n     * @public\n     * @type {Readonly<SettingsPure>}\n     */\n    _defineProperty(this, \"defaults\", Object.freeze(this.getDefaults()));\n    objectEach(this.defaults, (value, key) => {\n      if (settings[key] !== void 0) {\n        this.settings[key] = settings[key];\n      } else if (value === void 0) {\n        throw new Error(`A required setting \"${key}\" was not provided`);\n      } else {\n        this.settings[key] = value;\n      }\n    });\n  }\n\n  /**\n   * Generate defaults for a settings.\n   * Void 0 means it is required, null means it can be empty.\n   *\n   * @private\n   * @returns {SettingsPure}\n   */\n  getDefaults() {\n    return {\n      facade: void 0,\n      table: void 0,\n      // Determines whether the Walkontable instance is used as dataset viewer. When its instance is used as\n      // a context menu, autocomplete list, etc, the returned value is `false`.\n      isDataViewInstance: true,\n      // presentation mode\n      externalRowCalculator: false,\n      stretchH: 'none',\n      // values: all, last, none\n      currentRowClassName: null,\n      currentColumnClassName: null,\n      preventOverflow() {\n        return false;\n      },\n      preventWheel: false,\n      // data source\n      data: void 0,\n      freezeOverlays: false,\n      // Number of renderable columns for the left overlay.\n      fixedColumnsStart: 0,\n      // Number of renderable rows for the top overlay.\n      fixedRowsTop: 0,\n      // Number of renderable rows for the bottom overlay.\n      fixedRowsBottom: 0,\n      // Enable the inline start overlay when conditions are met (left for LTR and right for RTL document mode).\n      shouldRenderInlineStartOverlay: () => {\n        return this.getSetting('fixedColumnsStart') > 0 || this.getSetting('rowHeaders').length > 0;\n      },\n      // Enable the top overlay when conditions are met.\n      shouldRenderTopOverlay: () => {\n        return this.getSetting('fixedRowsTop') > 0 || this.getSetting('columnHeaders').length > 0;\n      },\n      // Enable the bottom overlay when conditions are met.\n      shouldRenderBottomOverlay: () => {\n        return this.getSetting('fixedRowsBottom') > 0;\n      },\n      minSpareRows: 0,\n      // this must be array of functions: [function (row, TH) {}]\n      rowHeaders() {\n        return [];\n      },\n      // this must be array of functions: [function (column, TH) {}]\n      columnHeaders() {\n        return [];\n      },\n      totalRows: void 0,\n      totalColumns: void 0,\n      cellRenderer: (row, column, TD) => {\n        const cellData = this.getSetting('data', row, column);\n        fastInnerText(TD, cellData === void 0 || cellData === null ? '' : cellData);\n      },\n      // columnWidth: 50,\n      columnWidth() {\n        // return undefined means use default size for the rendered cell content\n      },\n      rowHeight() {\n        // return undefined means use default size for the rendered cell content\n      },\n      defaultRowHeight: 23,\n      defaultColumnWidth: 50,\n      selections: null,\n      hideBorderOnMouseDownOver: false,\n      viewportRowCalculatorOverride: null,\n      viewportColumnCalculatorOverride: null,\n      // callbacks\n      onCellMouseDown: null,\n      onCellContextMenu: null,\n      onCellMouseOver: null,\n      onCellMouseOut: null,\n      onCellMouseUp: null,\n      // onCellMouseOut: null,\n      onCellDblClick: null,\n      onCellCornerMouseDown: null,\n      onCellCornerDblClick: null,\n      beforeDraw: null,\n      onDraw: null,\n      onBeforeRemoveCellClassNames: null,\n      onAfterDrawSelection: null,\n      onBeforeDrawBorders: null,\n      // viewport scroll hooks\n      onBeforeViewportScrollHorizontally: column => column,\n      onBeforeViewportScrollVertically: row => row,\n      // native scroll hooks\n      onScrollHorizontally: null,\n      onScrollVertically: null,\n      //\n      onBeforeTouchScroll: null,\n      onAfterMomentumScroll: null,\n      onBeforeStretchingColumnWidth: width => width,\n      onModifyRowHeaderWidth: null,\n      onModifyGetCellCoords: null,\n      onBeforeHighlightingRowHeader: sourceRow => sourceRow,\n      onBeforeHighlightingColumnHeader: sourceCol => sourceCol,\n      onWindowResize: null,\n      onContainerElementResize: null,\n      renderAllRows: false,\n      groups: false,\n      rowHeaderWidth: null,\n      columnHeaderHeight: null,\n      headerClassName: null,\n      rtlMode: false,\n      ariaTags: true\n    };\n  }\n\n  /**\n   * Update settings.\n   *\n   * @param {object|string} settings The singular settings to update or if passed as object to merge with.\n   * @param {*} value The value to set if the first argument is passed as string.\n   * @returns {Settings}\n   */\n  update(settings, value) {\n    if (value === void 0) {\n      // settings is object\n      objectEach(settings, (settingValue, key) => {\n        this.settings[key] = settingValue;\n      });\n    } else {\n      // if value is defined then settings is the key\n      this.settings[settings] = value;\n    }\n    return this;\n  }\n\n  /**\n   * Get setting by name.\n   *\n   * @param {$Keys<SettingsPure>} key The settings key to retrieve.\n   * @param {*} [param1] Additional parameter passed to the options defined as function.\n   * @param {*} [param2] Additional parameter passed to the options defined as function.\n   * @param {*} [param3] Additional parameter passed to the options defined as function.\n   * @param {*} [param4] Additional parameter passed to the options defined as function.\n   * @returns {*}\n   */\n  getSetting(key, param1, param2, param3, param4) {\n    if (typeof this.settings[key] === 'function') {\n      return this.settings[key](param1, param2, param3, param4);\n    } else if (param1 !== void 0 && Array.isArray(this.settings[key])) {\n      return this.settings[key][param1];\n    }\n    return this.settings[key];\n  }\n\n  /**\n   * Get a setting value without any evaluation.\n   *\n   * @param {string} key The settings key to retrieve.\n   * @returns {*}\n   */\n  getSettingPure(key) {\n    return this.settings[key];\n  }\n\n  /**\n   * Checks if setting exists.\n   *\n   * @param {boolean} key The settings key to check.\n   * @returns {boolean}\n   */\n  has(key) {\n    return !!this.settings[key];\n  }\n}","import { getStyle, getComputedStyle, getTrimmingContainer, isVisible } from \"./../../../../helpers/dom/element.mjs\";\nimport Table from \"../table.mjs\";\nimport calculatedRows from \"./mixin/calculatedRows.mjs\";\nimport calculatedColumns from \"./mixin/calculatedColumns.mjs\";\nimport { mixin } from \"./../../../../helpers/object.mjs\";\n/**\n * Subclass of `Table` that provides the helper methods relevant to the master table (not overlays), implemented through mixins.\n *\n * @mixes calculatedRows\n * @mixes calculatedColumns\n */\nclass MasterTable extends Table {\n  /**\n   * @param {TableDao} dataAccessObject The data access object.\n   * @param {FacadeGetter} facadeGetter Function which return proper facade.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   */\n  constructor(dataAccessObject, facadeGetter, domBindings, wtSettings) {\n    super(dataAccessObject, facadeGetter, domBindings, wtSettings, 'master');\n  }\n  alignOverlaysWithTrimmingContainer() {\n    const trimmingElement = getTrimmingContainer(this.wtRootElement);\n    const {\n      rootWindow\n    } = this.domBindings;\n    if (trimmingElement === rootWindow) {\n      const preventOverflow = this.wtSettings.getSetting('preventOverflow');\n      if (!preventOverflow) {\n        this.holder.style.overflow = 'visible';\n        this.wtRootElement.style.overflow = 'visible';\n      }\n    } else {\n      const trimmingElementParent = trimmingElement.parentElement;\n      const trimmingHeight = getStyle(trimmingElement, 'height', rootWindow);\n      const trimmingOverflow = getStyle(trimmingElement, 'overflow', rootWindow);\n      const holderStyle = this.holder.style;\n      const {\n        scrollWidth,\n        scrollHeight\n      } = trimmingElement;\n      let width = trimmingElement.offsetWidth;\n      let height = trimmingElement.offsetHeight;\n      const overflow = ['auto', 'hidden', 'scroll'];\n      if (trimmingElementParent && overflow.includes(trimmingOverflow)) {\n        const cloneNode = trimmingElement.cloneNode(false);\n\n        // Before calculating the height of the trimming element, set overflow: auto to hide scrollbars.\n        // An issue occurred on Firefox, where an empty element with overflow: scroll returns an element height higher than 0px\n        // despite an empty content within.\n        cloneNode.style.overflow = 'auto';\n        // Issue #9545 shows problem with calculating height for HOT on Firefox while placing instance in some\n        // flex containers and setting overflow for some `div` section.\n        cloneNode.style.position = 'absolute';\n        if (trimmingElement.nextElementSibling) {\n          trimmingElementParent.insertBefore(cloneNode, trimmingElement.nextElementSibling);\n        } else {\n          trimmingElementParent.appendChild(cloneNode);\n        }\n        const cloneHeight = parseInt(getComputedStyle(cloneNode, rootWindow).height, 10);\n        trimmingElementParent.removeChild(cloneNode);\n        if (cloneHeight === 0) {\n          height = 0;\n        }\n      }\n      height = Math.min(height, scrollHeight);\n      holderStyle.height = trimmingHeight === 'auto' ? 'auto' : `${height}px`;\n      width = Math.min(width, scrollWidth);\n      holderStyle.width = `${width}px`;\n      holderStyle.overflow = '';\n      this.hasTableHeight = holderStyle.height === 'auto' ? true : height > 0;\n      this.hasTableWidth = width > 0;\n    }\n    this.isTableVisible = isVisible(this.TABLE);\n  }\n  markOversizedColumnHeaders() {\n    const {\n      wtSettings\n    } = this;\n    const {\n      wtViewport\n    } = this.dataAccessObject;\n    const overlayName = 'master';\n    const columnHeaders = wtSettings.getSetting('columnHeaders');\n    const columnHeadersCount = columnHeaders.length;\n    if (columnHeadersCount && !wtViewport.hasOversizedColumnHeadersMarked[overlayName]) {\n      const rowHeaders = wtSettings.getSetting('rowHeaders');\n      const rowHeaderCount = rowHeaders.length;\n      const columnCount = this.getRenderedColumnsCount();\n      for (let i = 0; i < columnHeadersCount; i++) {\n        for (let renderedColumnIndex = -1 * rowHeaderCount; renderedColumnIndex < columnCount; renderedColumnIndex++) {\n          // eslint-disable-line max-len\n          this.markIfOversizedColumnHeader(renderedColumnIndex);\n        }\n      }\n      wtViewport.hasOversizedColumnHeadersMarked[overlayName] = true;\n    }\n  }\n}\nmixin(MasterTable, calculatedRows);\nmixin(MasterTable, calculatedColumns);\nexport default MasterTable;","/**\n * Render type calculation calculates how many DOM nodes should be created and where placed\n * based on `startRow` and `endRow` properties.\n *\n * @type {number}\n */\nexport const RENDER_TYPE = 1;\n/**\n * Fully visible type calculation calculates rows that are fully visible in the viewport.\n * This type of calculation is used in scrolling by arrow keys navigation.\n *\n * @type {number}\n */\nexport const FULLY_VISIBLE_TYPE = 2;\n/**\n * Partially visible type calculation calculates rows that are fully and partially visible in\n * the viewport. This type of calculation is used to check `endRow` (or `startRow`) with properties\n * calculated in render calculator. If checking met the criteria slow render is\n * performed (which render calculator with new data).\n *\n * @type {number}\n */\nexport const PARTIALLY_VISIBLE_TYPE = 3;","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.at.js\";\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from \"./constants.mjs\";\nconst privatePool = new WeakMap();\n\n/**\n * Calculates indexes of rows to render OR rows that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportRowsCalculator\n */\nclass ViewportRowsCalculator {\n  /**\n   * Default row height.\n   *\n   * @type {number}\n   */\n  static get DEFAULT_HEIGHT() {\n    return 23;\n  }\n\n  /**\n   * @param {object} options Object with all options specified for row viewport calculation.\n   * @param {number} options.viewportSize Height of the viewport.\n   * @param {number} options.scrollOffset Current vertical scroll position of the viewport.\n   * @param {number} options.totalItems Total number of rows.\n   * @param {Function} options.itemSizeFn Function that returns the height of the row at a given index (in px).\n   * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by MergeCells plugin).\n   * @param {string} options.calculationType String which describes types of calculation which will be performed.\n   * @param {number} options.scrollbarHeight The scrollbar height.\n   */\n  constructor() {\n    let {\n      viewportSize,\n      scrollOffset,\n      totalItems,\n      itemSizeFn,\n      overrideFn,\n      calculationType,\n      scrollbarHeight\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    privatePool.set(this, {\n      viewportHeight: viewportSize,\n      scrollOffset,\n      totalRows: totalItems,\n      rowHeightFn: itemSizeFn,\n      overrideFn,\n      calculationType,\n      horizontalScrollbarHeight: scrollbarHeight\n    });\n\n    /**\n     * Number of rendered/visible rows.\n     *\n     * @type {number}\n     */\n    this.count = 0;\n\n    /**\n     * Index of the first rendered/visible row (can be overwritten using overrideFn).\n     *\n     * @type {number|null}\n     */\n    this.startRow = null;\n\n    /**\n     * Index of the last rendered/visible row (can be overwritten using overrideFn).\n     *\n     * @type {null}\n     */\n    this.endRow = null;\n\n    /**\n     * Position of the first rendered/visible row (in px).\n     *\n     * @type {number|null}\n     */\n    this.startPosition = null;\n    this.isVisibleInTrimmingContainer = false;\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  calculate() {\n    const priv = privatePool.get(this);\n    const calculationType = priv.calculationType;\n    const overrideFn = priv.overrideFn;\n    const rowHeightFn = priv.rowHeightFn;\n    const scrollOffset = priv.scrollOffset;\n    const zeroBasedScrollOffset = Math.max(priv.scrollOffset, 0);\n    const totalRows = priv.totalRows;\n    const viewportHeight = priv.viewportHeight;\n    const horizontalScrollbarHeight = priv.horizontalScrollbarHeight || 0;\n    let sum = 0;\n    let needReverse = true;\n    const startPositions = [];\n    let rowHeight;\n    let firstVisibleRowHeight = 0;\n    let lastVisibleRowHeight = 0;\n\n    // Calculate the number (start and end index) of rows needed\n    for (let i = 0; i < totalRows; i++) {\n      rowHeight = rowHeightFn(i);\n      if (isNaN(rowHeight)) {\n        rowHeight = ViewportRowsCalculator.DEFAULT_HEIGHT;\n      }\n      if (sum <= zeroBasedScrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n        this.startRow = i;\n        firstVisibleRowHeight = rowHeight;\n      }\n      if (sum >= zeroBasedScrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? rowHeight : 0) <= zeroBasedScrollOffset + viewportHeight - horizontalScrollbarHeight) {\n        // eslint-disable-line max-len\n        if (this.startRow === null) {\n          this.startRow = i;\n          firstVisibleRowHeight = rowHeight;\n        }\n        this.endRow = i;\n      }\n      startPositions.push(sum);\n      sum += rowHeight;\n      lastVisibleRowHeight = rowHeight;\n      if (calculationType !== FULLY_VISIBLE_TYPE) {\n        this.endRow = i;\n      }\n      if (sum >= zeroBasedScrollOffset + viewportHeight - horizontalScrollbarHeight) {\n        needReverse = false;\n        break;\n      }\n    }\n    const mostBottomScrollOffset = scrollOffset + viewportHeight - horizontalScrollbarHeight;\n    const topRowOffset = calculationType === FULLY_VISIBLE_TYPE ? firstVisibleRowHeight : 0;\n    const bottomRowOffset = calculationType === FULLY_VISIBLE_TYPE ? 0 : lastVisibleRowHeight;\n    if (mostBottomScrollOffset < topRowOffset || scrollOffset > startPositions.at(-1) + bottomRowOffset) {\n      this.isVisibleInTrimmingContainer = false;\n    } else {\n      this.isVisibleInTrimmingContainer = true;\n    }\n\n    // If the estimation has reached the last row and there is still some space available in the viewport,\n    // we need to render in reverse in order to fill the whole viewport with rows\n    if (this.endRow === totalRows - 1 && needReverse) {\n      this.startRow = this.endRow;\n      while (this.startRow > 0) {\n        // rowHeight is the height of the last row\n        const viewportSum = startPositions[this.endRow] + rowHeight - startPositions[this.startRow - 1];\n        if (viewportSum <= viewportHeight - horizontalScrollbarHeight || calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startRow -= 1;\n        }\n        if (viewportSum >= viewportHeight - horizontalScrollbarHeight) {\n          break;\n        }\n      }\n    }\n    if (calculationType === RENDER_TYPE && this.startRow !== null && overrideFn) {\n      overrideFn(this);\n    }\n    this.startPosition = startPositions[this.startRow];\n    if (this.startPosition === void 0) {\n      this.startPosition = null;\n    }\n\n    // If totalRows exceeded its total rows size set endRow to the latest item\n    if (totalRows < this.endRow) {\n      this.endRow = totalRows - 1;\n    }\n    if (this.startRow !== null) {\n      this.count = this.endRow - this.startRow + 1;\n    }\n  }\n}\nexport default ViewportRowsCalculator;","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.at.js\";\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE } from \"./constants.mjs\";\nconst privatePool = new WeakMap();\n\n/**\n * Calculates indexes of columns to render OR columns that are visible.\n * To redo the calculation, you need to create a new calculator.\n *\n * @class ViewportColumnsCalculator\n */\nclass ViewportColumnsCalculator {\n  /**\n   * Default column width.\n   *\n   * @type {number}\n   */\n  static get DEFAULT_WIDTH() {\n    return 50;\n  }\n\n  /**\n   * @param {object} options Object with all options specified for column viewport calculation.\n   * @param {number} options.viewportSize Width of the viewport.\n   * @param {number} options.scrollOffset Current horizontal scroll position of the viewport.\n   * @param {number} options.totalItems Total number of columns.\n   * @param {Function} options.itemSizeFn Function that returns the width of the column at a given index (in px).\n   * @param {Function} options.overrideFn Function that changes calculated this.startRow, this.endRow (used by\n   *   MergeCells plugin).\n   * @param {string} options.calculationType String which describes types of calculation which will be performed.\n   * @param {string} options.inlineStartOffset Inline-start offset of the parent container.\n   * @param {string} [options.stretchMode] Stretch mode 'all' or 'last'.\n   * @param {Function} [options.stretchingItemWidthFn] Function that returns the new width of the stretched column.\n   */\n  constructor() {\n    let {\n      viewportSize,\n      scrollOffset,\n      totalItems,\n      itemSizeFn,\n      overrideFn,\n      calculationType,\n      stretchMode,\n      stretchingItemWidthFn = width => width,\n      inlineStartOffset\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    privatePool.set(this, {\n      viewportWidth: viewportSize,\n      scrollOffset,\n      totalColumns: totalItems,\n      columnWidthFn: itemSizeFn,\n      overrideFn,\n      calculationType,\n      stretchingColumnWidthFn: stretchingItemWidthFn,\n      inlineStartOffset\n    });\n\n    /**\n     * Number of rendered/visible columns.\n     *\n     * @type {number}\n     */\n    this.count = 0;\n\n    /**\n     * Index of the first rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {number|null}\n     */\n    this.startColumn = null;\n\n    /**\n     * Index of the last rendered/visible column (can be overwritten using overrideFn).\n     *\n     * @type {null}\n     */\n    this.endColumn = null;\n\n    /**\n     * Position of the first rendered/visible column (in px).\n     *\n     * @type {number|null}\n     */\n    this.startPosition = null;\n    this.isVisibleInTrimmingContainer = false;\n    this.stretchAllRatio = 0;\n    this.stretchLastWidth = 0;\n    this.stretch = stretchMode;\n    this.totalTargetWidth = 0;\n    this.needVerifyLastColumnWidth = true;\n    this.stretchAllColumnsWidth = [];\n    this.calculate();\n  }\n\n  /**\n   * Calculates viewport.\n   */\n  calculate() {\n    let sum = 0;\n    let needReverse = true;\n    const startPositions = [];\n    let columnWidth;\n    let firstVisibleColumnWidth = 0;\n    let lastVisibleColumnWidth = 0;\n    const priv = privatePool.get(this);\n    const calculationType = priv.calculationType;\n    const overrideFn = priv.overrideFn;\n    const scrollOffset = priv.scrollOffset;\n    const zeroBasedScrollOffset = Math.max(priv.scrollOffset, 0);\n    const totalColumns = priv.totalColumns;\n    const viewportWidth = priv.viewportWidth;\n    // +1 pixel for row header width compensation for horizontal scroll > 0\n    const compensatedViewportWidth = zeroBasedScrollOffset > 0 ? viewportWidth + 1 : viewportWidth;\n    for (let i = 0; i < totalColumns; i++) {\n      columnWidth = this._getColumnWidth(i);\n      if (sum <= zeroBasedScrollOffset && calculationType !== FULLY_VISIBLE_TYPE) {\n        this.startColumn = i;\n        firstVisibleColumnWidth = columnWidth;\n      }\n      if (sum >= zeroBasedScrollOffset && sum + (calculationType === FULLY_VISIBLE_TYPE ? columnWidth : 0) <= zeroBasedScrollOffset + compensatedViewportWidth) {\n        if (this.startColumn === null || this.startColumn === void 0) {\n          this.startColumn = i;\n          firstVisibleColumnWidth = columnWidth;\n        }\n        this.endColumn = i;\n      }\n      startPositions.push(sum);\n      sum += columnWidth;\n      lastVisibleColumnWidth = columnWidth;\n      if (calculationType !== FULLY_VISIBLE_TYPE) {\n        this.endColumn = i;\n      }\n      if (sum >= zeroBasedScrollOffset + viewportWidth) {\n        needReverse = false;\n        break;\n      }\n    }\n    const mostRightScrollOffset = scrollOffset + viewportWidth - compensatedViewportWidth;\n    const inlineEndColumnOffset = calculationType === FULLY_VISIBLE_TYPE ? 0 : lastVisibleColumnWidth;\n    const inlineStartColumnOffset = calculationType === FULLY_VISIBLE_TYPE ? firstVisibleColumnWidth : 0;\n    if (\n    // the table is to the left of the viewport\n    mostRightScrollOffset < -1 * priv.inlineStartOffset || scrollOffset > startPositions.at(-1) + inlineEndColumnOffset ||\n    // the table is to the right of the viewport\n    -1 * priv.scrollOffset - priv.viewportWidth > -1 * inlineStartColumnOffset) {\n      this.isVisibleInTrimmingContainer = false;\n    } else {\n      this.isVisibleInTrimmingContainer = true;\n    }\n    if (this.endColumn === totalColumns - 1 && needReverse) {\n      this.startColumn = this.endColumn;\n      while (this.startColumn > 0) {\n        const viewportSum = startPositions[this.endColumn] + columnWidth - startPositions[this.startColumn - 1];\n        if (viewportSum <= viewportWidth || calculationType !== FULLY_VISIBLE_TYPE) {\n          this.startColumn -= 1;\n        }\n        if (viewportSum > viewportWidth) {\n          break;\n        }\n      }\n    }\n    if (calculationType === RENDER_TYPE && this.startColumn !== null && overrideFn) {\n      overrideFn(this);\n    }\n    this.startPosition = startPositions[this.startColumn];\n    if (this.startPosition === void 0) {\n      this.startPosition = null;\n    }\n\n    // If totalColumns exceeded its total columns size set endColumn to the latest item\n    if (totalColumns < this.endColumn) {\n      this.endColumn = totalColumns - 1;\n    }\n    if (this.startColumn !== null) {\n      this.count = this.endColumn - this.startColumn + 1;\n    }\n  }\n\n  /**\n   * Recalculate columns stretching.\n   *\n   * @param {number} totalWidth The total width of the table.\n   */\n  refreshStretching(totalWidth) {\n    if (this.stretch === 'none') {\n      return;\n    }\n    let totalColumnsWidth = totalWidth;\n    this.totalTargetWidth = totalColumnsWidth;\n    const priv = privatePool.get(this);\n    const totalColumns = priv.totalColumns;\n    let sumAll = 0;\n    for (let i = 0; i < totalColumns; i++) {\n      const columnWidth = this._getColumnWidth(i);\n      const permanentColumnWidth = priv.stretchingColumnWidthFn(void 0, i);\n      if (typeof permanentColumnWidth === 'number') {\n        totalColumnsWidth -= permanentColumnWidth;\n      } else {\n        sumAll += columnWidth;\n      }\n    }\n    const remainingSize = totalColumnsWidth - sumAll;\n    if (this.stretch === 'all' && remainingSize > 0) {\n      this.stretchAllRatio = totalColumnsWidth / sumAll;\n      this.stretchAllColumnsWidth = [];\n      this.needVerifyLastColumnWidth = true;\n    } else if (this.stretch === 'last' && totalColumnsWidth !== Infinity) {\n      const columnWidth = this._getColumnWidth(totalColumns - 1);\n      const lastColumnWidth = remainingSize + columnWidth;\n      this.stretchLastWidth = lastColumnWidth >= 0 ? lastColumnWidth : columnWidth;\n    }\n  }\n\n  /**\n   * Get stretched column width based on stretchH (all or last) setting passed in handsontable instance.\n   *\n   * @param {number} column The visual column index.\n   * @param {number} baseWidth The default column width.\n   * @returns {number|null}\n   */\n  getStretchedColumnWidth(column, baseWidth) {\n    let result = null;\n    if (this.stretch === 'all' && this.stretchAllRatio !== 0) {\n      result = this._getStretchedAllColumnWidth(column, baseWidth);\n    } else if (this.stretch === 'last' && this.stretchLastWidth !== 0) {\n      result = this._getStretchedLastColumnWidth(column);\n    }\n    return result;\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @param {number} baseWidth The default column width.\n   * @returns {number}\n   * @private\n   */\n  _getStretchedAllColumnWidth(column, baseWidth) {\n    let sumRatioWidth = 0;\n    const priv = privatePool.get(this);\n    const totalColumns = priv.totalColumns;\n    if (!this.stretchAllColumnsWidth[column]) {\n      const stretchedWidth = Math.round(baseWidth * this.stretchAllRatio);\n      const newStretchedWidth = priv.stretchingColumnWidthFn(stretchedWidth, column);\n      if (newStretchedWidth === void 0) {\n        this.stretchAllColumnsWidth[column] = stretchedWidth;\n      } else {\n        this.stretchAllColumnsWidth[column] = isNaN(newStretchedWidth) ? this._getColumnWidth(column) : newStretchedWidth;\n      }\n    }\n    if (this.stretchAllColumnsWidth.length === totalColumns && this.needVerifyLastColumnWidth) {\n      this.needVerifyLastColumnWidth = false;\n      for (let i = 0; i < this.stretchAllColumnsWidth.length; i++) {\n        sumRatioWidth += this.stretchAllColumnsWidth[i];\n      }\n      if (sumRatioWidth !== this.totalTargetWidth) {\n        this.stretchAllColumnsWidth[this.stretchAllColumnsWidth.length - 1] += this.totalTargetWidth - sumRatioWidth;\n      }\n    }\n    return this.stretchAllColumnsWidth[column];\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @returns {number|null}\n   * @private\n   */\n  _getStretchedLastColumnWidth(column) {\n    const priv = privatePool.get(this);\n    const totalColumns = priv.totalColumns;\n    if (column === totalColumns - 1) {\n      return this.stretchLastWidth;\n    }\n    return null;\n  }\n\n  /**\n   * @param {number} column The visual column index.\n   * @returns {number}\n   * @private\n   */\n  _getColumnWidth(column) {\n    let width = privatePool.get(this).columnWidthFn(column);\n    if (isNaN(width)) {\n      width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n    }\n    return width;\n  }\n}\nexport default ViewportColumnsCalculator;","import { getScrollbarWidth, getStyle, offset, outerHeight, outerWidth } from \"../../../helpers/dom/element.mjs\";\nimport { objectEach } from \"../../../helpers/object.mjs\";\nimport { RENDER_TYPE, FULLY_VISIBLE_TYPE, ViewportColumnsCalculator, ViewportRowsCalculator } from \"./calculator/index.mjs\";\n/**\n * @class Viewport\n */\nclass Viewport {\n  /**\n   * @param {ViewportDao} dataAccessObject The Walkontable instance.\n   * @param {DomBindings} domBindings Bindings into DOM.\n   * @param {Settings} wtSettings The Walkontable settings.\n   * @param {EventManager} eventManager The instance event manager.\n   * @param {Table} wtTable The table.\n   */\n  constructor(dataAccessObject, domBindings, wtSettings, eventManager, wtTable) {\n    this.dataAccessObject = dataAccessObject;\n    // legacy support\n    this.wot = dataAccessObject.wot;\n    this.instance = this.wot;\n    this.domBindings = domBindings;\n    this.wtSettings = wtSettings;\n    this.wtTable = wtTable;\n    this.oversizedRows = [];\n    this.oversizedColumnHeaders = [];\n    this.hasOversizedColumnHeadersMarked = {};\n    this.clientHeight = 0;\n    this.containerWidth = NaN;\n    this.rowHeaderWidth = NaN;\n    this.rowsVisibleCalculator = null;\n    this.columnsVisibleCalculator = null;\n    this.eventManager = eventManager;\n    this.eventManager.addEventListener(this.domBindings.rootWindow, 'resize', () => {\n      this.clientHeight = this.getWorkspaceHeight();\n    });\n  }\n\n  /**\n   * @returns {number}\n   */\n  getWorkspaceHeight() {\n    const currentDocument = this.domBindings.rootDocument;\n    const trimmingContainer = this.dataAccessObject.topOverlayTrimmingContainer;\n    let height = 0;\n    if (trimmingContainer === this.domBindings.rootWindow) {\n      height = currentDocument.documentElement.clientHeight;\n    } else {\n      const elemHeight = outerHeight(trimmingContainer);\n\n      // returns height without DIV scrollbar\n      height = elemHeight > 0 && trimmingContainer.clientHeight > 0 ? trimmingContainer.clientHeight : Infinity;\n    }\n    return height;\n  }\n  getWorkspaceWidth() {\n    const {\n      wtSettings\n    } = this;\n    const {\n      rootDocument,\n      rootWindow\n    } = this.domBindings;\n    const trimmingContainer = this.dataAccessObject.inlineStartOverlayTrimmingContainer;\n    const docOffsetWidth = rootDocument.documentElement.offsetWidth;\n    const totalColumns = wtSettings.getSetting('totalColumns');\n    const preventOverflow = wtSettings.getSetting('preventOverflow');\n    const isRtl = wtSettings.getSetting('rtlMode');\n    const tableRect = this.wtTable.TABLE.getBoundingClientRect();\n    const inlineStart = isRtl ? tableRect.right - docOffsetWidth : tableRect.left;\n    const tableOffset = docOffsetWidth - inlineStart;\n    let width;\n    let overflow;\n    if (preventOverflow) {\n      return outerWidth(this.wtTable.wtRootElement);\n    }\n    if (wtSettings.getSetting('freezeOverlays')) {\n      width = Math.min(tableOffset, docOffsetWidth);\n    } else {\n      width = Math.min(this.getContainerFillWidth(), tableOffset, docOffsetWidth);\n    }\n    if (trimmingContainer === rootWindow && totalColumns > 0 && this.sumColumnWidths(0, totalColumns - 1) > width) {\n      // in case sum of column widths is higher than available stylesheet width, let's assume using the whole window\n      // otherwise continue below, which will allow stretching\n      // this is used in `scroll_window.html`\n      // TODO test me\n      return rootDocument.documentElement.clientWidth;\n    }\n    if (trimmingContainer !== rootWindow) {\n      overflow = getStyle(this.dataAccessObject.inlineStartOverlayTrimmingContainer, 'overflow', rootWindow);\n      if (overflow === 'scroll' || overflow === 'hidden' || overflow === 'auto') {\n        // this is used in `scroll.html`\n        // TODO test me\n        return Math.max(width, trimmingContainer.clientWidth);\n      }\n    }\n    const stretchSetting = wtSettings.getSetting('stretchH');\n    if (stretchSetting === 'none' || !stretchSetting) {\n      // if no stretching is used, return the maximum used workspace width\n      return Math.max(width, outerWidth(this.wtTable.TABLE));\n    }\n\n    // if stretching is used, return the actual container width, so the columns can fit inside it\n    return width;\n  }\n\n  /**\n   * Checks if viewport has vertical scroll.\n   *\n   * @returns {boolean}\n   */\n  hasVerticalScroll() {\n    return this.wtTable.hider.offsetHeight > this.getWorkspaceHeight();\n  }\n\n  /**\n   * Checks if viewport has horizontal scroll.\n   *\n   * @returns {boolean}\n   */\n  hasHorizontalScroll() {\n    return this.wtTable.hider.offsetWidth > this.getWorkspaceWidth();\n  }\n\n  /**\n   * @param {number} from The visual column index from the width sum is start calculated.\n   * @param {number} length The length of the column to traverse.\n   * @returns {number}\n   */\n  sumColumnWidths(from, length) {\n    let sum = 0;\n    let column = from;\n    while (column < length) {\n      sum += this.wtTable.getColumnWidth(column);\n      column += 1;\n    }\n    return sum;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getContainerFillWidth() {\n    if (this.containerWidth) {\n      return this.containerWidth;\n    }\n    const mainContainer = this.wtTable.holder;\n    const dummyElement = this.domBindings.rootDocument.createElement('div');\n    dummyElement.style.width = '100%';\n    dummyElement.style.height = '1px';\n    mainContainer.appendChild(dummyElement);\n    const fillWidth = dummyElement.offsetWidth;\n    this.containerWidth = fillWidth;\n    mainContainer.removeChild(dummyElement);\n    return fillWidth;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getWorkspaceOffset() {\n    return offset(this.wtTable.TABLE);\n  }\n\n  /**\n   * @returns {number}\n   */\n  getColumnHeaderHeight() {\n    const columnHeaders = this.wtSettings.getSetting('columnHeaders');\n    if (!columnHeaders.length) {\n      this.columnHeaderHeight = 0;\n    } else if (isNaN(this.columnHeaderHeight)) {\n      this.columnHeaderHeight = outerHeight(this.wtTable.THEAD);\n    }\n    return this.columnHeaderHeight;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getViewportHeight() {\n    let containerHeight = this.getWorkspaceHeight();\n    if (containerHeight === Infinity) {\n      return containerHeight;\n    }\n    const columnHeaderHeight = this.getColumnHeaderHeight();\n    if (columnHeaderHeight > 0) {\n      containerHeight -= columnHeaderHeight;\n    }\n    return containerHeight;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getRowHeaderWidth() {\n    const rowHeadersWidthSetting = this.wtSettings.getSetting('rowHeaderWidth');\n    const rowHeaders = this.wtSettings.getSetting('rowHeaders');\n    if (rowHeadersWidthSetting) {\n      this.rowHeaderWidth = 0;\n      for (let i = 0, len = rowHeaders.length; i < len; i++) {\n        this.rowHeaderWidth += rowHeadersWidthSetting[i] || rowHeadersWidthSetting;\n      }\n    }\n    if (isNaN(this.rowHeaderWidth)) {\n      if (rowHeaders.length) {\n        let TH = this.wtTable.TABLE.querySelector('TH');\n        this.rowHeaderWidth = 0;\n        for (let i = 0, len = rowHeaders.length; i < len; i++) {\n          if (TH) {\n            this.rowHeaderWidth += outerWidth(TH);\n            TH = TH.nextSibling;\n          } else {\n            // yes this is a cheat but it worked like that before, just taking assumption from CSS instead of measuring.\n            // TODO: proper fix\n            this.rowHeaderWidth += 50;\n          }\n        }\n      } else {\n        this.rowHeaderWidth = 0;\n      }\n    }\n    this.rowHeaderWidth = this.wtSettings.getSetting('onModifyRowHeaderWidth', this.rowHeaderWidth) || this.rowHeaderWidth;\n    return this.rowHeaderWidth;\n  }\n\n  /**\n   * @returns {number}\n   */\n  getViewportWidth() {\n    const containerWidth = this.getWorkspaceWidth();\n    if (containerWidth === Infinity) {\n      return containerWidth;\n    }\n    const rowHeaderWidth = this.getRowHeaderWidth();\n    if (rowHeaderWidth > 0) {\n      return containerWidth - rowHeaderWidth;\n    }\n    return containerWidth;\n  }\n\n  /**\n   * Creates:\n   * - rowsRenderCalculator (before draw, to qualify rows for rendering)\n   * - rowsVisibleCalculator (after draw, to measure which rows are actually visible).\n   *\n   * @param {number} calculationType The render type ID, which determines for what type of\n   *                                 calculation calculator is created.\n   * @returns {ViewportRowsCalculator}\n   */\n  createRowsCalculator() {\n    let calculationType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RENDER_TYPE;\n    const {\n      wtSettings,\n      wtTable\n    } = this;\n    let height;\n    let scrollbarHeight;\n    let fixedRowsHeight;\n    this.rowHeaderWidth = NaN;\n    if (wtSettings.getSetting('renderAllRows') && calculationType === RENDER_TYPE) {\n      height = Infinity;\n    } else {\n      height = this.getViewportHeight();\n    }\n    let pos = this.dataAccessObject.topScrollPosition - this.dataAccessObject.topParentOffset;\n    const fixedRowsTop = wtSettings.getSetting('fixedRowsTop');\n    const fixedRowsBottom = wtSettings.getSetting('fixedRowsBottom');\n    const totalRows = wtSettings.getSetting('totalRows');\n    if (fixedRowsTop && pos >= 0) {\n      fixedRowsHeight = this.dataAccessObject.topOverlay.sumCellSizes(0, fixedRowsTop);\n      pos += fixedRowsHeight;\n      height -= fixedRowsHeight;\n    }\n    if (fixedRowsBottom && this.dataAccessObject.bottomOverlay.clone) {\n      fixedRowsHeight = this.dataAccessObject.bottomOverlay.sumCellSizes(totalRows - fixedRowsBottom, totalRows);\n      height -= fixedRowsHeight;\n    }\n    if (wtTable.holder.clientHeight === wtTable.holder.offsetHeight) {\n      scrollbarHeight = 0;\n    } else {\n      scrollbarHeight = getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    return new ViewportRowsCalculator({\n      viewportSize: height,\n      scrollOffset: pos,\n      totalItems: wtSettings.getSetting('totalRows'),\n      itemSizeFn: sourceRow => wtTable.getRowHeight(sourceRow),\n      overrideFn: wtSettings.getSettingPure('viewportRowCalculatorOverride'),\n      calculationType,\n      scrollbarHeight\n    });\n  }\n\n  /**\n   * Creates:\n   * - columnsRenderCalculator (before draw, to qualify columns for rendering)\n   * - columnsVisibleCalculator (after draw, to measure which columns are actually visible).\n   *\n   * @param {number} calculationType The render type ID, which determines for what type of\n   *                                 calculation calculator is created.\n   * @returns {ViewportColumnsCalculator}\n   */\n  createColumnsCalculator() {\n    let calculationType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : RENDER_TYPE;\n    const {\n      wtSettings,\n      wtTable\n    } = this;\n    let width = this.getViewportWidth();\n    let pos = Math.abs(this.dataAccessObject.inlineStartScrollPosition) - this.dataAccessObject.inlineStartParentOffset;\n    this.columnHeaderHeight = NaN;\n    const fixedColumnsStart = wtSettings.getSetting('fixedColumnsStart');\n    if (fixedColumnsStart && pos >= 0) {\n      const fixedColumnsWidth = this.dataAccessObject.inlineStartOverlay.sumCellSizes(0, fixedColumnsStart);\n      pos += fixedColumnsWidth;\n      width -= fixedColumnsWidth;\n    }\n    if (wtTable.holder.clientWidth !== wtTable.holder.offsetWidth) {\n      width -= getScrollbarWidth(this.domBindings.rootDocument);\n    }\n    return new ViewportColumnsCalculator({\n      viewportSize: width,\n      scrollOffset: pos,\n      totalItems: wtSettings.getSetting('totalColumns'),\n      itemSizeFn: sourceCol => wtTable.getColumnWidth(sourceCol),\n      overrideFn: wtSettings.getSettingPure('viewportColumnCalculatorOverride'),\n      calculationType,\n      stretchMode: wtSettings.getSetting('stretchH'),\n      stretchingItemWidthFn: (stretchedWidth, column) => {\n        return wtSettings.getSetting('onBeforeStretchingColumnWidth', stretchedWidth, column);\n      },\n      inlineStartOffset: this.dataAccessObject.inlineStartParentOffset\n    });\n  }\n\n  /**\n   * Creates rowsRenderCalculator and columnsRenderCalculator (before draw, to determine what rows and\n   * cols should be rendered).\n   *\n   * @param {boolean} fastDraw If `true`, will try to avoid full redraw and only update the border positions.\n   *                           If `false` or `undefined`, will perform a full redraw.\n   * @returns {boolean} The fastDraw value, possibly modified.\n   */\n  createRenderCalculators() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let runFastDraw = fastDraw;\n    if (runFastDraw) {\n      const proposedRowsVisibleCalculator = this.createRowsCalculator(FULLY_VISIBLE_TYPE);\n      const proposedColumnsVisibleCalculator = this.createColumnsCalculator(FULLY_VISIBLE_TYPE);\n      if (!(this.areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) && this.areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator))) {\n        runFastDraw = false;\n      }\n    }\n    if (!runFastDraw) {\n      this.rowsRenderCalculator = this.createRowsCalculator(RENDER_TYPE);\n      this.columnsRenderCalculator = this.createColumnsCalculator(RENDER_TYPE);\n    }\n    // delete temporarily to make sure that renderers always use rowsRenderCalculator, not rowsVisibleCalculator\n    this.rowsVisibleCalculator = null;\n    this.columnsVisibleCalculator = null;\n    return runFastDraw;\n  }\n\n  /**\n   * Creates rowsVisibleCalculator and columnsVisibleCalculator (after draw, to determine what are\n   * the actually fully visible rows and columns).\n   */\n  createVisibleCalculators() {\n    this.rowsVisibleCalculator = this.createRowsCalculator(FULLY_VISIBLE_TYPE);\n    this.columnsVisibleCalculator = this.createColumnsCalculator(FULLY_VISIBLE_TYPE);\n  }\n\n  /**\n   * Returns information whether proposedRowsVisibleCalculator viewport\n   * is contained inside rows rendered in previous draw (cached in rowsRenderCalculator).\n   *\n   * @param {ViewportRowsCalculator} proposedRowsVisibleCalculator The instance of the viewport calculator to compare with.\n   * @returns {boolean} Returns `true` if all proposed visible rows are already rendered (meaning: redraw is not needed).\n   *                    Returns `false` if at least one proposed visible row is not already rendered (meaning: redraw is needed).\n   */\n  areAllProposedVisibleRowsAlreadyRendered(proposedRowsVisibleCalculator) {\n    if (!this.rowsVisibleCalculator) {\n      return false;\n    }\n    const {\n      startRow,\n      endRow,\n      isVisibleInTrimmingContainer\n    } = proposedRowsVisibleCalculator;\n\n    // if there are no fully visible rows at all, return false\n    if (startRow === null && endRow === null) {\n      return !isVisibleInTrimmingContainer;\n    }\n    const {\n      startRow: renderedStartRow,\n      endRow: renderedEndRow\n    } = this.rowsRenderCalculator;\n    if (startRow < renderedStartRow || startRow === renderedStartRow && startRow > 0) {\n      return false;\n    } else if (endRow > renderedEndRow || endRow === renderedEndRow && endRow < this.wtSettings.getSetting('totalRows') - 1) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Returns information whether proposedColumnsVisibleCalculator viewport\n   * is contained inside column rendered in previous draw (cached in columnsRenderCalculator).\n   *\n   * @param {ViewportRowsCalculator} proposedColumnsVisibleCalculator The instance of the viewport calculator to compare with.\n   * @returns {boolean} Returns `true` if all proposed visible columns are already rendered (meaning: redraw is not needed).\n   *                    Returns `false` if at least one proposed visible column is not already rendered (meaning: redraw is needed).\n   */\n  areAllProposedVisibleColumnsAlreadyRendered(proposedColumnsVisibleCalculator) {\n    if (!this.columnsVisibleCalculator) {\n      return false;\n    }\n    const {\n      startColumn,\n      endColumn,\n      isVisibleInTrimmingContainer\n    } = proposedColumnsVisibleCalculator;\n\n    // if there are no fully visible columns at all, return false\n    if (startColumn === null && endColumn === null) {\n      return !isVisibleInTrimmingContainer;\n    }\n    const {\n      startColumn: renderedStartColumn,\n      endColumn: renderedEndColumn\n    } = this.columnsRenderCalculator;\n    if (startColumn < renderedStartColumn || startColumn === renderedStartColumn && startColumn > 0) {\n      return false;\n    } else if (endColumn > renderedEndColumn || endColumn === renderedEndColumn && endColumn < this.wtSettings.getSetting('totalColumns') - 1) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Resets values in keys of the hasOversizedColumnHeadersMarked object after updateSettings.\n   */\n  resetHasOversizedColumnHeadersMarked() {\n    objectEach(this.hasOversizedColumnHeadersMarked, (value, key, object) => {\n      object[key] = void 0;\n    });\n  }\n}\nexport default Viewport;","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\n/* eslint-disable no-continue */\nimport { addClass } from \"../../../../helpers/dom/element.mjs\";\n/**\n * Selection scanner module scans the rendered cells and headers and if it finds an intersection with\n * the coordinates of the Selection class (highlight) it returns the DOM elements.\n *\n * @private\n */\nvar _selection = /*#__PURE__*/new WeakMap();\nvar _activeOverlaysWot = /*#__PURE__*/new WeakMap();\nvar _scanCellsRange = /*#__PURE__*/new WeakSet();\nexport class SelectionScanner {\n  constructor() {\n    /**\n     * The method triggers a callback for each rendered cell.\n     *\n     * @param {function(number, number): void} callback The callback function to trigger.\n     */\n    _classPrivateMethodInitSpec(this, _scanCellsRange);\n    /**\n     * Active Selection instance to process.\n     *\n     * @type {Selection}\n     */\n    _classPrivateFieldInitSpec(this, _selection, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The Walkontable instance that the scans depends on.\n     *\n     * @type {Walkontable}\n     */\n    _classPrivateFieldInitSpec(this, _activeOverlaysWot, {\n      writable: true,\n      value: void 0\n    });\n  }\n  /**\n   * Sets the Walkontable instance that will be taking into account while scanning the table.\n   *\n   * @param {Walkontable} activeOverlaysWot The Walkontable instance.\n   * @returns {SelectionScanner}\n   */\n  setActiveOverlay(activeOverlaysWot) {\n    _classPrivateFieldSet(this, _activeOverlaysWot, activeOverlaysWot);\n    return this;\n  }\n\n  /**\n   * Sets the Selection instance to process.\n   *\n   * @param {Selection} selection The Selection instance.\n   * @returns {SelectionScanner}\n   */\n  setActiveSelection(selection) {\n    _classPrivateFieldSet(this, _selection, selection);\n    return this;\n  }\n\n  /**\n   * Scans the rendered table with selection and returns elements that intersects\n   * with selection coordinates.\n   *\n   * @returns {HTMLTableElement[]}\n   */\n  scan() {\n    const selectionType = _classPrivateFieldGet(this, _selection).settings.selectionType;\n    const elements = new Set();\n\n    // TODO(improvement): use heuristics from coords to detect what type of scan\n    // the Selection needs instead of using `selectionType` property.\n    if (selectionType === 'active-header') {\n      this.scanColumnsInHeadersRange(element => elements.add(element));\n      this.scanRowsInHeadersRange(element => elements.add(element));\n    } else if (selectionType === 'area') {\n      this.scanCellsRange(element => elements.add(element));\n    } else if (selectionType === 'focus') {\n      this.scanColumnsInHeadersRange(element => elements.add(element));\n      this.scanRowsInHeadersRange(element => elements.add(element));\n      this.scanCellsRange(element => elements.add(element));\n    } else if (selectionType === 'fill') {\n      this.scanCellsRange(element => elements.add(element));\n    } else if (selectionType === 'header') {\n      this.scanColumnsInHeadersRange(element => elements.add(element));\n      this.scanRowsInHeadersRange(element => elements.add(element));\n    } else if (selectionType === 'row') {\n      this.scanRowsInHeadersRange(element => elements.add(element));\n      this.scanRowsInCellsRange(element => elements.add(element));\n    } else if (selectionType === 'column') {\n      this.scanColumnsInHeadersRange(element => elements.add(element));\n      this.scanColumnsInCellsRange(element => elements.add(element));\n    }\n    return elements;\n  }\n\n  /**\n   * Scans the table (only rendered headers) and collect all column headers (TH) that match\n   * the coordinates passed in the Selection instance.\n   *\n   * @param {function(HTMLTableElement): void} callback The callback function to trigger.\n   */\n  scanColumnsInHeadersRange(callback) {\n    const [topRow, topColumn, bottomRow, bottomColumn] = _classPrivateFieldGet(this, _selection).getCorners();\n    const {\n      wtTable\n    } = _classPrivateFieldGet(this, _activeOverlaysWot);\n    const renderedColumnsCount = wtTable.getRenderedColumnsCount();\n    const columnHeadersCount = wtTable.getColumnHeadersCount();\n    let cursor = 0;\n    for (let column = -wtTable.getRowHeadersCount(); column < renderedColumnsCount; column++) {\n      const sourceColumn = wtTable.columnFilter.renderedToSource(column);\n      if (sourceColumn < topColumn || sourceColumn > bottomColumn) {\n        continue;\n      }\n      for (let headerLevel = -columnHeadersCount; headerLevel < 0; headerLevel++) {\n        if (headerLevel < topRow || headerLevel > bottomRow) {\n          continue;\n        }\n        const positiveBasedHeaderLevel = headerLevel + columnHeadersCount;\n        let TH = wtTable.getColumnHeader(sourceColumn, positiveBasedHeaderLevel);\n        const newSourceCol = _classPrivateFieldGet(this, _activeOverlaysWot).getSetting('onBeforeHighlightingColumnHeader', sourceColumn, positiveBasedHeaderLevel, {\n          selectionType: _classPrivateFieldGet(this, _selection).settings.selectionType,\n          columnCursor: cursor,\n          selectionWidth: bottomColumn - topColumn + 1\n        });\n        if (newSourceCol === null) {\n          continue;\n        }\n        if (newSourceCol !== sourceColumn) {\n          TH = wtTable.getColumnHeader(newSourceCol, positiveBasedHeaderLevel);\n        }\n        callback(TH);\n      }\n      cursor += 1;\n    }\n  }\n\n  /**\n   * Scans the table (only rendered headers) and collect all row headers (TH) that match\n   * the coordinates passed in the Selection instance.\n   *\n   * @param {function(HTMLTableElement): void} callback The callback function to trigger.\n   */\n  scanRowsInHeadersRange(callback) {\n    const [topRow, topColumn, bottomRow, bottomColumn] = _classPrivateFieldGet(this, _selection).getCorners();\n    const {\n      wtTable\n    } = _classPrivateFieldGet(this, _activeOverlaysWot);\n    const renderedRowsCount = wtTable.getRenderedRowsCount();\n    const rowHeadersCount = wtTable.getRowHeadersCount();\n    let cursor = 0;\n    for (let row = -wtTable.getColumnHeadersCount(); row < renderedRowsCount; row++) {\n      const sourceRow = wtTable.rowFilter.renderedToSource(row);\n      if (sourceRow < topRow || sourceRow > bottomRow) {\n        continue;\n      }\n      for (let headerLevel = -rowHeadersCount; headerLevel < 0; headerLevel++) {\n        if (headerLevel < topColumn || headerLevel > bottomColumn) {\n          continue;\n        }\n        const positiveBasedHeaderLevel = headerLevel + rowHeadersCount;\n        let TH = wtTable.getRowHeader(sourceRow, positiveBasedHeaderLevel);\n        const newSourceRow = _classPrivateFieldGet(this, _activeOverlaysWot).getSetting('onBeforeHighlightingRowHeader', sourceRow, positiveBasedHeaderLevel, {\n          selectionType: _classPrivateFieldGet(this, _selection).settings.selectionType,\n          rowCursor: cursor,\n          selectionHeight: bottomRow - topRow + 1\n        });\n        if (newSourceRow === null) {\n          continue;\n        }\n        if (newSourceRow !== sourceRow) {\n          TH = wtTable.getRowHeader(newSourceRow, positiveBasedHeaderLevel);\n        }\n        callback(TH);\n      }\n      cursor += 1;\n    }\n  }\n\n  /**\n   * Scans the table (only rendered cells) and collect all cells (TR) that match\n   * the coordinates passed in the Selection instance.\n   *\n   * @param {function(HTMLTableElement): void} callback The callback function to trigger.\n   */\n  scanCellsRange(callback) {\n    const [topRow, topColumn, bottomRow, bottomColumn] = _classPrivateFieldGet(this, _selection).getCorners();\n    const {\n      wtTable\n    } = _classPrivateFieldGet(this, _activeOverlaysWot);\n    _classPrivateMethodGet(this, _scanCellsRange, _scanCellsRange2).call(this, (sourceRow, sourceColumn) => {\n      if (sourceRow >= topRow && sourceRow <= bottomRow && sourceColumn >= topColumn && sourceColumn <= bottomColumn) {\n        const cell = wtTable.getCell(_classPrivateFieldGet(this, _activeOverlaysWot).createCellCoords(sourceRow, sourceColumn));\n\n        // support for old API\n        const additionalSelectionClass = _classPrivateFieldGet(this, _activeOverlaysWot).getSetting('onAfterDrawSelection', sourceRow, sourceColumn, _classPrivateFieldGet(this, _selection).settings.layerLevel);\n        if (typeof additionalSelectionClass === 'string') {\n          addClass(cell, additionalSelectionClass);\n        }\n        callback(cell);\n      }\n    });\n  }\n\n  /**\n   * Scans the table (only rendered cells) and collects all cells (TR) that match the coordinates\n   * passed in the Selection instance but only for the X axis (rows).\n   *\n   * @param {function(HTMLTableElement): void} callback The callback function to trigger.\n   */\n  scanRowsInCellsRange(callback) {\n    // eslint-disable-next-line comma-spacing\n    const [topRow,, bottomRow] = _classPrivateFieldGet(this, _selection).getCorners();\n    const {\n      wtTable\n    } = _classPrivateFieldGet(this, _activeOverlaysWot);\n    _classPrivateMethodGet(this, _scanCellsRange, _scanCellsRange2).call(this, (sourceRow, sourceColumn) => {\n      if (sourceRow >= topRow && sourceRow <= bottomRow) {\n        const cell = wtTable.getCell(_classPrivateFieldGet(this, _activeOverlaysWot).createCellCoords(sourceRow, sourceColumn));\n        callback(cell);\n      }\n    });\n  }\n\n  /**\n   * Scans the table (only rendered cells) and collects all cells (TR) that match the coordinates\n   * passed in the Selection instance but only for the Y axis (columns).\n   *\n   * @param {function(HTMLTableElement): void} callback The callback function to trigger.\n   */\n  scanColumnsInCellsRange(callback) {\n    const [, topColumn,, bottomColumn] = _classPrivateFieldGet(this, _selection).getCorners();\n    const {\n      wtTable\n    } = _classPrivateFieldGet(this, _activeOverlaysWot);\n    _classPrivateMethodGet(this, _scanCellsRange, _scanCellsRange2).call(this, (sourceRow, sourceColumn) => {\n      if (sourceColumn >= topColumn && sourceColumn <= bottomColumn) {\n        const cell = wtTable.getCell(_classPrivateFieldGet(this, _activeOverlaysWot).createCellCoords(sourceRow, sourceColumn));\n        callback(cell);\n      }\n    });\n  }\n}\nfunction _scanCellsRange2(callback) {\n  const {\n    wtTable\n  } = _classPrivateFieldGet(this, _activeOverlaysWot);\n  const renderedRowsCount = wtTable.getRenderedRowsCount();\n  const renderedColumnsCount = wtTable.getRenderedColumnsCount();\n  for (let row = 0; row < renderedRowsCount; row += 1) {\n    const sourceRow = wtTable.rowFilter.renderedToSource(row);\n    for (let column = 0; column < renderedColumnsCount; column += 1) {\n      callback(sourceRow, wtTable.columnFilter.renderedToSource(column));\n    }\n  }\n}","import { addClass, hasClass, removeClass, getComputedStyle, getTrimmingContainer, innerWidth, innerHeight, offset, outerHeight, outerWidth } from \"../../../../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../../../../helpers/dom/event.mjs\";\nimport { objectEach } from \"../../../../../helpers/object.mjs\";\nimport { isMobileBrowser } from \"../../../../../helpers/browser.mjs\";\nimport { CORNER_DEFAULT_STYLE } from \"./constants.mjs\";\n/**\n *\n */\nclass Border {\n  // TODO As this is an internal class, should be designed for using {Walkontable}. It uses the facade,\n  // TODO Con. Because the class is created on place where the instance reference comes from external origin.\n  // TODO Imho, the discrimination for handling both, facade and non-facade should be handled.\n  /**\n   * @param {WalkontableFacade} wotInstance The Walkontable instance.\n   * @param {object} settings The border settings.\n   */\n  constructor(wotInstance, settings) {\n    if (!settings) {\n      return;\n    }\n    this.eventManager = wotInstance.eventManager;\n    this.instance = wotInstance;\n    this.wot = wotInstance;\n    this.settings = settings;\n    this.mouseDown = false;\n    this.main = null;\n    this.top = null;\n    this.bottom = null;\n    this.start = null;\n    this.end = null;\n    this.topStyle = null;\n    this.bottomStyle = null;\n    this.startStyle = null;\n    this.endStyle = null;\n    this.cornerDefaultStyle = CORNER_DEFAULT_STYLE;\n    // Offset to moving the corner to be centered relative to the grid.\n    this.cornerCenterPointOffset = -(parseInt(this.cornerDefaultStyle.width, 10) / 2);\n    this.corner = null;\n    this.cornerStyle = null;\n    this.createBorders(settings);\n    this.registerListeners();\n  }\n\n  /**\n   * Register all necessary events.\n   */\n  registerListeners() {\n    const documentBody = this.wot.rootDocument.body;\n    this.eventManager.addEventListener(documentBody, 'mousedown', () => this.onMouseDown());\n    this.eventManager.addEventListener(documentBody, 'mouseup', () => this.onMouseUp());\n    for (let c = 0, len = this.main.childNodes.length; c < len; c++) {\n      const element = this.main.childNodes[c];\n      this.eventManager.addEventListener(element, 'mouseenter', event => this.onMouseEnter(event, this.main.childNodes[c]));\n    }\n  }\n\n  /**\n   * Mouse down listener.\n   *\n   * @private\n   */\n  onMouseDown() {\n    this.mouseDown = true;\n  }\n\n  /**\n   * Mouse up listener.\n   *\n   * @private\n   */\n  onMouseUp() {\n    this.mouseDown = false;\n  }\n\n  /**\n   * Mouse enter listener for fragment selection functionality.\n   *\n   * @private\n   * @param {Event} event Dom event.\n   * @param {HTMLElement} parentElement Part of border element.\n   */\n  onMouseEnter(event, parentElement) {\n    if (!this.mouseDown || !this.wot.getSetting('hideBorderOnMouseDownOver')) {\n      return;\n    }\n    event.preventDefault();\n    stopImmediatePropagation(event);\n    const _this = this;\n    const documentBody = this.wot.rootDocument.body;\n    const bounds = parentElement.getBoundingClientRect();\n\n    // Hide border to prevents selection jumping when fragmentSelection is enabled.\n    parentElement.style.display = 'none';\n\n    /**\n     * @param {Event} mouseEvent The mouse event object.\n     * @returns {boolean}\n     */\n    function isOutside(mouseEvent) {\n      if (mouseEvent.clientY < Math.floor(bounds.top)) {\n        return true;\n      }\n      if (mouseEvent.clientY > Math.ceil(bounds.top + bounds.height)) {\n        return true;\n      }\n      if (mouseEvent.clientX < Math.floor(bounds.left)) {\n        return true;\n      }\n      if (mouseEvent.clientX > Math.ceil(bounds.left + bounds.width)) {\n        return true;\n      }\n    }\n\n    /**\n     * @param {Event} handlerEvent The mouse event object.\n     */\n    function handler(handlerEvent) {\n      if (isOutside(handlerEvent)) {\n        _this.eventManager.removeEventListener(documentBody, 'mousemove', handler);\n        parentElement.style.display = 'block';\n      }\n    }\n    this.eventManager.addEventListener(documentBody, 'mousemove', handler);\n  }\n\n  /**\n   * Create border elements.\n   *\n   * @param {object} settings The border settings.\n   */\n  createBorders(settings) {\n    const {\n      rootDocument\n    } = this.wot;\n    this.main = rootDocument.createElement('div');\n    const borderDivs = ['top', 'start', 'bottom', 'end', 'corner'];\n    let style = this.main.style;\n    style.position = 'absolute';\n    style.top = 0;\n    style.left = 0;\n    for (let i = 0; i < 5; i++) {\n      const position = borderDivs[i];\n      const div = rootDocument.createElement('div');\n      div.className = `wtBorder ${this.settings.className || ''}`; // + borderDivs[i];\n\n      if (this.settings[position] && this.settings[position].hide) {\n        div.className += ' hidden';\n      }\n      style = div.style;\n      style.backgroundColor = this.settings[position] && this.settings[position].color ? this.settings[position].color : settings.border.color;\n      style.height = this.settings[position] && this.settings[position].width ? `${this.settings[position].width}px` : `${settings.border.width}px`;\n      style.width = this.settings[position] && this.settings[position].width ? `${this.settings[position].width}px` : `${settings.border.width}px`;\n      this.main.appendChild(div);\n    }\n    this.top = this.main.childNodes[0];\n    this.start = this.main.childNodes[1];\n    this.bottom = this.main.childNodes[2];\n    this.end = this.main.childNodes[3];\n    this.topStyle = this.top.style;\n    this.startStyle = this.start.style;\n    this.bottomStyle = this.bottom.style;\n    this.endStyle = this.end.style;\n    this.corner = this.main.childNodes[4];\n    this.corner.className += ' corner';\n    this.cornerStyle = this.corner.style;\n    this.cornerStyle.width = this.cornerDefaultStyle.width;\n    this.cornerStyle.height = this.cornerDefaultStyle.height;\n    this.cornerStyle.border = [this.cornerDefaultStyle.borderWidth, this.cornerDefaultStyle.borderStyle, this.cornerDefaultStyle.borderColor].join(' ');\n    if (isMobileBrowser()) {\n      this.createMultipleSelectorHandles();\n    }\n    this.disappear();\n    const {\n      wtTable\n    } = this.wot;\n    let bordersHolder = wtTable.bordersHolder;\n    if (!bordersHolder) {\n      bordersHolder = rootDocument.createElement('div');\n      bordersHolder.className = 'htBorders';\n      wtTable.bordersHolder = bordersHolder;\n      wtTable.spreader.appendChild(bordersHolder);\n    }\n    bordersHolder.appendChild(this.main);\n  }\n\n  /**\n   * Create multiple selector handler for mobile devices.\n   */\n  createMultipleSelectorHandles() {\n    const {\n      rootDocument\n    } = this.wot;\n    this.selectionHandles = {\n      top: rootDocument.createElement('DIV'),\n      topHitArea: rootDocument.createElement('DIV'),\n      bottom: rootDocument.createElement('DIV'),\n      bottomHitArea: rootDocument.createElement('DIV')\n    };\n    const width = 10;\n    const hitAreaWidth = 40;\n    this.selectionHandles.top.className = 'topSelectionHandle topLeftSelectionHandle';\n    this.selectionHandles.topHitArea.className = 'topSelectionHandle-HitArea topLeftSelectionHandle-HitArea';\n    this.selectionHandles.bottom.className = 'bottomSelectionHandle bottomRightSelectionHandle';\n    this.selectionHandles.bottomHitArea.className = 'bottomSelectionHandle-HitArea bottomRightSelectionHandle-HitArea';\n    this.selectionHandles.styles = {\n      top: this.selectionHandles.top.style,\n      topHitArea: this.selectionHandles.topHitArea.style,\n      bottom: this.selectionHandles.bottom.style,\n      bottomHitArea: this.selectionHandles.bottomHitArea.style\n    };\n    const hitAreaStyle = {\n      position: 'absolute',\n      height: `${hitAreaWidth}px`,\n      width: `${hitAreaWidth}px`,\n      'border-radius': `${parseInt(hitAreaWidth / 1.5, 10)}px`\n    };\n    objectEach(hitAreaStyle, (value, key) => {\n      this.selectionHandles.styles.bottomHitArea[key] = value;\n      this.selectionHandles.styles.topHitArea[key] = value;\n    });\n    const handleStyle = {\n      position: 'absolute',\n      height: `${width}px`,\n      width: `${width}px`,\n      'border-radius': `${parseInt(width / 1.5, 10)}px`,\n      background: '#F5F5FF',\n      border: '1px solid #4285c8'\n    };\n    objectEach(handleStyle, (value, key) => {\n      this.selectionHandles.styles.bottom[key] = value;\n      this.selectionHandles.styles.top[key] = value;\n    });\n    this.main.appendChild(this.selectionHandles.top);\n    this.main.appendChild(this.selectionHandles.bottom);\n    this.main.appendChild(this.selectionHandles.topHitArea);\n    this.main.appendChild(this.selectionHandles.bottomHitArea);\n  }\n\n  /**\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @returns {boolean}\n   */\n  isPartRange(row, col) {\n    const areaSelection = this.wot.selectionManager.getAreaSelection();\n    if (areaSelection.cellRange) {\n      if (row !== areaSelection.cellRange.to.row || col !== areaSelection.cellRange.to.col) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number} top The top position of the handler.\n   * @param {number} left The left position of the handler.\n   * @param {number} width The width of the handler.\n   * @param {number} height The height of the handler.\n   */\n  updateMultipleSelectionHandlesPosition(row, col, top, left, width, height) {\n    const isRtl = this.wot.wtSettings.getSetting('rtlMode');\n    const inlinePosProperty = isRtl ? 'right' : 'left';\n    const {\n      top: topStyles,\n      topHitArea: topHitAreaStyles,\n      bottom: bottomStyles,\n      bottomHitArea: bottomHitAreaStyles\n    } = this.selectionHandles.styles;\n    const handleBorderSize = parseInt(topStyles.borderWidth, 10);\n    const handleSize = parseInt(topStyles.width, 10);\n    const hitAreaSize = parseInt(topHitAreaStyles.width, 10);\n    const totalTableWidth = this.wot.wtTable.getWidth();\n    const totalTableHeight = this.wot.wtTable.getHeight();\n    topStyles.top = `${parseInt(top - handleSize - 1, 10)}px`;\n    topStyles[inlinePosProperty] = `${parseInt(left - handleSize - 1, 10)}px`;\n    topHitAreaStyles.top = `${parseInt(top - hitAreaSize / 4 * 3, 10)}px`;\n    topHitAreaStyles[inlinePosProperty] = `${parseInt(left - hitAreaSize / 4 * 3, 10)}px`;\n    const bottomHandlerInline = Math.min(parseInt(left + width, 10), totalTableWidth - handleSize - handleBorderSize * 2);\n    const bottomHandlerAreaInline = Math.min(parseInt(left + width - hitAreaSize / 4, 10), totalTableWidth - hitAreaSize - handleBorderSize * 2);\n    bottomStyles[inlinePosProperty] = `${bottomHandlerInline}px`;\n    bottomHitAreaStyles[inlinePosProperty] = `${bottomHandlerAreaInline}px`;\n    const bottomHandlerTop = Math.min(parseInt(top + height, 10), totalTableHeight - handleSize - handleBorderSize * 2);\n    const bottomHandlerAreaTop = Math.min(parseInt(top + height - hitAreaSize / 4, 10), totalTableHeight - hitAreaSize - handleBorderSize * 2);\n    bottomStyles.top = `${bottomHandlerTop}px`;\n    bottomHitAreaStyles.top = `${bottomHandlerAreaTop}px`;\n    if (this.settings.border.cornerVisible && this.settings.border.cornerVisible()) {\n      topStyles.display = 'block';\n      topHitAreaStyles.display = 'block';\n      if (this.isPartRange(row, col)) {\n        bottomStyles.display = 'none';\n        bottomHitAreaStyles.display = 'none';\n      } else {\n        bottomStyles.display = 'block';\n        bottomHitAreaStyles.display = 'block';\n      }\n    } else {\n      topStyles.display = 'none';\n      bottomStyles.display = 'none';\n      topHitAreaStyles.display = 'none';\n      bottomHitAreaStyles.display = 'none';\n    }\n    if (row === this.wot.wtSettings.getSetting('fixedRowsTop') || col === this.wot.wtSettings.getSetting('fixedColumnsStart')) {\n      topStyles.zIndex = '9999';\n      topHitAreaStyles.zIndex = '9999';\n    } else {\n      topStyles.zIndex = '';\n      topHitAreaStyles.zIndex = '';\n    }\n  }\n\n  /**\n   * Show border around one or many cells.\n   *\n   * @param {Array} corners The corner coordinates.\n   */\n  appear(corners) {\n    if (this.disabled) {\n      return;\n    }\n    const {\n      wtTable,\n      rootDocument,\n      rootWindow\n    } = this.wot; // todo refactoring: consider about using internal facade (it is given by external code)\n    let fromRow;\n    let toRow;\n    let fromColumn;\n    let toColumn;\n    let rowHeader;\n    let columnHeader;\n    const rowsCount = wtTable.getRenderedRowsCount();\n    for (let i = 0; i < rowsCount; i += 1) {\n      const s = wtTable.rowFilter.renderedToSource(i);\n      if (s >= corners[0] && s <= corners[2]) {\n        fromRow = s;\n        rowHeader = corners[0];\n        break;\n      }\n    }\n    for (let i = rowsCount - 1; i >= 0; i -= 1) {\n      const s = wtTable.rowFilter.renderedToSource(i);\n      if (s >= corners[0] && s <= corners[2]) {\n        toRow = s;\n        break;\n      }\n    }\n    const columnsCount = wtTable.getRenderedColumnsCount();\n    for (let i = 0; i < columnsCount; i += 1) {\n      const s = wtTable.columnFilter.renderedToSource(i);\n      if (s >= corners[1] && s <= corners[3]) {\n        fromColumn = s;\n        columnHeader = corners[1];\n        break;\n      }\n    }\n    for (let i = columnsCount - 1; i >= 0; i -= 1) {\n      const s = wtTable.columnFilter.renderedToSource(i);\n      if (s >= corners[1] && s <= corners[3]) {\n        toColumn = s;\n        break;\n      }\n    }\n    if (fromRow === void 0 || fromColumn === void 0) {\n      this.disappear();\n      return;\n    }\n    let fromTD = wtTable.getCell(this.wot.createCellCoords(fromRow, fromColumn));\n    const isMultiple = fromRow !== toRow || fromColumn !== toColumn;\n    const toTD = isMultiple ? wtTable.getCell(this.wot.createCellCoords(toRow, toColumn)) : fromTD;\n    const fromOffset = offset(fromTD);\n    const toOffset = isMultiple ? offset(toTD) : fromOffset;\n    const containerOffset = offset(wtTable.TABLE);\n    const containerWidth = outerWidth(wtTable.TABLE);\n    const minTop = fromOffset.top;\n    const minLeft = fromOffset.left;\n    const isRtl = this.wot.wtSettings.getSetting('rtlMode');\n    let inlineStartPos = 0;\n    let width = 0;\n    if (isRtl) {\n      const fromWidth = outerWidth(fromTD);\n      const gridRightPos = rootWindow.innerWidth - containerOffset.left - containerWidth;\n      width = minLeft + fromWidth - toOffset.left;\n      inlineStartPos = rootWindow.innerWidth - minLeft - fromWidth - gridRightPos - 1;\n    } else {\n      width = toOffset.left + outerWidth(toTD) - minLeft;\n      inlineStartPos = minLeft - containerOffset.left - 1;\n    }\n    if (this.isEntireColumnSelected(fromRow, toRow)) {\n      const modifiedValues = this.getDimensionsFromHeader('columns', fromColumn, toColumn, rowHeader, containerOffset);\n      let fromTH = null;\n      if (modifiedValues) {\n        [fromTH, inlineStartPos, width] = modifiedValues;\n      }\n      if (fromTH) {\n        fromTD = fromTH;\n      }\n    }\n    let top = minTop - containerOffset.top - 1;\n    let height = toOffset.top + outerHeight(toTD) - minTop;\n    if (this.isEntireRowSelected(fromColumn, toColumn)) {\n      const modifiedValues = this.getDimensionsFromHeader('rows', fromRow, toRow, columnHeader, containerOffset);\n      let fromTH = null;\n      if (modifiedValues) {\n        [fromTH, top, height] = modifiedValues;\n      }\n      if (fromTH) {\n        fromTD = fromTH;\n      }\n    }\n    const style = getComputedStyle(fromTD, rootWindow);\n    if (parseInt(style.borderTopWidth, 10) > 0) {\n      top += 1;\n      height = height > 0 ? height - 1 : 0;\n    }\n    if (parseInt(style[isRtl ? 'borderRightWidth' : 'borderLeftWidth'], 10) > 0) {\n      inlineStartPos += 1;\n      width = width > 0 ? width - 1 : 0;\n    }\n    const inlinePosProperty = isRtl ? 'right' : 'left';\n    this.topStyle.top = `${top}px`;\n    this.topStyle[inlinePosProperty] = `${inlineStartPos}px`;\n    this.topStyle.width = `${width}px`;\n    this.topStyle.display = 'block';\n    this.startStyle.top = `${top}px`;\n    this.startStyle[inlinePosProperty] = `${inlineStartPos}px`;\n    this.startStyle.height = `${height}px`;\n    this.startStyle.display = 'block';\n    const delta = Math.floor(this.settings.border.width / 2);\n    this.bottomStyle.top = `${top + height - delta}px`;\n    this.bottomStyle[inlinePosProperty] = `${inlineStartPos}px`;\n    this.bottomStyle.width = `${width}px`;\n    this.bottomStyle.display = 'block';\n    this.endStyle.top = `${top}px`;\n    this.endStyle[inlinePosProperty] = `${inlineStartPos + width - delta}px`;\n    this.endStyle.height = `${height + 1}px`;\n    this.endStyle.display = 'block';\n    let cornerVisibleSetting = this.settings.border.cornerVisible;\n    cornerVisibleSetting = typeof cornerVisibleSetting === 'function' ? cornerVisibleSetting(this.settings.layerLevel) : cornerVisibleSetting;\n    const hookResult = this.wot.getSetting('onModifyGetCellCoords', toRow, toColumn);\n    let [checkRow, checkCol] = [toRow, toColumn];\n    if (hookResult && Array.isArray(hookResult)) {\n      [,, checkRow, checkCol] = hookResult;\n    }\n    if (isMobileBrowser() || !cornerVisibleSetting || this.isPartRange(checkRow, checkCol)) {\n      this.cornerStyle.display = 'none';\n    } else {\n      this.cornerStyle.top = `${top + height + this.cornerCenterPointOffset - 1}px`;\n      this.cornerStyle[inlinePosProperty] = `${inlineStartPos + width + this.cornerCenterPointOffset - 1}px`;\n      this.cornerStyle.borderRightWidth = this.cornerDefaultStyle.borderWidth;\n      this.cornerStyle.width = this.cornerDefaultStyle.width;\n\n      // Hide the fill handle, so the possible further adjustments won't force unneeded scrollbars.\n      this.cornerStyle.display = 'none';\n      let trimmingContainer = getTrimmingContainer(wtTable.TABLE);\n      const trimToWindow = trimmingContainer === rootWindow;\n      if (trimToWindow) {\n        trimmingContainer = rootDocument.documentElement;\n      }\n      const cornerHalfWidth = parseInt(this.cornerDefaultStyle.width, 10) / 2;\n      const cornerHalfHeight = parseInt(this.cornerDefaultStyle.height, 10) / 2;\n      if (toColumn === this.wot.getSetting('totalColumns') - 1) {\n        const toTdOffsetLeft = trimToWindow ? toTD.getBoundingClientRect().left : toTD.offsetLeft;\n        let cornerOverlappingContainer = false;\n        let cornerEdge = 0;\n        if (isRtl) {\n          cornerEdge = toTdOffsetLeft - parseInt(this.cornerDefaultStyle.width, 10) / 2;\n          cornerOverlappingContainer = cornerEdge < 0;\n        } else {\n          cornerEdge = toTdOffsetLeft + outerWidth(toTD) + parseInt(this.cornerDefaultStyle.width, 10) / 2;\n          cornerOverlappingContainer = cornerEdge >= innerWidth(trimmingContainer);\n        }\n        if (cornerOverlappingContainer) {\n          this.cornerStyle[inlinePosProperty] = `${Math.floor(inlineStartPos + width + this.cornerCenterPointOffset - cornerHalfWidth)}px`;\n          this.cornerStyle[isRtl ? 'borderLeftWidth' : 'borderRightWidth'] = 0;\n        }\n      }\n      if (toRow === this.wot.getSetting('totalRows') - 1) {\n        const toTdOffsetTop = trimToWindow ? toTD.getBoundingClientRect().top : toTD.offsetTop;\n        const cornerBottomEdge = toTdOffsetTop + outerHeight(toTD) + parseInt(this.cornerDefaultStyle.height, 10) / 2;\n        const cornerOverlappingContainer = cornerBottomEdge >= innerHeight(trimmingContainer);\n        if (cornerOverlappingContainer) {\n          this.cornerStyle.top = `${Math.floor(top + height + this.cornerCenterPointOffset - cornerHalfHeight)}px`;\n          this.cornerStyle.borderBottomWidth = 0;\n        }\n      }\n      this.cornerStyle.display = 'block';\n    }\n    if (isMobileBrowser()) {\n      this.updateMultipleSelectionHandlesPosition(toRow, toColumn, top, inlineStartPos, width, height);\n    }\n  }\n\n  /**\n   * Check whether an entire column of cells is selected.\n   *\n   * @private\n   * @param {number} startRowIndex Start row index.\n   * @param {number} endRowIndex End row index.\n   * @returns {boolean}\n   */\n  isEntireColumnSelected(startRowIndex, endRowIndex) {\n    return startRowIndex === this.wot.wtTable.getFirstRenderedRow() && endRowIndex === this.wot.wtTable.getLastRenderedRow();\n  }\n\n  /**\n   * Check whether an entire row of cells is selected.\n   *\n   * @private\n   * @param {number} startColumnIndex Start column index.\n   * @param {number} endColumnIndex End column index.\n   * @returns {boolean}\n   */\n  isEntireRowSelected(startColumnIndex, endColumnIndex) {\n    return startColumnIndex === this.wot.wtTable.getFirstRenderedColumn() && endColumnIndex === this.wot.wtTable.getLastRenderedColumn();\n  }\n\n  /**\n   * Get left/top index and width/height depending on the `direction` provided.\n   *\n   * @private\n   * @param {string} direction `rows` or `columns`, defines if an entire column or row is selected.\n   * @param {number} fromIndex Start index of the selection.\n   * @param {number} toIndex End index of the selection.\n   * @param {number} headerIndex The header index as negative value.\n   * @param {number} containerOffset Offset of the container.\n   * @returns {Array|boolean} Returns an array of [headerElement, left, width] or [headerElement, top, height], depending on `direction` (`false` in case of an error getting the headers).\n   */\n  getDimensionsFromHeader(direction, fromIndex, toIndex, headerIndex, containerOffset) {\n    const {\n      wtTable\n    } = this.wot;\n    const rootHotElement = wtTable.wtRootElement.parentNode;\n    let getHeaderFn = null;\n    let dimensionFn = null;\n    let entireSelectionClassname = null;\n    let index = null;\n    let dimension = null;\n    let dimensionProperty = null;\n    let startHeader = null;\n    let endHeader = null;\n    switch (direction) {\n      case 'rows':\n        getHeaderFn = function () {\n          return wtTable.getRowHeader(...arguments);\n        };\n        dimensionFn = function () {\n          return outerHeight(...arguments);\n        };\n        entireSelectionClassname = 'ht__selection--rows';\n        dimensionProperty = 'top';\n        break;\n      case 'columns':\n        getHeaderFn = function () {\n          return wtTable.getColumnHeader(...arguments);\n        };\n        dimensionFn = function () {\n          return outerWidth(...arguments);\n        };\n        entireSelectionClassname = 'ht__selection--columns';\n        dimensionProperty = 'left';\n        break;\n      default:\n    }\n    if (rootHotElement.classList.contains(entireSelectionClassname)) {\n      const columnHeaderLevelCount = this.wot.getSetting('columnHeaders').length;\n      startHeader = getHeaderFn(fromIndex, columnHeaderLevelCount - headerIndex);\n      endHeader = getHeaderFn(toIndex, columnHeaderLevelCount - headerIndex);\n      if (!startHeader || !endHeader) {\n        return false;\n      }\n      const startHeaderOffset = offset(startHeader);\n      const endOffset = offset(endHeader);\n      if (startHeader && endHeader) {\n        index = startHeaderOffset[dimensionProperty] - containerOffset[dimensionProperty] - 1;\n        dimension = endOffset[dimensionProperty] + dimensionFn(endHeader) - startHeaderOffset[dimensionProperty];\n      }\n      return [startHeader, index, dimension];\n    }\n    return false;\n  }\n\n  /**\n   * Change border style.\n   *\n   * @private\n   * @param {string} borderElement Coordinate where add/remove border: top, bottom, start, end.\n   * @param {object} border The border object descriptor.\n   */\n  changeBorderStyle(borderElement, border) {\n    const style = this[borderElement].style;\n    const borderStyle = border[borderElement];\n    if (!borderStyle || borderStyle.hide) {\n      addClass(this[borderElement], 'hidden');\n    } else {\n      if (hasClass(this[borderElement], 'hidden')) {\n        removeClass(this[borderElement], 'hidden');\n      }\n      style.backgroundColor = borderStyle.color;\n      if (borderElement === 'top' || borderElement === 'bottom') {\n        style.height = `${borderStyle.width}px`;\n      }\n      if (borderElement === 'start' || borderElement === 'end') {\n        style.width = `${borderStyle.width}px`;\n      }\n    }\n  }\n\n  /**\n   * Change border style to default.\n   *\n   * @private\n   * @param {string} position The position type (\"top\", \"bottom\", \"start\", \"end\") to change.\n   */\n  changeBorderToDefaultStyle(position) {\n    const defaultBorder = {\n      width: 1,\n      color: '#000'\n    };\n    const style = this[position].style;\n    style.backgroundColor = defaultBorder.color;\n    style.width = `${defaultBorder.width}px`;\n    style.height = `${defaultBorder.width}px`;\n  }\n\n  /**\n   * Toggle class 'hidden' to element.\n   *\n   * @private\n   * @param {string} borderElement Coordinate where add/remove border: top, bottom, start, end.\n   * @param {boolean} [remove] Defines type of the action to perform.\n   */\n  toggleHiddenClass(borderElement, remove) {\n    this.changeBorderToDefaultStyle(borderElement);\n    if (remove) {\n      addClass(this[borderElement], 'hidden');\n    } else {\n      removeClass(this[borderElement], 'hidden');\n    }\n  }\n\n  /**\n   * Hide border.\n   */\n  disappear() {\n    this.topStyle.display = 'none';\n    this.bottomStyle.display = 'none';\n    this.startStyle.display = 'none';\n    this.endStyle.display = 'none';\n    this.cornerStyle.display = 'none';\n    if (isMobileBrowser()) {\n      this.selectionHandles.styles.top.display = 'none';\n      this.selectionHandles.styles.topHitArea.display = 'none';\n      this.selectionHandles.styles.bottom.display = 'none';\n      this.selectionHandles.styles.bottomHitArea.display = 'none';\n    }\n  }\n\n  /**\n   * Cleans up all the DOM state related to a Border instance. Call this prior to deleting a Border instance.\n   */\n  destroy() {\n    this.eventManager.destroyWithOwnEventsOnly();\n    this.main.parentNode.removeChild(this.main);\n  }\n}\nexport default Border;","import \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { removeClass, addClass, setAttribute, removeAttribute } from \"../../../../helpers/dom/element.mjs\";\nimport { SelectionScanner } from \"./scanner.mjs\";\nimport Border from \"./border/border.mjs\";\n/**\n * Module responsible for rendering selections (CSS classes) and borders based on the\n * collection of the Selection instances provided throughout the `selections` Walkontable\n * setting.\n *\n * @private\n */\nvar _activeOverlaysWot = /*#__PURE__*/new WeakMap();\nvar _selections = /*#__PURE__*/new WeakMap();\nvar _scanner = /*#__PURE__*/new WeakMap();\nvar _appliedClasses = /*#__PURE__*/new WeakMap();\nvar _destroyListeners = /*#__PURE__*/new WeakMap();\nvar _selectionBorders = /*#__PURE__*/new WeakMap();\nvar _resetCells = /*#__PURE__*/new WeakSet();\nexport class SelectionManager {\n  constructor(selections) {\n    /**\n     * Resets the elements to their initial state (remove the CSS classes that are added in the\n     * previous render cycle).\n     */\n    _classPrivateMethodInitSpec(this, _resetCells);\n    /**\n     * The overlay's Walkontable instance that are currently processed.\n     *\n     * @type {Walkontable}\n     */\n    _classPrivateFieldInitSpec(this, _activeOverlaysWot, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The Highlight instance that holds Selections instances within it.\n     *\n     * @type {Highlight|null}\n     */\n    _classPrivateFieldInitSpec(this, _selections, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The SelectionScanner allows to scan and collect the cell and header elements that matches\n     * to the coords defined in the selections.\n     *\n     * @type {SelectionScanner}\n     */\n    _classPrivateFieldInitSpec(this, _scanner, {\n      writable: true,\n      value: new SelectionScanner()\n    });\n    /**\n     * The Map tracks applied CSS classes. It's used to reset the elements state to their initial state.\n     *\n     * @type {WeakMap}\n     */\n    _classPrivateFieldInitSpec(this, _appliedClasses, {\n      writable: true,\n      value: new WeakMap()\n    });\n    /**\n     * The Map tracks applied \"destroy\" listeners for Selection instances.\n     *\n     * @type {WeakMap}\n     */\n    _classPrivateFieldInitSpec(this, _destroyListeners, {\n      writable: true,\n      value: new WeakSet()\n    });\n    /**\n     * The Map holds references to Border classes for Selection instances which requires that when\n     * the \"border\" setting is defined.\n     *\n     * @type {Map}\n     */\n    _classPrivateFieldInitSpec(this, _selectionBorders, {\n      writable: true,\n      value: new Map()\n    });\n    _classPrivateFieldSet(this, _selections, selections);\n  }\n\n  /**\n   * Sets the active Walkontable instance.\n   *\n   * @param {Walkontable} activeWot The overlays or master Walkontable instance.\n   * @returns {SelectionManager}\n   */\n  setActiveOverlay(activeWot) {\n    _classPrivateFieldSet(this, _activeOverlaysWot, activeWot);\n    _classPrivateFieldGet(this, _scanner).setActiveOverlay(_classPrivateFieldGet(this, _activeOverlaysWot));\n    if (!_classPrivateFieldGet(this, _appliedClasses).has(_classPrivateFieldGet(this, _activeOverlaysWot))) {\n      _classPrivateFieldGet(this, _appliedClasses).set(_classPrivateFieldGet(this, _activeOverlaysWot), new Set());\n    }\n    return this;\n  }\n\n  /**\n   * Gets the Selection instance of the \"focus\" type.\n   *\n   * @returns {Selection|null}\n   */\n  getFocusSelection() {\n    return _classPrivateFieldGet(this, _selections) !== null ? _classPrivateFieldGet(this, _selections).getFocus() : null;\n  }\n\n  /**\n   * Gets the Selection instance of the \"area\" type.\n   *\n   * @returns {Selection|null}\n   */\n  getAreaSelection() {\n    return _classPrivateFieldGet(this, _selections) !== null ? _classPrivateFieldGet(this, _selections).createLayeredArea() : null;\n  }\n\n  /**\n   * Gets the Border instance associated with Selection instance.\n   *\n   * @param {Selection} selection The selection instance.\n   * @returns {Border|null} Returns the Border instance (new for each overlay Walkontable instance).\n   */\n  getBorderInstance(selection) {\n    if (!selection.settings.border) {\n      return null;\n    }\n    if (_classPrivateFieldGet(this, _selectionBorders).has(selection)) {\n      const borders = _classPrivateFieldGet(this, _selectionBorders).get(selection);\n      if (borders.has(_classPrivateFieldGet(this, _activeOverlaysWot))) {\n        return borders.get(_classPrivateFieldGet(this, _activeOverlaysWot));\n      }\n      const border = new Border(_classPrivateFieldGet(this, _activeOverlaysWot), selection.settings);\n      borders.set(_classPrivateFieldGet(this, _activeOverlaysWot), border);\n      return border;\n    }\n    const border = new Border(_classPrivateFieldGet(this, _activeOverlaysWot), selection.settings);\n    _classPrivateFieldGet(this, _selectionBorders).set(selection, new Map([[_classPrivateFieldGet(this, _activeOverlaysWot), border]]));\n    return border;\n  }\n\n  /**\n   * Gets all Border instances associated with Selection instance for all overlays.\n   *\n   * @param {Selection} selection The selection instance.\n   * @returns {Border[]}\n   */\n  getBorderInstances(selection) {\n    var _classPrivateFieldGet2, _classPrivateFieldGet3;\n    return Array.from((_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _selectionBorders).get(selection)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.values()) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : []);\n  }\n\n  /**\n   * Destroys the Border instance associated with Selection instance.\n   *\n   * @param {Selection} selection The selection instance.\n   */\n  destroyBorders(selection) {\n    _classPrivateFieldGet(this, _selectionBorders).get(selection).forEach(border => border.destroy());\n    _classPrivateFieldGet(this, _selectionBorders).delete(selection);\n  }\n\n  /**\n   * Renders all the selections (add CSS classes to cells and draw borders).\n   *\n   * @param {boolean} fastDraw Indicates the render cycle type (fast/slow).\n   */\n  render(fastDraw) {\n    if (_classPrivateFieldGet(this, _selections) === null) {\n      return;\n    }\n    if (fastDraw) {\n      // there was no rerender, so we need to remove classNames by ourselves\n      _classPrivateMethodGet(this, _resetCells, _resetCells2).call(this);\n    }\n    const selections = Array.from(_classPrivateFieldGet(this, _selections));\n    const classNamesMap = new Map();\n    for (let i = 0; i < selections.length; i++) {\n      const selection = selections[i];\n      const {\n        className,\n        createLayers,\n        selectionType\n      } = selection.settings;\n      if (!_classPrivateFieldGet(this, _destroyListeners).has(selection)) {\n        _classPrivateFieldGet(this, _destroyListeners).add(selection);\n        selection.addLocalHook('destroy', () => this.destroyBorders(selection));\n      }\n      const borderInstance = this.getBorderInstance(selection);\n      if (selection.isEmpty()) {\n        borderInstance === null || borderInstance === void 0 || borderInstance.disappear();\n        continue; // eslint-disable-line no-continue\n      }\n\n      if (className) {\n        const elements = _classPrivateFieldGet(this, _scanner).setActiveSelection(selection).scan();\n        elements.forEach(element => {\n          if (classNamesMap.has(element)) {\n            const classNamesLayers = classNamesMap.get(element);\n            if (classNamesLayers.has(className) && createLayers === true) {\n              classNamesLayers.set(className, classNamesLayers.get(className) + 1);\n            } else {\n              classNamesLayers.set(className, 1);\n            }\n          } else {\n            classNamesMap.set(element, new Map([[className, 1]]));\n          }\n        });\n      }\n      const corners = selection.getCorners();\n      _classPrivateFieldGet(this, _activeOverlaysWot).getSetting('onBeforeDrawBorders', corners, selectionType);\n      borderInstance === null || borderInstance === void 0 || borderInstance.appear(corners);\n    }\n    classNamesMap.forEach((classNamesLayers, element) => {\n      var _classPrivateFieldGet4, _classPrivateFieldGet5;\n      const classNames = Array.from(classNamesLayers).map(_ref => {\n        let [className, occurrenceCount] = _ref;\n        if (occurrenceCount === 1) {\n          return className;\n        }\n        return [className, ...Array.from({\n          length: occurrenceCount - 1\n        }, (_, i) => `${className}-${i + 1}`)];\n      }).flat();\n      classNames.forEach(className => _classPrivateFieldGet(this, _appliedClasses).get(_classPrivateFieldGet(this, _activeOverlaysWot)).add(className));\n      addClass(element, classNames);\n      if (element.nodeName === 'TD' && Array.isArray((_classPrivateFieldGet4 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.cellAttributes)) {\n        setAttribute(element, _classPrivateFieldGet(this, _selections).options.cellAttributes);\n      } else if (element.nodeName === 'TH' && Array.isArray((_classPrivateFieldGet5 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet5 === void 0 ? void 0 : _classPrivateFieldGet5.headerAttributes)) {\n        setAttribute(element, _classPrivateFieldGet(this, _selections).options.headerAttributes);\n      }\n    });\n  }\n}\nfunction _resetCells2() {\n  const appliedOverlaysClasses = _classPrivateFieldGet(this, _appliedClasses).get(_classPrivateFieldGet(this, _activeOverlaysWot));\n  const classesToRemove = _classPrivateFieldGet(this, _activeOverlaysWot).wtSettings.getSetting('onBeforeRemoveCellClassNames');\n  if (Array.isArray(classesToRemove)) {\n    for (let i = 0; i < classesToRemove.length; i++) {\n      appliedOverlaysClasses.add(classesToRemove[i]);\n    }\n  }\n  appliedOverlaysClasses.forEach(className => {\n    var _classPrivateFieldGet6, _classPrivateFieldGet7;\n    const nodes = _classPrivateFieldGet(this, _activeOverlaysWot).wtTable.TABLE.querySelectorAll(`.${className}`);\n    let cellAttributes = [];\n    if (Array.isArray((_classPrivateFieldGet6 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet6 === void 0 ? void 0 : _classPrivateFieldGet6.cellAttributes)) {\n      cellAttributes = _classPrivateFieldGet(this, _selections).options.cellAttributes.map(el => el[0]);\n    }\n    if (Array.isArray((_classPrivateFieldGet7 = _classPrivateFieldGet(this, _selections).options) === null || _classPrivateFieldGet7 === void 0 ? void 0 : _classPrivateFieldGet7.headerAttributes)) {\n      cellAttributes = [...cellAttributes, ..._classPrivateFieldGet(this, _selections).options.headerAttributes.map(el => el[0])];\n    }\n    for (let i = 0, len = nodes.length; i < len; i++) {\n      removeClass(nodes[i], className);\n      removeAttribute(nodes[i], cellAttributes);\n    }\n  });\n  appliedOverlaysClasses.clear();\n}","import \"core-js/modules/es.array.push.js\";\nimport Event from \"../event.mjs\";\nimport Overlays from \"../overlays.mjs\";\nimport Settings from \"../settings.mjs\";\nimport MasterTable from \"../table/master.mjs\";\nimport Viewport from \"../viewport.mjs\";\nimport CoreAbstract from \"./_base.mjs\";\nimport { SelectionManager } from \"../selection/manager.mjs\";\nimport { objectEach } from \"../../../../helpers/object.mjs\";\nimport { addClass, removeClass } from \"../../../../helpers/dom/element.mjs\";\n/**\n * @class Walkontable\n */\nexport default class Walkontable extends CoreAbstract {\n  /**\n   * @param {HTMLTableElement} table Main table.\n   * @param {SettingsPure} settings The Walkontable settings.\n   */\n  constructor(table, settings) {\n    super(table, new Settings(settings));\n    const facadeGetter = this.wtSettings.getSetting('facade', this); // todo rethink. I would like to have no access to facade from the internal scope.\n\n    this.wtTable = new MasterTable(this.getTableDao(), facadeGetter, this.domBindings, this.wtSettings);\n    this.wtViewport = new Viewport(this.getViewportDao(), this.domBindings, this.wtSettings, this.eventManager, this.wtTable);\n    this.selectionManager = new SelectionManager(this.wtSettings.getSetting('selections'));\n    this.wtEvent = new Event(facadeGetter, this.domBindings, this.wtSettings, this.eventManager, this.wtTable, this.selectionManager);\n    this.wtOverlays = new Overlays(\n    // TODO create DAO and remove reference to the Walkontable instance.\n    this, facadeGetter, this.domBindings, this.wtSettings, this.eventManager, this.wtTable);\n    this.exportSettingsAsClassNames();\n    this.findOriginalHeaders();\n  }\n\n  /**\n   * Export settings as class names added to the parent element of the table.\n   */\n  exportSettingsAsClassNames() {\n    const toExport = {\n      rowHeaders: 'htRowHeaders',\n      columnHeaders: 'htColumnHeaders'\n    };\n    const allClassNames = [];\n    const newClassNames = [];\n    objectEach(toExport, (className, key) => {\n      if (this.wtSettings.getSetting(key).length) {\n        newClassNames.push(className);\n      }\n      allClassNames.push(className);\n    });\n    removeClass(this.wtTable.wtRootElement.parentNode, allClassNames);\n    addClass(this.wtTable.wtRootElement.parentNode, newClassNames);\n  }\n\n  /**\n   * @returns {ViewportDao}\n   */\n  getViewportDao() {\n    const wot = this;\n    return {\n      get wot() {\n        return wot;\n      },\n      get topOverlayTrimmingContainer() {\n        return wot.wtOverlays.topOverlay.trimmingContainer;\n      },\n      get inlineStartOverlayTrimmingContainer() {\n        return wot.wtOverlays.inlineStartOverlay.trimmingContainer;\n      },\n      get topScrollPosition() {\n        return wot.wtOverlays.topOverlay.getScrollPosition();\n      },\n      get topParentOffset() {\n        return wot.wtOverlays.topOverlay.getTableParentOffset();\n      },\n      get inlineStartScrollPosition() {\n        return wot.wtOverlays.inlineStartOverlay.getScrollPosition();\n      },\n      get inlineStartParentOffset() {\n        return wot.wtOverlays.inlineStartOverlay.getTableParentOffset();\n      },\n      get topOverlay() {\n        return wot.wtOverlays.topOverlay; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get inlineStartOverlay() {\n        return wot.wtOverlays.inlineStartOverlay; // TODO refactoring: move outside dao, use IOC\n      },\n\n      get bottomOverlay() {\n        return wot.wtOverlays.bottomOverlay; // TODO refactoring: move outside dao, use IOC\n      }\n    };\n  }\n}","import Walkontable from \"../core/core.mjs\";\nimport CoreAbstract from \"../core/_base.mjs\";\n/**\n * This layer cares about backward compatibility.\n *\n * @class WalkontableFacade\n * @augments Walkontable\n * @inheritDoc\n */\nexport default class WalkontableFacade {\n  /**\n   * @param {SettingsPure|Walkontable} settingsOrInstance The Walkontable settings.\n   */\n  constructor(settingsOrInstance) {\n    if (settingsOrInstance instanceof CoreAbstract) {\n      this._wot = settingsOrInstance;\n    } else {\n      this._initFromSettings(settingsOrInstance);\n    }\n  }\n  _initFromSettings(settings) {\n    settings.facade = instance => {\n      const facade = new WalkontableFacade(instance);\n      return () => facade;\n    };\n    this._wot = new Walkontable(settings.table, settings);\n  }\n  get guid() {\n    return this._wot.guid;\n  }\n  get rootDocument() {\n    return this._wot.domBindings.rootDocument;\n  }\n  get rootWindow() {\n    return this._wot.domBindings.rootWindow;\n  }\n  get wtSettings() {\n    return this._wot.wtSettings; // todo create facade\n  }\n\n  get cloneSource() {\n    return this._wot.cloneSource; // todo create facade\n  }\n\n  get cloneOverlay() {\n    return this._wot.cloneOverlay; // todo create facade\n  }\n\n  get selectionManager() {\n    return this._wot.selectionManager; // todo create facade\n  }\n\n  get wtViewport() {\n    return this._wot.wtViewport; // todo create facade\n  }\n\n  get wtOverlays() {\n    return this._wot.wtOverlays; // todo create facade\n  }\n\n  get wtTable() {\n    return this._wot.wtTable; // todo create facade\n  }\n\n  get wtEvent() {\n    return this._wot.wtEvent; // todo create facade\n  }\n\n  get wtScroll() {\n    return this._wot.wtScroll; // todo create facade\n  }\n\n  get drawn() {\n    return this._wot.drawn;\n  }\n  set drawn(value) {\n    this._wot.drawn = value;\n  }\n  get drawInterrupted() {\n    return this._wot.drawInterrupted;\n  }\n  set drawInterrupted(value) {\n    this._wot.drawInterrupted = value;\n  }\n  get lastMouseOver() {\n    return this._wot.lastMouseOver;\n  }\n  set lastMouseOver(value) {\n    this._wot.lastMouseOver = value;\n  }\n  get momentumScrolling() {\n    return this._wot.momentumScrolling;\n  }\n  set momentumScrolling(value) {\n    this._wot.momentumScrolling = value;\n  }\n  get touchApplied() {\n    return this._wot.touchApplied;\n  }\n  set touchApplied(value) {\n    this._wot.touchApplied = value;\n  }\n  get domBindings() {\n    return this._wot.domBindings;\n  }\n  get eventListeners() {\n    return this._wot.eventListeners;\n  }\n  set eventListeners(value) {\n    this._wot.eventListeners = value;\n  }\n  get eventManager() {\n    return this._wot.eventManager;\n  }\n  createCellCoords(row, column) {\n    return this._wot.createCellCoords(row, column);\n  }\n  createCellRange(highlight, from, to) {\n    return this._wot.createCellRange(highlight, from, to);\n  }\n  draw() {\n    let fastDraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this._wot.draw(fastDraw);\n    return this;\n  }\n  getCell(coords) {\n    let topmost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return this._wot.getCell(coords, topmost);\n  }\n  scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {\n    return this._wot.scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft);\n  }\n  scrollViewportHorizontally(column, snapToRight, snapToLeft) {\n    return this._wot.scrollViewportHorizontally(column, snapToRight, snapToLeft);\n  }\n  scrollViewportVertically(row, snapToTop, snapToBottom) {\n    return this._wot.scrollViewportVertically(row, snapToTop, snapToBottom);\n  }\n  getViewport() {\n    return this._wot.getViewport();\n  }\n  getOverlayName() {\n    return this._wot.cloneOverlay ? this._wot.cloneOverlay.type : 'master';\n  }\n  exportSettingsAsClassNames() {\n    return this._wot.exportSettingsAsClassNames();\n  }\n  update(settings, value) {\n    this._wot.wtSettings.update(settings, value);\n    return this;\n  }\n  getSetting(key, param1, param2, param3, param4) {\n    return this._wot.wtSettings.getSetting(key, param1, param2, param3, param4);\n  }\n  hasSetting(key) {\n    return this._wot.wtSettings.hasSetting(key);\n  }\n  destroy() {\n    this._wot.destroy();\n  }\n}","import { isRightClick as isRightClickEvent, isLeftClick as isLeftClickEvent } from \"./../helpers/dom/event.mjs\";\n/**\n * MouseDown handler.\n *\n * @param {object} options The handler options.\n * @param {boolean} options.isShiftKey The flag which indicates if the shift key is pressed.\n * @param {boolean} options.isLeftClick The flag which indicates if the left mouse button is pressed.\n * @param {boolean} options.isRightClick The flag which indicates if the right mouse button is pressed.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function mouseDown(_ref) {\n  let {\n    isShiftKey,\n    isLeftClick,\n    isRightClick,\n    coords,\n    selection,\n    controller,\n    cellCoordsFactory\n  } = _ref;\n  const currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;\n  const selectedCorner = selection.isSelectedByCorner();\n  const selectedRow = selection.isSelectedByRowHeader();\n  if (isShiftKey && currentSelection) {\n    if (coords.row >= 0 && coords.col >= 0 && !controller.cell) {\n      selection.setRangeEnd(coords);\n    } else if ((selectedCorner || selectedRow) && coords.row >= 0 && coords.col >= 0 && !controller.cell) {\n      selection.setRangeEnd(cellCoordsFactory(coords.row, coords.col));\n    } else if (selectedCorner && coords.row < 0 && !controller.column) {\n      selection.setRangeEnd(cellCoordsFactory(currentSelection.to.row, coords.col));\n    } else if (selectedRow && coords.col < 0 && !controller.row) {\n      selection.setRangeEnd(cellCoordsFactory(coords.row, currentSelection.to.col));\n    } else if ((!selectedCorner && !selectedRow && coords.col < 0 || selectedCorner && coords.col < 0) && !controller.row) {\n      selection.selectRows(Math.max(currentSelection.from.row, 0), coords.row, coords.col);\n    } else if ((!selectedCorner && !selectedRow && coords.row < 0 || selectedRow && coords.row < 0) && !controller.column) {\n      selection.selectColumns(Math.max(currentSelection.from.col, 0), coords.col, coords.row);\n    }\n  } else {\n    const allowRightClickSelection = !selection.inInSelection(coords);\n    const performSelection = isLeftClick || isRightClick && allowRightClickSelection;\n\n    // clicked row header and when some column was selected\n    if (coords.row < 0 && coords.col >= 0 && !controller.column) {\n      if (performSelection) {\n        selection.selectColumns(coords.col, coords.col, coords.row);\n      }\n\n      // clicked column header and when some row was selected\n    } else if (coords.col < 0 && coords.row >= 0 && !controller.row) {\n      if (performSelection) {\n        selection.selectRows(coords.row, coords.row, coords.col);\n      }\n    } else if (coords.col >= 0 && coords.row >= 0 && !controller.cell) {\n      if (performSelection) {\n        selection.setRangeStart(coords);\n      }\n    } else if (coords.col < 0 && coords.row < 0) {\n      selection.selectAll(true, true, {\n        disableHeadersHighlight: true,\n        focusPosition: {\n          row: 0,\n          col: 0\n        }\n      });\n    }\n  }\n}\n\n/**\n * MouseOver handler.\n *\n * @param {object} options The handler options.\n * @param {boolean} options.isLeftClick Indicates that event was fired using the left mouse button.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function mouseOver(_ref2) {\n  let {\n    isLeftClick,\n    coords,\n    selection,\n    controller,\n    cellCoordsFactory\n  } = _ref2;\n  if (!isLeftClick) {\n    return;\n  }\n  const selectedRow = selection.isSelectedByRowHeader();\n  const selectedColumn = selection.isSelectedByColumnHeader();\n  const countCols = selection.tableProps.countCols();\n  const countRows = selection.tableProps.countRows();\n  if (selectedColumn && !controller.column) {\n    selection.setRangeEnd(cellCoordsFactory(countRows - 1, coords.col));\n  } else if (selectedRow && !controller.row) {\n    selection.setRangeEnd(cellCoordsFactory(coords.row, countCols - 1));\n  } else if (!controller.cell) {\n    selection.setRangeEnd(coords);\n  }\n}\nconst handlers = new Map([['mousedown', mouseDown], ['mouseover', mouseOver], ['touchstart', mouseDown]]);\n\n/**\n * Mouse handler for selection functionality.\n *\n * @param {Event} event An native event to handle.\n * @param {object} options The handler options.\n * @param {CellRange} options.coords The CellCoords object with defined visual coordinates.\n * @param {Selection} options.selection The Selection class instance.\n * @param {object} options.controller An object with keys `row`, `column`, `cell` which indicate what\n *                                    operation will be performed in later selection stages.\n * @param {Function} options.cellCoordsFactory The function factory for CellCoords objects.\n */\nexport function handleMouseEvent(event, _ref3) {\n  let {\n    coords,\n    selection,\n    controller,\n    cellCoordsFactory\n  } = _ref3;\n  handlers.get(event.type)({\n    coords,\n    selection,\n    controller,\n    cellCoordsFactory,\n    isShiftKey: event.shiftKey,\n    isLeftClick: isLeftClickEvent(event) || event.type === 'touchstart',\n    isRightClick: isRightClickEvent(event)\n  });\n}","export const holder = new WeakMap();\nexport const rootInstanceSymbol = Symbol('rootInstance');\n\n/**\n * Register an object as a root instance.\n *\n * @param  {object} object An object to associate with root instance flag.\n */\nexport function registerAsRootInstance(object) {\n  holder.set(object, true);\n}\n\n/**\n * Check if the source of the root indication call is valid.\n *\n * @param  {symbol} rootSymbol A symbol as a source of truth.\n * @returns {boolean}\n */\nexport function hasValidParameter(rootSymbol) {\n  return rootSymbol === rootInstanceSymbol;\n}\n\n/**\n * Check if passed an object was flagged as a root instance.\n *\n * @param  {object} object An object to check.\n * @returns {boolean}\n */\nexport function isRootInstance(object) {\n  return holder.has(object);\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { addClass, clearTextSelection, empty, fastInnerHTML, fastInnerText, getScrollbarWidth, hasClass, isChildOf, isInput, isOutsideInput, isVisible, setAttribute } from \"./helpers/dom/element.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { isImmediatePropagationStopped, isRightClick, isLeftClick } from \"./helpers/dom/event.mjs\";\nimport Walkontable from \"./3rdparty/walkontable/src/index.mjs\";\nimport { handleMouseEvent } from \"./selection/mouseEventHandler.mjs\";\nimport { isRootInstance } from \"./utils/rootInstance.mjs\";\nimport { A11Y_COLCOUNT, A11Y_MULTISELECTABLE, A11Y_PRESENTATION, A11Y_ROWCOUNT, A11Y_TREEGRID } from \"./helpers/a11y.mjs\";\nconst privatePool = new WeakMap();\n\n/**\n * @class TableView\n * @private\n */\nvar _columnHeadersCount = /*#__PURE__*/new WeakMap();\nvar _rowHeadersCount = /*#__PURE__*/new WeakMap();\nclass TableView {\n  /**\n   * @param {Hanstontable} instance Instance of {@link Handsontable}.\n   */\n  constructor(instance) {\n    /**\n     * Instance of {@link Handsontable}.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    _defineProperty(this, \"instance\", void 0);\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n    _defineProperty(this, \"eventManager\", void 0);\n    /**\n     * Current Handsontable's GridSettings object.\n     *\n     * @private\n     * @type {GridSettings}\n     */\n    _defineProperty(this, \"settings\", void 0);\n    /**\n     * Main <THEAD> element.\n     *\n     * @private\n     * @type {HTMLTableSectionElement}\n     */\n    _defineProperty(this, \"THEAD\", void 0);\n    /**\n     * Main <TBODY> element.\n     *\n     * @private\n     * @type {HTMLTableSectionElement}\n     */\n    _defineProperty(this, \"TBODY\", void 0);\n    /**\n     * Main Walkontable instance.\n     *\n     * @private\n     * @type {Walkontable}\n     */\n    _defineProperty(this, \"_wt\", void 0);\n    /**\n     * Main Walkontable instance.\n     *\n     * @private\n     * @type {Walkontable}\n     */\n    _defineProperty(this, \"activeWt\", void 0);\n    /**\n     * The total number of the column header renderers applied to the table through the\n     * `afterGetColumnHeaderRenderers` hook.\n     *\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _columnHeadersCount, {\n      writable: true,\n      value: 0\n    });\n    /**\n     * The total number of the row header renderers applied to the table through the\n     * `afterGetRowHeaderRenderers` hook.\n     *\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _rowHeadersCount, {\n      writable: true,\n      value: 0\n    });\n    /**\n     * The flag determines if the `adjustElementsSize` method call was made during\n     * the render suspending. If true, the method has to be triggered once after render\n     * resuming.\n     *\n     * @private\n     * @type {boolean}\n     */\n    _defineProperty(this, \"postponedAdjustElementsSize\", false);\n    this.instance = instance;\n    this.eventManager = new EventManager(this.instance);\n    this.settings = this.instance.getSettings();\n    privatePool.set(this, {\n      /**\n       * Defines if the text should be selected during mousemove.\n       *\n       * @private\n       * @type {boolean}\n       */\n      selectionMouseDown: false,\n      /**\n       * @private\n       * @type {boolean}\n       */\n      mouseDown: void 0,\n      /**\n       * Main <TABLE> element.\n       *\n       * @private\n       * @type {HTMLTableElement}\n       */\n      table: void 0,\n      /**\n       * Cached width of the rootElement.\n       *\n       * @type {number}\n       */\n      lastWidth: 0,\n      /**\n       * Cached height of the rootElement.\n       *\n       * @type {number}\n       */\n      lastHeight: 0\n    });\n    this.createElements();\n    this.registerEvents();\n    this.initializeWalkontable();\n  }\n\n  /**\n   * Renders WalkontableUI.\n   */\n  render() {\n    if (!this.instance.isRenderSuspended()) {\n      this.instance.runHooks('beforeRender', this.instance.forceFullRender);\n      if (this.postponedAdjustElementsSize) {\n        this.postponedAdjustElementsSize = false;\n        this.adjustElementsSize(true);\n      }\n      this._wt.draw(!this.instance.forceFullRender);\n      this.instance.runHooks('afterRender', this.instance.forceFullRender);\n      this.instance.forceFullRender = false;\n      this.instance.renderCall = false;\n    }\n  }\n\n  /**\n   * Adjust overlays elements size and master table size.\n   *\n   * @param {boolean} [force=false] When `true`, it adjust the DOM nodes sizes for all overlays.\n   */\n  adjustElementsSize() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.instance.isRenderSuspended()) {\n      this.postponedAdjustElementsSize = true;\n    } else {\n      this._wt.wtOverlays.adjustElementsSize(force);\n    }\n  }\n\n  /**\n   * Returns td object given coordinates.\n   *\n   * @param {CellCoords} coords Renderable cell coordinates.\n   * @param {boolean} topmost Indicates whether the cell should be calculated from the topmost.\n   * @returns {HTMLTableCellElement|null}\n   */\n  getCellAtCoords(coords, topmost) {\n    const td = this._wt.getCell(coords, topmost);\n    if (td < 0) {\n      // there was an exit code (cell is out of bounds)\n      return null;\n    }\n    return td;\n  }\n\n  /**\n   * Scroll viewport to a cell.\n   *\n   * @param {CellCoords} coords Renderable cell coordinates.\n   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right side of the table.\n   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom side of the table.\n   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left side of the table.\n   * @returns {boolean}\n   */\n  scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft) {\n    return this._wt.scrollViewport(coords, snapToTop, snapToRight, snapToBottom, snapToLeft);\n  }\n\n  /**\n   * Scroll viewport to a column.\n   *\n   * @param {number} column Renderable column index.\n   * @param {boolean} [snapToRight] If `true`, viewport is scrolled to show the cell on the right side of the table.\n   * @param {boolean} [snapToLeft] If `true`, viewport is scrolled to show the cell on the left side of the table.\n   * @returns {boolean}\n   */\n  scrollViewportHorizontally(column, snapToRight, snapToLeft) {\n    return this._wt.scrollViewportHorizontally(column, snapToRight, snapToLeft);\n  }\n\n  /**\n   * Scroll viewport to a row.\n   *\n   * @param {number} row Renderable row index.\n   * @param {boolean} [snapToTop] If `true`, viewport is scrolled to show the cell on the top of the table.\n   * @param {boolean} [snapToBottom] If `true`, viewport is scrolled to show the cell on the bottom side of the table.\n   * @returns {boolean}\n   */\n  scrollViewportVertically(row, snapToTop, snapToBottom) {\n    return this._wt.scrollViewportVertically(row, snapToTop, snapToBottom);\n  }\n\n  /**\n   * Prepares DOMElements and adds correct className to the root element.\n   *\n   * @private\n   */\n  createElements() {\n    const priv = privatePool.get(this);\n    const {\n      rootElement,\n      rootDocument\n    } = this.instance;\n    const originalStyle = rootElement.getAttribute('style');\n    if (originalStyle) {\n      rootElement.setAttribute('data-originalstyle', originalStyle); // needed to retrieve original style in jsFiddle link generator in HT examples. may be removed in future versions\n    }\n\n    addClass(rootElement, 'handsontable');\n    priv.table = rootDocument.createElement('TABLE');\n    addClass(priv.table, 'htCore');\n    if (this.instance.getSettings().tableClassName) {\n      addClass(priv.table, this.instance.getSettings().tableClassName);\n    }\n    if (this.settings.ariaTags) {\n      setAttribute(priv.table, [A11Y_PRESENTATION()]);\n      setAttribute(rootElement, [A11Y_TREEGRID(), A11Y_ROWCOUNT(this.instance.countRows()), A11Y_COLCOUNT(this.instance.countCols()), A11Y_MULTISELECTABLE()]);\n    }\n    this.THEAD = rootDocument.createElement('THEAD');\n    priv.table.appendChild(this.THEAD);\n    this.TBODY = rootDocument.createElement('TBODY');\n    priv.table.appendChild(this.TBODY);\n    this.instance.table = priv.table;\n    this.instance.container.insertBefore(priv.table, this.instance.container.firstChild);\n  }\n\n  /**\n   * Attaches necessary listeners.\n   *\n   * @private\n   */\n  registerEvents() {\n    const priv = privatePool.get(this);\n    const {\n      rootElement,\n      rootDocument,\n      selection\n    } = this.instance;\n    const documentElement = rootDocument.documentElement;\n    this.eventManager.addEventListener(rootElement, 'mousedown', event => {\n      priv.selectionMouseDown = true;\n      if (!this.isTextSelectionAllowed(event.target)) {\n        const {\n          rootWindow\n        } = this.instance;\n        clearTextSelection(rootWindow);\n        event.preventDefault();\n        rootWindow.focus(); // make sure that window that contains HOT is active. Important when HOT is in iframe.\n      }\n    });\n\n    this.eventManager.addEventListener(rootElement, 'mouseup', () => {\n      priv.selectionMouseDown = false;\n    });\n    this.eventManager.addEventListener(rootElement, 'mousemove', event => {\n      if (priv.selectionMouseDown && !this.isTextSelectionAllowed(event.target)) {\n        // Clear selection only when fragmentSelection is enabled, otherwise clearing selection breaks the IME editor.\n        if (this.settings.fragmentSelection) {\n          clearTextSelection(this.instance.rootWindow);\n        }\n        event.preventDefault();\n      }\n    });\n    this.eventManager.addEventListener(documentElement, 'keyup', event => {\n      // TODO: is it the best place and way to finish cell selection?\n      if (selection.isInProgress() && !event.shiftKey) {\n        selection.finish();\n      }\n    });\n    this.eventManager.addEventListener(documentElement, 'mouseup', event => {\n      if (selection.isInProgress() && isLeftClick(event)) {\n        selection.finish();\n      }\n      priv.mouseDown = false;\n      const isOutsideInputElement = isOutsideInput(rootDocument.activeElement);\n      if (!isOutsideInputElement) {\n        return;\n      }\n      if (isOutsideInputElement || !selection.isSelected() && !selection.isSelectedByAnyHeader() && !rootElement.contains(event.target) && !isRightClick(event)) {\n        this.instance.unlisten();\n      }\n    });\n    this.eventManager.addEventListener(documentElement, 'contextmenu', event => {\n      if (selection.isInProgress() && isRightClick(event)) {\n        selection.finish();\n        priv.mouseDown = false;\n      }\n    });\n    this.eventManager.addEventListener(documentElement, 'touchend', () => {\n      if (selection.isInProgress()) {\n        selection.finish();\n      }\n      priv.mouseDown = false;\n    });\n    this.eventManager.addEventListener(documentElement, 'mousedown', event => {\n      const originalTarget = event.target;\n      const eventX = event.x || event.clientX;\n      const eventY = event.y || event.clientY;\n      let next = event.target;\n      if (priv.mouseDown || !rootElement || !this.instance.view) {\n        return; // it must have been started in a cell\n      }\n\n      // immediate click on \"holder\" means click on the right side of vertical scrollbar\n      const {\n        holder\n      } = this.instance.view._wt.wtTable;\n      if (next === holder) {\n        const scrollbarWidth = getScrollbarWidth(rootDocument);\n        if (rootDocument.elementFromPoint(eventX + scrollbarWidth, eventY) !== holder || rootDocument.elementFromPoint(eventX, eventY + scrollbarWidth) !== holder) {\n          return;\n        }\n      } else {\n        while (next !== documentElement) {\n          if (next === null) {\n            if (event.isTargetWebComponent) {\n              break;\n            }\n\n            // click on something that was a row but now is detached (possibly because your click triggered a rerender)\n            return;\n          }\n          if (next === rootElement) {\n            // click inside container\n            return;\n          }\n          next = next.parentNode;\n        }\n      }\n\n      // function did not return until here, we have an outside click!\n      const outsideClickDeselects = typeof this.settings.outsideClickDeselects === 'function' ? this.settings.outsideClickDeselects(originalTarget) : this.settings.outsideClickDeselects;\n      if (outsideClickDeselects) {\n        this.instance.deselectCell();\n      } else {\n        this.instance.destroyEditor(false, false);\n      }\n    });\n    this.eventManager.addEventListener(priv.table, 'selectstart', event => {\n      if (this.settings.fragmentSelection || isInput(event.target)) {\n        return;\n      }\n      // https://github.com/handsontable/handsontable/issues/160\n      // Prevent text from being selected when performing drag down.\n      event.preventDefault();\n    });\n  }\n\n  /**\n   * Translate renderable cell coordinates to visual coordinates.\n   *\n   * @param {CellCoords} coords The cell coordinates.\n   * @returns {CellCoords}\n   */\n  translateFromRenderableToVisualCoords(_ref) {\n    let {\n      row,\n      col\n    } = _ref;\n    // TODO: To consider an idea to reusing the CellCoords instance instead creating new one.\n    return this.instance._createCellCoords(...this.translateFromRenderableToVisualIndex(row, col));\n  }\n\n  /**\n   * Translate renderable row and column indexes to visual row and column indexes.\n   *\n   * @param {number} renderableRow Renderable row index.\n   * @param {number} renderableColumn Renderable columnIndex.\n   * @returns {number[]}\n   */\n  translateFromRenderableToVisualIndex(renderableRow, renderableColumn) {\n    // TODO: Some helper may be needed.\n    // We perform translation for indexes (without headers).\n    let visualRow = renderableRow >= 0 ? this.instance.rowIndexMapper.getVisualFromRenderableIndex(renderableRow) : renderableRow;\n    let visualColumn = renderableColumn >= 0 ? this.instance.columnIndexMapper.getVisualFromRenderableIndex(renderableColumn) : renderableColumn;\n    if (visualRow === null) {\n      visualRow = renderableRow;\n    }\n    if (visualColumn === null) {\n      visualColumn = renderableColumn;\n    }\n    return [visualRow, visualColumn];\n  }\n\n  /**\n   * Returns the number of renderable indexes.\n   *\n   * @private\n   * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.\n   * @param {number} maxElements Maximum number of elements (rows or columns).\n   *\n   * @returns {number|*}\n   */\n  countRenderableIndexes(indexMapper, maxElements) {\n    const consideredElements = Math.min(indexMapper.getNotTrimmedIndexesLength(), maxElements);\n    // Don't take hidden indexes into account. We are looking just for renderable indexes.\n    const firstNotHiddenIndex = indexMapper.getNearestNotHiddenIndex(consideredElements - 1, -1);\n\n    // There are no renderable indexes.\n    if (firstNotHiddenIndex === null) {\n      return 0;\n    }\n    return indexMapper.getRenderableFromVisualIndex(firstNotHiddenIndex) + 1;\n  }\n\n  /**\n   * Returns the number of renderable columns.\n   *\n   * @returns {number}\n   */\n  countRenderableColumns() {\n    return this.countRenderableIndexes(this.instance.columnIndexMapper, this.settings.maxCols);\n  }\n\n  /**\n   * Returns the number of renderable rows.\n   *\n   * @returns {number}\n   */\n  countRenderableRows() {\n    return this.countRenderableIndexes(this.instance.rowIndexMapper, this.settings.maxRows);\n  }\n\n  /**\n   * Returns number of not hidden row indexes counting from the passed starting index.\n   * The counting direction can be controlled by `incrementBy` argument.\n   *\n   * @param {number} visualIndex The visual index from which the counting begins.\n   * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.\n   * @returns {number}\n   */\n  countNotHiddenRowIndexes(visualIndex, incrementBy) {\n    return this.countNotHiddenIndexes(visualIndex, incrementBy, this.instance.rowIndexMapper, this.countRenderableRows());\n  }\n\n  /**\n   * Returns number of not hidden column indexes counting from the passed starting index.\n   * The counting direction can be controlled by `incrementBy` argument.\n   *\n   * @param {number} visualIndex The visual index from which the counting begins.\n   * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.\n   * @returns {number}\n   */\n  countNotHiddenColumnIndexes(visualIndex, incrementBy) {\n    return this.countNotHiddenIndexes(visualIndex, incrementBy, this.instance.columnIndexMapper, this.countRenderableColumns());\n  }\n\n  /**\n   * Returns number of not hidden indexes counting from the passed starting index.\n   * The counting direction can be controlled by `incrementBy` argument.\n   *\n   * @param {number} visualIndex The visual index from which the counting begins.\n   * @param {number} incrementBy If `-1` then counting is backwards or forward when `1`.\n   * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.\n   * @param {number} renderableIndexesCount Total count of renderable indexes for specific axis.\n   * @returns {number}\n   */\n  countNotHiddenIndexes(visualIndex, incrementBy, indexMapper, renderableIndexesCount) {\n    if (isNaN(visualIndex) || visualIndex < 0) {\n      return 0;\n    }\n    const firstVisibleIndex = indexMapper.getNearestNotHiddenIndex(visualIndex, incrementBy);\n    const renderableIndex = indexMapper.getRenderableFromVisualIndex(firstVisibleIndex);\n    if (!Number.isInteger(renderableIndex)) {\n      return 0;\n    }\n    let notHiddenIndexes = 0;\n    if (incrementBy < 0) {\n      // Zero-based numbering for renderable indexes corresponds to a number of not hidden indexes.\n      notHiddenIndexes = renderableIndex + 1;\n    } else if (incrementBy > 0) {\n      notHiddenIndexes = renderableIndexesCount - renderableIndex;\n    }\n    return notHiddenIndexes;\n  }\n\n  /**\n   * The function returns the number of not hidden column indexes that fit between the first and\n   * last fixed column in the left (or right in RTL mode) overlay.\n   *\n   * @returns {number}\n   */\n  countNotHiddenFixedColumnsStart() {\n    const countCols = this.instance.countCols();\n    const visualFixedColumnsStart = Math.min(parseInt(this.settings.fixedColumnsStart, 10), countCols) - 1;\n    return this.countNotHiddenColumnIndexes(visualFixedColumnsStart, -1);\n  }\n\n  /**\n   * The function returns the number of not hidden row indexes that fit between the first and\n   * last fixed row in the top overlay.\n   *\n   * @returns {number}\n   */\n  countNotHiddenFixedRowsTop() {\n    const countRows = this.instance.countRows();\n    const visualFixedRowsTop = Math.min(parseInt(this.settings.fixedRowsTop, 10), countRows) - 1;\n    return this.countNotHiddenRowIndexes(visualFixedRowsTop, -1);\n  }\n\n  /**\n   * The function returns the number of not hidden row indexes that fit between the first and\n   * last fixed row in the bottom overlay.\n   *\n   * @returns {number}\n   */\n  countNotHiddenFixedRowsBottom() {\n    const countRows = this.instance.countRows();\n    const visualFixedRowsBottom = Math.max(countRows - parseInt(this.settings.fixedRowsBottom, 10), 0);\n    return this.countNotHiddenRowIndexes(visualFixedRowsBottom, 1);\n  }\n\n  /**\n   * The function returns the number of renderable column indexes within the passed range of the visual indexes.\n   *\n   * @param {number} columnStart The column visual start index.\n   * @param {number} columnEnd The column visual end index.\n   * @returns {number}\n   */\n  countRenderableColumnsInRange(columnStart, columnEnd) {\n    let count = 0;\n    for (let column = columnStart; column <= columnEnd; column++) {\n      if (this.instance.columnIndexMapper.getRenderableFromVisualIndex(column) !== null) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * The function returns the number of renderable row indexes within the passed range of the visual indexes.\n   *\n   * @param {number} rowStart The row visual start index.\n   * @param {number} rowEnd The row visual end index.\n   * @returns {number}\n   */\n  countRenderableRowsInRange(rowStart, rowEnd) {\n    let count = 0;\n    for (let row = rowStart; row <= rowEnd; row++) {\n      if (this.instance.rowIndexMapper.getRenderableFromVisualIndex(row) !== null) {\n        count += 1;\n      }\n    }\n    return count;\n  }\n\n  /**\n   * Checks if at least one cell than belongs to the main table is not covered by the top, left or\n   * bottom overlay.\n   *\n   * @returns {boolean}\n   */\n  isMainTableNotFullyCoveredByOverlays() {\n    const fixedAllRows = this.countNotHiddenFixedRowsTop() + this.countNotHiddenFixedRowsBottom();\n    const fixedAllColumns = this.countNotHiddenFixedColumnsStart();\n    return this.instance.countRenderedRows() > fixedAllRows && this.instance.countRenderedCols() > fixedAllColumns;\n  }\n\n  /**\n   * Defines default configuration and initializes WalkOnTable instance.\n   *\n   * @private\n   */\n  initializeWalkontable() {\n    const priv = privatePool.get(this);\n    const walkontableConfig = {\n      ariaTags: this.settings.ariaTags,\n      rtlMode: this.instance.isRtl(),\n      externalRowCalculator: this.instance.getPlugin('autoRowSize') && this.instance.getPlugin('autoRowSize').isEnabled(),\n      table: priv.table,\n      isDataViewInstance: () => isRootInstance(this.instance),\n      preventOverflow: () => this.settings.preventOverflow,\n      preventWheel: () => this.settings.preventWheel,\n      stretchH: () => this.settings.stretchH,\n      data: (renderableRow, renderableColumn) => {\n        return this.instance.getDataAtCell(...this.translateFromRenderableToVisualIndex(renderableRow, renderableColumn));\n      },\n      totalRows: () => this.countRenderableRows(),\n      totalColumns: () => this.countRenderableColumns(),\n      // Number of renderable columns for the left overlay.\n      fixedColumnsStart: () => this.countNotHiddenFixedColumnsStart(),\n      // Number of renderable rows for the top overlay.\n      fixedRowsTop: () => this.countNotHiddenFixedRowsTop(),\n      // Number of renderable rows for the bottom overlay.\n      fixedRowsBottom: () => this.countNotHiddenFixedRowsBottom(),\n      // Enable the inline start overlay when conditions are met.\n      shouldRenderInlineStartOverlay: () => {\n        return this.settings.fixedColumnsStart > 0 || walkontableConfig.rowHeaders().length > 0;\n      },\n      // Enable the top overlay when conditions are met.\n      shouldRenderTopOverlay: () => {\n        return this.settings.fixedRowsTop > 0 || walkontableConfig.columnHeaders().length > 0;\n      },\n      // Enable the bottom overlay when conditions are met.\n      shouldRenderBottomOverlay: () => {\n        return this.settings.fixedRowsBottom > 0;\n      },\n      minSpareRows: () => this.settings.minSpareRows,\n      renderAllRows: this.settings.renderAllRows,\n      rowHeaders: () => {\n        const headerRenderers = [];\n        if (this.instance.hasRowHeaders()) {\n          headerRenderers.push((renderableRowIndex, TH) => {\n            // TODO: Some helper may be needed.\n            // We perform translation for row indexes (without row headers).\n            const visualRowIndex = renderableRowIndex >= 0 ? this.instance.rowIndexMapper.getVisualFromRenderableIndex(renderableRowIndex) : renderableRowIndex;\n            this.appendRowHeader(visualRowIndex, TH);\n          });\n        }\n        this.instance.runHooks('afterGetRowHeaderRenderers', headerRenderers);\n        _classPrivateFieldSet(this, _rowHeadersCount, headerRenderers.length);\n        return headerRenderers;\n      },\n      columnHeaders: () => {\n        const headerRenderers = [];\n        if (this.instance.hasColHeaders()) {\n          headerRenderers.push((renderedColumnIndex, TH) => {\n            // TODO: Some helper may be needed.\n            // We perform translation for columns indexes (without column headers).\n            const visualColumnsIndex = renderedColumnIndex >= 0 ? this.instance.columnIndexMapper.getVisualFromRenderableIndex(renderedColumnIndex) : renderedColumnIndex;\n            this.appendColHeader(visualColumnsIndex, TH);\n          });\n        }\n        this.instance.runHooks('afterGetColumnHeaderRenderers', headerRenderers);\n        _classPrivateFieldSet(this, _columnHeadersCount, headerRenderers.length);\n        return headerRenderers;\n      },\n      columnWidth: renderedColumnIndex => {\n        const visualIndex = this.instance.columnIndexMapper.getVisualFromRenderableIndex(renderedColumnIndex);\n\n        // It's not a bug that we can't find visual index for some handled by method indexes. The function is called also\n        // for indexes that are not displayed (indexes that are beyond the grid's boundaries), i.e. when `fixedColumnsStart` > `startCols` (wrong config?) or\n        // scrolling and dataset is empty (scroll should handle that?).\n        return this.instance.getColWidth(visualIndex === null ? renderedColumnIndex : visualIndex);\n      },\n      rowHeight: renderedRowIndex => {\n        const visualIndex = this.instance.rowIndexMapper.getVisualFromRenderableIndex(renderedRowIndex);\n        return this.instance.getRowHeight(visualIndex === null ? renderedRowIndex : visualIndex);\n      },\n      cellRenderer: (renderedRowIndex, renderedColumnIndex, TD) => {\n        const [visualRowIndex, visualColumnIndex] = this.translateFromRenderableToVisualIndex(renderedRowIndex, renderedColumnIndex);\n\n        // Coords may be modified. For example, by the `MergeCells` plugin. It should affect cell value and cell meta.\n        const modifiedCellCoords = this.instance.runHooks('modifyGetCellCoords', visualRowIndex, visualColumnIndex);\n        let visualRowToCheck = visualRowIndex;\n        let visualColumnToCheck = visualColumnIndex;\n        if (Array.isArray(modifiedCellCoords)) {\n          [visualRowToCheck, visualColumnToCheck] = modifiedCellCoords;\n        }\n        const cellProperties = this.instance.getCellMeta(visualRowToCheck, visualColumnToCheck);\n        const prop = this.instance.colToProp(visualColumnToCheck);\n        let value = this.instance.getDataAtRowProp(visualRowToCheck, prop);\n        if (this.instance.hasHook('beforeValueRender')) {\n          value = this.instance.runHooks('beforeValueRender', value, cellProperties);\n        }\n        this.instance.runHooks('beforeRenderer', TD, visualRowIndex, visualColumnIndex, prop, value, cellProperties);\n        this.instance.getCellRenderer(cellProperties)(this.instance, TD, visualRowIndex, visualColumnIndex, prop, value, cellProperties);\n        this.instance.runHooks('afterRenderer', TD, visualRowIndex, visualColumnIndex, prop, value, cellProperties);\n      },\n      selections: this.instance.selection.highlight,\n      hideBorderOnMouseDownOver: () => this.settings.fragmentSelection,\n      onWindowResize: () => {\n        if (this.instance && !this.instance.isDestroyed) {\n          this.instance.refreshDimensions();\n        }\n      },\n      onContainerElementResize: () => {\n        if (this.instance && !this.instance.isDestroyed && isVisible(this.instance.rootElement)) {\n          this.instance.refreshDimensions();\n        }\n      },\n      onCellMouseDown: (event, coords, TD, wt) => {\n        const visualCoords = this.translateFromRenderableToVisualCoords(coords);\n        const controller = {\n          row: false,\n          column: false,\n          cell: false\n        };\n        this.instance.listen();\n        this.activeWt = wt;\n        priv.mouseDown = true;\n        this.instance.runHooks('beforeOnCellMouseDown', event, visualCoords, TD, controller);\n        if (isImmediatePropagationStopped(event)) {\n          return;\n        }\n        handleMouseEvent(event, {\n          coords: visualCoords,\n          selection: this.instance.selection,\n          controller,\n          cellCoordsFactory: (row, column) => this.instance._createCellCoords(row, column)\n        });\n        this.instance.runHooks('afterOnCellMouseDown', event, visualCoords, TD);\n        this.activeWt = this._wt;\n      },\n      onCellContextMenu: (event, coords, TD, wt) => {\n        const visualCoords = this.translateFromRenderableToVisualCoords(coords);\n        this.activeWt = wt;\n        priv.mouseDown = false;\n        if (this.instance.selection.isInProgress()) {\n          this.instance.selection.finish();\n        }\n        this.instance.runHooks('beforeOnCellContextMenu', event, visualCoords, TD);\n        if (isImmediatePropagationStopped(event)) {\n          return;\n        }\n        this.instance.runHooks('afterOnCellContextMenu', event, visualCoords, TD);\n        this.activeWt = this._wt;\n      },\n      onCellMouseOut: (event, coords, TD, wt) => {\n        const visualCoords = this.translateFromRenderableToVisualCoords(coords);\n        this.activeWt = wt;\n        this.instance.runHooks('beforeOnCellMouseOut', event, visualCoords, TD);\n        if (isImmediatePropagationStopped(event)) {\n          return;\n        }\n        this.instance.runHooks('afterOnCellMouseOut', event, visualCoords, TD);\n        this.activeWt = this._wt;\n      },\n      onCellMouseOver: (event, coords, TD, wt) => {\n        const visualCoords = this.translateFromRenderableToVisualCoords(coords);\n        const controller = {\n          row: false,\n          column: false,\n          cell: false\n        };\n        this.activeWt = wt;\n        this.instance.runHooks('beforeOnCellMouseOver', event, visualCoords, TD, controller);\n        if (isImmediatePropagationStopped(event)) {\n          return;\n        }\n        if (priv.mouseDown) {\n          handleMouseEvent(event, {\n            coords: visualCoords,\n            selection: this.instance.selection,\n            controller,\n            cellCoordsFactory: (row, column) => this.instance._createCellCoords(row, column)\n          });\n        }\n        this.instance.runHooks('afterOnCellMouseOver', event, visualCoords, TD);\n        this.activeWt = this._wt;\n      },\n      onCellMouseUp: (event, coords, TD, wt) => {\n        const visualCoords = this.translateFromRenderableToVisualCoords(coords);\n        this.activeWt = wt;\n        this.instance.runHooks('beforeOnCellMouseUp', event, visualCoords, TD);\n\n        // TODO: The second condition check is a workaround. Callback corresponding the method `updateSettings`\n        // disable plugin and enable it again. Disabling plugin closes the menu. Thus, calling the\n        // `updateSettings` in a body of any callback executed right after some context-menu action\n        // breaks the table (#7231).\n        if (isImmediatePropagationStopped(event) || this.instance.isDestroyed) {\n          return;\n        }\n        this.instance.runHooks('afterOnCellMouseUp', event, visualCoords, TD);\n        this.activeWt = this._wt;\n      },\n      onCellCornerMouseDown: event => {\n        event.preventDefault();\n        this.instance.runHooks('afterOnCellCornerMouseDown', event);\n      },\n      onCellCornerDblClick: event => {\n        event.preventDefault();\n        this.instance.runHooks('afterOnCellCornerDblClick', event);\n      },\n      beforeDraw: (force, skipRender) => this.beforeRender(force, skipRender),\n      onDraw: force => this.afterRender(force),\n      onBeforeViewportScrollVertically: renderableRow => {\n        const rowMapper = this.instance.rowIndexMapper;\n        const areColumnHeadersSelected = renderableRow < 0;\n        let visualRow = renderableRow;\n        if (!areColumnHeadersSelected) {\n          visualRow = rowMapper.getVisualFromRenderableIndex(renderableRow);\n\n          // for an empty data return index as is\n          if (visualRow === null) {\n            return renderableRow;\n          }\n        }\n        visualRow = this.instance.runHooks('beforeViewportScrollVertically', visualRow);\n        this.instance.runHooks('beforeViewportScroll');\n        if (!areColumnHeadersSelected) {\n          return rowMapper.getRenderableFromVisualIndex(visualRow);\n        }\n        return visualRow;\n      },\n      onBeforeViewportScrollHorizontally: renderableColumn => {\n        const columnMapper = this.instance.columnIndexMapper;\n        const areRowHeadersSelected = renderableColumn < 0;\n        let visualColumn = renderableColumn;\n        if (!areRowHeadersSelected) {\n          visualColumn = columnMapper.getVisualFromRenderableIndex(renderableColumn);\n\n          // for an empty data return index as is\n          if (visualColumn === null) {\n            return renderableColumn;\n          }\n        }\n        visualColumn = this.instance.runHooks('beforeViewportScrollHorizontally', visualColumn);\n        this.instance.runHooks('beforeViewportScroll');\n        if (!areRowHeadersSelected) {\n          return columnMapper.getRenderableFromVisualIndex(visualColumn);\n        }\n        return visualColumn;\n      },\n      onScrollVertically: () => {\n        this.instance.runHooks('afterScrollVertically');\n        this.instance.runHooks('afterScroll');\n      },\n      onScrollHorizontally: () => {\n        this.instance.runHooks('afterScrollHorizontally');\n        this.instance.runHooks('afterScroll');\n      },\n      onBeforeRemoveCellClassNames: () => this.instance.runHooks('beforeRemoveCellClassNames'),\n      onBeforeHighlightingRowHeader: (renderableRow, headerLevel, highlightMeta) => {\n        const rowMapper = this.instance.rowIndexMapper;\n        const areColumnHeadersSelected = renderableRow < 0;\n        let visualRow = renderableRow;\n        if (!areColumnHeadersSelected) {\n          visualRow = rowMapper.getVisualFromRenderableIndex(renderableRow);\n        }\n        const newVisualRow = this.instance.runHooks('beforeHighlightingRowHeader', visualRow, headerLevel, highlightMeta);\n        if (!areColumnHeadersSelected) {\n          return rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(newVisualRow, 1));\n        }\n        return newVisualRow;\n      },\n      onBeforeHighlightingColumnHeader: (renderableColumn, headerLevel, highlightMeta) => {\n        const columnMapper = this.instance.columnIndexMapper;\n        const areRowHeadersSelected = renderableColumn < 0;\n        let visualColumn = renderableColumn;\n        if (!areRowHeadersSelected) {\n          visualColumn = columnMapper.getVisualFromRenderableIndex(renderableColumn);\n        }\n        const newVisualColumn = this.instance.runHooks('beforeHighlightingColumnHeader', visualColumn, headerLevel, highlightMeta);\n        if (!areRowHeadersSelected) {\n          return columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(newVisualColumn, 1));\n        }\n        return newVisualColumn;\n      },\n      onAfterDrawSelection: (currentRow, currentColumn, layerLevel) => {\n        let cornersOfSelection;\n        const [visualRowIndex, visualColumnIndex] = this.translateFromRenderableToVisualIndex(currentRow, currentColumn);\n        const selectedRange = this.instance.selection.getSelectedRange();\n        const selectionRangeSize = selectedRange.size();\n        if (selectionRangeSize > 0) {\n          const selectionForLayer = selectedRange.peekByIndex(layerLevel !== null && layerLevel !== void 0 ? layerLevel : 0);\n          cornersOfSelection = [selectionForLayer.from.row, selectionForLayer.from.col, selectionForLayer.to.row, selectionForLayer.to.col];\n        }\n        return this.instance.runHooks('afterDrawSelection', visualRowIndex, visualColumnIndex, cornersOfSelection, layerLevel);\n      },\n      onBeforeDrawBorders: (corners, borderClassName) => {\n        const [startRenderableRow, startRenderableColumn, endRenderableRow, endRenderableColumn] = corners;\n        const visualCorners = [this.instance.rowIndexMapper.getVisualFromRenderableIndex(startRenderableRow), this.instance.columnIndexMapper.getVisualFromRenderableIndex(startRenderableColumn), this.instance.rowIndexMapper.getVisualFromRenderableIndex(endRenderableRow), this.instance.columnIndexMapper.getVisualFromRenderableIndex(endRenderableColumn)];\n        return this.instance.runHooks('beforeDrawBorders', visualCorners, borderClassName);\n      },\n      onBeforeTouchScroll: () => this.instance.runHooks('beforeTouchScroll'),\n      onAfterMomentumScroll: () => this.instance.runHooks('afterMomentumScroll'),\n      onBeforeStretchingColumnWidth: (stretchedWidth, renderedColumnIndex) => {\n        const visualColumnIndex = this.instance.columnIndexMapper.getVisualFromRenderableIndex(renderedColumnIndex);\n        return this.instance.runHooks('beforeStretchingColumnWidth', stretchedWidth, visualColumnIndex);\n      },\n      onModifyRowHeaderWidth: rowHeaderWidth => this.instance.runHooks('modifyRowHeaderWidth', rowHeaderWidth),\n      onModifyGetCellCoords: (renderableRowIndex, renderableColumnIndex, topmost) => {\n        const rowMapper = this.instance.rowIndexMapper;\n        const columnMapper = this.instance.columnIndexMapper;\n\n        // Callback handle also headers. We shouldn't translate them.\n        const visualColumnIndex = renderableColumnIndex >= 0 ? columnMapper.getVisualFromRenderableIndex(renderableColumnIndex) : renderableColumnIndex;\n        const visualRowIndex = renderableRowIndex >= 0 ? rowMapper.getVisualFromRenderableIndex(renderableRowIndex) : renderableRowIndex;\n        const visualIndexes = this.instance.runHooks('modifyGetCellCoords', visualRowIndex, visualColumnIndex, topmost);\n        if (Array.isArray(visualIndexes)) {\n          const [visualRowFrom, visualColumnFrom, visualRowTo, visualColumnTo] = visualIndexes;\n\n          // Result of the hook is handled by the Walkontable (renderable indexes).\n          return [visualRowFrom >= 0 ? rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(visualRowFrom, 1)) : visualRowFrom, visualColumnFrom >= 0 ? columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(visualColumnFrom, 1)) : visualColumnFrom, visualRowTo >= 0 ? rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(visualRowTo, -1)) : visualRowTo, visualColumnTo >= 0 ? columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(visualColumnTo, -1)) : visualColumnTo];\n        }\n      },\n      viewportRowCalculatorOverride: calc => {\n        let viewportOffset = this.settings.viewportRowRenderingOffset;\n        if (viewportOffset === 'auto' && this.settings.fixedRowsTop) {\n          viewportOffset = 10;\n        }\n        if (viewportOffset > 0 || viewportOffset === 'auto') {\n          const renderableRows = this.countRenderableRows();\n          const firstRenderedRow = calc.startRow;\n          const lastRenderedRow = calc.endRow;\n          if (typeof viewportOffset === 'number') {\n            calc.startRow = Math.max(firstRenderedRow - viewportOffset, 0);\n            calc.endRow = Math.min(lastRenderedRow + viewportOffset, renderableRows - 1);\n          } else if (viewportOffset === 'auto') {\n            const offset = Math.ceil(lastRenderedRow / renderableRows * 12);\n            calc.startRow = Math.max(firstRenderedRow - offset, 0);\n            calc.endRow = Math.min(lastRenderedRow + offset, renderableRows - 1);\n          }\n        }\n        this.instance.runHooks('afterViewportRowCalculatorOverride', calc);\n      },\n      viewportColumnCalculatorOverride: calc => {\n        let viewportOffset = this.settings.viewportColumnRenderingOffset;\n        if (viewportOffset === 'auto' && this.settings.fixedColumnsStart) {\n          viewportOffset = 10;\n        }\n        if (viewportOffset > 0 || viewportOffset === 'auto') {\n          const renderableColumns = this.countRenderableColumns();\n          const firstRenderedColumn = calc.startColumn;\n          const lastRenderedColumn = calc.endColumn;\n          if (typeof viewportOffset === 'number') {\n            calc.startColumn = Math.max(firstRenderedColumn - viewportOffset, 0);\n            calc.endColumn = Math.min(lastRenderedColumn + viewportOffset, renderableColumns - 1);\n          }\n          if (viewportOffset === 'auto') {\n            const offset = Math.ceil(lastRenderedColumn / renderableColumns * 6);\n            calc.startColumn = Math.max(firstRenderedColumn - offset, 0);\n            calc.endColumn = Math.min(lastRenderedColumn + offset, renderableColumns - 1);\n          }\n        }\n        this.instance.runHooks('afterViewportColumnCalculatorOverride', calc);\n      },\n      rowHeaderWidth: () => this.settings.rowHeaderWidth,\n      columnHeaderHeight: () => {\n        const columnHeaderHeight = this.instance.runHooks('modifyColumnHeaderHeight');\n        return this.settings.columnHeaderHeight || columnHeaderHeight;\n      }\n    };\n    this.instance.runHooks('beforeInitWalkontable', walkontableConfig);\n    this._wt = new Walkontable(walkontableConfig);\n    this.activeWt = this._wt;\n    const spreader = this._wt.wtTable.spreader;\n    // We have to cache width and height after Walkontable initialization.\n    const {\n      width,\n      height\n    } = this.instance.rootElement.getBoundingClientRect();\n    this.setLastSize(width, height);\n    this.eventManager.addEventListener(spreader, 'mousedown', event => {\n      // right mouse button exactly on spreader means right click on the right hand side of vertical scrollbar\n      if (event.target === spreader && event.which === 3) {\n        event.stopPropagation();\n      }\n    });\n    this.eventManager.addEventListener(spreader, 'contextmenu', event => {\n      // right mouse button exactly on spreader means right click on the right hand side of vertical scrollbar\n      if (event.target === spreader && event.which === 3) {\n        event.stopPropagation();\n      }\n    });\n    this.eventManager.addEventListener(this.instance.rootDocument.documentElement, 'click', () => {\n      if (this.settings.observeDOMVisibility) {\n        if (this._wt.drawInterrupted) {\n          this.instance.forceFullRender = true;\n          this.render();\n        }\n      }\n    });\n  }\n\n  /**\n   * Checks if it's possible to create text selection in element.\n   *\n   * @private\n   * @param {HTMLElement} el The element to check.\n   * @returns {boolean}\n   */\n  isTextSelectionAllowed(el) {\n    if (isInput(el)) {\n      return true;\n    }\n    const isChildOfTableBody = isChildOf(el, this.instance.view._wt.wtTable.spreader);\n    if (this.settings.fragmentSelection === true && isChildOfTableBody) {\n      return true;\n    }\n    if (this.settings.fragmentSelection === 'cell' && this.isSelectedOnlyCell() && isChildOfTableBody) {\n      return true;\n    }\n    if (!this.settings.fragmentSelection && this.isCellEdited() && this.isSelectedOnlyCell()) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Checks if user's been called mousedown.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  isMouseDown() {\n    return privatePool.get(this).mouseDown;\n  }\n\n  /**\n   * Check if selected only one cell.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  isSelectedOnlyCell() {\n    var _this$instance$getSel, _this$instance$getSel2;\n    return (_this$instance$getSel = (_this$instance$getSel2 = this.instance.getSelectedRangeLast()) === null || _this$instance$getSel2 === void 0 ? void 0 : _this$instance$getSel2.isSingleCell()) !== null && _this$instance$getSel !== void 0 ? _this$instance$getSel : false;\n  }\n\n  /**\n   * Checks if active cell is editing.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  isCellEdited() {\n    const activeEditor = this.instance.getActiveEditor();\n    return activeEditor && activeEditor.isOpened();\n  }\n\n  /**\n   * `beforeDraw` callback.\n   *\n   * @private\n   * @param {boolean} force If `true` rendering was triggered by a change of settings or data or `false` if\n   *                        rendering was triggered by scrolling or moving selection.\n   * @param {object} skipRender Object with `skipRender` property, if it is set to `true ` the next rendering\n   *                            cycle will be skipped.\n   */\n  beforeRender(force, skipRender) {\n    if (force) {\n      // this.instance.forceFullRender = did Handsontable request full render?\n      this.instance.runHooks('beforeViewRender', this.instance.forceFullRender, skipRender);\n    }\n  }\n\n  /**\n   * `afterRender` callback.\n   *\n   * @private\n   * @param {boolean} force If `true` rendering was triggered by a change of settings or data or `false` if\n   *                        rendering was triggered by scrolling or moving selection.\n   */\n  afterRender(force) {\n    if (force) {\n      // this.instance.forceFullRender = did Handsontable request full render?\n      this.instance.runHooks('afterViewRender', this.instance.forceFullRender);\n    }\n  }\n\n  /**\n   * Append row header to a TH element.\n   *\n   * @private\n   * @param {number} visualRowIndex The visual row index.\n   * @param {HTMLTableHeaderCellElement} TH The table header element.\n   */\n  appendRowHeader(visualRowIndex, TH) {\n    if (TH.firstChild) {\n      const container = TH.firstChild;\n      if (!hasClass(container, 'relative')) {\n        empty(TH);\n        this.appendRowHeader(visualRowIndex, TH);\n        return;\n      }\n      this.updateCellHeader(container.querySelector('.rowHeader'), visualRowIndex, this.instance.getRowHeader);\n    } else {\n      const {\n        rootDocument,\n        getRowHeader\n      } = this.instance;\n      const div = rootDocument.createElement('div');\n      const span = rootDocument.createElement('span');\n      div.className = 'relative';\n      span.className = 'rowHeader';\n      this.updateCellHeader(span, visualRowIndex, getRowHeader);\n      div.appendChild(span);\n      TH.appendChild(div);\n    }\n    this.instance.runHooks('afterGetRowHeader', visualRowIndex, TH);\n  }\n\n  /**\n   * Append column header to a TH element.\n   *\n   * @private\n   * @param {number} visualColumnIndex Visual column index.\n   * @param {HTMLTableCellElement} TH The table header element.\n   * @param {Function} [label] The function that returns the header label.\n   * @param {number} [headerLevel=0] The index of header level counting from the top (positive\n   *                                 values counting from 0 to N).\n   */\n  appendColHeader(visualColumnIndex, TH) {\n    let label = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.instance.getColHeader;\n    let headerLevel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    if (TH.firstChild) {\n      const container = TH.firstChild;\n      if (hasClass(container, 'relative')) {\n        this.updateCellHeader(container.querySelector('.colHeader'), visualColumnIndex, label, headerLevel);\n      } else {\n        empty(TH);\n        this.appendColHeader(visualColumnIndex, TH, label, headerLevel);\n      }\n    } else {\n      const {\n        rootDocument\n      } = this.instance;\n      const div = rootDocument.createElement('div');\n      const span = rootDocument.createElement('span');\n      div.className = 'relative';\n      span.className = 'colHeader';\n      this.updateCellHeader(span, visualColumnIndex, label, headerLevel);\n      div.appendChild(span);\n      TH.appendChild(div);\n    }\n    this.instance.runHooks('afterGetColHeader', visualColumnIndex, TH, headerLevel);\n  }\n\n  /**\n   * Updates header cell content.\n   *\n   * @private\n   * @param {HTMLElement} element Element to update.\n   * @param {number} index Row index or column index.\n   * @param {Function} content Function which should be returns content for this cell.\n   * @param {number} [headerLevel=0] The index of header level counting from the top (positive\n   *                                 values counting from 0 to N).\n   */\n  updateCellHeader(element, index, content) {\n    let headerLevel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let renderedIndex = index;\n    const parentOverlay = this._wt.wtOverlays.getParentOverlay(element) || this._wt;\n\n    // prevent wrong calculations from SampleGenerator\n    if (element.parentNode) {\n      if (hasClass(element, 'colHeader')) {\n        renderedIndex = parentOverlay.wtTable.columnFilter.sourceToRendered(index);\n      } else if (hasClass(element, 'rowHeader')) {\n        renderedIndex = parentOverlay.wtTable.rowFilter.sourceToRendered(index);\n      }\n    }\n    if (renderedIndex > -1) {\n      fastInnerHTML(element, content(index, headerLevel));\n    } else {\n      // workaround for https://github.com/handsontable/handsontable/issues/1946\n      fastInnerText(element, String.fromCharCode(160));\n      addClass(element, 'cornerHeader');\n    }\n  }\n\n  /**\n   * Given a element's left (or right in RTL mode) position relative to the viewport, returns maximum\n   * element width until the right (or left) edge of the viewport (before scrollbar).\n   *\n   * @private\n   * @param {number} inlineOffset The left (or right in RTL mode) offset.\n   * @returns {number}\n   */\n  maximumVisibleElementWidth(inlineOffset) {\n    const workspaceWidth = this._wt.wtViewport.getWorkspaceWidth();\n    const maxWidth = workspaceWidth - inlineOffset;\n    return maxWidth > 0 ? maxWidth : 0;\n  }\n\n  /**\n   * Given a element's top position relative to the viewport, returns maximum element height until the bottom\n   * edge of the viewport (before scrollbar).\n   *\n   * @private\n   * @param {number} topOffset The top offset.\n   * @returns {number}\n   */\n  maximumVisibleElementHeight(topOffset) {\n    const workspaceHeight = this._wt.wtViewport.getWorkspaceHeight();\n    const maxHeight = workspaceHeight - topOffset;\n    return maxHeight > 0 ? maxHeight : 0;\n  }\n\n  /**\n   * Sets new dimensions of the container.\n   *\n   * @param {number} width The table width.\n   * @param {number} height The table height.\n   */\n  setLastSize(width, height) {\n    const priv = privatePool.get(this);\n    [priv.lastWidth, priv.lastHeight] = [width, height];\n  }\n\n  /**\n   * Returns cached dimensions.\n   *\n   * @returns {object}\n   */\n  getLastSize() {\n    const priv = privatePool.get(this);\n    return {\n      width: priv.lastWidth,\n      height: priv.lastHeight\n    };\n  }\n\n  /**\n   * Returns the first fully visible row in the table viewport.\n   *\n   * @returns {number}\n   */\n  getFirstFullyVisibleRow() {\n    return this.instance.rowIndexMapper.getVisualFromRenderableIndex(this.instance.view._wt.wtScroll.getFirstVisibleRow());\n  }\n\n  /**\n   * Returns the last fully visible row in the table viewport.\n   *\n   * @returns {number}\n   */\n  getLastFullyVisibleRow() {\n    return this.instance.rowIndexMapper.getVisualFromRenderableIndex(this.instance.view._wt.wtScroll.getLastVisibleRow());\n  }\n\n  /**\n   * Returns the first fully visible column in the table viewport.\n   *\n   * @returns {number}\n   */\n  getFirstFullyVisibleColumn() {\n    return this.instance.columnIndexMapper.getVisualFromRenderableIndex(this.instance.view._wt.wtScroll.getFirstVisibleColumn());\n  }\n\n  /**\n   * Returns the last fully visible column in the table viewport.\n   *\n   * @returns {number}\n   */\n  getLastFullyVisibleColumn() {\n    return this.instance.columnIndexMapper.getVisualFromRenderableIndex(this.instance.view._wt.wtScroll.getLastVisibleColumn());\n  }\n\n  /**\n   * Returns the total count of the rendered column headers.\n   *\n   * @returns {number}\n   */\n  getColumnHeadersCount() {\n    return _classPrivateFieldGet(this, _columnHeadersCount);\n  }\n\n  /**\n   * Returns the total count of the rendered row headers.\n   *\n   * @returns {number}\n   */\n  getRowHeadersCount() {\n    return _classPrivateFieldGet(this, _rowHeadersCount);\n  }\n\n  /**\n   * Destroys internal WalkOnTable's instance. Detaches all of the bonded listeners.\n   *\n   * @private\n   */\n  destroy() {\n    this._wt.destroy();\n    this.eventManager.destroy();\n  }\n}\nexport default TableView;","import \"core-js/modules/es.array.push.js\";\nimport { deepObjectSize, isObject } from \"./object.mjs\";\nconst COLUMN_LABEL_BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconst COLUMN_LABEL_BASE_LENGTH = COLUMN_LABEL_BASE.length;\n\n/**\n * Generates spreadsheet-like column names: A, B, C, ..., Z, AA, AB, etc.\n *\n * @param {number} index Column index.\n * @returns {string}\n */\nexport function spreadsheetColumnLabel(index) {\n  let dividend = index + 1;\n  let columnLabel = '';\n  let modulo;\n  while (dividend > 0) {\n    modulo = (dividend - 1) % COLUMN_LABEL_BASE_LENGTH;\n    columnLabel = String.fromCharCode(65 + modulo) + columnLabel;\n    dividend = parseInt((dividend - modulo) / COLUMN_LABEL_BASE_LENGTH, 10);\n  }\n  return columnLabel;\n}\n\n/**\n * Generates spreadsheet-like column index from theirs labels: A, B, C ...., Z, AA, AB, etc.\n *\n * @param {string} label Column label.\n * @returns {number}\n */\nexport function spreadsheetColumnIndex(label) {\n  let result = 0;\n  if (label) {\n    for (let i = 0, j = label.length - 1; i < label.length; i += 1, j -= 1) {\n      result += COLUMN_LABEL_BASE_LENGTH ** j * (COLUMN_LABEL_BASE.indexOf(label[i]) + 1);\n    }\n  }\n  result -= 1;\n  return result;\n}\n\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", ...\n *\n * @param {number} rows Number of rows to generate.\n * @param {number} columns Number of columns to generate.\n * @returns {Array}\n */\nexport function createSpreadsheetData() {\n  let rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  let columns = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  const _rows = [];\n  let i;\n  let j;\n  for (i = 0; i < rows; i++) {\n    const row = [];\n    for (j = 0; j < columns; j++) {\n      row.push(spreadsheetColumnLabel(j) + (i + 1));\n    }\n    _rows.push(row);\n  }\n  return _rows;\n}\n\n/**\n * Creates 2D array of Excel-like values \"A1\", \"A2\", as an array of objects.\n *\n * @param {number} rows Number of rows to generate.\n * @param {number} colCount Number of columns to generate.\n * @returns {Array}\n */\nexport function createSpreadsheetObjectData() {\n  let rows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 100;\n  let colCount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 4;\n  const _rows = [];\n  let i;\n  let j;\n  for (i = 0; i < rows; i++) {\n    const row = {};\n    for (j = 0; j < colCount; j++) {\n      row[`prop${j}`] = spreadsheetColumnLabel(j) + (i + 1);\n    }\n    _rows.push(row);\n  }\n  return _rows;\n}\n\n/**\n * Generates an empty data object.\n *\n * @param {number} rows Number of rows to generate.\n * @param {number} columns Number of columns to generate.\n * @returns {Array}\n */\nexport function createEmptySpreadsheetData(rows, columns) {\n  const data = [];\n  let row;\n  for (let i = 0; i < rows; i++) {\n    row = [];\n    for (let j = 0; j < columns; j++) {\n      row.push('');\n    }\n    data.push(row);\n  }\n  return data;\n}\n\n/**\n * Transform a data row (either an array or an object) or an array of data rows to array of changes in a form of `[row,\n * prop/col, value]`. Convenient to use with `setDataAtRowProp` and `setSourceDataAtCell` methods.\n *\n * @param {Array|object} dataRow Object of row data, array of row data or an array of either.\n * @param {number} rowOffset Row offset to be passed to the resulting change list. Defaults to `0`.\n * @returns {Array} Array of changes (in a form of an array).\n */\nexport function dataRowToChangesArray(dataRow) {\n  let rowOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let dataRows = dataRow;\n  const changesArray = [];\n  if (!Array.isArray(dataRow) || !Array.isArray(dataRow[0])) {\n    dataRows = [dataRow];\n  }\n  dataRows.forEach((row, rowIndex) => {\n    if (Array.isArray(row)) {\n      row.forEach((value, column) => {\n        changesArray.push([rowIndex + rowOffset, column, value]);\n      });\n    } else {\n      Object.keys(row).forEach(propName => {\n        changesArray.push([rowIndex + rowOffset, propName, row[propName]]);\n      });\n    }\n  });\n  return changesArray;\n}\n\n/**\n * Count the number of keys (or, basically, columns when the data is an array or arrays) in the first row of the\n * provided dataset.\n *\n * @param {Array} data The dataset.\n * @returns {number} Number of keys in the first row of the dataset.\n */\nexport function countFirstRowKeys(data) {\n  let result = 0;\n  if (Array.isArray(data)) {\n    if (data[0] && Array.isArray(data[0])) {\n      result = data[0].length;\n    } else if (data[0] && isObject(data[0])) {\n      result = deepObjectSize(data[0]);\n    }\n  }\n  return result;\n}\n\n/**\n * Check whether the provided dataset is a *non-empty* array of arrays.\n *\n * @param {Array} data Dataset to be checked.\n * @returns {boolean} `true` if data is an array of arrays, `false` otherwise.\n */\nexport function isArrayOfArrays(data) {\n  return !!(Array.isArray(data) && data.length && data.every(el => Array.isArray(el)));\n}\n\n/**\n * Check whether the provided dataset is a *non-empty* array of objects.\n *\n * @param {Array} data Dataset to be checked.\n * @returns {boolean} `true` if data is an array of objects, `false` otherwise.\n */\nexport function isArrayOfObjects(data) {\n  return !!(Array.isArray(data) && data.length && data.every(el => typeof el === 'object' && !Array.isArray(el) && el !== null));\n}","import \"core-js/modules/es.array.push.js\";\nimport { createObjectPropListener, getProperty, isObject, objectEach, setProperty } from \"../helpers/object.mjs\";\nimport { countFirstRowKeys } from \"../helpers/data.mjs\";\nimport { arrayEach } from \"../helpers/array.mjs\";\nimport { rangeEach } from \"../helpers/number.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\n/**\n * @class DataSource\n * @private\n */\nclass DataSource {\n  constructor(hotInstance) {\n    let dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    /**\n     * Instance of Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = hotInstance;\n    /**\n     * Data source.\n     *\n     * @type {Array}\n     */\n    this.data = dataSource;\n    /**\n     * Type of data source.\n     *\n     * @type {string}\n     * @default 'array'\n     */\n    this.dataType = 'array';\n    this.colToProp = () => {};\n    this.propToCol = () => {};\n  }\n\n  /**\n   * Run the `modifyRowData` hook and return either the modified or the source data for the provided row.\n   *\n   * @private\n   * @param {number} rowIndex Row index.\n   * @returns {Array|object} Source or modified row of data.\n   */\n  modifyRowData(rowIndex) {\n    let modifyRowData;\n    if (this.hot.hasHook('modifyRowData')) {\n      modifyRowData = this.hot.runHooks('modifyRowData', rowIndex);\n    }\n    return modifyRowData !== void 0 && !Number.isInteger(modifyRowData) ? modifyRowData : this.data[rowIndex];\n  }\n\n  /**\n   * Get all data.\n   *\n   * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided\n   *                                  in another format.\n   * @returns {Array}\n   */\n  getData() {\n    let toArray = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!this.data || this.data.length === 0) {\n      return this.data;\n    }\n    return this.getByRange(null, null, toArray);\n  }\n\n  /**\n   * Set new data source.\n   *\n   * @param {Array} data The new data.\n   */\n  setData(data) {\n    this.data = data;\n  }\n\n  /**\n   * Returns array of column values from the data source. `column` is the index of the row in the data source.\n   *\n   * @param {number} column Visual column index.\n   * @returns {Array}\n   */\n  getAtColumn(column) {\n    const result = [];\n    arrayEach(this.data, (row, rowIndex) => {\n      const value = this.getAtCell(rowIndex, column);\n      result.push(value);\n    });\n    return result;\n  }\n\n  /**\n   * Returns a single row of the data or a subset of its columns. If a column range or `toArray` arguments are provided, it\n   * operates only on the columns declared by the `columns` setting or the data schema.\n   *\n   * @param {number} row Physical row index.\n   * @param {number} [startColumn] Starting index for the column range (optional).\n   * @param {number} [endColumn] Ending index for the column range (optional).\n   * @param {boolean} [toArray=false] `true` if the returned value should be forced to be presented as an array.\n   * @returns {Array|object}\n   */\n  getAtRow(row, startColumn, endColumn) {\n    let toArray = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    const getAllProps = startColumn === void 0 && endColumn === void 0;\n    let dataRow = null;\n    let newDataRow = null;\n    dataRow = this.modifyRowData(row);\n    if (Array.isArray(dataRow)) {\n      newDataRow = [];\n      if (getAllProps) {\n        dataRow.forEach((cell, column) => {\n          newDataRow[column] = this.getAtPhysicalCell(row, column, dataRow);\n        });\n      } else {\n        // Only the columns from the provided range\n        rangeEach(startColumn, endColumn, column => {\n          newDataRow[column - startColumn] = this.getAtPhysicalCell(row, column, dataRow);\n        });\n      }\n    } else if (isObject(dataRow) || isFunction(dataRow)) {\n      if (toArray) {\n        newDataRow = [];\n      } else {\n        newDataRow = {};\n      }\n      if (!getAllProps || toArray) {\n        const rangeStart = 0;\n        const rangeEnd = this.countFirstRowKeys() - 1;\n        rangeEach(rangeStart, rangeEnd, column => {\n          const prop = this.colToProp(column);\n          if (column >= (startColumn || rangeStart) && column <= (endColumn || rangeEnd) && !Number.isInteger(prop)) {\n            const cellValue = this.getAtPhysicalCell(row, prop, dataRow);\n            if (toArray) {\n              newDataRow.push(cellValue);\n            } else {\n              setProperty(newDataRow, prop, cellValue);\n            }\n          }\n        });\n      } else {\n        objectEach(dataRow, (value, prop) => {\n          setProperty(newDataRow, prop, this.getAtPhysicalCell(row, prop, dataRow));\n        });\n      }\n    }\n    return newDataRow;\n  }\n\n  /**\n   * Set the provided value in the source data set at the provided coordinates.\n   *\n   * @param {number} row Physical row index.\n   * @param {number|string} column Property name / physical column index.\n   * @param {*} value The value to be set at the provided coordinates.\n   */\n  setAtCell(row, column, value) {\n    if (row >= this.countRows() || column >= this.countFirstRowKeys()) {\n      // Not enough rows and/or columns.\n      return;\n    }\n    if (this.hot.hasHook('modifySourceData')) {\n      const valueHolder = createObjectPropListener(value);\n      this.hot.runHooks('modifySourceData', row, column, valueHolder, 'set');\n      if (valueHolder.isTouched()) {\n        value = valueHolder.value;\n      }\n    }\n    if (!Number.isInteger(column)) {\n      // column argument is the prop name\n      setProperty(this.data[row], column, value);\n    } else {\n      this.data[row][column] = value;\n    }\n  }\n\n  /**\n   * Get data from the source data set using the physical indexes.\n   *\n   * @private\n   * @param {number} row Physical row index.\n   * @param {string|number|Function} column Physical column index / property / function.\n   * @param {Array|object} dataRow A representation of a data row.\n   * @returns {*} Value at the provided coordinates.\n   */\n  getAtPhysicalCell(row, column, dataRow) {\n    let result = null;\n    if (dataRow) {\n      if (typeof column === 'string') {\n        result = getProperty(dataRow, column);\n      } else if (typeof column === 'function') {\n        result = column(dataRow);\n      } else {\n        result = dataRow[column];\n      }\n    }\n    if (this.hot.hasHook('modifySourceData')) {\n      const valueHolder = createObjectPropListener(result);\n      this.hot.runHooks('modifySourceData', row, column, valueHolder, 'get');\n      if (valueHolder.isTouched()) {\n        result = valueHolder.value;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Returns a single value from the data.\n   *\n   * @param {number} row Physical row index.\n   * @param {number} columnOrProp Visual column index or property.\n   * @returns {*}\n   */\n  getAtCell(row, columnOrProp) {\n    const dataRow = this.modifyRowData(row);\n    return this.getAtPhysicalCell(row, this.colToProp(columnOrProp), dataRow);\n  }\n\n  /**\n   * Returns source data by passed range.\n   *\n   * @param {object} [start] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).\n   * @param {object} [end] Object with physical `row` and `col` keys (or visual column index, if data type is an array of objects).\n   * @param {boolean} [toArray=false] If `true` return source data as an array of arrays even when source data was provided\n   *                                  in another format.\n   * @returns {Array}\n   */\n  getByRange() {\n    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    let toArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let getAllProps = false;\n    let startRow = null;\n    let startCol = null;\n    let endRow = null;\n    let endCol = null;\n    if (start === null || end === null) {\n      getAllProps = true;\n      startRow = 0;\n      endRow = this.countRows() - 1;\n    } else {\n      startRow = Math.min(start.row, end.row);\n      startCol = Math.min(start.col, end.col);\n      endRow = Math.max(start.row, end.row);\n      endCol = Math.max(start.col, end.col);\n    }\n    const result = [];\n    rangeEach(startRow, endRow, currentRow => {\n      result.push(getAllProps ? this.getAtRow(currentRow, void 0, void 0, toArray) : this.getAtRow(currentRow, startCol, endCol, toArray));\n    });\n    return result;\n  }\n\n  /**\n   * Count number of rows.\n   *\n   * @returns {number}\n   */\n  countRows() {\n    if (this.hot.hasHook('modifySourceLength')) {\n      const modifiedSourceLength = this.hot.runHooks('modifySourceLength');\n      if (Number.isInteger(modifiedSourceLength)) {\n        return modifiedSourceLength;\n      }\n    }\n    return this.data.length;\n  }\n\n  /**\n   * Count number of columns.\n   *\n   * @returns {number}\n   */\n  countFirstRowKeys() {\n    return countFirstRowKeys(this.data);\n  }\n\n  /**\n   * Destroy instance.\n   */\n  destroy() {\n    this.data = null;\n    this.hot = null;\n  }\n}\nexport default DataSource;","import \"core-js/modules/es.array.push.js\";\nimport { defineGetter } from \"./../helpers/object.mjs\";\nimport { fastCall } from \"./../helpers/function.mjs\";\nconst MIXIN_NAME = 'localHooks';\n\n/**\n * Mixin object to extend objects functionality for local hooks.\n *\n * @type {object}\n */\nconst localHooks = {\n  /**\n   * Internal hooks storage.\n   */\n  _localHooks: Object.create(null),\n  /**\n   * Add hook to the collection.\n   *\n   * @param {string} key The hook name.\n   * @param {Function} callback The hook callback.\n   * @returns {object}\n   */\n  addLocalHook(key, callback) {\n    if (!this._localHooks[key]) {\n      this._localHooks[key] = [];\n    }\n    this._localHooks[key].push(callback);\n    return this;\n  },\n  /**\n   * Run hooks.\n   *\n   * @param {string} key The name of the hook to run.\n   * @param {*} [arg1] An additional parameter passed to the callback function.\n   * @param {*} [arg2] An additional parameter passed to the callback function.\n   * @param {*} [arg3] An additional parameter passed to the callback function.\n   * @param {*} [arg4] An additional parameter passed to the callback function.\n   * @param {*} [arg5] An additional parameter passed to the callback function.\n   * @param {*} [arg6] An additional parameter passed to the callback function.\n   */\n  runLocalHooks(key, arg1, arg2, arg3, arg4, arg5, arg6) {\n    if (this._localHooks[key]) {\n      const length = this._localHooks[key].length;\n\n      // don't optimize this loop with the `arrayEach()` method or arrow functions\n      // otherwise, performance will decrease because of garbage collection\n      // using the `...rest` syntax (ES6 and later) will decrease performance as well\n      for (let i = 0; i < length; i++) {\n        fastCall(this._localHooks[key][i], this, arg1, arg2, arg3, arg4, arg5, arg6);\n      }\n    }\n  },\n  /**\n   * Clear all added hooks.\n   *\n   * @returns {object}\n   */\n  clearLocalHooks() {\n    this._localHooks = {};\n    return this;\n  }\n};\ndefineGetter(localHooks, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default localHooks;","import \"core-js/modules/es.array.push.js\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\n/**\n * Map for storing mappings from an index to a value.\n *\n * @class IndexMap\n */\nexport class IndexMap {\n  constructor() {\n    let initValueOrFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    /**\n     * List of values for particular indexes.\n     *\n     * @private\n     * @type {Array}\n     */\n    this.indexedValues = [];\n    /**\n     * Initial value or function for each existing index.\n     *\n     * @private\n     * @type {*}\n     */\n    this.initValueOrFn = initValueOrFn;\n  }\n\n  /**\n   * Get full list of values for particular indexes.\n   *\n   * @returns {Array}\n   */\n  getValues() {\n    return this.indexedValues;\n  }\n\n  /**\n   * Get value for the particular index.\n   *\n   * @param {number} index Index for which value is got.\n   * @returns {*}\n   */\n  getValueAtIndex(index) {\n    const values = this.indexedValues;\n    if (index < values.length) {\n      return values[index];\n    }\n  }\n\n  /**\n   * Set new values for particular indexes.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @param {Array} values List of set values.\n   */\n  setValues(values) {\n    this.indexedValues = values.slice();\n    this.runLocalHooks('change');\n  }\n\n  /**\n   * Set new value for the particular index.\n   *\n   * @param {number} index The index.\n   * @param {*} value The value to save.\n   *\n   * Note: Please keep in mind that it is not possible to set value beyond the map (not respecting already set\n   * map's size). Please use the `setValues` method when you would like to extend the map.\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @returns {boolean}\n   */\n  setValueAtIndex(index, value) {\n    if (index < this.indexedValues.length) {\n      this.indexedValues[index] = value;\n      this.runLocalHooks('change');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Clear all values to the defaults.\n   */\n  clear() {\n    this.setDefaultValues();\n  }\n\n  /**\n   * Get length of the index map.\n   *\n   * @returns {number}\n   */\n  getLength() {\n    return this.getValues().length;\n  }\n\n  /**\n   * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @private\n   * @param {number} [length] Length of list.\n   */\n  setDefaultValues() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.indexedValues.length;\n    this.indexedValues.length = 0;\n    if (isFunction(this.initValueOrFn)) {\n      rangeEach(length - 1, index => this.indexedValues.push(this.initValueOrFn(index)));\n    } else {\n      rangeEach(length - 1, () => this.indexedValues.push(this.initValueOrFn));\n    }\n    this.runLocalHooks('change');\n  }\n\n  /**\n   * Initialize list with default values for particular indexes.\n   *\n   * @private\n   * @param {number} length New length of indexed list.\n   * @returns {IndexMap}\n   */\n  init(length) {\n    this.setDefaultValues(length);\n    this.runLocalHooks('init');\n    return this;\n  }\n\n  /**\n   * Add values to the list.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @private\n   */\n  insert() {\n    this.runLocalHooks('change');\n  }\n\n  /**\n   * Remove values from the list.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @private\n   */\n  remove() {\n    this.runLocalHooks('change');\n  }\n\n  /**\n   * Destroys the Map instance.\n   */\n  destroy() {\n    this.clearLocalHooks();\n    this.indexedValues = null;\n    this.initValueOrFn = null;\n  }\n}\nmixin(IndexMap, localHooks);","import { arrayFilter } from \"../../../helpers/array.mjs\";\n/**\n * Insert new items to the list.\n *\n * @private\n * @param {Array} indexedValues List of values for particular indexes.\n * @param {number} insertionIndex Position inside the actual list.\n * @param {Array} insertedIndexes List of inserted indexes.\n * @returns {Array} List with new mappings.\n */\nexport function getListWithInsertedItems(indexedValues, insertionIndex, insertedIndexes) {\n  return [...indexedValues.slice(0, insertionIndex), ...insertedIndexes, ...indexedValues.slice(insertionIndex)];\n}\n\n/**\n * Filter items from the list.\n *\n * @private\n * @param {Array} indexedValues List of values for particular indexes.\n * @param {Array} removedIndexes List of removed indexes.\n * @returns {Array} Reduced list of mappings.\n */\nexport function getListWithRemovedItems(indexedValues, removedIndexes) {\n  return arrayFilter(indexedValues, index => {\n    return removedIndexes.includes(index) === false;\n  });\n}","import { arrayMap } from \"../../../helpers/array.mjs\";\n/**\n * Transform mappings after removal.\n *\n * @private\n * @param {Array} indexedValues List of values for particular indexes.\n * @param {Array} removedIndexes List of removed indexes.\n * @returns {Array} List with decreased indexes.\n */\nexport function getDecreasedIndexes(indexedValues, removedIndexes) {\n  return arrayMap(indexedValues, index => index - removedIndexes.filter(removedIndex => removedIndex < index).length);\n}\n\n/**\n * Transform mappings after insertion.\n *\n * @private\n * @param {Array} indexedValues List of values for particular indexes.\n * @param {Array} insertedIndexes List of inserted indexes.\n * @returns {Array} List with increased indexes.\n */\nexport function getIncreasedIndexes(indexedValues, insertedIndexes) {\n  const firstInsertedIndex = insertedIndexes[0];\n  const amountOfIndexes = insertedIndexes.length;\n  return arrayMap(indexedValues, index => {\n    if (index >= firstInsertedIndex) {\n      return index + amountOfIndexes;\n    }\n    return index;\n  });\n}","import { IndexMap } from \"./indexMap.mjs\";\nimport { getListWithRemovedItems, getListWithInsertedItems } from \"./utils/indexesSequence.mjs\";\nimport { getDecreasedIndexes, getIncreasedIndexes } from \"./utils/index.mjs\";\n/**\n * Map for storing mappings from an index to a physical index.\n *\n * It also updates the physical indexes (remaining in the map) on remove/add row or column action.\n *\n * @class IndexesSequence\n */\nexport class IndexesSequence extends IndexMap {\n  constructor() {\n    // Not handling custom init function or init value.\n    super(index => index);\n  }\n\n  /**\n   * Add values to list and reorganize.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insert(insertionIndex, insertedIndexes) {\n    const listAfterUpdate = getIncreasedIndexes(this.indexedValues, insertedIndexes);\n    this.indexedValues = getListWithInsertedItems(listAfterUpdate, insertionIndex, insertedIndexes);\n    super.insert(insertionIndex, insertedIndexes);\n  }\n\n  /**\n   * Remove values from the list and reorganize.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  remove(removedIndexes) {\n    const listAfterUpdate = getListWithRemovedItems(this.indexedValues, removedIndexes);\n    this.indexedValues = getDecreasedIndexes(listAfterUpdate, removedIndexes);\n    super.remove(removedIndexes);\n  }\n}","import { isFunction } from \"../../../helpers/function.mjs\";\nimport { arrayFilter } from \"../../../helpers/array.mjs\";\n/**\n * Insert new items to the list.\n *\n * @private\n * @param {Array} indexedValues List of values for particular indexes.\n * @param {number} insertionIndex Position inside the actual list.\n * @param {Array} insertedIndexes List of inserted indexes.\n * @param {*} insertedValuesMapping Mapping which may provide value or function returning value for the specific parameters.\n * @returns {Array} List with new mappings.\n */\nexport function getListWithInsertedItems(indexedValues, insertionIndex, insertedIndexes, insertedValuesMapping) {\n  const firstInsertedIndex = insertedIndexes.length ? insertedIndexes[0] : void 0;\n  return [...indexedValues.slice(0, firstInsertedIndex), ...insertedIndexes.map((insertedIndex, ordinalNumber) => {\n    if (isFunction(insertedValuesMapping)) {\n      return insertedValuesMapping(insertedIndex, ordinalNumber);\n    }\n    return insertedValuesMapping;\n  }), ...(firstInsertedIndex === void 0 ? [] : indexedValues.slice(firstInsertedIndex))];\n}\n\n/**\n * Filter items from the list.\n *\n * @private\n * @param {Array} indexedValues List of values for particular indexes.\n * @param {Array} removedIndexes List of removed indexes.\n * @returns {Array} Reduced list of mappings.\n */\nexport function getListWithRemovedItems(indexedValues, removedIndexes) {\n  return arrayFilter(indexedValues, (_, index) => removedIndexes.includes(index) === false);\n}","import { IndexMap } from \"./indexMap.mjs\";\nimport { getListWithRemovedItems, getListWithInsertedItems } from \"./utils/physicallyIndexed.mjs\";\n/**\n * Map for storing mappings from an physical index to a value.\n *\n * Does not update stored values on remove/add row or column action.\n *\n * @class PhysicalIndexToValueMap\n */\nexport class PhysicalIndexToValueMap extends IndexMap {\n  /**\n   * Add values to list and reorganize.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insert(insertionIndex, insertedIndexes) {\n    this.indexedValues = getListWithInsertedItems(this.indexedValues, insertionIndex, insertedIndexes, this.initValueOrFn);\n    super.insert(insertionIndex, insertedIndexes);\n  }\n\n  /**\n   * Remove values from the list and reorganize.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  remove(removedIndexes) {\n    this.indexedValues = getListWithRemovedItems(this.indexedValues, removedIndexes);\n    super.remove(removedIndexes);\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { PhysicalIndexToValueMap } from \"./physicalIndexToValueMap.mjs\";\nimport { arrayReduce } from \"../../helpers/array.mjs\";\n/**\n * Map for storing mappings from an physical index to a boolean value. It stores information whether physical index is\n * included in a dataset, but skipped in the process of rendering.\n *\n * @class HidingMap\n */\nexport class HidingMap extends PhysicalIndexToValueMap {\n  constructor() {\n    let initValueOrFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    super(initValueOrFn);\n  }\n\n  /**\n   * Get physical indexes which are hidden.\n   *\n   * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.\n   *\n   * @returns {Array}\n   */\n  getHiddenIndexes() {\n    return arrayReduce(this.getValues(), (indexesList, isHidden, physicalIndex) => {\n      if (isHidden) {\n        indexesList.push(physicalIndex);\n      }\n      return indexesList;\n    }, []);\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { IndexMap } from \"./indexMap.mjs\";\nimport { getListWithRemovedItems, getListWithInsertedItems } from \"./utils/physicallyIndexed.mjs\";\nimport { getListWithRemovedItems as getListWithoutIndexes } from \"./utils/indexesSequence.mjs\";\nimport { getDecreasedIndexes, getIncreasedIndexes } from \"./utils/actionsOnIndexes.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\n/**\n * Map for storing mappings from an physical index to a value. Those entries are linked and stored in a certain order.\n *\n * It does not update stored values on remove/add row or column action. Otherwise, order of entries is updated after\n * such changes.\n *\n * @class LinkedPhysicalIndexToValueMap\n */\nexport class LinkedPhysicalIndexToValueMap extends IndexMap {\n  constructor() {\n    super(...arguments);\n    /**\n     * Indexes and values corresponding to them (entries) are stored in a certain order.\n     *\n     * @private\n     * @type {Array<number>}\n     */\n    _defineProperty(this, \"orderOfIndexes\", []);\n  }\n  /**\n   * Get full list of ordered values for particular indexes.\n   *\n   * @returns {Array}\n   */\n  getValues() {\n    return this.orderOfIndexes.map(physicalIndex => this.indexedValues[physicalIndex]);\n  }\n\n  /**\n   * Set new values for particular indexes. Entries are linked and stored in a certain order.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @param {Array} values List of set values.\n   */\n  setValues(values) {\n    this.orderOfIndexes = [...Array(values.length).keys()];\n    super.setValues(values);\n  }\n\n  /**\n   * Set value at index and add it to the linked list of entries. Entries are stored in a certain order.\n   *\n   * Note: Value will be added at the end of the queue.\n   *\n   * @param {number} index The index.\n   * @param {*} value The value to save.\n   * @param {number} position Position to which entry will be added.\n   *\n   * @returns {boolean}\n   */\n  setValueAtIndex(index, value) {\n    let position = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.orderOfIndexes.length;\n    if (index < this.indexedValues.length) {\n      this.indexedValues[index] = value;\n      if (this.orderOfIndexes.includes(index) === false) {\n        this.orderOfIndexes.splice(position, 0, index);\n      }\n      this.runLocalHooks('change');\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Clear value for particular index.\n   *\n   * @param {number} physicalIndex Physical index.\n   */\n  clearValue(physicalIndex) {\n    this.orderOfIndexes = getListWithoutIndexes(this.orderOfIndexes, [physicalIndex]);\n    if (isFunction(this.initValueOrFn)) {\n      super.setValueAtIndex(physicalIndex, this.initValueOrFn(physicalIndex));\n    } else {\n      super.setValueAtIndex(physicalIndex, this.initValueOrFn);\n    }\n  }\n\n  /**\n   * Get length of the index map.\n   *\n   * @returns {number}\n   */\n  getLength() {\n    return this.orderOfIndexes.length;\n  }\n\n  /**\n   * Set default values for elements from `0` to `n`, where `n` is equal to the handled variable.\n   *\n   * Note: Please keep in mind that `change` hook triggered by the method may not update cache of a collection immediately.\n   *\n   * @private\n   * @param {number} [length] Length of list.\n   */\n  setDefaultValues() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.indexedValues.length;\n    this.orderOfIndexes.length = 0;\n    super.setDefaultValues(length);\n  }\n\n  /**\n   * Add values to list and reorganize. It updates list of indexes related to ordered values.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insert(insertionIndex, insertedIndexes) {\n    this.indexedValues = getListWithInsertedItems(this.indexedValues, insertionIndex, insertedIndexes, this.initValueOrFn);\n    this.orderOfIndexes = getIncreasedIndexes(this.orderOfIndexes, insertedIndexes);\n    super.insert(insertionIndex, insertedIndexes);\n  }\n\n  /**\n   * Remove values from the list and reorganize. It updates list of indexes related to ordered values.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  remove(removedIndexes) {\n    this.indexedValues = getListWithRemovedItems(this.indexedValues, removedIndexes);\n    this.orderOfIndexes = getListWithoutIndexes(this.orderOfIndexes, removedIndexes);\n    this.orderOfIndexes = getDecreasedIndexes(this.orderOfIndexes, removedIndexes);\n    super.remove(removedIndexes);\n  }\n\n  /**\n   * Get every entry containing index and value, respecting order of indexes.\n   *\n   * @returns {Array}\n   */\n  getEntries() {\n    return this.orderOfIndexes.map(physicalIndex => [physicalIndex, this.getValueAtIndex(physicalIndex)]);\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { PhysicalIndexToValueMap } from \"./physicalIndexToValueMap.mjs\";\nimport { arrayReduce } from \"../../helpers/array.mjs\";\n/**\n * Map for storing mappings from an physical index to a boolean value. It stores information whether physical index is\n * NOT included in a dataset and skipped in the process of rendering.\n *\n * @class TrimmingMap\n */\nexport class TrimmingMap extends PhysicalIndexToValueMap {\n  constructor() {\n    let initValueOrFn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    super(initValueOrFn);\n  }\n\n  /**\n   * Get physical indexes which are trimmed.\n   *\n   * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.\n   *\n   * @returns {Array}\n   */\n  getTrimmedIndexes() {\n    return arrayReduce(this.getValues(), (indexesList, isTrimmed, physicalIndex) => {\n      if (isTrimmed) {\n        indexesList.push(physicalIndex);\n      }\n      return indexesList;\n    }, []);\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nimport { HidingMap } from \"./hidingMap.mjs\";\nimport { IndexMap } from \"./indexMap.mjs\";\nimport { LinkedPhysicalIndexToValueMap } from \"./linkedPhysicalIndexToValueMap.mjs\";\nimport { PhysicalIndexToValueMap } from \"./physicalIndexToValueMap.mjs\";\nimport { TrimmingMap } from \"./trimmingMap.mjs\";\nexport * from \"./indexesSequence.mjs\";\nexport * from \"./utils/indexesSequence.mjs\";\nexport { HidingMap, IndexMap, LinkedPhysicalIndexToValueMap, PhysicalIndexToValueMap, TrimmingMap };\nconst availableIndexMapTypes = new Map([['hiding', HidingMap], ['index', IndexMap], ['linkedPhysicalIndexToValue', LinkedPhysicalIndexToValueMap], ['physicalIndexToValue', PhysicalIndexToValueMap], ['trimming', TrimmingMap]]);\n\n/**\n * Creates and returns new IndexMap instance.\n *\n * @param {string} mapType The type of the map.\n * @param {*} [initValueOrFn=null] Initial value or function for index map.\n * @returns {IndexMap}\n */\nexport function createIndexMap(mapType) {\n  let initValueOrFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  if (!availableIndexMapTypes.has(mapType)) {\n    throw new Error(`The provided map type (\"${mapType}\") does not exist.`);\n  }\n  return new (availableIndexMapTypes.get(mapType))(initValueOrFn);\n}","import { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\"; // Counter for checking if there is a memory leak.\nlet registeredMaps = 0;\n\n/**\n * Collection of index maps having unique names. It allow us to perform bulk operations such as init, remove, insert on all index maps that have been registered in the collection.\n */\nexport class MapCollection {\n  constructor() {\n    /**\n     * Collection of index maps.\n     *\n     * @type {Map<string, IndexMap>}\n     */\n    this.collection = new Map();\n  }\n\n  /**\n   * Register custom index map.\n   *\n   * @param {string} uniqueName Unique name of the index map.\n   * @param {IndexMap} indexMap Index map containing miscellaneous (i.e. Meta data, indexes sequence), updated after remove and insert data actions.\n   */\n  register(uniqueName, indexMap) {\n    if (this.collection.has(uniqueName) === false) {\n      this.collection.set(uniqueName, indexMap);\n      indexMap.addLocalHook('change', () => this.runLocalHooks('change', indexMap));\n      registeredMaps += 1;\n    }\n  }\n\n  /**\n   * Unregister custom index map.\n   *\n   * @param {string} name Name of the index map.\n   */\n  unregister(name) {\n    const indexMap = this.collection.get(name);\n    if (isDefined(indexMap)) {\n      indexMap.destroy();\n      this.collection.delete(name);\n      this.runLocalHooks('change', indexMap);\n      registeredMaps -= 1;\n    }\n  }\n\n  /**\n   * Unregisters and destroys all collected index map instances.\n   */\n  unregisterAll() {\n    this.collection.forEach((indexMap, name) => this.unregister(name));\n    this.collection.clear();\n  }\n\n  /**\n   * Get index map for the provided name.\n   *\n   * @param {string} [name] Name of the index map.\n   * @returns {Array|IndexMap}\n   */\n  get(name) {\n    if (isUndefined(name)) {\n      return Array.from(this.collection.values());\n    }\n    return this.collection.get(name);\n  }\n\n  /**\n   * Get collection size.\n   *\n   * @returns {number}\n   */\n  getLength() {\n    return this.collection.size;\n  }\n\n  /**\n   * Remove some indexes and corresponding mappings and update values of the others within all collection's index maps.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  removeFromEvery(removedIndexes) {\n    this.collection.forEach(indexMap => {\n      indexMap.remove(removedIndexes);\n    });\n  }\n\n  /**\n   * Insert new indexes and corresponding mapping and update values of the others all collection's index maps.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the actual list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insertToEvery(insertionIndex, insertedIndexes) {\n    this.collection.forEach(indexMap => {\n      indexMap.insert(insertionIndex, insertedIndexes);\n    });\n  }\n\n  /**\n   * Set default values to index maps within collection.\n   *\n   * @param {number} length Destination length for all stored maps.\n   */\n  initEvery(length) {\n    this.collection.forEach(indexMap => {\n      indexMap.init(length);\n    });\n  }\n}\nmixin(MapCollection, localHooks);\n\n/**\n * @returns {number}\n */\nexport function getRegisteredMapsCounter() {\n  return registeredMaps;\n}","import \"core-js/modules/es.array.push.js\";\nimport { MapCollection } from \"./mapCollection.mjs\";\nimport { arrayMap } from \"../../helpers/array.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\n/**\n * Collection of maps. This collection aggregate maps with the same type of values. Values from the registered maps\n * can be used to calculate a single result for particular index.\n */\nexport class AggregatedCollection extends MapCollection {\n  constructor(aggregationFunction, fallbackValue) {\n    super();\n    /**\n     * List of merged values. Value for each index is calculated using values inside registered maps.\n     *\n     * @type {Array}\n     */\n    this.mergedValuesCache = [];\n    /**\n     * Function which do aggregation on the values for particular index.\n     */\n    this.aggregationFunction = aggregationFunction;\n    /**\n     * Fallback value when there is no calculated value for particular index.\n     */\n    this.fallbackValue = fallbackValue;\n  }\n\n  /**\n   * Get merged values for all indexes.\n   *\n   * @param {boolean} [readFromCache=true] Determine if read results from the cache.\n   * @returns {Array}\n   */\n  getMergedValues() {\n    let readFromCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (readFromCache === true) {\n      return this.mergedValuesCache;\n    }\n    if (this.getLength() === 0) {\n      return [];\n    }\n\n    // Below variable stores values for every particular map. Example describing situation when we have 2 registered maps,\n    // with length equal to 5.\n    //\n    // +---------+---------------------------------------------+\n    // |         |                  indexes                    |\n    // +---------+---------------------------------------------+\n    // |   maps  |     0    |   1   |    2  |   3   |    4     |\n    // +---------+----------+-------+-------+-------+----------+\n    // |    0    | [[ value,  value,  value,  value,  value ], |\n    // |    1    | [  value,  value,  value,  value,  value ]] |\n    // +---------+----------+-------+-------+-------+----------+\n    const mapsValuesMatrix = arrayMap(this.get(), map => map.getValues());\n    // Below variable stores values for every particular index. Example describing situation when we have 2 registered maps,\n    // with length equal to 5.\n    //\n    // +---------+---------------------+\n    // |         |         maps        |\n    // +---------+---------------------+\n    // | indexes |     0    |    1     |\n    // +---------+----------+----------+\n    // |    0    | [[ value,  value ], |\n    // |    1    | [  value,  value ], |\n    // |    2    | [  value,  value ], |\n    // |    3    | [  value,  value ], |\n    // |    4    | [  value,  value ]] |\n    // +---------+----------+----------+\n    const indexesValuesMatrix = [];\n    const mapsLength = isDefined(mapsValuesMatrix[0]) && mapsValuesMatrix[0].length || 0;\n    for (let index = 0; index < mapsLength; index += 1) {\n      const valuesForIndex = [];\n      for (let mapIndex = 0; mapIndex < this.getLength(); mapIndex += 1) {\n        valuesForIndex.push(mapsValuesMatrix[mapIndex][index]);\n      }\n      indexesValuesMatrix.push(valuesForIndex);\n    }\n    return arrayMap(indexesValuesMatrix, this.aggregationFunction);\n  }\n\n  /**\n   * Get merged value for particular index.\n   *\n   * @param {number} index Index for which we calculate single result.\n   * @param {boolean} [readFromCache=true] Determine if read results from the cache.\n   * @returns {*}\n   */\n  getMergedValueAtIndex(index, readFromCache) {\n    const valueAtIndex = this.getMergedValues(readFromCache)[index];\n    return isDefined(valueAtIndex) ? valueAtIndex : this.fallbackValue;\n  }\n\n  /**\n   * Rebuild cache for the collection.\n   */\n  updateCache() {\n    this.mergedValuesCache = this.getMergedValues(false);\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { mixin } from \"../../helpers/object.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\n/**\n * The ChangesObserver module is an object that represents a disposable resource\n * provided by the ChangesObservable module.\n *\n * @class ChangesObserver\n */\nvar _currentInitialChanges = /*#__PURE__*/new WeakMap();\nexport class ChangesObserver {\n  constructor() {\n    /**\n     * The field holds initial changes that will be used to notify the callbacks added using\n     * subscribe method. Regardless of the moment of listening for changes, the subscriber\n     * will be notified once with all changes made before subscribing.\n     *\n     * @type {Array}\n     */\n    _classPrivateFieldInitSpec(this, _currentInitialChanges, {\n      writable: true,\n      value: []\n    });\n  }\n  /**\n   * Subscribes to the observer.\n   *\n   * @param {Function} callback A function that will be called when the new changes will appear.\n   * @returns {ChangesObserver}\n   */\n  subscribe(callback) {\n    this.addLocalHook('change', callback);\n    this._write(_classPrivateFieldGet(this, _currentInitialChanges));\n    return this;\n  }\n\n  /**\n   * Unsubscribes all subscriptions. After the method call, the observer would not produce\n   * any new events.\n   *\n   * @returns {ChangesObserver}\n   */\n  unsubscribe() {\n    this.runLocalHooks('unsubscribe');\n    this.clearLocalHooks();\n    return this;\n  }\n\n  /**\n   * The write method is executed by the ChangesObservable module. The module produces all\n   * changes events that are distributed further by the observer.\n   *\n   * @private\n   * @param {object} changes The chunk of changes produced by the ChangesObservable module.\n   * @returns {ChangesObserver}\n   */\n  _write(changes) {\n    if (changes.length > 0) {\n      this.runLocalHooks('change', changes);\n    }\n    return this;\n  }\n\n  /**\n   * The write method is executed by the ChangesObservable module. The module produces initial\n   * changes that will be used to notify new subscribers.\n   *\n   * @private\n   * @param {object} initialChanges The chunk of changes produced by the ChangesObservable module.\n   */\n  _writeInitialChanges(initialChanges) {\n    _classPrivateFieldSet(this, _currentInitialChanges, initialChanges);\n  }\n}\nmixin(ChangesObserver, localHooks);","import \"core-js/modules/es.array.push.js\";\n/**\n * An array diff implementation. The function iterates through the arrays and depends\n * on the diff results, collect the changes as a list of the objects.\n *\n * Each object contains information about the differences in the indexes of the arrays.\n * The changes also contain data about the new and previous array values.\n *\n * @private\n * @param {Array} baseArray The base array to diff from.\n * @param {Array} newArray The new array to compare with.\n * @returns {Array}\n */\nexport function arrayDiff(baseArray, newArray) {\n  const changes = [];\n  let i = 0;\n  let j = 0;\n\n  /* eslint-disable no-plusplus */\n  for (; i < baseArray.length && j < newArray.length; i++, j++) {\n    if (baseArray[i] !== newArray[j]) {\n      changes.push({\n        op: 'replace',\n        index: j,\n        oldValue: baseArray[i],\n        newValue: newArray[j]\n      });\n    }\n  }\n  for (; i < newArray.length; i++) {\n    changes.push({\n      op: 'insert',\n      index: i,\n      oldValue: void 0,\n      newValue: newArray[i]\n    });\n  }\n  for (; j < baseArray.length; j++) {\n    changes.push({\n      op: 'remove',\n      index: j,\n      oldValue: baseArray[j],\n      newValue: void 0\n    });\n  }\n  return changes;\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { ChangesObserver } from \"./observer.mjs\";\nimport { arrayDiff } from \"./utils.mjs\";\n/**\n * The ChangesObservable module is an object that represents a resource that provides\n * the ability to observe the changes that happened in the index map indexes during\n * the code running.\n *\n * @private\n * @class ChangesObservable\n */\nvar _observers = /*#__PURE__*/new WeakMap();\nvar _indexMatrix = /*#__PURE__*/new WeakMap();\nvar _currentIndexState = /*#__PURE__*/new WeakMap();\nvar _isMatrixIndexesInitialized = /*#__PURE__*/new WeakMap();\nvar _initialIndexValue = /*#__PURE__*/new WeakMap();\nexport class ChangesObservable {\n  constructor() {\n    let {\n      initialIndexValue\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    /**\n     * The list of registered ChangesObserver instances.\n     *\n     * @type {ChangesObserver[]}\n     */\n    _classPrivateFieldInitSpec(this, _observers, {\n      writable: true,\n      value: new Set()\n    });\n    /**\n     * An array with default values that act as a base array that will be compared with\n     * the last saved index state. The changes are generated and immediately send through\n     * the newly created ChangesObserver object. Thanks to that, the observer initially has\n     * all information about what indexes are currently changed.\n     *\n     * @type {Array}\n     */\n    _classPrivateFieldInitSpec(this, _indexMatrix, {\n      writable: true,\n      value: []\n    });\n    /**\n     * An array that holds the indexes state that is currently valid. The value is changed on every\n     * index mapper cache update.\n     *\n     * @type {Array}\n     */\n    _classPrivateFieldInitSpec(this, _currentIndexState, {\n      writable: true,\n      value: []\n    });\n    /**\n     * The flag determines if the observable is initialized or not. Not initialized object creates\n     * index matrix once while emitting new changes.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isMatrixIndexesInitialized, {\n      writable: true,\n      value: false\n    });\n    /**\n     * The initial index value allows control from what value the index matrix array will be created.\n     * Changing that value changes how the array diff generates the changes for the initial data\n     * sent to the subscribers. For example, the changes can be triggered by detecting the changes\n     * from `false` to `true` value or vice versa. Generally, it depends on which index map type\n     * the Observable will work with. For \"hiding\" or \"trimming\" index types, it will be boolean\n     * values. For various index maps, it can be anything, but I suspect that the most appropriate\n     * initial value will be \"undefined\" in that case.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _initialIndexValue, {\n      writable: true,\n      value: false\n    });\n    _classPrivateFieldSet(this, _initialIndexValue, initialIndexValue !== null && initialIndexValue !== void 0 ? initialIndexValue : false);\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Creates and returns a new instance of the ChangesObserver object. The resource\n   * allows subscribing to the index changes that during the code running may change.\n   * Changes are emitted as an array of the index change. Each change is represented\n   * separately as an object with `op`, `index`, `oldValue`, and `newValue` props.\n   *\n   * For example:\n   * ```\n   * [\n   *   { op: 'replace', index: 1, oldValue: false, newValue: true },\n   *   { op: 'replace', index: 3, oldValue: false, newValue: true },\n   *   { op: 'insert', index: 4, oldValue: false, newValue: true },\n   * ]\n   * // or when the new index map changes have less indexes\n   * [\n   *   { op: 'replace', index: 1, oldValue: false, newValue: true },\n   *   { op: 'remove', index: 4, oldValue: false, newValue: true },\n   * ]\n   * ```\n   *\n   * @returns {ChangesObserver}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  createObserver() {\n    const observer = new ChangesObserver();\n    _classPrivateFieldGet(this, _observers).add(observer);\n    observer.addLocalHook('unsubscribe', () => {\n      _classPrivateFieldGet(this, _observers).delete(observer);\n    });\n    observer._writeInitialChanges(arrayDiff(_classPrivateFieldGet(this, _indexMatrix), _classPrivateFieldGet(this, _currentIndexState)));\n    return observer;\n  }\n\n  /**\n   * The method is an entry point for triggering new index map changes. Emitting the\n   * changes triggers comparing algorithm which compares last saved state with a new\n   * state. When there are some differences, the changes are sent to all subscribers.\n   *\n   * @param {Array} indexesState An array with index map state.\n   */\n  emit(indexesState) {\n    let currentIndexState = _classPrivateFieldGet(this, _currentIndexState);\n    if (!_classPrivateFieldGet(this, _isMatrixIndexesInitialized) || _classPrivateFieldGet(this, _indexMatrix).length !== indexesState.length) {\n      if (indexesState.length === 0) {\n        indexesState = new Array(currentIndexState.length).fill(_classPrivateFieldGet(this, _initialIndexValue));\n      } else {\n        _classPrivateFieldSet(this, _indexMatrix, new Array(indexesState.length).fill(_classPrivateFieldGet(this, _initialIndexValue)));\n      }\n      if (!_classPrivateFieldGet(this, _isMatrixIndexesInitialized)) {\n        _classPrivateFieldSet(this, _isMatrixIndexesInitialized, true);\n        currentIndexState = _classPrivateFieldGet(this, _indexMatrix);\n      }\n    }\n    const changes = arrayDiff(currentIndexState, indexesState);\n    _classPrivateFieldGet(this, _observers).forEach(observer => observer._write(changes));\n    _classPrivateFieldSet(this, _currentIndexState, indexesState);\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nimport { arrayMap } from \"../helpers/array.mjs\";\nimport { createIndexMap, getListWithInsertedItems, getListWithRemovedItems, HidingMap, IndexesSequence, TrimmingMap } from \"./maps/index.mjs\";\nimport { AggregatedCollection, MapCollection } from \"./mapCollections/index.mjs\";\nimport localHooks from \"../mixins/localHooks.mjs\";\nimport { mixin } from \"../helpers/object.mjs\";\nimport { isDefined } from \"../helpers/mixed.mjs\";\nimport { ChangesObservable } from \"./changesObservable/observable.mjs\";\n/**\n * A set of deprecated feature names.\n *\n * @type {Set<string>}\n */\n// eslint-disable-next-line no-unused-vars\nconst deprecationWarns = new Set();\n\n/**\n * @class IndexMapper\n * @description\n *\n * Index mapper stores, registers and manages the indexes on the basis of calculations collected from the subsidiary maps.\n * It should be seen as a single source of truth (regarding row and column indexes, for example, their sequence, information if they are skipped in the process of rendering (hidden or trimmed), values linked to them)\n * for any operation that considers CRUD actions such as **insertion**, **movement**, **removal** etc, and is used to properly calculate physical and visual indexes translations in both ways.\n * It has a built-in cache that is updated only when the data or structure changes.\n *\n * **Physical index** is a type of an index from the sequence of indexes assigned to the data source rows or columns\n *  (from 0 to n, where n is number of the cells on the axis of data set).\n * **Visual index** is a type of an index from the sequence of indexes assigned to rows or columns existing in {@link DataMap} (from 0 to n, where n is number of the cells on the axis of data set).\n * **Renderable index** is a type of an index from the sequence of indexes assigned to rows or columns whose may be rendered (when they are in a viewport; from 0 to n, where n is number of the cells renderable on the axis).\n *\n * There are different kinds of index maps which may be registered in the collections and can be used by a reference.\n * They also expose public API and trigger two local hooks such as `init` (on initialization) and `change` (on change).\n *\n * These are: {@link IndexesSequence}, {@link PhysicalIndexToValueMap}, {@link LinkedPhysicalIndexToValueMap}, {@link HidingMap}, and {@link TrimmingMap}.\n */\nexport class IndexMapper {\n  constructor() {\n    /**\n     * Map for storing the sequence of indexes.\n     *\n     * It is registered by default and may be used from API methods.\n     *\n     * @private\n     * @type {IndexesSequence}\n     */\n    this.indexesSequence = new IndexesSequence();\n    /**\n     * Collection for different trimming maps. Indexes marked as trimmed in any map WILL NOT be included in\n     * the {@link DataMap} and won't be rendered.\n     *\n     * @private\n     * @type {MapCollection}\n     */\n    this.trimmingMapsCollection = new AggregatedCollection(valuesForIndex => valuesForIndex.some(value => value === true), false);\n    /**\n     * Collection for different hiding maps. Indexes marked as hidden in any map WILL be included in the {@link DataMap},\n     * but won't be rendered.\n     *\n     * @private\n     * @type {MapCollection}\n     */\n    this.hidingMapsCollection = new AggregatedCollection(valuesForIndex => valuesForIndex.some(value => value === true), false);\n    /**\n     * Collection for another kind of maps. There are stored mappings from indexes (visual or physical) to values.\n     *\n     * @private\n     * @type {MapCollection}\n     */\n    this.variousMapsCollection = new MapCollection();\n    /**\n     * The class instance collects row and column index changes that happen while the Handsontable\n     * is running. The object allows creating observers that you can subscribe. Each event represents\n     * the index change (e.g., insert, removing, change index value), which can be consumed by a\n     * developer to update its logic.\n     *\n     * @private\n     * @type {ChangesObservable}\n     */\n    this.hidingChangesObservable = new ChangesObservable({\n      initialIndexValue: false\n    });\n    /**\n     * Cache for list of not trimmed indexes, respecting the indexes sequence (physical indexes).\n     *\n     * Note: Please keep in mind that trimmed index can be also hidden.\n     *\n     * @private\n     * @type {Array}\n     */\n    this.notTrimmedIndexesCache = [];\n    /**\n     * Cache for list of not hidden indexes, respecting the indexes sequence (physical indexes).\n     *\n     * Note: Please keep in mind that hidden index can be also trimmed.\n     *\n     * @private\n     * @type {Array}\n     */\n    this.notHiddenIndexesCache = [];\n    /**\n     * Flag determining whether actions performed on index mapper have been batched. It's used for cache management.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.isBatched = false;\n    /**\n     * Flag determining whether any action on indexes sequence has been performed. It's used for cache management.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.indexesSequenceChanged = false;\n    /**\n     * Flag informing about source of the change.\n     *\n     * @type {undefined|string}\n     */\n    this.indexesChangeSource = void 0;\n    /**\n     * Flag determining whether any action on trimmed indexes has been performed. It's used for cache management.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.trimmedIndexesChanged = false;\n    /**\n     * Flag determining whether any action on hidden indexes has been performed. It's used for cache management.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.hiddenIndexesChanged = false;\n    /**\n     * Physical indexes (respecting the sequence of indexes) which may be rendered (when they are in a viewport).\n     *\n     * @private\n     * @type {Array}\n     */\n    this.renderablePhysicalIndexesCache = [];\n    /**\n     * Visual indexes (native map's value) corresponding to physical indexes (native map's index).\n     *\n     * @private\n     * @type {Map}\n     */\n    this.fromPhysicalToVisualIndexesCache = new Map();\n    /**\n     * Visual indexes (native map's value) corresponding to physical indexes (native map's index).\n     *\n     * @private\n     * @type {Map}\n     */\n    this.fromVisualToRenderableIndexesCache = new Map();\n    this.indexesSequence.addLocalHook('change', () => {\n      this.indexesSequenceChanged = true;\n\n      // Sequence of stored indexes might change.\n      this.updateCache();\n      this.runLocalHooks('indexesSequenceChange', this.indexesChangeSource);\n      this.runLocalHooks('change', this.indexesSequence, null);\n    });\n    this.trimmingMapsCollection.addLocalHook('change', changedMap => {\n      this.trimmedIndexesChanged = true;\n\n      // Number of trimmed indexes might change.\n      this.updateCache();\n      this.runLocalHooks('change', changedMap, this.trimmingMapsCollection);\n    });\n    this.hidingMapsCollection.addLocalHook('change', changedMap => {\n      this.hiddenIndexesChanged = true;\n\n      // Number of hidden indexes might change.\n      this.updateCache();\n      this.runLocalHooks('change', changedMap, this.hidingMapsCollection);\n    });\n    this.variousMapsCollection.addLocalHook('change', changedMap => {\n      this.runLocalHooks('change', changedMap, this.variousMapsCollection);\n    });\n  }\n\n  /**\n   * Suspends the cache update for this map. The method is helpful to group multiple\n   * operations, which affects the cache. In this case, the cache will be updated once after\n   * calling the `resumeOperations` method.\n   */\n  suspendOperations() {\n    this.isBatched = true;\n  }\n\n  /**\n   * Resumes the cache update for this map. It recalculates the cache and restores the\n   * default behavior where each map modification updates the cache.\n   */\n  resumeOperations() {\n    this.isBatched = false;\n    this.updateCache();\n  }\n\n  /**\n   * It creates and returns the new instance of the ChangesObserver object. The object\n   * allows listening to the index changes that happen while the Handsontable is running.\n   *\n   * @param {string} indexMapType The index map type which we want to observe.\n   *                              Currently, only the 'hiding' index map types are observable.\n   * @returns {ChangesObserver}\n   */\n  createChangesObserver(indexMapType) {\n    if (indexMapType !== 'hiding') {\n      throw new Error(`Unsupported index map type \"${indexMapType}\".`);\n    }\n    return this.hidingChangesObservable.createObserver();\n  }\n\n  /**\n   * Creates and registers a new `IndexMap` for a specified `IndexMapper` instance.\n   *\n   * @param {string} indexName A unique index name.\n   * @param {string} mapType The index map type (e.g., \"hiding\", \"trimming\", \"physicalIndexToValue\").\n   * @param {*} [initValueOrFn] The initial value for the index map.\n   * @returns {IndexMap}\n   */\n  createAndRegisterIndexMap(indexName, mapType, initValueOrFn) {\n    return this.registerMap(indexName, createIndexMap(mapType, initValueOrFn));\n  }\n\n  /**\n   * Register map which provide some index mappings. Type of map determining to which collection it will be added.\n   *\n   * @param {string} uniqueName Name of the index map. It should be unique.\n   * @param {IndexMap} indexMap Registered index map updated on items removal and insertion.\n   * @returns {IndexMap}\n   */\n  registerMap(uniqueName, indexMap) {\n    if (this.trimmingMapsCollection.get(uniqueName) || this.hidingMapsCollection.get(uniqueName) || this.variousMapsCollection.get(uniqueName)) {\n      throw Error(`Map with name \"${uniqueName}\" has been already registered.`);\n    }\n    if (indexMap instanceof TrimmingMap) {\n      this.trimmingMapsCollection.register(uniqueName, indexMap);\n    } else if (indexMap instanceof HidingMap) {\n      this.hidingMapsCollection.register(uniqueName, indexMap);\n    } else {\n      this.variousMapsCollection.register(uniqueName, indexMap);\n    }\n    const numberOfIndexes = this.getNumberOfIndexes();\n\n    /*\n      We initialize map ony when we have full information about number of indexes and the dataset is not empty.\n      Otherwise it's unnecessary. Initialization of empty array would not give any positive changes. After initializing\n      it with number of indexes equal to 0 the map would be still empty. What's more there would be triggered\n      not needed hook (no real change have occurred). Number of indexes is known after loading data (the `loadData`\n      function from the `Core`).\n     */\n    if (numberOfIndexes > 0) {\n      indexMap.init(numberOfIndexes);\n    }\n    return indexMap;\n  }\n\n  /**\n   * Unregister a map with given name.\n   *\n   * @param {string} name Name of the index map.\n   */\n  unregisterMap(name) {\n    this.trimmingMapsCollection.unregister(name);\n    this.hidingMapsCollection.unregister(name);\n    this.variousMapsCollection.unregister(name);\n  }\n\n  /**\n   * Unregisters all collected index map instances from all map collection types.\n   */\n  unregisterAll() {\n    this.trimmingMapsCollection.unregisterAll();\n    this.hidingMapsCollection.unregisterAll();\n    this.variousMapsCollection.unregisterAll();\n  }\n\n  /**\n   * Get a physical index corresponding to the given visual index.\n   *\n   * @param {number} visualIndex Visual index.\n   * @returns {number|null} Returns translated index mapped by passed visual index.\n   */\n  getPhysicalFromVisualIndex(visualIndex) {\n    // Index in the table boundaries provided by the `DataMap`.\n    const physicalIndex = this.notTrimmedIndexesCache[visualIndex];\n    if (isDefined(physicalIndex)) {\n      return physicalIndex;\n    }\n    return null;\n  }\n\n  /**\n   * Get a physical index corresponding to the given renderable index.\n   *\n   * @param {number} renderableIndex Renderable index.\n   * @returns {null|number}\n   */\n  getPhysicalFromRenderableIndex(renderableIndex) {\n    const physicalIndex = this.renderablePhysicalIndexesCache[renderableIndex];\n\n    // Index in the renderable table boundaries.\n    if (isDefined(physicalIndex)) {\n      return physicalIndex;\n    }\n    return null;\n  }\n\n  /**\n   * Get a visual index corresponding to the given physical index.\n   *\n   * @param {number} physicalIndex Physical index to search.\n   * @returns {number|null} Returns a visual index of the index mapper.\n   */\n  getVisualFromPhysicalIndex(physicalIndex) {\n    const visualIndex = this.fromPhysicalToVisualIndexesCache.get(physicalIndex);\n\n    // Index in the table boundaries provided by the `DataMap`.\n    if (isDefined(visualIndex)) {\n      return visualIndex;\n    }\n    return null;\n  }\n\n  /**\n   * Get a visual index corresponding to the given renderable index.\n   *\n   * @param {number} renderableIndex Renderable index.\n   * @returns {null|number}\n   */\n  getVisualFromRenderableIndex(renderableIndex) {\n    return this.getVisualFromPhysicalIndex(this.getPhysicalFromRenderableIndex(renderableIndex));\n  }\n\n  /**\n   * Get a renderable index corresponding to the given visual index.\n   *\n   * @param {number} visualIndex Visual index.\n   * @returns {null|number}\n   */\n  getRenderableFromVisualIndex(visualIndex) {\n    const renderableIndex = this.fromVisualToRenderableIndexesCache.get(visualIndex);\n\n    // Index in the renderable table boundaries.\n    if (isDefined(renderableIndex)) {\n      return renderableIndex;\n    }\n    return null;\n  }\n\n  /**\n   * Search for the nearest not-hidden row or column.\n   *\n   * @param {number} fromVisualIndex The visual index of the row or column from which the search starts.<br><br>\n   * If the row or column from which the search starts is not hidden, the method simply returns the `fromVisualIndex` number.\n   * @param {number} searchDirection The search direction.<br><br>`1`: search from `fromVisualIndex` to the end of the dataset.<br><br>\n   * `-1`: search from `fromVisualIndex` to the beginning of the dataset (i.e., to the row or column at visual index `0`).\n   * @param {boolean} searchAlsoOtherWayAround `true`: if a search in a first direction failed, try the opposite direction.<br><br>\n   * `false`: search in one direction only.\n   *\n   * @returns {number|null} A visual index of a row or column, or `null`.\n   */\n  getNearestNotHiddenIndex(fromVisualIndex, searchDirection) {\n    let searchAlsoOtherWayAround = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const physicalIndex = this.getPhysicalFromVisualIndex(fromVisualIndex);\n    if (physicalIndex === null) {\n      return null;\n    }\n    if (this.fromVisualToRenderableIndexesCache.has(fromVisualIndex)) {\n      return fromVisualIndex;\n    }\n    const visibleIndexes = Array.from(this.fromVisualToRenderableIndexesCache.keys());\n    let index = -1;\n    if (searchDirection > 0) {\n      index = visibleIndexes.findIndex(visualIndex => visualIndex > fromVisualIndex);\n    } else {\n      index = visibleIndexes.reverse().findIndex(visualIndex => visualIndex < fromVisualIndex);\n    }\n    if (index === -1) {\n      if (searchAlsoOtherWayAround) {\n        return this.getNearestNotHiddenIndex(fromVisualIndex, -searchDirection, false);\n      }\n      return null;\n    }\n    return visibleIndexes[index];\n  }\n\n  /**\n   * Set default values for all indexes in registered index maps.\n   *\n   * @param {number} [length] Destination length for all stored index maps.\n   */\n  initToLength() {\n    let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getNumberOfIndexes();\n    this.notTrimmedIndexesCache = [...new Array(length).keys()];\n    this.notHiddenIndexesCache = [...new Array(length).keys()];\n    this.suspendOperations();\n    this.indexesChangeSource = 'init';\n    this.indexesSequence.init(length);\n    this.indexesChangeSource = void 0;\n    this.trimmingMapsCollection.initEvery(length);\n    this.resumeOperations();\n\n    // We move initialization of hidden collection to next batch for purpose of working on sequence of already trimmed indexes.\n    this.suspendOperations();\n    this.hidingMapsCollection.initEvery(length);\n\n    // It shouldn't reset the cache.\n    this.variousMapsCollection.initEvery(length);\n    this.resumeOperations();\n    this.runLocalHooks('init');\n  }\n\n  /**\n   * Trim/extend the mappers to fit the desired length.\n   *\n   * @param {number} length New mapper length.\n   */\n  fitToLength(length) {\n    const currentIndexCount = this.getNumberOfIndexes();\n    if (length < currentIndexCount) {\n      const indexesToBeRemoved = [...Array(this.getNumberOfIndexes() - length).keys()].map(i => i + length);\n      this.removeIndexes(indexesToBeRemoved);\n    } else {\n      this.insertIndexes(currentIndexCount, length - currentIndexCount);\n    }\n  }\n\n  /**\n   * Get sequence of indexes.\n   *\n   * @returns {Array} Physical indexes.\n   */\n  getIndexesSequence() {\n    return this.indexesSequence.getValues();\n  }\n\n  /**\n   * Set completely new indexes sequence.\n   *\n   * @param {Array} indexes Physical indexes.\n   */\n  setIndexesSequence(indexes) {\n    if (this.indexesChangeSource === void 0) {\n      this.indexesChangeSource = 'update';\n    }\n    this.indexesSequence.setValues(indexes);\n    if (this.indexesChangeSource === 'update') {\n      this.indexesChangeSource = void 0;\n    }\n  }\n\n  /**\n   * Get all NOT trimmed indexes.\n   *\n   * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.\n   *\n   * @param {boolean} [readFromCache=true] Determine if read indexes from cache.\n   * @returns {Array} List of physical indexes. Index of this native array is a \"visual index\",\n   * value of this native array is a \"physical index\".\n   */\n  getNotTrimmedIndexes() {\n    let readFromCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (readFromCache === true) {\n      return this.notTrimmedIndexesCache;\n    }\n    const indexesSequence = this.getIndexesSequence();\n    return indexesSequence.filter(physicalIndex => this.isTrimmed(physicalIndex) === false);\n  }\n\n  /**\n   * Get length of all NOT trimmed indexes.\n   *\n   * Note: Indexes marked as trimmed aren't included in a {@link DataMap} and aren't rendered.\n   *\n   * @returns {number}\n   */\n  getNotTrimmedIndexesLength() {\n    return this.getNotTrimmedIndexes().length;\n  }\n\n  /**\n   * Get all NOT hidden indexes.\n   *\n   * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.\n   *\n   * @param {boolean} [readFromCache=true] Determine if read indexes from cache.\n   * @returns {Array} List of physical indexes. Please keep in mind that index of this native array IS NOT a \"visual index\".\n   */\n  getNotHiddenIndexes() {\n    let readFromCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (readFromCache === true) {\n      return this.notHiddenIndexesCache;\n    }\n    const indexesSequence = this.getIndexesSequence();\n    return indexesSequence.filter(physicalIndex => this.isHidden(physicalIndex) === false);\n  }\n\n  /**\n   * Get length of all NOT hidden indexes.\n   *\n   * Note: Indexes marked as hidden are included in a {@link DataMap}, but aren't rendered.\n   *\n   * @returns {number}\n   */\n  getNotHiddenIndexesLength() {\n    return this.getNotHiddenIndexes().length;\n  }\n\n  /**\n   * Get list of physical indexes (respecting the sequence of indexes) which may be rendered (when they are in a viewport).\n   *\n   * @param {boolean} [readFromCache=true] Determine if read indexes from cache.\n   * @returns {Array} List of physical indexes. Index of this native array is a \"renderable index\",\n   * value of this native array is a \"physical index\".\n   */\n  getRenderableIndexes() {\n    let readFromCache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (readFromCache === true) {\n      return this.renderablePhysicalIndexesCache;\n    }\n    const notTrimmedIndexes = this.getNotTrimmedIndexes();\n    return notTrimmedIndexes.filter(physicalIndex => this.isHidden(physicalIndex) === false);\n  }\n\n  /**\n   * Get length of all NOT trimmed and NOT hidden indexes.\n   *\n   * @returns {number}\n   */\n  getRenderableIndexesLength() {\n    return this.getRenderableIndexes().length;\n  }\n\n  /**\n   * Get number of all indexes.\n   *\n   * @returns {number}\n   */\n  getNumberOfIndexes() {\n    return this.getIndexesSequence().length;\n  }\n\n  /**\n   * Move indexes in the index mapper.\n   *\n   * @param {number|Array} movedIndexes Visual index(es) to move.\n   * @param {number} finalIndex Visual index being a start index for the moved elements.\n   */\n  moveIndexes(movedIndexes, finalIndex) {\n    if (typeof movedIndexes === 'number') {\n      movedIndexes = [movedIndexes];\n    }\n    const physicalMovedIndexes = arrayMap(movedIndexes, visualIndex => this.getPhysicalFromVisualIndex(visualIndex));\n    const notTrimmedIndexesLength = this.getNotTrimmedIndexesLength();\n    const movedIndexesLength = movedIndexes.length;\n\n    // Removing moved indexes without re-indexing.\n    const notMovedIndexes = getListWithRemovedItems(this.getIndexesSequence(), physicalMovedIndexes);\n    const notTrimmedNotMovedItems = notMovedIndexes.filter(index => this.isTrimmed(index) === false);\n\n    // When item(s) are moved after the last visible item we assign the last possible index.\n    let destinationPosition = notMovedIndexes.indexOf(notTrimmedNotMovedItems[notTrimmedNotMovedItems.length - 1]) + 1;\n\n    // Otherwise, we find proper index for inserted item(s).\n    if (finalIndex + movedIndexesLength < notTrimmedIndexesLength) {\n      // Physical index at final index position.\n      const physicalIndex = notTrimmedNotMovedItems[finalIndex];\n      destinationPosition = notMovedIndexes.indexOf(physicalIndex);\n    }\n    this.indexesChangeSource = 'move';\n\n    // Adding indexes without re-indexing.\n    this.setIndexesSequence(getListWithInsertedItems(notMovedIndexes, destinationPosition, physicalMovedIndexes));\n    this.indexesChangeSource = void 0;\n  }\n\n  /**\n   * Get whether index is trimmed. Index marked as trimmed isn't included in a {@link DataMap} and isn't rendered.\n   *\n   * @param {number} physicalIndex Physical index.\n   * @returns {boolean}\n   */\n  isTrimmed(physicalIndex) {\n    return this.trimmingMapsCollection.getMergedValueAtIndex(physicalIndex);\n  }\n\n  /**\n   * Get whether index is hidden. Index marked as hidden is included in a {@link DataMap}, but isn't rendered.\n   *\n   * @param {number} physicalIndex Physical index.\n   * @returns {boolean}\n   */\n  isHidden(physicalIndex) {\n    return this.hidingMapsCollection.getMergedValueAtIndex(physicalIndex);\n  }\n\n  /**\n   * Insert new indexes and corresponding mapping and update values of the others, for all stored index maps.\n   *\n   * @private\n   * @param {number} firstInsertedVisualIndex First inserted visual index.\n   * @param {number} amountOfIndexes Amount of inserted indexes.\n   */\n  insertIndexes(firstInsertedVisualIndex, amountOfIndexes) {\n    const nthVisibleIndex = this.getNotTrimmedIndexes()[firstInsertedVisualIndex];\n    const firstInsertedPhysicalIndex = isDefined(nthVisibleIndex) ? nthVisibleIndex : this.getNumberOfIndexes();\n    const insertionIndex = this.getIndexesSequence().includes(nthVisibleIndex) ? this.getIndexesSequence().indexOf(nthVisibleIndex) : this.getNumberOfIndexes();\n    const insertedIndexes = arrayMap(new Array(amountOfIndexes).fill(firstInsertedPhysicalIndex), (nextIndex, stepsFromStart) => nextIndex + stepsFromStart);\n    this.suspendOperations();\n    this.indexesChangeSource = 'insert';\n    this.indexesSequence.insert(insertionIndex, insertedIndexes);\n    this.indexesChangeSource = void 0;\n    this.trimmingMapsCollection.insertToEvery(insertionIndex, insertedIndexes);\n    this.hidingMapsCollection.insertToEvery(insertionIndex, insertedIndexes);\n    this.variousMapsCollection.insertToEvery(insertionIndex, insertedIndexes);\n    this.resumeOperations();\n  }\n\n  /**\n   * Remove some indexes and corresponding mappings and update values of the others, for all stored index maps.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  removeIndexes(removedIndexes) {\n    this.suspendOperations();\n    this.indexesChangeSource = 'remove';\n    this.indexesSequence.remove(removedIndexes);\n    this.indexesChangeSource = void 0;\n    this.trimmingMapsCollection.removeFromEvery(removedIndexes);\n    this.hidingMapsCollection.removeFromEvery(removedIndexes);\n    this.variousMapsCollection.removeFromEvery(removedIndexes);\n    this.resumeOperations();\n  }\n\n  /**\n   * Rebuild cache for some indexes. Every action on indexes sequence or indexes skipped in the process of rendering\n   * by default reset cache, thus batching some index maps actions is recommended.\n   *\n   * @private\n   * @param {boolean} [force=false] Determine if force cache update.\n   */\n  updateCache() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const anyCachedIndexChanged = this.indexesSequenceChanged || this.trimmedIndexesChanged || this.hiddenIndexesChanged;\n    if (force === true || this.isBatched === false && anyCachedIndexChanged === true) {\n      this.trimmingMapsCollection.updateCache();\n      this.hidingMapsCollection.updateCache();\n      this.notTrimmedIndexesCache = this.getNotTrimmedIndexes(false);\n      this.notHiddenIndexesCache = this.getNotHiddenIndexes(false);\n      this.renderablePhysicalIndexesCache = this.getRenderableIndexes(false);\n      this.cacheFromPhysicalToVisualIndexes();\n      this.cacheFromVisualToRenderableIndexes();\n\n      // Currently there's support only for the \"hiding\" map type.\n      if (this.hiddenIndexesChanged) {\n        this.hidingChangesObservable.emit(this.hidingMapsCollection.getMergedValues());\n      }\n      this.runLocalHooks('cacheUpdated', {\n        indexesSequenceChanged: this.indexesSequenceChanged,\n        trimmedIndexesChanged: this.trimmedIndexesChanged,\n        hiddenIndexesChanged: this.hiddenIndexesChanged\n      });\n      this.indexesSequenceChanged = false;\n      this.trimmedIndexesChanged = false;\n      this.hiddenIndexesChanged = false;\n    }\n  }\n\n  /**\n   * Update cache for translations from physical to visual indexes.\n   *\n   * @private\n   */\n  cacheFromPhysicalToVisualIndexes() {\n    const nrOfNotTrimmedIndexes = this.getNotTrimmedIndexesLength();\n    this.fromPhysicalToVisualIndexesCache.clear();\n    for (let visualIndex = 0; visualIndex < nrOfNotTrimmedIndexes; visualIndex += 1) {\n      const physicalIndex = this.getPhysicalFromVisualIndex(visualIndex);\n\n      // Every visual index have corresponding physical index, but some physical indexes may don't have\n      // corresponding visual indexes (physical indexes may represent trimmed indexes, beyond the table boundaries)\n      this.fromPhysicalToVisualIndexesCache.set(physicalIndex, visualIndex);\n    }\n  }\n\n  /**\n   * Update cache for translations from visual to renderable indexes.\n   *\n   * @private\n   */\n  cacheFromVisualToRenderableIndexes() {\n    const nrOfRenderableIndexes = this.getRenderableIndexesLength();\n    this.fromVisualToRenderableIndexesCache.clear();\n    for (let renderableIndex = 0; renderableIndex < nrOfRenderableIndexes; renderableIndex += 1) {\n      // Can't use getRenderableFromVisualIndex here because we're building the cache here\n      const physicalIndex = this.getPhysicalFromRenderableIndex(renderableIndex);\n      const visualIndex = this.getVisualFromPhysicalIndex(physicalIndex);\n      this.fromVisualToRenderableIndexesCache.set(visualIndex, renderableIndex);\n    }\n  }\n}\nmixin(IndexMapper, localHooks);","import { isUndefined, isDefined } from \"./../helpers/mixed.mjs\";\nimport { objectEach } from \"./../helpers/object.mjs\";\nimport { error } from \"./../helpers/console.mjs\";\nimport { toSingleLine } from \"./../helpers/templateLiteralTag.mjs\";\n/**\n * Perform shallow extend of a target object with only this extension's properties which doesn't exist in the target.\n *\n * TODO: Maybe it should be moved to global helpers? It's changed `extend` function.\n *\n * @param {object} target An object that will receive the new properties.\n * @param {object} extension An object containing additional properties to merge into the target.\n * @returns {object}\n */\nexport function extendNotExistingKeys(target, extension) {\n  objectEach(extension, (value, key) => {\n    if (isUndefined(target[key])) {\n      target[key] = value;\n    }\n  });\n  return target;\n}\n\n/**\n * Create range of values basing on cell indexes. For example, it will create below ranges for specified function arguments:\n *\n * createCellHeadersRange(2, 7) => `2-7`\n * createCellHeadersRange(7, 2) => `2-7`\n * createCellHeadersRange(0, 4, 'A', 'D') => `A-D`\n * createCellHeadersRange(4, 0, 'D', 'A') => `A-D`.\n *\n * @param {number} firstRowIndex Index of \"first\" cell.\n * @param {number} nextRowIndex Index of \"next\" cell.\n * @param {*} fromValue Value which will represent \"first\" cell.\n * @param {*} toValue Value which will represent \"next\" cell.\n * @returns {string} Value representing range i.e. A-Z, 11-15.\n */\nexport function createCellHeadersRange(firstRowIndex, nextRowIndex) {\n  let fromValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : firstRowIndex;\n  let toValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : nextRowIndex;\n  // Will swap `fromValue` with `toValue` if it's necessary.\n  let [from, to] = [fromValue, toValue];\n  if (firstRowIndex > nextRowIndex) {\n    [from, to] = [to, from];\n  }\n  return `${from}-${to}`;\n}\n\n/**\n * Normalize language code. It takes handled languageCode proposition and change it to proper languageCode.\n * For example, when it takes `eN-us` as parameter it return `en-US`.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {string}\n */\nexport function normalizeLanguageCode(languageCode) {\n  const languageCodePattern = /^([a-zA-Z]{2})-([a-zA-Z]{2})$/;\n  const partsOfLanguageCode = languageCodePattern.exec(languageCode);\n  if (partsOfLanguageCode) {\n    return `${partsOfLanguageCode[1].toLowerCase()}-${partsOfLanguageCode[2].toUpperCase()}`;\n  }\n  return languageCode;\n}\n\n/**\n *\n * Warn user if there is no registered language.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n */\nexport function warnUserAboutLanguageRegistration(languageCode) {\n  if (isDefined(languageCode)) {\n    error(toSingleLine`Language with code \"${languageCode}\" was not found. You should register particular language\\x20\n    before using it. Read more about this issue at: https://docs.handsontable.com/i18n/missing-language-code.`);\n  }\n}","/**\n * Try to choose plural form from available phrase propositions.\n *\n * @param {Array} phrasePropositions List of phrases propositions.\n * @param {number} pluralForm Number determining which phrase form should be used.\n *\n * @returns {string|Array} One particular phrase if it's possible, list of unchanged phrase propositions otherwise.\n */\nexport default function pluralize(phrasePropositions, pluralForm) {\n  const isPluralizable = Array.isArray(phrasePropositions) && Number.isInteger(pluralForm);\n  if (isPluralizable) {\n    return phrasePropositions[pluralForm];\n  }\n  return phrasePropositions;\n}","import staticRegister from \"./../../utils/staticRegister.mjs\";\nimport pluralizeFn from \"./pluralize.mjs\";\nconst {\n  register: registerGloballyPhraseFormatter,\n  getValues: getGlobalPhraseFormatters\n} = staticRegister('phraseFormatters');\n\n/**\n * Register phrase formatter.\n *\n * @param {string} name Name of formatter.\n * @param {Function} formatterFn Function which will be applied on phrase propositions. It will transform them if it's possible.\n */\nexport function register(name, formatterFn) {\n  registerGloballyPhraseFormatter(name, formatterFn);\n}\n\n/**\n * Get all registered previously formatters.\n *\n * @returns {Array}\n */\nexport function getAll() {\n  return getGlobalPhraseFormatters();\n}\nexport { register as registerPhraseFormatter, getAll as getPhraseFormatters };\nregister('pluralize', pluralizeFn);","/**\n * Constants for parts of translation.\n */\n\nexport const CONTEXT_MENU_ITEMS_NAMESPACE = 'ContextMenu:items';\nconst CM_ALIAS = CONTEXT_MENU_ITEMS_NAMESPACE;\nexport const CONTEXTMENU_ITEMS_NO_ITEMS = `${CM_ALIAS}.noItems`;\nexport const CONTEXTMENU_ITEMS_ROW_ABOVE = `${CM_ALIAS}.insertRowAbove`;\nexport const CONTEXTMENU_ITEMS_ROW_BELOW = `${CM_ALIAS}.insertRowBelow`;\nexport const CONTEXTMENU_ITEMS_INSERT_LEFT = `${CM_ALIAS}.insertColumnOnTheLeft`;\nexport const CONTEXTMENU_ITEMS_INSERT_RIGHT = `${CM_ALIAS}.insertColumnOnTheRight`;\nexport const CONTEXTMENU_ITEMS_REMOVE_ROW = `${CM_ALIAS}.removeRow`;\nexport const CONTEXTMENU_ITEMS_REMOVE_COLUMN = `${CM_ALIAS}.removeColumn`;\nexport const CONTEXTMENU_ITEMS_UNDO = `${CM_ALIAS}.undo`;\nexport const CONTEXTMENU_ITEMS_REDO = `${CM_ALIAS}.redo`;\nexport const CONTEXTMENU_ITEMS_READ_ONLY = `${CM_ALIAS}.readOnly`;\nexport const CONTEXTMENU_ITEMS_CLEAR_COLUMN = `${CM_ALIAS}.clearColumn`;\nexport const CONTEXTMENU_ITEMS_COPY = `${CM_ALIAS}.copy`;\nexport const CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS = `${CM_ALIAS}.copyWithHeaders`;\nexport const CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS = `${CM_ALIAS}.copyWithGroupHeaders`;\nexport const CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY = `${CM_ALIAS}.copyHeadersOnly`;\nexport const CONTEXTMENU_ITEMS_CUT = `${CM_ALIAS}.cut`;\nexport const CONTEXTMENU_ITEMS_FREEZE_COLUMN = `${CM_ALIAS}.freezeColumn`;\nexport const CONTEXTMENU_ITEMS_UNFREEZE_COLUMN = `${CM_ALIAS}.unfreezeColumn`;\nexport const CONTEXTMENU_ITEMS_MERGE_CELLS = `${CM_ALIAS}.mergeCells`;\nexport const CONTEXTMENU_ITEMS_UNMERGE_CELLS = `${CM_ALIAS}.unmergeCells`;\nexport const CONTEXTMENU_ITEMS_ADD_COMMENT = `${CM_ALIAS}.addComment`;\nexport const CONTEXTMENU_ITEMS_EDIT_COMMENT = `${CM_ALIAS}.editComment`;\nexport const CONTEXTMENU_ITEMS_REMOVE_COMMENT = `${CM_ALIAS}.removeComment`;\nexport const CONTEXTMENU_ITEMS_READ_ONLY_COMMENT = `${CM_ALIAS}.readOnlyComment`;\nexport const CONTEXTMENU_ITEMS_ALIGNMENT = `${CM_ALIAS}.align`;\nexport const CONTEXTMENU_ITEMS_ALIGNMENT_LEFT = `${CM_ALIAS}.align.left`;\nexport const CONTEXTMENU_ITEMS_ALIGNMENT_CENTER = `${CM_ALIAS}.align.center`;\nexport const CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT = `${CM_ALIAS}.align.right`;\nexport const CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY = `${CM_ALIAS}.align.justify`;\nexport const CONTEXTMENU_ITEMS_ALIGNMENT_TOP = `${CM_ALIAS}.align.top`;\nexport const CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE = `${CM_ALIAS}.align.middle`;\nexport const CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM = `${CM_ALIAS}.align.bottom`;\nexport const CONTEXTMENU_ITEMS_BORDERS = `${CM_ALIAS}.borders`;\nexport const CONTEXTMENU_ITEMS_BORDERS_TOP = `${CM_ALIAS}.borders.top`;\nexport const CONTEXTMENU_ITEMS_BORDERS_RIGHT = `${CM_ALIAS}.borders.right`;\nexport const CONTEXTMENU_ITEMS_BORDERS_BOTTOM = `${CM_ALIAS}.borders.bottom`;\nexport const CONTEXTMENU_ITEMS_BORDERS_LEFT = `${CM_ALIAS}.borders.left`;\nexport const CONTEXTMENU_ITEMS_REMOVE_BORDERS = `${CM_ALIAS}.borders.remove`;\nexport const CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD = `${CM_ALIAS}.nestedHeaders.insertChildRow`; // eslint-disable-line max-len\nexport const CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD = `${CM_ALIAS}.nestedHeaders.detachFromParent`; // eslint-disable-line max-len\n\nexport const CONTEXTMENU_ITEMS_HIDE_COLUMN = `${CM_ALIAS}.hideColumn`;\nexport const CONTEXTMENU_ITEMS_SHOW_COLUMN = `${CM_ALIAS}.showColumn`;\nexport const CONTEXTMENU_ITEMS_HIDE_ROW = `${CM_ALIAS}.hideRow`;\nexport const CONTEXTMENU_ITEMS_SHOW_ROW = `${CM_ALIAS}.showRow`;\nexport const FILTERS_NAMESPACE = 'Filters:';\nexport const FILTERS_CONDITIONS_NAMESPACE = `${FILTERS_NAMESPACE}conditions`;\nexport const FILTERS_CONDITIONS_NONE = `${FILTERS_CONDITIONS_NAMESPACE}.none`;\nexport const FILTERS_CONDITIONS_EMPTY = `${FILTERS_CONDITIONS_NAMESPACE}.isEmpty`;\nexport const FILTERS_CONDITIONS_NOT_EMPTY = `${FILTERS_CONDITIONS_NAMESPACE}.isNotEmpty`;\nexport const FILTERS_CONDITIONS_EQUAL = `${FILTERS_CONDITIONS_NAMESPACE}.isEqualTo`;\nexport const FILTERS_CONDITIONS_NOT_EQUAL = `${FILTERS_CONDITIONS_NAMESPACE}.isNotEqualTo`;\nexport const FILTERS_CONDITIONS_BEGINS_WITH = `${FILTERS_CONDITIONS_NAMESPACE}.beginsWith`;\nexport const FILTERS_CONDITIONS_ENDS_WITH = `${FILTERS_CONDITIONS_NAMESPACE}.endsWith`;\nexport const FILTERS_CONDITIONS_CONTAINS = `${FILTERS_CONDITIONS_NAMESPACE}.contains`;\nexport const FILTERS_CONDITIONS_NOT_CONTAIN = `${FILTERS_CONDITIONS_NAMESPACE}.doesNotContain`;\nexport const FILTERS_CONDITIONS_BY_VALUE = `${FILTERS_CONDITIONS_NAMESPACE}.byValue`;\nexport const FILTERS_CONDITIONS_GREATER_THAN = `${FILTERS_CONDITIONS_NAMESPACE}.greaterThan`;\nexport const FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL = `${FILTERS_CONDITIONS_NAMESPACE}.greaterThanOrEqualTo`;\nexport const FILTERS_CONDITIONS_LESS_THAN = `${FILTERS_CONDITIONS_NAMESPACE}.lessThan`;\nexport const FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL = `${FILTERS_CONDITIONS_NAMESPACE}.lessThanOrEqualTo`;\nexport const FILTERS_CONDITIONS_BETWEEN = `${FILTERS_CONDITIONS_NAMESPACE}.isBetween`;\nexport const FILTERS_CONDITIONS_NOT_BETWEEN = `${FILTERS_CONDITIONS_NAMESPACE}.isNotBetween`;\nexport const FILTERS_CONDITIONS_AFTER = `${FILTERS_CONDITIONS_NAMESPACE}.after`;\nexport const FILTERS_CONDITIONS_BEFORE = `${FILTERS_CONDITIONS_NAMESPACE}.before`;\nexport const FILTERS_CONDITIONS_TODAY = `${FILTERS_CONDITIONS_NAMESPACE}.today`;\nexport const FILTERS_CONDITIONS_TOMORROW = `${FILTERS_CONDITIONS_NAMESPACE}.tomorrow`;\nexport const FILTERS_CONDITIONS_YESTERDAY = `${FILTERS_CONDITIONS_NAMESPACE}.yesterday`;\nexport const FILTERS_DIVS_FILTER_BY_CONDITION = `${FILTERS_NAMESPACE}labels.filterByCondition`;\nexport const FILTERS_DIVS_FILTER_BY_VALUE = `${FILTERS_NAMESPACE}labels.filterByValue`;\nexport const FILTERS_LABELS_CONJUNCTION = `${FILTERS_NAMESPACE}labels.conjunction`;\nexport const FILTERS_LABELS_DISJUNCTION = `${FILTERS_NAMESPACE}labels.disjunction`;\nexport const FILTERS_VALUES_BLANK_CELLS = `${FILTERS_NAMESPACE}values.blankCells`;\nexport const FILTERS_BUTTONS_SELECT_ALL = `${FILTERS_NAMESPACE}buttons.selectAll`;\nexport const FILTERS_BUTTONS_CLEAR = `${FILTERS_NAMESPACE}buttons.clear`;\nexport const FILTERS_BUTTONS_OK = `${FILTERS_NAMESPACE}buttons.ok`;\nexport const FILTERS_BUTTONS_CANCEL = `${FILTERS_NAMESPACE}buttons.cancel`;\nexport const FILTERS_BUTTONS_PLACEHOLDER_SEARCH = `${FILTERS_NAMESPACE}buttons.placeholder.search`;\nexport const FILTERS_BUTTONS_PLACEHOLDER_VALUE = `${FILTERS_NAMESPACE}buttons.placeholder.value`;\nexport const FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE = `${FILTERS_NAMESPACE}buttons.placeholder.secondValue`;\nexport const CHECKBOX_RENDERER_NAMESPACE = 'CheckboxRenderer:';\nexport const CHECKBOX_CHECKED = `${CHECKBOX_RENDERER_NAMESPACE}checked`;\nexport const CHECKBOX_UNCHECKED = `${CHECKBOX_RENDERER_NAMESPACE}unchecked`;","/**\n * @preserve\n * Authors: Handsoncode\n * Last updated: Nov 15, 2017\n *\n * Description: Definition file for English - United States language-country.\n */\nimport * as C from \"../constants.mjs\";\nconst dictionary = {\n  languageCode: 'en-US',\n  [C.CONTEXTMENU_ITEMS_NO_ITEMS]: 'No available options',\n  [C.CONTEXTMENU_ITEMS_ROW_ABOVE]: 'Insert row above',\n  [C.CONTEXTMENU_ITEMS_ROW_BELOW]: 'Insert row below',\n  [C.CONTEXTMENU_ITEMS_INSERT_LEFT]: 'Insert column left',\n  [C.CONTEXTMENU_ITEMS_INSERT_RIGHT]: 'Insert column right',\n  [C.CONTEXTMENU_ITEMS_REMOVE_ROW]: ['Remove row', 'Remove rows'],\n  [C.CONTEXTMENU_ITEMS_REMOVE_COLUMN]: ['Remove column', 'Remove columns'],\n  [C.CONTEXTMENU_ITEMS_UNDO]: 'Undo',\n  [C.CONTEXTMENU_ITEMS_REDO]: 'Redo',\n  [C.CONTEXTMENU_ITEMS_READ_ONLY]: 'Read only',\n  [C.CONTEXTMENU_ITEMS_CLEAR_COLUMN]: 'Clear column',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT]: 'Alignment',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_LEFT]: 'Left',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_CENTER]: 'Center',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT]: 'Right',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY]: 'Justify',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_TOP]: 'Top',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE]: 'Middle',\n  [C.CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM]: 'Bottom',\n  [C.CONTEXTMENU_ITEMS_FREEZE_COLUMN]: 'Freeze column',\n  [C.CONTEXTMENU_ITEMS_UNFREEZE_COLUMN]: 'Unfreeze column',\n  [C.CONTEXTMENU_ITEMS_BORDERS]: 'Borders',\n  [C.CONTEXTMENU_ITEMS_BORDERS_TOP]: 'Top',\n  [C.CONTEXTMENU_ITEMS_BORDERS_RIGHT]: 'Right',\n  [C.CONTEXTMENU_ITEMS_BORDERS_BOTTOM]: 'Bottom',\n  [C.CONTEXTMENU_ITEMS_BORDERS_LEFT]: 'Left',\n  [C.CONTEXTMENU_ITEMS_REMOVE_BORDERS]: 'Remove border(s)',\n  [C.CONTEXTMENU_ITEMS_ADD_COMMENT]: 'Add comment',\n  [C.CONTEXTMENU_ITEMS_EDIT_COMMENT]: 'Edit comment',\n  [C.CONTEXTMENU_ITEMS_REMOVE_COMMENT]: 'Delete comment',\n  [C.CONTEXTMENU_ITEMS_READ_ONLY_COMMENT]: 'Read-only comment',\n  [C.CONTEXTMENU_ITEMS_MERGE_CELLS]: 'Merge cells',\n  [C.CONTEXTMENU_ITEMS_UNMERGE_CELLS]: 'Unmerge cells',\n  [C.CONTEXTMENU_ITEMS_COPY]: 'Copy',\n  [C.CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS]: ['Copy with header', 'Copy with headers'],\n  [C.CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS]: ['Copy with group header', 'Copy with group headers'],\n  [C.CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY]: ['Copy header only', 'Copy headers only'],\n  [C.CONTEXTMENU_ITEMS_CUT]: 'Cut',\n  [C.CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD]: 'Insert child row',\n  [C.CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD]: 'Detach from parent',\n  [C.CONTEXTMENU_ITEMS_HIDE_COLUMN]: ['Hide column', 'Hide columns'],\n  [C.CONTEXTMENU_ITEMS_SHOW_COLUMN]: ['Show column', 'Show columns'],\n  [C.CONTEXTMENU_ITEMS_HIDE_ROW]: ['Hide row', 'Hide rows'],\n  [C.CONTEXTMENU_ITEMS_SHOW_ROW]: ['Show row', 'Show rows'],\n  [C.FILTERS_CONDITIONS_NONE]: 'None',\n  [C.FILTERS_CONDITIONS_EMPTY]: 'Is empty',\n  [C.FILTERS_CONDITIONS_NOT_EMPTY]: 'Is not empty',\n  [C.FILTERS_CONDITIONS_EQUAL]: 'Is equal to',\n  [C.FILTERS_CONDITIONS_NOT_EQUAL]: 'Is not equal to',\n  [C.FILTERS_CONDITIONS_BEGINS_WITH]: 'Begins with',\n  [C.FILTERS_CONDITIONS_ENDS_WITH]: 'Ends with',\n  [C.FILTERS_CONDITIONS_CONTAINS]: 'Contains',\n  [C.FILTERS_CONDITIONS_NOT_CONTAIN]: 'Does not contain',\n  [C.FILTERS_CONDITIONS_GREATER_THAN]: 'Greater than',\n  [C.FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL]: 'Greater than or equal to',\n  [C.FILTERS_CONDITIONS_LESS_THAN]: 'Less than',\n  [C.FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL]: 'Less than or equal to',\n  [C.FILTERS_CONDITIONS_BETWEEN]: 'Is between',\n  [C.FILTERS_CONDITIONS_NOT_BETWEEN]: 'Is not between',\n  [C.FILTERS_CONDITIONS_AFTER]: 'After',\n  [C.FILTERS_CONDITIONS_BEFORE]: 'Before',\n  [C.FILTERS_CONDITIONS_TODAY]: 'Today',\n  [C.FILTERS_CONDITIONS_TOMORROW]: 'Tomorrow',\n  [C.FILTERS_CONDITIONS_YESTERDAY]: 'Yesterday',\n  [C.FILTERS_VALUES_BLANK_CELLS]: 'Blank cells',\n  [C.FILTERS_DIVS_FILTER_BY_CONDITION]: 'Filter by condition',\n  [C.FILTERS_DIVS_FILTER_BY_VALUE]: 'Filter by value',\n  [C.FILTERS_LABELS_CONJUNCTION]: 'And',\n  [C.FILTERS_LABELS_DISJUNCTION]: 'Or',\n  [C.FILTERS_BUTTONS_SELECT_ALL]: 'Select all',\n  [C.FILTERS_BUTTONS_CLEAR]: 'Clear',\n  [C.FILTERS_BUTTONS_OK]: 'OK',\n  [C.FILTERS_BUTTONS_CANCEL]: 'Cancel',\n  [C.FILTERS_BUTTONS_PLACEHOLDER_SEARCH]: 'Search',\n  [C.FILTERS_BUTTONS_PLACEHOLDER_VALUE]: 'Value',\n  [C.FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE]: 'Second value',\n  [C.CHECKBOX_CHECKED]: 'Checked',\n  [C.CHECKBOX_UNCHECKED]: 'Unchecked'\n};\nexport default dictionary;","import { isObject, deepClone } from \"../helpers/object.mjs\";\nimport { arrayEach } from \"./../helpers/array.mjs\";\nimport { isUndefined } from \"../helpers/mixed.mjs\";\nimport { extendNotExistingKeys, normalizeLanguageCode, warnUserAboutLanguageRegistration } from \"./utils.mjs\";\nimport staticRegister from \"../utils/staticRegister.mjs\";\nimport { getPhraseFormatters } from \"./phraseFormatters/index.mjs\";\nimport DEFAULT_DICTIONARY from \"./languages/en-US.mjs\";\nimport * as _dictionaryKeys from \"./constants.mjs\";\nexport const dictionaryKeys = _dictionaryKeys;\nexport const DEFAULT_LANGUAGE_CODE = DEFAULT_DICTIONARY.languageCode;\nconst {\n  register: registerGloballyLanguageDictionary,\n  getItem: getGlobalLanguageDictionary,\n  hasItem: hasGlobalLanguageDictionary,\n  getValues: getGlobalLanguagesDictionaries\n} = staticRegister('languagesDictionaries');\n\n/**\n * Register automatically the default language dictionary.\n */\nregisterLanguageDictionary(DEFAULT_DICTIONARY);\n\n/**\n * Register language dictionary for specific language code.\n *\n * @param {string|object} languageCodeOrDictionary Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE' or object representing dictionary.\n * @param {object} dictionary Dictionary for specific language (optional if first parameter has already dictionary).\n * @returns {object}\n */\nexport function registerLanguageDictionary(languageCodeOrDictionary, dictionary) {\n  let languageCode = languageCodeOrDictionary;\n  let dictionaryObject = dictionary;\n\n  // Dictionary passed as first argument.\n  if (isObject(languageCodeOrDictionary)) {\n    dictionaryObject = languageCodeOrDictionary;\n    languageCode = dictionaryObject.languageCode;\n  }\n  extendLanguageDictionary(languageCode, dictionaryObject);\n  registerGloballyLanguageDictionary(languageCode, deepClone(dictionaryObject));\n\n  // We do not allow user to work with dictionary by reference, it can cause lot of bugs.\n  return deepClone(dictionaryObject);\n}\n\n/**\n * Extend handled dictionary by default language dictionary. As result, if any dictionary key isn't defined for specific language, it will be filled with default language value (\"dictionary gaps\" are supplemented).\n *\n * @private\n * @param {string} languageCode Language code.\n * @param {object} dictionary Dictionary which is extended.\n */\nfunction extendLanguageDictionary(languageCode, dictionary) {\n  if (languageCode !== DEFAULT_LANGUAGE_CODE) {\n    extendNotExistingKeys(dictionary, getGlobalLanguageDictionary(DEFAULT_LANGUAGE_CODE));\n  }\n}\n\n/**\n * Get language dictionary for specific language code.\n *\n * @param {string} languageCode Language code.\n * @returns {object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\nexport function getLanguageDictionary(languageCode) {\n  if (!hasLanguageDictionary(languageCode)) {\n    return null;\n  }\n  return deepClone(getGlobalLanguageDictionary(languageCode));\n}\n\n/**\n *\n * Get if language with specified language code was registered.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {boolean}\n */\nexport function hasLanguageDictionary(languageCode) {\n  return hasGlobalLanguageDictionary(languageCode);\n}\n\n/**\n * Get default language dictionary.\n *\n * @returns {object} Object with constants representing identifiers for translation (as keys) and corresponding translation phrases (as values).\n */\nexport function getDefaultLanguageDictionary() {\n  return DEFAULT_DICTIONARY;\n}\n\n/**\n * Get registered language dictionaries.\n *\n * @returns {Array}\n */\nexport function getLanguagesDictionaries() {\n  return getGlobalLanguagesDictionaries();\n}\n\n/**\n * Get phrase for specified dictionary key.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @param {string} dictionaryKey Constant which is dictionary key.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {string}\n */\nexport function getTranslatedPhrase(languageCode, dictionaryKey, argumentsForFormatters) {\n  const languageDictionary = getLanguageDictionary(languageCode);\n  if (languageDictionary === null) {\n    return null;\n  }\n  const phrasePropositions = languageDictionary[dictionaryKey];\n  if (isUndefined(phrasePropositions)) {\n    return null;\n  }\n  const formattedPhrase = getFormattedPhrase(phrasePropositions, argumentsForFormatters);\n  if (Array.isArray(formattedPhrase)) {\n    return formattedPhrase[0];\n  }\n  return formattedPhrase;\n}\n\n/**\n * Get formatted phrase from phrases propositions for specified dictionary key.\n *\n * @private\n * @param {Array|string} phrasePropositions List of phrase propositions.\n * @param {*} argumentsForFormatters Arguments which will be handled by formatters.\n *\n * @returns {Array|string}\n */\nfunction getFormattedPhrase(phrasePropositions, argumentsForFormatters) {\n  let formattedPhrasePropositions = phrasePropositions;\n  arrayEach(getPhraseFormatters(), formatter => {\n    formattedPhrasePropositions = formatter(phrasePropositions, argumentsForFormatters);\n  });\n  return formattedPhrasePropositions;\n}\n\n/**\n * Returns valid language code. If the passed language code doesn't exist default one will be used.\n *\n * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n * @returns {string}\n */\nexport function getValidLanguageCode(languageCode) {\n  let normalizedLanguageCode = normalizeLanguageCode(languageCode);\n  if (!hasLanguageDictionary(normalizedLanguageCode)) {\n    normalizedLanguageCode = DEFAULT_LANGUAGE_CODE;\n    warnUserAboutLanguageRegistration(languageCode);\n  }\n  return normalizedLanguageCode;\n}","/**\n * Selection type that is visible only if the row or column header is clicked. If that happened\n * all row or column header layers are highlighted.\n *\n * @type {string}\n */\nexport const ACTIVE_HEADER_TYPE = 'active-header';\n/**\n * Selection type that is visible only if the a cell or cells are clicked. If that happened\n * only the most closest to the cells row or column header is highlighted.\n *\n * @type {string}\n */\nexport const HEADER_TYPE = 'header';\n/**\n * Selection type that is visible when a cell or cells are clicked. The selected cells are\n * highlighted.\n *\n * @type {string}\n */\nexport const AREA_TYPE = 'area';\n/**\n * Selection type defines a cell that follows the user (keyboard navigation).\n *\n * @type {string}\n */\nexport const FOCUS_TYPE = 'focus';\n/**\n * Selection type defines borders for the autofill functionality.\n *\n * @type {string}\n */\nexport const FILL_TYPE = 'fill';\n/**\n * Selection type defines highlights for the `currentRowClassName` option.\n *\n * @type {string}\n */\nexport const ROW_TYPE = 'row';\n/**\n * Selection type defines highlights for the `currentColumnClassName` option.\n *\n * @type {string}\n */\nexport const COLUMN_TYPE = 'column';\n/**\n * Selection type defines highlights managed by the CustomBorders plugin.\n *\n * @type {string}\n */\nexport const CUSTOM_SELECTION_TYPE = 'custom-selection';","import { mixin } from \"../../../../helpers/object.mjs\";\nimport localHooks from \"../../../../mixins/localHooks.mjs\";\n/**\n * The Selection class allows highlighting (by applying CSS class) the table's cells or headers\n * and setting up the borders if defined in the settings.\n *\n * The Selection coordinates may point to the cells (positive numbers) or headers (negative numbers).\n *\n * @class Selection\n */\nclass Selection {\n  /**\n   * @param {object} settings The selection settings object. @todo type.\n   * @param {CellRange} cellRange The cell range instance.\n   */\n  constructor(settings, cellRange) {\n    this.settings = settings;\n    this.cellRange = cellRange || null;\n  }\n\n  /**\n   * Checks if selection is empty.\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this.cellRange === null;\n  }\n\n  /**\n   * Adds a cell coords to the selection.\n   *\n   * @param {CellCoords} coords The cell coordinates to add.\n   * @returns {Selection}\n   */\n  add(coords) {\n    if (this.isEmpty()) {\n      this.cellRange = this.settings.createCellRange(coords);\n    } else {\n      this.cellRange.expand(coords);\n    }\n    return this;\n  }\n\n  /**\n   * If selection range from or to property equals oldCoords, replace it with newCoords. Return boolean\n   * information about success.\n   *\n   * @param {CellCoords} oldCoords An old cell coordinates to replace.\n   * @param {CellCoords} newCoords The new cell coordinates.\n   * @returns {boolean}\n   */\n  replace(oldCoords, newCoords) {\n    if (!this.isEmpty()) {\n      if (this.cellRange.from.isEqual(oldCoords)) {\n        this.cellRange.from = newCoords;\n        return true;\n      }\n      if (this.cellRange.to.isEqual(oldCoords)) {\n        this.cellRange.to = newCoords;\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Clears selection.\n   *\n   * @returns {Selection}\n   */\n  clear() {\n    this.cellRange = null;\n    return this;\n  }\n\n  /**\n   * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection coordinates.\n   *\n   * @returns {number[]} Returns array of coordinates for example `[1, 1, 5, 5]`.\n   */\n  getCorners() {\n    const topStart = this.cellRange.getOuterTopStartCorner();\n    const bottomEnd = this.cellRange.getOuterBottomEndCorner();\n    return [topStart.row, topStart.col, bottomEnd.row, bottomEnd.col];\n  }\n\n  /**\n   * Destroys the instance.\n   */\n  destroy() {\n    this.runLocalHooks('destroy');\n  }\n}\nmixin(Selection, localHooks);\nexport default Selection;","import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { Selection } from \"./../../3rdparty/walkontable/src/index.mjs\";\nclass VisualSelection extends Selection {\n  constructor(settings, visualCellRange) {\n    super(settings, null);\n    /**\n     * Range of selection visually. Visual representation may have representation in a rendered selection.\n     *\n     * @type {null|CellRange}\n     */\n    _defineProperty(this, \"visualCellRange\", null);\n    this.visualCellRange = visualCellRange || null;\n    this.commit();\n  }\n  /**\n   * Adds a cell coords to the selection.\n   *\n   * @param {CellCoords} coords Visual coordinates of a cell.\n   * @returns {VisualSelection}\n   */\n  add(coords) {\n    if (this.visualCellRange === null) {\n      this.visualCellRange = this.settings.createCellRange(coords);\n    } else {\n      this.visualCellRange.expand(coords);\n    }\n    return this;\n  }\n\n  /**\n   * Clears visual and renderable selection.\n   *\n   * @returns {VisualSelection}\n   */\n  clear() {\n    this.visualCellRange = null;\n    return super.clear();\n  }\n\n  /**\n   * Trims the passed cell range object by removing all coordinates that points to the hidden rows\n   * or columns. The result is a new cell range object that points only to the visible indexes or `null`.\n   *\n   * @private\n   * @param {CellRange} cellRange Cells range object to be trimmed.\n   * @returns {CellRange} Visual non-hidden cells range coordinates.\n   */\n  trimToVisibleCellsRangeOnly(_ref) {\n    let {\n      from,\n      to\n    } = _ref;\n    let visibleFromCoords = this.getNearestNotHiddenCoords(from, 1);\n    let visibleToCoords = this.getNearestNotHiddenCoords(to, -1);\n    if (visibleFromCoords === null || visibleToCoords === null) {\n      return null;\n    }\n    if (visibleFromCoords.row > visibleToCoords.row || visibleFromCoords.col > visibleToCoords.col) {\n      visibleFromCoords = from;\n      visibleToCoords = to;\n    }\n    return this.settings.createCellRange(visibleFromCoords, visibleFromCoords, visibleToCoords);\n  }\n\n  /**\n   * Gets nearest coordinates that points to the visible row and column indexes. If there are no visible\n   * rows and/or columns the `null` value is returned.\n   *\n   * @private\n   * @param {CellCoords} coords The coords object as starting point for finding the nearest visible coordinates.\n   * @param {1|-1} rowSearchDirection The search direction. For value 1, it means searching from top to bottom for\n   *                                  rows and from left to right for columns. For -1, it is the other way around.\n   * @param {1|-1} columnSearchDirection The same as above but for rows.\n   * @returns {CellCoords|null} Visual cell coordinates.\n   */\n  getNearestNotHiddenCoords(coords, rowSearchDirection) {\n    let columnSearchDirection = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : rowSearchDirection;\n    const nextVisibleRow = this.getNearestNotHiddenIndex(this.settings.rowIndexMapper, coords.row, rowSearchDirection);\n\n    // There are no more visual rows in the range.\n    if (nextVisibleRow === null) {\n      return null;\n    }\n    const nextVisibleColumn = this.getNearestNotHiddenIndex(this.settings.columnIndexMapper, coords.col, columnSearchDirection);\n\n    // There are no more visual columns in the range.\n    if (nextVisibleColumn === null) {\n      return null;\n    }\n    return this.settings.createCellCoords(nextVisibleRow, nextVisibleColumn);\n  }\n\n  /**\n   * Gets nearest visual index. If there are no visible rows or columns the `null` value is returned.\n   *\n   * @private\n   * @param {IndexMapper} indexMapper The IndexMapper instance for specific axis.\n   * @param {number} visualIndex The index as starting point for finding the nearest visible index.\n   * @param {1|-1} searchDirection The search direction. For value 1, it means searching from top to bottom for\n   *                               rows and from left to right for columns. For -1, it is the other way around.\n   * @returns {number|null} Visual row/column index.\n   */\n  getNearestNotHiddenIndex(indexMapper, visualIndex, searchDirection) {\n    if (visualIndex < 0) {\n      return visualIndex;\n    }\n    return indexMapper.getNearestNotHiddenIndex(visualIndex, searchDirection);\n  }\n\n  /**\n   * Override internally stored visual indexes added by the Selection's `add` function. It should be executed\n   * at the end of process of adding visual selection coordinates.\n   *\n   * @returns {VisualSelection}\n   */\n  commit() {\n    // There is no information about visual ranges, thus no selection may be displayed.\n    if (this.visualCellRange === null) {\n      return this;\n    }\n    const trimmedCellRange = this.trimToVisibleCellsRangeOnly(this.visualCellRange);\n\n    // There is no visual start point (and also visual end point) in the range.\n    if (trimmedCellRange === null) {\n      this.cellRange = null;\n    } else {\n      this.cellRange = this.createRenderableCellRange(trimmedCellRange.from, trimmedCellRange.to);\n    }\n    return this;\n  }\n\n  /**\n   * Some selection may be a part of broader cell range. This function sync coordinates of current selection\n   * and the broader cell range when needed (current selection can't be presented visually).\n   *\n   * @param {CellRange} broaderCellRange Visual range. Actual cell range may be contained in the broader cell range.\n   * When there is no way to represent some cell range visually we try to find range containing just the first visible cell.\n   *\n   * Warn: Please keep in mind that this function may change coordinates of the handled broader range.\n   *\n   * @returns {VisualSelection}\n   */\n  syncWith(broaderCellRange) {\n    const coordsFrom = broaderCellRange.from.clone().normalize();\n    const rowDirection = broaderCellRange.getVerticalDirection() === 'N-S' ? 1 : -1;\n    const columnDirection = broaderCellRange.getHorizontalDirection() === 'W-E' ? 1 : -1;\n    const renderableHighlight = this.settings.visualToRenderableCoords(this.visualCellRange.highlight);\n    let cellCoordsVisual = null;\n    if (renderableHighlight === null || renderableHighlight.col === null || renderableHighlight.row === null) {\n      cellCoordsVisual = this.getNearestNotHiddenCoords(coordsFrom, rowDirection, columnDirection);\n    }\n    if (cellCoordsVisual !== null && broaderCellRange.overlaps(cellCoordsVisual)) {\n      const currentHighlight = broaderCellRange.highlight.clone();\n      if (currentHighlight.row >= 0) {\n        currentHighlight.row = cellCoordsVisual.row;\n      }\n      if (currentHighlight.col >= 0) {\n        currentHighlight.col = cellCoordsVisual.col;\n      }\n\n      // We can't show selection visually now, but we found first visible range in the broader cell range.\n      if (this.cellRange === null) {\n        const cellCoordsRenderable = this.settings.visualToRenderableCoords(currentHighlight);\n        this.cellRange = this.settings.createCellRange(cellCoordsRenderable);\n      }\n\n      // We set new highlight as it might change (for example, when showing/hiding some cells from the broader selection range)\n      // TODO: It is also handled by the `MergeCells` plugin while adjusting already modified coordinates. Should it?\n      broaderCellRange.setHighlight(currentHighlight);\n    }\n\n    // Sync the highlight coords from the visual selection layer with logical coords.\n    if (this.settings.selectionType === 'focus' && renderableHighlight !== null && cellCoordsVisual === null) {\n      broaderCellRange.setHighlight(this.visualCellRange.highlight);\n    }\n    return this;\n  }\n\n  /**\n   * Returns the top left (TL) and bottom right (BR) selection coordinates (renderable indexes).\n   * The method overwrites the original method to support header selection for hidden cells.\n   * To make the header selection working, the CellCoords and CellRange have to support not\n   * complete coordinates (`null` values for example, `row: null`, `col: 2`).\n   *\n   * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.\n   */\n  getCorners() {\n    const {\n      from,\n      to\n    } = this.cellRange;\n    return [Math.min(from.row, to.row), Math.min(from.col, to.col), Math.max(from.row, to.row), Math.max(from.col, to.col)];\n  }\n\n  /**\n   * Returns the top left (or top right in RTL) and bottom right (or bottom left in RTL) selection\n   * coordinates (visual indexes).\n   *\n   * @returns {Array} Returns array of coordinates for example `[1, 1, 5, 5]`.\n   */\n  getVisualCorners() {\n    const topStart = this.settings.renderableToVisualCoords(this.cellRange.getTopStartCorner());\n    const bottomEnd = this.settings.renderableToVisualCoords(this.cellRange.getBottomEndCorner());\n    return [topStart.row, topStart.col, bottomEnd.row, bottomEnd.col];\n  }\n\n  /**\n   * Creates a new CellRange object based on visual coordinates which before object creation are\n   * translated to renderable indexes.\n   *\n   * @param {CellCoords} visualFromCoords The CellCoords object which contains coordinates that\n   *                                      points to the beginning of the selection.\n   * @param {CellCoords} visualToCoords The CellCoords object which contains coordinates that\n   *                                    points to the end of the selection.\n   * @returns {CellRange|null}\n   */\n  createRenderableCellRange(visualFromCoords, visualToCoords) {\n    const renderableFromCoords = this.settings.visualToRenderableCoords(visualFromCoords);\n    const renderableToCoords = this.settings.visualToRenderableCoords(visualToCoords);\n    if (renderableFromCoords.row === null || renderableFromCoords.col === null || renderableToCoords.row === null || renderableToCoords.col === null) {\n      return null;\n    }\n    return this.settings.createCellRange(renderableFromCoords, renderableFromCoords, renderableToCoords);\n  }\n}\nexport default VisualSelection;","import { HIGHLIGHT_ACTIVE_HEADER_TYPE } from \"../../../3rdparty/walkontable/src/index.mjs\";\nimport VisualSelection from \"../visualSelection.mjs\";\n/**\n * Creates the new instance of Selection, responsible for highlighting column or row headers\n * only when the whole column or row is selected.\n * This type of selection can occur multiple times.\n *\n * @param {object} highlightParams A configuration object to create a highlight.\n * @param {string} highlightParams.activeHeaderClassName Highlighted headers' class name.\n * @returns {Selection}\n */\nexport function createHighlight(_ref) {\n  let {\n    activeHeaderClassName,\n    ...restOptions\n  } = _ref;\n  return new VisualSelection({\n    className: activeHeaderClassName,\n    ...restOptions,\n    selectionType: HIGHLIGHT_ACTIVE_HEADER_TYPE\n  });\n}","import { HIGHLIGHT_AREA_TYPE } from \"../../../3rdparty/walkontable/src/index.mjs\";\nimport VisualSelection from \"../visualSelection.mjs\";\n/**\n * Creates the new instance of Selection responsible for highlighting area of the selected multiple cells.\n *\n * @param {object} highlightParams A configuration object to create a highlight.\n * @param {object} highlightParams.areaCornerVisible Function to determine if area's corner should be visible.\n * @returns {Selection}\n */\nexport function createHighlight(_ref) {\n  let {\n    areaCornerVisible,\n    ...restOptions\n  } = _ref;\n  return new VisualSelection({\n    className: 'area',\n    createLayers: true,\n    border: {\n      width: 1,\n      color: '#4b89ff',\n      cornerVisible: areaCornerVisible\n    },\n    ...restOptions,\n    selectionType: HIGHLIGHT_AREA_TYPE\n  });\n}","import { HIGHLIGHT_AREA_TYPE } from \"../../../3rdparty/walkontable/src/index.mjs\";\nimport VisualSelection from \"../visualSelection.mjs\";\n/**\n * Creates the new instance of Selection responsible for highlighting area of the selected multiple cells.\n *\n * @param {object} highlightParams A configuration object to create a highlight.\n * @param {object} highlightParams.areaCornerVisible Function to determine if area's corner should be visible.\n * @returns {Selection}\n */\nexport function createHighlight(_ref) {\n  let {\n    ...restOptions\n  } = _ref;\n  return new VisualSelection({\n    className: 'highlight',\n    ...restOptions,\n    selectionType: HIGHLIGHT_AREA_TYPE\n  });\n}","import { HIGHLIGHT_COLUMN_TYPE } from \"../../../3rdparty/walkontable/src/index.mjs\";\nimport VisualSelection from \"../visualSelection.mjs\";\n/**\n * Creates the new instance of Selection, responsible for highlighting cells in a columns and\n * column headers.\n * This type of selection can occur multiple times.\n *\n * @param {object} highlightParams A configuration object to create a highlight.\n * @param {string} highlightParams.columnClassName Highlighted column' class name.\n * @returns {Selection}\n */\nexport function createHighlight(_ref) {\n  let {\n    columnClassName,\n    ...restOptions\n  } = _ref;\n  return new VisualSelection({\n    className: columnClassName,\n    ...restOptions,\n    selectionType: HIGHLIGHT_COLUMN_TYPE\n  });\n}","import { HIGHLIGHT_FOCUS_TYPE } from \"../../../3rdparty/walkontable/src/index.mjs\";\nimport VisualSelection from \"../visualSelection.mjs\";\n/**\n * Creates the new instance of Selection responsible for highlighting currently selected cell. This type of selection\n * can present on the table only one at the time.\n *\n * @param {object} highlightParams A configuration object to create a highlight.\n * @param {Function} highlightParams.cellCornerVisible Function to determine if cell's corner should be visible.\n * @returns {Selection}\n */\nexport function createHighlight(_ref) {\n  let {\n    cellCornerVisible,\n    ...restOptions\n  } = _ref;\n  return new VisualSelection({\n    className: 'current',\n    border: {\n      width: 2,\n      color: '#4b89ff',\n      cornerVisible: cellCornerVisible\n    },\n    ...restOptions,\n    selectionType: HIGHLIGHT_FOCUS_TYPE\n  });\n}","import { HIGHLIGHT_CUSTOM_SELECTION_TYPE } from \"../../../3rdparty/walkontable/src/index.mjs\";\nimport VisualSelection from \"../visualSelection.mjs\";\n/**\n * Creates the new instance of Selection responsible for highlighting currently selected cell.\n * This type of selection can present on the table only one at the time.\n *\n * @param {object} highlightParams A configuration object to create a highlight.\n * @param {object} highlightParams.border Border configuration.\n * @param {object} highlightParams.visualCellRange Function to translate visual to renderable coords.\n * @returns {Selection}\n */\nexport function createHighlight(_ref) {\n  let {\n    border,\n    visualCellRange,\n    ...restOptions\n  } = _ref;\n  return new VisualSelection({\n    ...border,\n    ...restOptions,\n    selectionType: HIGHLIGHT_CUSTOM_SELECTION_TYPE\n  }, visualCellRange);\n}","import { HIGHLIGHT_FILL_TYPE } from \"../../../3rdparty/walkontable/src/index.mjs\";\nimport VisualSelection from \"../visualSelection.mjs\";\n/**\n * Creates the new instance of Selection, responsible for highlighting cells which are covered by fill handle\n * functionality. This type of selection can present on the table only one at the time.\n *\n * @param {object} highlightParams A configuration object to create a highlight.\n * @returns {Selection}\n */\nexport function createHighlight(_ref) {\n  let {\n    ...restOptions\n  } = _ref;\n  return new VisualSelection({\n    className: 'fill',\n    border: {\n      width: 1,\n      color: '#ff0000'\n    },\n    ...restOptions,\n    selectionType: HIGHLIGHT_FILL_TYPE\n  });\n}","import { HIGHLIGHT_HEADER_TYPE } from \"../../../3rdparty/walkontable/src/index.mjs\";\nimport VisualSelection from \"../visualSelection.mjs\";\n/**\n * Creates the new instance of Selection, responsible for highlighting column or row headers when\n * any cell is selected.\n * This type of selection can occur multiple times.\n *\n * @param {object} highlightParams A configuration object to create a highlight.\n * @param {string} highlightParams.headerClassName Highlighted headers' class name.\n * @returns {Selection}\n */\nexport function createHighlight(_ref) {\n  let {\n    headerClassName,\n    ...restOptions\n  } = _ref;\n  return new VisualSelection({\n    className: headerClassName,\n    ...restOptions,\n    selectionType: HIGHLIGHT_HEADER_TYPE\n  });\n}","import { HIGHLIGHT_ROW_TYPE } from \"../../../3rdparty/walkontable/src/index.mjs\";\nimport VisualSelection from \"../visualSelection.mjs\";\n/**\n * Creates the new instance of Selection, responsible for highlighting cells in a rows and\n * row headers.\n * This type of selection can occur multiple times.\n *\n * @param {object} highlightParams A configuration object to create a highlight.\n * @param {string} highlightParams.rowClassName Highlighted row' class name.\n * @returns {Selection}\n */\nexport function createHighlight(_ref) {\n  let {\n    rowClassName,\n    ...restOptions\n  } = _ref;\n  return new VisualSelection({\n    className: rowClassName,\n    ...restOptions,\n    selectionType: HIGHLIGHT_ROW_TYPE\n  });\n}","import \"core-js/modules/es.error.cause.js\";\nlet _Symbol$iterator;\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nimport { createHighlight as createActiveHighlight } from \"./types/activeHeader.mjs\";\nimport { createHighlight as createAreaLayeredHighlight } from \"./types/areaLayered.mjs\";\nimport { createHighlight as createAreaHighlight } from \"./types/area.mjs\";\nimport { createHighlight as createColumnHighlight } from \"./types/column.mjs\";\nimport { createHighlight as createFocusHighlight } from \"./types/focus.mjs\";\nimport { createHighlight as createCustomHighlight } from \"./types/customSelection.mjs\";\nimport { createHighlight as createFillHighlight } from \"./types/fill.mjs\";\nimport { createHighlight as createHeaderHighlight } from \"./types/header.mjs\";\nimport { createHighlight as createRowHighlight } from \"./types/row.mjs\";\nimport { HIGHLIGHT_ACTIVE_HEADER_TYPE, HIGHLIGHT_AREA_TYPE, HIGHLIGHT_FOCUS_TYPE, HIGHLIGHT_CUSTOM_SELECTION_TYPE, HIGHLIGHT_FILL_TYPE, HIGHLIGHT_HEADER_TYPE, HIGHLIGHT_ROW_TYPE, HIGHLIGHT_COLUMN_TYPE } from \"../../3rdparty/walkontable/src/index.mjs\";\nimport { arrayEach } from \"./../../helpers/array.mjs\";\nexport { HIGHLIGHT_ACTIVE_HEADER_TYPE as ACTIVE_HEADER_TYPE, HIGHLIGHT_AREA_TYPE as AREA_TYPE, HIGHLIGHT_FOCUS_TYPE as FOCUS_TYPE, HIGHLIGHT_CUSTOM_SELECTION_TYPE as CUSTOM_SELECTION_TYPE, HIGHLIGHT_FILL_TYPE as FILL_TYPE, HIGHLIGHT_HEADER_TYPE as HEADER_TYPE, HIGHLIGHT_ROW_TYPE as ROW_TYPE, HIGHLIGHT_COLUMN_TYPE as COLUMN_TYPE };\n\n/**\n * Highlight class responsible for managing Walkontable Selection classes.\n *\n * With Highlight object you can manipulate four different highlight types:\n *  - `cell` can be added only to a single cell at a time and it defines currently selected cell;\n *  - `fill` can occur only once and its highlight defines selection of autofill functionality (managed by the plugin with the same name);\n *  - `areas` can be added to multiple cells at a time. This type highlights selected cell or multiple cells.\n *    The multiple cells have to be defined as an uninterrupted order (regular shape). Otherwise, the new layer of\n *    that type should be created to manage not-consecutive selection;\n *  - `header` can occur multiple times. This type is designed to highlight only headers. Like `area` type it\n *    can appear with multiple highlights (accessed under different level layers).\n *\n * @class Highlight\n * @util\n */\nvar _createHighlight = /*#__PURE__*/new WeakSet();\n_Symbol$iterator = Symbol.iterator;\nclass Highlight {\n  constructor(options) {\n    /**\n     * Creates (if not exist in the cache) Walkontable Selection instance.\n     *\n     * @param {Map} cacheMap The map where the instance will be cached.\n     * @param {Function} highlightFactory The function factory.\n     * @returns {VisualSelection}\n     */\n    _classPrivateMethodInitSpec(this, _createHighlight);\n    /**\n     * Options consumed by Highlight class and Walkontable Selection classes.\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"options\", void 0);\n    /**\n     * The property which describes which layer level of the visual selection will be modified.\n     * This option is valid only for `area` and `header` highlight types which occurs multiple times on\n     * the table (as a non-consecutive selection).\n     *\n     * An order of the layers is the same as the order of added new non-consecutive selections.\n     *\n     * @type {number}\n     * @default 0\n     */\n    _defineProperty(this, \"layerLevel\", 0);\n    /**\n     * `cell` highlight object which describes attributes for the currently selected cell.\n     * It can only occur only once on the table.\n     *\n     * @type {Selection}\n     */\n    _defineProperty(this, \"focus\", void 0);\n    /**\n     * `fill` highlight object which describes attributes for the borders for autofill functionality.\n     * It can only occur only once on the table.\n     *\n     * @type {Selection}\n     */\n    _defineProperty(this, \"fill\", void 0);\n    /**\n     * Collection of the `area` highlights. That objects describes attributes for the borders and selection of\n     * the multiple selected cells. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"layeredAreas\", new Map());\n    /**\n     * Collection of the `highlight` highlights. That objects describes attributes for the borders and selection of\n     * the multiple selected cells. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"areas\", new Map());\n    /**\n     * Collection of the `header` highlights. That objects describes attributes for the selection of\n     * the multiple selected rows in the table header. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"rowHeaders\", new Map());\n    /**\n     * Collection of the `header` highlights. That objects describes attributes for the selection of\n     * the multiple selected columns in the table header. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"columnHeaders\", new Map());\n    /**\n     * Collection of the `active-header` highlights. That objects describes attributes for the selection of\n     * the multiple selected rows in the table header. The table headers which have selected all items in\n     * a row will be marked as `active-header`.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"activeRowHeaders\", new Map());\n    /**\n     * Collection of the `active-header` highlights. That objects describes attributes for the selection of\n     * the multiple selected columns in the table header. The table headers which have selected all items in\n     * a row will be marked as `active-header`.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"activeColumnHeaders\", new Map());\n    /**\n     * Collection of the `active-header` highlights. That objects describes attributes for the selection of\n     * the selected corner in the table header. The table headers which have selected all items in\n     * a row will be marked as `active-header`.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"activeCornerHeaders\", new Map());\n    /**\n     * Collection of the `rows` highlights. That objects describes attributes for the selection of\n     * the multiple selected cells in a row. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"rowHighlights\", new Map());\n    /**\n     * Collection of the `columns` highlights. That objects describes attributes for the selection of\n     * the multiple selected cells in a column. It can occur multiple times on the table.\n     *\n     * @type {Map.<number, Selection>}\n     */\n    _defineProperty(this, \"columnHighlights\", new Map());\n    /**\n     * Collection of the `custom-selection`, holder for example borders added through CustomBorders plugin.\n     *\n     * @type {Selection[]}\n     */\n    _defineProperty(this, \"customSelections\", []);\n    this.options = options;\n    this.focus = createFocusHighlight(options);\n    this.fill = createFillHighlight(options);\n  }\n\n  /**\n   * Check if highlight cell rendering is disabled for specified highlight type.\n   *\n   * @param {string} highlightType Highlight type. Possible values are: `cell`, `area`, `fill` or `header`.\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {boolean}\n   */\n  isEnabledFor(highlightType, coords) {\n    let type = highlightType;\n\n    // Legacy compatibility.\n    if (highlightType === HIGHLIGHT_FOCUS_TYPE) {\n      type = 'current'; // One from settings for `disableVisualSelection` up to Handsontable 0.36/Handsontable Pro 1.16.0.\n    }\n\n    let disableHighlight = false;\n    if (coords.isCell()) {\n      disableHighlight = this.options.disabledCellSelection(coords.row, coords.col);\n    }\n    if (typeof disableHighlight === 'string') {\n      disableHighlight = [disableHighlight];\n    }\n    return disableHighlight === false || Array.isArray(disableHighlight) && !disableHighlight.includes(type);\n  }\n\n  /**\n   * Set a new layer level to make access to the desire `area` and `header` highlights.\n   *\n   * @param {number} [level=0] Layer level to use.\n   * @returns {Highlight}\n   */\n  useLayerLevel() {\n    let level = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    this.layerLevel = level;\n    return this;\n  }\n\n  /**\n   * Get Walkontable Selection instance created for controlling highlight of the currently\n   * focused cell (or header).\n   *\n   * @returns {Selection}\n   */\n  getFocus() {\n    return this.focus;\n  }\n\n  /**\n   * Get Walkontable Selection instance created for controlling highlight of the autofill functionality.\n   *\n   * @returns {Selection}\n   */\n  getFill() {\n    return this.fill;\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * `area` highlights.\n   *\n   * @returns {Selection}\n   */\n  createLayeredArea() {\n    return _classPrivateMethodGet(this, _createHighlight, _createHighlight2).call(this, this.layeredAreas, createAreaLayeredHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.\n   *\n   * @returns {Selection[]}\n   */\n  getLayeredAreas() {\n    return [...this.layeredAreas.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * `highlight` highlights.\n   *\n   * @returns {Selection}\n   */\n  createArea() {\n    return _classPrivateMethodGet(this, _createHighlight, _createHighlight2).call(this, this.areas, createAreaHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the cells.\n   *\n   * @returns {Selection[]}\n   */\n  getAreas() {\n    return [...this.areas.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * header highlight for rows.\n   *\n   * @returns {Selection}\n   */\n  createRowHeader() {\n    return _classPrivateMethodGet(this, _createHighlight, _createHighlight2).call(this, this.rowHeaders, createHeaderHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.\n   *\n   * @returns {Selection[]}\n   */\n  getRowHeaders() {\n    return [...this.rowHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * header highlight for columns.\n   *\n   * @returns {Selection}\n   */\n  createColumnHeader() {\n    return _classPrivateMethodGet(this, _createHighlight, _createHighlight2).call(this, this.columnHeaders, createHeaderHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers.\n   *\n   * @returns {Selection[]}\n   */\n  getColumnHeaders() {\n    return [...this.columnHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight for active row headers.\n   *\n   * @returns {Selection}\n   */\n  createActiveRowHeader() {\n    return _classPrivateMethodGet(this, _createHighlight, _createHighlight2).call(this, this.activeRowHeaders, createActiveHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.\n   *\n   * @returns {Selection[]}\n   */\n  getActiveRowHeaders() {\n    return [...this.activeRowHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight for active column headers.\n   *\n   * @returns {Selection}\n   */\n  createActiveColumnHeader() {\n    return _classPrivateMethodGet(this, _createHighlight, _createHighlight2).call(this, this.activeColumnHeaders, createActiveHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the active headers.\n   *\n   * @returns {Selection[]}\n   */\n  getActiveColumnHeaders() {\n    return [...this.activeColumnHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight for the headers corner.\n   *\n   * @returns {Selection}\n   */\n  createActiveCornerHeader() {\n    return _classPrivateMethodGet(this, _createHighlight, _createHighlight2).call(this, this.activeCornerHeaders, createActiveHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the visual highlight of the headers corner.\n   *\n   * @returns {Selection[]}\n   */\n  getActiveCornerHeaders() {\n    return [...this.activeCornerHeaders.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight cells in a row.\n   *\n   * @returns {Selection}\n   */\n  createRowHighlight() {\n    return _classPrivateMethodGet(this, _createHighlight, _createHighlight2).call(this, this.rowHighlights, createRowHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the rows highlighting.\n   *\n   * @returns {Selection[]}\n   */\n  getRowHighlights() {\n    return [...this.rowHighlights.values()];\n  }\n\n  /**\n   * Creates (if not exist in the cache) Walkontable Selection instance created for controlling\n   * highlight cells in a column.\n   *\n   * @returns {Selection}\n   */\n  createColumnHighlight() {\n    return _classPrivateMethodGet(this, _createHighlight, _createHighlight2).call(this, this.columnHighlights, createColumnHighlight);\n  }\n\n  /**\n   * Get all Walkontable Selection instances which describes the state of the columns highlighting.\n   *\n   * @returns {Selection[]}\n   */\n  getColumnHighlights() {\n    return [...this.columnHighlights.values()];\n  }\n\n  /**\n   * Get Walkontable Selection instance created for controlling highlight of the custom selection functionality.\n   *\n   * @returns {Selection}\n   */\n  getCustomSelections() {\n    return [...this.customSelections.values()];\n  }\n\n  /**\n   * Add selection to the custom selection instance. The new selection are added to the end of the selection collection.\n   *\n   * @param {object} selectionInstance The selection instance.\n   */\n  addCustomSelection(selectionInstance) {\n    this.customSelections.push(createCustomHighlight({\n      ...this.options,\n      ...selectionInstance\n    }));\n  }\n\n  /**\n   * Perform cleaning visual highlights for the whole table.\n   */\n  clear() {\n    this.focus.clear();\n    this.fill.clear();\n    arrayEach(this.areas.values(), highlight => void highlight.clear());\n    arrayEach(this.layeredAreas.values(), highlight => void highlight.clear());\n    arrayEach(this.rowHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.columnHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.activeRowHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.activeColumnHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.activeCornerHeaders.values(), highlight => void highlight.clear());\n    arrayEach(this.rowHighlights.values(), highlight => void highlight.clear());\n    arrayEach(this.columnHighlights.values(), highlight => void highlight.clear());\n  }\n  /**\n   * This object can be iterate over using `for of` syntax or using internal `arrayEach` helper.\n   *\n   * @returns {Selection[]}\n   */\n  [_Symbol$iterator]() {\n    return [this.focus, this.fill, ...this.areas.values(), ...this.layeredAreas.values(), ...this.rowHeaders.values(), ...this.columnHeaders.values(), ...this.activeRowHeaders.values(), ...this.activeColumnHeaders.values(), ...this.activeCornerHeaders.values(), ...this.rowHighlights.values(), ...this.columnHighlights.values(), ...this.customSelections][Symbol.iterator]();\n  }\n}\nfunction _createHighlight2(cacheMap, highlightFactory) {\n  const layerLevel = this.layerLevel;\n  if (cacheMap.has(layerLevel)) {\n    return cacheMap.get(layerLevel);\n  }\n  const highlight = highlightFactory({\n    layerLevel,\n    ...this.options\n  });\n  cacheMap.set(layerLevel, highlight);\n  return highlight;\n}\nexport default Highlight;","import \"core-js/modules/es.array.push.js\";\n/**\n * The SelectionRange class is a simple CellRanges collection designed for easy manipulation of the multiple\n * consecutive and non-consecutive selections.\n *\n * @class SelectionRange\n * @util\n */\nclass SelectionRange {\n  constructor(createCellRange) {\n    /**\n     * List of all CellRanges added to the class instance.\n     *\n     * @type {CellRange[]}\n     */\n    this.ranges = [];\n    this.createCellRange = createCellRange;\n  }\n\n  /**\n   * Check if selected range is empty.\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  /**\n   * Set coordinates to the class instance. It clears all previously added coordinates and push `coords`\n   * to the collection.\n   *\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {SelectionRange}\n   */\n  set(coords) {\n    this.clear();\n    this.ranges.push(this.createCellRange(coords));\n    return this;\n  }\n\n  /**\n   * Add coordinates to the class instance. The new coordinates are added to the end of the range collection.\n   *\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {SelectionRange}\n   */\n  add(coords) {\n    this.ranges.push(this.createCellRange(coords));\n    return this;\n  }\n\n  /**\n   * Removes from the stack the last added coordinates.\n   *\n   * @returns {SelectionRange}\n   */\n  pop() {\n    this.ranges.pop();\n    return this;\n  }\n\n  /**\n   * Get last added coordinates from ranges, it returns a CellRange instance.\n   *\n   * @returns {CellRange|undefined}\n   */\n  current() {\n    return this.peekByIndex(this.size() - 1);\n  }\n\n  /**\n   * Get previously added coordinates from ranges, it returns a CellRange instance.\n   *\n   * @returns {CellRange|undefined}\n   */\n  previous() {\n    return this.peekByIndex(this.size() - 2);\n  }\n\n  /**\n   * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if\n   * the coords object is within selection range.\n   *\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {boolean}\n   */\n  includes(coords) {\n    return this.ranges.some(cellRange => cellRange.includes(coords));\n  }\n\n  /**\n   * Clear collection.\n   *\n   * @returns {SelectionRange}\n   */\n  clear() {\n    this.ranges.length = 0;\n    return this;\n  }\n\n  /**\n   * Get count of added all coordinates added to the selection.\n   *\n   * @returns {number}\n   */\n  size() {\n    return this.ranges.length;\n  }\n\n  /**\n   * Peek the coordinates based on the index where that coordinate resides in the collection.\n   *\n   * @param {number} [index=0] An index where the coordinate will be retrieved from. The index '0' gets the\n   * latest range.\n   * @returns {CellRange|undefined}\n   */\n  peekByIndex() {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let cellRange;\n    if (index >= 0 && index < this.size()) {\n      cellRange = this.ranges[index];\n    }\n    return cellRange;\n  }\n  [Symbol.iterator]() {\n    return this.ranges[Symbol.iterator]();\n  }\n}\nexport default SelectionRange;","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { mixin } from \"../helpers/object.mjs\";\nimport localHooks from \"./../mixins/localHooks.mjs\";\n/**\n * The Transformation class implements algorithms for transforming coordinates based on current settings\n * passed to the Handsontable. The class performs the calculations based on the renderable indexes.\n *\n * Transformation is always applied relative to the current selection.\n *\n * The class operates on a table size defined by the renderable indexes. If the `navigableHeaders`\n * option is enabled, the table size is increased by the number of row and/or column headers.\n * Because the headers are treated as cells as part of the table size (indexes always go from 0 to N),\n * the algorithm can be written as simply as possible (without new if's that distinguish the headers\n * logic).\n *\n * @class Transformation\n * @util\n */\nvar _range = /*#__PURE__*/new WeakMap();\nvar _options = /*#__PURE__*/new WeakMap();\nvar _offset = /*#__PURE__*/new WeakMap();\nvar _setOffsetSize = /*#__PURE__*/new WeakSet();\nvar _clampCoords = /*#__PURE__*/new WeakSet();\nvar _getTableSize = /*#__PURE__*/new WeakSet();\nvar _visualToZeroBasedCoords = /*#__PURE__*/new WeakSet();\nvar _zeroBasedToVisualCoords = /*#__PURE__*/new WeakSet();\nclass Transformation {\n  constructor(range, options) {\n    /**\n     * Translates the zero-based coordinates to visual ones.\n     *\n     * @param {CellCoords} zeroBasedCoords The coordinates to process.\n     * @returns {CellCoords}\n     */\n    _classPrivateMethodInitSpec(this, _zeroBasedToVisualCoords);\n    /**\n     * Translates the visual coordinates to zero-based ones.\n     *\n     * @param {CellCoords} visualCoords The visual coords to process.\n     * @returns {{x: number, y: number}}\n     */\n    _classPrivateMethodInitSpec(this, _visualToZeroBasedCoords);\n    /**\n     * Gets the table size in number of rows with headers as \"height\" and number of columns with\n     * headers as \"width\".\n     *\n     * @returns {{width: number, height: number}}\n     */\n    _classPrivateMethodInitSpec(this, _getTableSize);\n    /**\n     * Clamps the coords to make sure they points to the cell (or header) in the table range.\n     *\n     * @param {CellCoords} zeroBasedCoords The coords object to clamp.\n     * @returns {{rowDir: 1|0|-1, colDir: 1|0|-1}}\n     */\n    _classPrivateMethodInitSpec(this, _clampCoords);\n    /**\n     * Sets the additional offset in table size that may occur when the `navigableHeaders` option\n     * is enabled.\n     *\n     * @param {{x: number, y: number}} offset Offset as x and y properties.\n     */\n    _classPrivateMethodInitSpec(this, _setOffsetSize);\n    /**\n     * Instance of the SelectionRange, holder for visual coordinates applied to the table.\n     *\n     * @type {SelectionRange}\n     */\n    _classPrivateFieldInitSpec(this, _range, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Additional options which define the state of the settings which can infer transformation and\n     * give the possibility to translate indexes.\n     *\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _options, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Increases the table size by applying the offsets. The option is used by the `navigableHeaders`\n     * option.\n     *\n     * @type {{ x: number, y: number }}\n     */\n    _classPrivateFieldInitSpec(this, _offset, {\n      writable: true,\n      value: {\n        x: 0,\n        y: 0\n      }\n    });\n    _classPrivateFieldSet(this, _range, range);\n    _classPrivateFieldSet(this, _options, options);\n  }\n\n  /**\n   * Selects cell relative to the current cell (if possible).\n   *\n   * @param {number} rowDelta Rows number to move, value can be passed as negative number.\n   * @param {number} colDelta Columns number to move, value can be passed as negative number.\n   * @param {boolean} [createMissingRecords=false] If `true` the new rows/columns will be created if necessary. Otherwise, row/column will\n   *                        be created according to `minSpareRows/minSpareCols` settings of Handsontable.\n   * @returns {CellCoords} Visual coordinates after transformation.\n   */\n  transformStart(rowDelta, colDelta) {\n    let createMissingRecords = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    _classPrivateMethodGet(this, _setOffsetSize, _setOffsetSize2).call(this, {\n      x: _classPrivateFieldGet(this, _options).navigableHeaders() ? _classPrivateFieldGet(this, _options).countRowHeaders() : 0,\n      y: _classPrivateFieldGet(this, _options).navigableHeaders() ? _classPrivateFieldGet(this, _options).countColHeaders() : 0\n    });\n    const delta = _classPrivateFieldGet(this, _options).createCellCoords(rowDelta, colDelta);\n    let visualCoords = _classPrivateFieldGet(this, _range).current().highlight;\n    const highlightRenderableCoords = _classPrivateFieldGet(this, _options).visualToRenderableCoords(visualCoords);\n    let rowTransformDir = 0;\n    let colTransformDir = 0;\n    this.runLocalHooks('beforeTransformStart', delta);\n    if (highlightRenderableCoords.row !== null && highlightRenderableCoords.col !== null) {\n      const {\n        width,\n        height\n      } = _classPrivateMethodGet(this, _getTableSize, _getTableSize2).call(this);\n      const {\n        x,\n        y\n      } = _classPrivateMethodGet(this, _visualToZeroBasedCoords, _visualToZeroBasedCoords2).call(this, visualCoords);\n      const fixedRowsBottom = _classPrivateFieldGet(this, _options).fixedRowsBottom();\n      const minSpareRows = _classPrivateFieldGet(this, _options).minSpareRows();\n      const minSpareCols = _classPrivateFieldGet(this, _options).minSpareCols();\n      const autoWrapRow = _classPrivateFieldGet(this, _options).autoWrapRow();\n      const autoWrapCol = _classPrivateFieldGet(this, _options).autoWrapCol();\n      const rawCoords = {\n        row: y + delta.row,\n        col: x + delta.col\n      };\n      if (rawCoords.row >= height) {\n        if (createMissingRecords && minSpareRows > 0 && fixedRowsBottom === 0) {\n          this.runLocalHooks('insertRowRequire', _classPrivateFieldGet(this, _options).countRenderableRows());\n        } else if (autoWrapCol) {\n          const nextColumn = rawCoords.col + 1;\n          rawCoords.row = rawCoords.row - height;\n          rawCoords.col = nextColumn >= width ? nextColumn - width : nextColumn;\n        }\n      } else if (rawCoords.row < 0) {\n        if (autoWrapCol) {\n          const previousColumn = rawCoords.col - 1;\n          rawCoords.row = height + rawCoords.row;\n          rawCoords.col = previousColumn < 0 ? width + previousColumn : previousColumn;\n        }\n      }\n      if (rawCoords.col >= width) {\n        if (createMissingRecords && minSpareCols > 0) {\n          this.runLocalHooks('insertColRequire', _classPrivateFieldGet(this, _options).countRenderableColumns());\n        } else if (autoWrapRow) {\n          const nextRow = rawCoords.row + 1;\n          rawCoords.row = nextRow >= height ? nextRow - height : nextRow;\n          rawCoords.col = rawCoords.col - width;\n        }\n      } else if (rawCoords.col < 0) {\n        if (autoWrapRow) {\n          const previousRow = rawCoords.row - 1;\n          rawCoords.row = previousRow < 0 ? height + previousRow : previousRow;\n          rawCoords.col = width + rawCoords.col;\n        }\n      }\n      const coords = _classPrivateFieldGet(this, _options).createCellCoords(rawCoords.row, rawCoords.col);\n      const {\n        rowDir,\n        colDir\n      } = _classPrivateMethodGet(this, _clampCoords, _clampCoords2).call(this, coords);\n      rowTransformDir = rowDir;\n      colTransformDir = colDir;\n      visualCoords = _classPrivateMethodGet(this, _zeroBasedToVisualCoords, _zeroBasedToVisualCoords2).call(this, coords);\n    }\n    this.runLocalHooks('afterTransformStart', visualCoords, rowTransformDir, colTransformDir);\n    return visualCoords;\n  }\n\n  /**\n   * Sets selection end cell relative to the current selection end cell (if possible).\n   *\n   * @param {number} rowDelta Rows number to move, value can be passed as negative number.\n   * @param {number} colDelta Columns number to move, value can be passed as negative number.\n   * @returns {CellCoords} Visual coordinates after transformation.\n   */\n  transformEnd(rowDelta, colDelta) {\n    _classPrivateMethodGet(this, _setOffsetSize, _setOffsetSize2).call(this, {\n      x: _classPrivateFieldGet(this, _options).navigableHeaders() ? _classPrivateFieldGet(this, _options).countRowHeaders() : 0,\n      y: _classPrivateFieldGet(this, _options).navigableHeaders() ? _classPrivateFieldGet(this, _options).countColHeaders() : 0\n    });\n    const delta = _classPrivateFieldGet(this, _options).createCellCoords(rowDelta, colDelta);\n    const cellRange = _classPrivateFieldGet(this, _range).current();\n    const highlightRenderableCoords = _classPrivateFieldGet(this, _options).visualToRenderableCoords(cellRange.highlight);\n    const visualCoords = cellRange.to.clone();\n    let rowTransformDir = 0;\n    let colTransformDir = 0;\n    this.runLocalHooks('beforeTransformEnd', delta);\n    if (highlightRenderableCoords.row !== null && highlightRenderableCoords.col !== null) {\n      const {\n        x,\n        y\n      } = _classPrivateMethodGet(this, _visualToZeroBasedCoords, _visualToZeroBasedCoords2).call(this, cellRange.to);\n      const rawCoords = {\n        row: y + delta.row,\n        col: x + delta.col\n      };\n      const coords = _classPrivateFieldGet(this, _options).createCellCoords(rawCoords.row, rawCoords.col);\n      const {\n        rowDir,\n        colDir\n      } = _classPrivateMethodGet(this, _clampCoords, _clampCoords2).call(this, coords);\n      rowTransformDir = rowDir;\n      colTransformDir = colDir;\n      const newVisualCoords = _classPrivateMethodGet(this, _zeroBasedToVisualCoords, _zeroBasedToVisualCoords2).call(this, coords);\n      if (delta.row === 0 && delta.col !== 0) {\n        visualCoords.col = newVisualCoords.col;\n      } else if (delta.row !== 0 && delta.col === 0) {\n        visualCoords.row = newVisualCoords.row;\n      } else {\n        visualCoords.row = newVisualCoords.row;\n        visualCoords.col = newVisualCoords.col;\n      }\n    }\n    this.runLocalHooks('afterTransformEnd', visualCoords, rowTransformDir, colTransformDir);\n    return visualCoords;\n  }\n}\nfunction _setOffsetSize2(_ref) {\n  let {\n    x,\n    y\n  } = _ref;\n  _classPrivateFieldSet(this, _offset, {\n    x,\n    y\n  });\n}\nfunction _clampCoords2(zeroBasedCoords) {\n  const {\n    width,\n    height\n  } = _classPrivateMethodGet(this, _getTableSize, _getTableSize2).call(this);\n  let rowDir = 0;\n  let colDir = 0;\n  if (zeroBasedCoords.row < 0) {\n    rowDir = -1;\n    zeroBasedCoords.row = 0;\n  } else if (zeroBasedCoords.row > 0 && zeroBasedCoords.row >= height) {\n    rowDir = 1;\n    zeroBasedCoords.row = height - 1;\n  }\n  if (zeroBasedCoords.col < 0) {\n    colDir = -1;\n    zeroBasedCoords.col = 0;\n  } else if (zeroBasedCoords.col > 0 && zeroBasedCoords.col >= width) {\n    colDir = 1;\n    zeroBasedCoords.col = width - 1;\n  }\n  return {\n    rowDir,\n    colDir\n  };\n}\nfunction _getTableSize2() {\n  return {\n    width: _classPrivateFieldGet(this, _offset).x + _classPrivateFieldGet(this, _options).countRenderableColumns(),\n    height: _classPrivateFieldGet(this, _offset).y + _classPrivateFieldGet(this, _options).countRenderableRows()\n  };\n}\nfunction _visualToZeroBasedCoords2(visualCoords) {\n  const {\n    row,\n    col\n  } = _classPrivateFieldGet(this, _options).visualToRenderableCoords(visualCoords);\n  return {\n    x: _classPrivateFieldGet(this, _offset).x + col,\n    y: _classPrivateFieldGet(this, _offset).y + row\n  };\n}\nfunction _zeroBasedToVisualCoords2(zeroBasedCoords) {\n  zeroBasedCoords.col = zeroBasedCoords.col - _classPrivateFieldGet(this, _offset).x;\n  zeroBasedCoords.row = zeroBasedCoords.row - _classPrivateFieldGet(this, _offset).y;\n  return _classPrivateFieldGet(this, _options).renderableToVisualCoords(zeroBasedCoords);\n}\nmixin(Transformation, localHooks);\nexport default Transformation;","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { CellRange, CellCoords } from \"./../3rdparty/walkontable/src/index.mjs\";\nimport { arrayEach, arrayReduce } from \"./../helpers/array.mjs\";\nimport { isUndefined } from \"./../helpers/mixed.mjs\";\nexport const SELECTION_TYPE_UNRECOGNIZED = 0;\nexport const SELECTION_TYPE_EMPTY = 1;\nexport const SELECTION_TYPE_ARRAY = 2;\nexport const SELECTION_TYPE_OBJECT = 3;\nexport const SELECTION_TYPES = [SELECTION_TYPE_OBJECT, SELECTION_TYPE_ARRAY];\nconst ARRAY_TYPE_PATTERN = [['number'], ['number', 'string'], ['number', 'undefined'], ['number', 'string', 'undefined']];\nconst rootCall = Symbol('root');\nconst childCall = Symbol('child');\n\n/**\n * Detect selection schema structure.\n *\n * @param {*} selectionRanges The selected range or and array of selected ranges. This type of data is produced by\n * `hot.getSelected()`, `hot.getSelectedLast()`, `hot.getSelectedRange()`\n * and `hot.getSelectedRangeLast()` methods.\n * @param {symbol} _callSymbol The symbol object which indicates source of the helper invocation.\n * @returns {number} Returns a number that specifies the type of detected selection schema. If selection schema type\n * is unrecognized than it returns `0`.\n */\nexport function detectSelectionType(selectionRanges) {\n  let _callSymbol = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : rootCall;\n  if (_callSymbol !== rootCall && _callSymbol !== childCall) {\n    throw new Error('The second argument is used internally only and cannot be overwritten.');\n  }\n  const isArray = Array.isArray(selectionRanges);\n  const isRootCall = _callSymbol === rootCall;\n  let result = SELECTION_TYPE_UNRECOGNIZED;\n  if (isArray) {\n    const firstItem = selectionRanges[0];\n    if (selectionRanges.length === 0) {\n      result = SELECTION_TYPE_EMPTY;\n    } else if (isRootCall && firstItem instanceof CellRange) {\n      result = SELECTION_TYPE_OBJECT;\n    } else if (isRootCall && Array.isArray(firstItem)) {\n      result = detectSelectionType(firstItem, childCall);\n    } else if (selectionRanges.length >= 2 && selectionRanges.length <= 4) {\n      const isArrayType = !selectionRanges.some((value, index) => !ARRAY_TYPE_PATTERN[index].includes(typeof value));\n      if (isArrayType) {\n        result = SELECTION_TYPE_ARRAY;\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Factory function designed for normalization data schema from different data structures of the selection ranges.\n *\n * @param {number} type Selection type which will be processed.\n * @param {object} [options] The normalization options.\n * @param {boolean} [options.keepDirection=false] If `true`, the coordinates which contain the direction of the\n *                                                selected cells won't be changed. Otherwise, the selection will be\n *                                                normalized to values starting from top-left to bottom-right.\n * @param {Function} [options.propToCol] Pass the converting function (usually `datamap.propToCol`) if the column\n *                                       defined as props should be normalized to the numeric values.\n * @returns {number[]} Returns normalized data about selected range as an array (`[rowStart, columnStart, rowEnd, columnEnd]`).\n */\nexport function normalizeSelectionFactory(type) {\n  let {\n    keepDirection = false,\n    propToCol\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!SELECTION_TYPES.includes(type)) {\n    throw new Error('Unsupported selection ranges schema type was provided.');\n  }\n  return function (selection) {\n    const isObjectType = type === SELECTION_TYPE_OBJECT;\n    let rowStart = isObjectType ? selection.from.row : selection[0];\n    let columnStart = isObjectType ? selection.from.col : selection[1];\n    let rowEnd = isObjectType ? selection.to.row : selection[2];\n    let columnEnd = isObjectType ? selection.to.col : selection[3];\n    if (typeof propToCol === 'function') {\n      if (typeof columnStart === 'string') {\n        columnStart = propToCol(columnStart);\n      }\n      if (typeof columnEnd === 'string') {\n        columnEnd = propToCol(columnEnd);\n      }\n    }\n    if (isUndefined(rowEnd)) {\n      rowEnd = rowStart;\n    }\n    if (isUndefined(columnEnd)) {\n      columnEnd = columnStart;\n    }\n    if (!keepDirection) {\n      const origRowStart = rowStart;\n      const origColumnStart = columnStart;\n      const origRowEnd = rowEnd;\n      const origColumnEnd = columnEnd;\n      rowStart = Math.min(origRowStart, origRowEnd);\n      columnStart = Math.min(origColumnStart, origColumnEnd);\n      rowEnd = Math.max(origRowStart, origRowEnd);\n      columnEnd = Math.max(origColumnStart, origColumnEnd);\n    }\n    const from = new CellCoords(rowStart, columnStart);\n    const to = new CellCoords(rowEnd, columnEnd);\n    return new CellRange(from, from, to);\n  };\n}\n\n/**\n * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized\n * data structure. It merges repeated ranges into consecutive coordinates. The returned structure\n * contains an array of arrays. The single item contains at index 0 visual column index from the selection was\n * started and at index 1 distance as a count of selected columns.\n *\n * @param {Array[]|CellRange[]} selectionRanges Selection ranges produced by Handsontable.\n * @returns {Array[]} Returns an array of arrays with ranges defines in that schema:\n *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.\n *                   The column distances are always created starting from the left (zero index) to the\n *                   right (the latest column index).\n */\nexport function transformSelectionToColumnDistance(selectionRanges) {\n  const selectionType = detectSelectionType(selectionRanges);\n  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {\n    return [];\n  }\n  const selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);\n  const unorderedIndexes = new Set();\n\n  // Iterate through all ranges and collect all column indexes which are not saved yet.\n  arrayEach(selectionRanges, selection => {\n    const {\n      from,\n      to\n    } = selectionSchemaNormalizer(selection);\n    const columnNonHeaderStart = Math.max(from.col, 0);\n    const amount = to.col - columnNonHeaderStart + 1;\n    arrayEach(Array.from(new Array(amount), (_, i) => columnNonHeaderStart + i), index => {\n      if (!unorderedIndexes.has(index)) {\n        unorderedIndexes.add(index);\n      }\n    });\n  });\n\n  // Sort indexes in ascending order to easily detecting non-consecutive columns.\n  const orderedIndexes = Array.from(unorderedIndexes).sort((a, b) => a - b);\n  const normalizedColumnRanges = arrayReduce(orderedIndexes, (acc, visualColumnIndex, index, array) => {\n    if (index !== 0 && visualColumnIndex === array[index - 1] + 1) {\n      acc[acc.length - 1][1] += 1;\n    } else {\n      acc.push([visualColumnIndex, 1]);\n    }\n    return acc;\n  }, []);\n  return normalizedColumnRanges;\n}\n\n/**\n * Function transform selection ranges (produced by `hot.getSelected()` and `hot.getSelectedRange()`) to normalized\n * data structure. It merges repeated ranges into consecutive coordinates. The returned structure\n * contains an array of arrays. The single item contains at index 0 visual column index from the selection was\n * started and at index 1 distance as a count of selected columns.\n *\n * @param {Array[]|CellRange[]} selectionRanges Selection ranges produced by Handsontable.\n * @returns {Array[]} Returns an array of arrays with ranges defines in that schema:\n *                   `[[visualColumnStart, distance], [visualColumnStart, distance], ...]`.\n *                   The column distances are always created starting from the left (zero index) to the\n *                   right (the latest column index).\n */\nexport function transformSelectionToRowDistance(selectionRanges) {\n  const selectionType = detectSelectionType(selectionRanges);\n  if (selectionType === SELECTION_TYPE_UNRECOGNIZED || selectionType === SELECTION_TYPE_EMPTY) {\n    return [];\n  }\n  const selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);\n  const unorderedIndexes = new Set();\n\n  // Iterate through all ranges and collect all column indexes which are not saved yet.\n  arrayEach(selectionRanges, selection => {\n    const {\n      from,\n      to\n    } = selectionSchemaNormalizer(selection);\n    const rowNonHeaderStart = Math.max(from.row, 0);\n    const amount = to.row - rowNonHeaderStart + 1;\n    arrayEach(Array.from(new Array(amount), (_, i) => rowNonHeaderStart + i), index => {\n      if (!unorderedIndexes.has(index)) {\n        unorderedIndexes.add(index);\n      }\n    });\n  });\n\n  // Sort indexes in ascending order to easily detecting non-consecutive columns.\n  const orderedIndexes = Array.from(unorderedIndexes).sort((a, b) => a - b);\n  const normalizedRowRanges = arrayReduce(orderedIndexes, (acc, rowIndex, index, array) => {\n    if (index !== 0 && rowIndex === array[index - 1] + 1) {\n      acc[acc.length - 1][1] += 1;\n    } else {\n      acc.push([rowIndex, 1]);\n    }\n    return acc;\n  }, []);\n  return normalizedRowRanges;\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { CellCoords, CellRange } from \"./../3rdparty/walkontable/src/index.mjs\";\nimport Highlight, { AREA_TYPE, HEADER_TYPE, FOCUS_TYPE } from \"./highlight/highlight.mjs\";\nimport SelectionRange from \"./range.mjs\";\nimport { createObjectPropListener, mixin } from \"./../helpers/object.mjs\";\nimport { isUndefined } from \"./../helpers/mixed.mjs\";\nimport { clamp } from \"./../helpers/number.mjs\";\nimport { arrayEach } from \"./../helpers/array.mjs\";\nimport localHooks from \"./../mixins/localHooks.mjs\";\nimport Transformation from \"./transformation.mjs\";\nimport { detectSelectionType, normalizeSelectionFactory, SELECTION_TYPE_EMPTY, SELECTION_TYPE_UNRECOGNIZED } from \"./utils.mjs\";\nimport { toSingleLine } from \"./../helpers/templateLiteralTag.mjs\";\nimport { A11Y_SELECTED } from \"../helpers/a11y.mjs\";\n/**\n * @class Selection\n * @util\n */\nvar _disableHeadersHighlight = /*#__PURE__*/new WeakMap();\nclass Selection {\n  constructor(settings, tableProps) {\n    var _this = this;\n    /**\n     * Handsontable settings instance.\n     *\n     * @type {GridSettings}\n     */\n    _defineProperty(this, \"settings\", void 0);\n    /**\n     * An additional object with dynamically defined properties which describes table state.\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"tableProps\", void 0);\n    /**\n     * The flag which determines if the selection is in progress.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"inProgress\", false);\n    /**\n     * Selection data layer (handle visual coordinates).\n     *\n     * @type {SelectionRange}\n     */\n    _defineProperty(this, \"selectedRange\", new SelectionRange((highlight, from, to) => {\n      return this.tableProps.createCellRange(highlight, from, to);\n    }));\n    /**\n     * Visualization layer.\n     *\n     * @type {Highlight}\n     */\n    _defineProperty(this, \"highlight\", void 0);\n    /**\n     * The module for modifying coordinates.\n     *\n     * @type {Transformation}\n     */\n    _defineProperty(this, \"transformation\", void 0);\n    /**\n     * The collection of the selection layer levels where the whole row was selected using the row header or\n     * the corner header.\n     *\n     * @type {Set<number>}\n     */\n    _defineProperty(this, \"selectedByRowHeader\", new Set());\n    /**\n     * The collection of the selection layer levels where the whole column was selected using the column header or\n     * the corner header.\n     *\n     * @type {Set<number>}\n     */\n    _defineProperty(this, \"selectedByColumnHeader\", new Set());\n    /**\n     * When sets disable highlighting the headers even when the logical coordinates points on them.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _disableHeadersHighlight, {\n      writable: true,\n      value: false\n    });\n    this.settings = settings;\n    this.tableProps = tableProps;\n    this.highlight = new Highlight({\n      headerClassName: settings.currentHeaderClassName,\n      headerAttributes: [A11Y_SELECTED()],\n      activeHeaderClassName: settings.activeHeaderClassName,\n      rowClassName: settings.currentRowClassName,\n      columnClassName: settings.currentColClassName,\n      cellAttributes: [A11Y_SELECTED()],\n      rowIndexMapper: this.tableProps.rowIndexMapper,\n      columnIndexMapper: this.tableProps.columnIndexMapper,\n      disabledCellSelection: (row, column) => this.tableProps.isDisabledCellSelection(row, column),\n      cellCornerVisible: function () {\n        return _this.isCellCornerVisible(...arguments);\n      },\n      areaCornerVisible: function () {\n        return _this.isAreaCornerVisible(...arguments);\n      },\n      visualToRenderableCoords: coords => this.tableProps.visualToRenderableCoords(coords),\n      renderableToVisualCoords: coords => this.tableProps.renderableToVisualCoords(coords),\n      createCellCoords: (row, column) => this.tableProps.createCellCoords(row, column),\n      createCellRange: (highlight, from, to) => this.tableProps.createCellRange(highlight, from, to)\n    });\n    this.transformation = new Transformation(this.selectedRange, {\n      rowIndexMapper: this.tableProps.rowIndexMapper,\n      columnIndexMapper: this.tableProps.columnIndexMapper,\n      countRenderableRows: () => this.tableProps.countRenderableRows(),\n      countRenderableColumns: () => this.tableProps.countRenderableColumns(),\n      countRowHeaders: () => this.tableProps.countRowHeaders(),\n      countColHeaders: () => this.tableProps.countColHeaders(),\n      visualToRenderableCoords: coords => this.tableProps.visualToRenderableCoords(coords),\n      renderableToVisualCoords: coords => this.tableProps.renderableToVisualCoords(coords),\n      createCellCoords: (row, column) => this.tableProps.createCellCoords(row, column),\n      navigableHeaders: () => settings.navigableHeaders,\n      fixedRowsBottom: () => settings.fixedRowsBottom,\n      minSpareRows: () => settings.minSpareRows,\n      minSpareCols: () => settings.minSpareCols,\n      autoWrapRow: () => settings.autoWrapRow,\n      autoWrapCol: () => settings.autoWrapCol\n    });\n    this.transformation.addLocalHook('beforeTransformStart', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _this.runLocalHooks('beforeModifyTransformStart', ...args);\n    });\n    this.transformation.addLocalHook('afterTransformStart', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _this.runLocalHooks('afterModifyTransformStart', ...args);\n    });\n    this.transformation.addLocalHook('beforeTransformEnd', function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      return _this.runLocalHooks('beforeModifyTransformEnd', ...args);\n    });\n    this.transformation.addLocalHook('afterTransformEnd', function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return _this.runLocalHooks('afterModifyTransformEnd', ...args);\n    });\n    this.transformation.addLocalHook('insertRowRequire', function () {\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      return _this.runLocalHooks('insertRowRequire', ...args);\n    });\n    this.transformation.addLocalHook('insertColRequire', function () {\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      return _this.runLocalHooks('insertColRequire', ...args);\n    });\n  }\n\n  /**\n   * Get data layer for current selection.\n   *\n   * @returns {SelectionRange}\n   */\n  getSelectedRange() {\n    return this.selectedRange;\n  }\n\n  /**\n   * Indicate that selection process began. It sets internally `.inProgress` property to `true`.\n   */\n  begin() {\n    this.inProgress = true;\n  }\n\n  /**\n   * Indicate that selection process finished. It sets internally `.inProgress` property to `false`.\n   */\n  finish() {\n    this.runLocalHooks('afterSelectionFinished', Array.from(this.selectedRange));\n    this.inProgress = false;\n  }\n\n  /**\n   * Check if the process of selecting the cell/cells is in progress.\n   *\n   * @returns {boolean}\n   */\n  isInProgress() {\n    return this.inProgress;\n  }\n\n  /**\n   * Starts selection range on given coordinate object.\n   *\n   * @param {CellCoords} coords Visual coords.\n   * @param {boolean} [multipleSelection] If `true`, selection will be worked in 'multiple' mode. This option works\n   *                                      only when 'selectionMode' is set as 'multiple'. If the argument is not defined\n   *                                      the default trigger will be used.\n   * @param {boolean} [fragment=false] If `true`, the selection will be treated as a partial selection where the\n   *                                   `setRangeEnd` method won't be called on every `setRangeStart` call.\n   * @param {CellCoords} [highlightCoords] If set, allows changing the coordinates of the highlight/focus cell.\n   */\n  setRangeStart(coords, multipleSelection) {\n    let fragment = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let highlightCoords = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : coords;\n    const isMultipleMode = this.settings.selectionMode === 'multiple';\n    const isMultipleSelection = isUndefined(multipleSelection) ? this.tableProps.getShortcutManager().isCtrlPressed() : multipleSelection;\n    // We are creating copy. We would like to modify just the start of the selection by below hook. Then original coords\n    // should be handled by next methods.\n    const coordsClone = coords.clone();\n    this.runLocalHooks(`beforeSetRangeStart${fragment ? 'Only' : ''}`, coordsClone);\n    if (!isMultipleMode || isMultipleMode && !isMultipleSelection && isUndefined(multipleSelection)) {\n      this.selectedRange.clear();\n    }\n    this.selectedRange.add(coordsClone).current().setHighlight(highlightCoords.clone());\n    if (this.getLayerLevel() === 0) {\n      this.selectedByRowHeader.clear();\n      this.selectedByColumnHeader.clear();\n    }\n    if (!fragment) {\n      this.setRangeEnd(coords);\n    }\n  }\n\n  /**\n   * Starts selection range on given coordinate object.\n   *\n   * @param {CellCoords} coords Visual coords.\n   * @param {boolean} [multipleSelection] If `true`, selection will be worked in 'multiple' mode. This option works\n   *                                      only when 'selectionMode' is set as 'multiple'. If the argument is not defined\n   *                                      the default trigger will be used.\n   * @param {CellCoords} [highlightCoords] If set, allows changing the coordinates of the highlight/focus cell.\n   */\n  setRangeStartOnly(coords, multipleSelection) {\n    let highlightCoords = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : coords;\n    this.setRangeStart(coords, multipleSelection, true, highlightCoords);\n  }\n\n  /**\n   * Ends selection range on given coordinate object.\n   *\n   * @param {CellCoords} coords Visual coords.\n   */\n  setRangeEnd(coords) {\n    if (this.selectedRange.isEmpty()) {\n      return;\n    }\n    const coordsClone = coords.clone();\n    const countRows = this.tableProps.countRows();\n    const countCols = this.tableProps.countCols();\n    const isSingle = this.selectedRange.current().clone().setTo(coords).isSingleHeader();\n\n    // Ignore processing the end range when the header selection starts overlapping the corner and\n    // the selection is not a single header highlight.\n    if ((countRows > 0 || countCols > 0) && (countRows === 0 && coordsClone.col < 0 && !isSingle || countCols === 0 && coordsClone.row < 0 && !isSingle)) {\n      return;\n    }\n    this.runLocalHooks('beforeSetRangeEnd', coordsClone);\n    this.begin();\n    const cellRange = this.selectedRange.current();\n    if (!this.settings.navigableHeaders) {\n      cellRange.highlight.normalize();\n    }\n    if (this.settings.selectionMode === 'single') {\n      cellRange.setFrom(cellRange.highlight);\n      cellRange.setTo(cellRange.highlight);\n    } else {\n      cellRange.setTo(coordsClone);\n    }\n\n    // Prevent creating \"area\" selection that overlaps headers.\n    if (countRows > 0 && countCols > 0) {\n      if (!this.settings.navigableHeaders || this.settings.navigableHeaders && !cellRange.isSingleHeader()) {\n        cellRange.to.normalize();\n      }\n    }\n    this.runLocalHooks('beforeHighlightSet');\n    const focusHighlight = this.highlight.getFocus();\n    focusHighlight.clear();\n    if (this.highlight.isEnabledFor(FOCUS_TYPE, cellRange.highlight)) {\n      focusHighlight.add(this.selectedRange.current().highlight).commit().syncWith(cellRange);\n    }\n    const layerLevel = this.getLayerLevel();\n\n    // If the next layer level is lower than previous then clear all area and header highlights. This is the\n    // indication that the new selection is performing.\n    if (layerLevel < this.highlight.layerLevel) {\n      arrayEach(this.highlight.getAreas(), highlight => void highlight.clear());\n      arrayEach(this.highlight.getLayeredAreas(), highlight => void highlight.clear());\n      arrayEach(this.highlight.getRowHeaders(), highlight => void highlight.clear());\n      arrayEach(this.highlight.getColumnHeaders(), highlight => void highlight.clear());\n      arrayEach(this.highlight.getActiveRowHeaders(), highlight => void highlight.clear());\n      arrayEach(this.highlight.getActiveColumnHeaders(), highlight => void highlight.clear());\n      arrayEach(this.highlight.getActiveCornerHeaders(), highlight => void highlight.clear());\n      arrayEach(this.highlight.getRowHighlights(), highlight => void highlight.clear());\n      arrayEach(this.highlight.getColumnHighlights(), highlight => void highlight.clear());\n    }\n    this.highlight.useLayerLevel(layerLevel);\n    const areaHighlight = this.highlight.createArea();\n    const layeredAreaHighlight = this.highlight.createLayeredArea();\n    const rowHeaderHighlight = this.highlight.createRowHeader();\n    const columnHeaderHighlight = this.highlight.createColumnHeader();\n    const activeRowHeaderHighlight = this.highlight.createActiveRowHeader();\n    const activeColumnHeaderHighlight = this.highlight.createActiveColumnHeader();\n    const activeCornerHeaderHighlight = this.highlight.createActiveCornerHeader();\n    const rowHighlight = this.highlight.createRowHighlight();\n    const columnHighlight = this.highlight.createColumnHighlight();\n    areaHighlight.clear();\n    layeredAreaHighlight.clear();\n    rowHeaderHighlight.clear();\n    columnHeaderHighlight.clear();\n    activeRowHeaderHighlight.clear();\n    activeColumnHeaderHighlight.clear();\n    activeCornerHeaderHighlight.clear();\n    rowHighlight.clear();\n    columnHighlight.clear();\n    if (this.highlight.isEnabledFor(AREA_TYPE, cellRange.highlight) && (this.isMultiple() || layerLevel >= 1)) {\n      areaHighlight.add(cellRange.from).add(cellRange.to).commit();\n      layeredAreaHighlight.add(cellRange.from).add(cellRange.to).commit();\n      if (layerLevel === 1) {\n        // For single cell selection in the same layer, we do not create area selection to prevent blue background.\n        // When non-consecutive selection is performed we have to add that missing area selection to the previous layer\n        // based on previous coordinates. It only occurs when the previous selection wasn't select multiple cells.\n        const previousRange = this.selectedRange.previous();\n        this.highlight.useLayerLevel(layerLevel - 1);\n        this.highlight.createArea().add(previousRange.from).commit()\n        // Range may start with hidden indexes. Commit would not found start point (as we add just the `from` coords).\n        .syncWith(previousRange);\n        this.highlight.createLayeredArea().add(previousRange.from).commit()\n        // Range may start with hidden indexes. Commit would not found start point (as we add just the `from` coords).\n        .syncWith(previousRange);\n        this.highlight.useLayerLevel(layerLevel);\n      }\n    }\n    if (this.highlight.isEnabledFor(HEADER_TYPE, cellRange.highlight)) {\n      if (!cellRange.isSingleHeader()) {\n        const rowCoordsFrom = this.tableProps.createCellCoords(Math.max(cellRange.from.row, 0), -1);\n        const rowCoordsTo = this.tableProps.createCellCoords(cellRange.to.row, -1);\n        const columnCoordsFrom = this.tableProps.createCellCoords(-1, Math.max(cellRange.from.col, 0));\n        const columnCoordsTo = this.tableProps.createCellCoords(-1, cellRange.to.col);\n        if (this.settings.selectionMode === 'single') {\n          rowHeaderHighlight.add(rowCoordsFrom).commit();\n          columnHeaderHighlight.add(columnCoordsFrom).commit();\n          rowHighlight.add(rowCoordsFrom).commit();\n          columnHighlight.add(columnCoordsFrom).commit();\n        } else {\n          rowHeaderHighlight.add(rowCoordsFrom).add(rowCoordsTo).commit();\n          columnHeaderHighlight.add(columnCoordsFrom).add(columnCoordsTo).commit();\n          rowHighlight.add(rowCoordsFrom).add(rowCoordsTo).commit();\n          columnHighlight.add(columnCoordsFrom).add(columnCoordsTo).commit();\n        }\n      }\n      const highlightRowHeaders = !_classPrivateFieldGet(this, _disableHeadersHighlight) && this.isEntireRowSelected() && (countCols > 0 && countCols === cellRange.getWidth() || countCols === 0 && this.isSelectedByRowHeader());\n      const highlightColumnHeaders = !_classPrivateFieldGet(this, _disableHeadersHighlight) && this.isEntireColumnSelected() && (countRows > 0 && countRows === cellRange.getHeight() || countRows === 0 && this.isSelectedByColumnHeader());\n      if (highlightRowHeaders) {\n        activeRowHeaderHighlight.add(this.tableProps.createCellCoords(Math.max(cellRange.from.row, 0), Math.min(-this.tableProps.countRowHeaders(), -1))).add(this.tableProps.createCellCoords(Math.max(cellRange.to.row, 0), -1)).commit();\n      }\n      if (highlightColumnHeaders) {\n        activeColumnHeaderHighlight.add(this.tableProps.createCellCoords(Math.min(-this.tableProps.countColHeaders(), -1), Math.max(cellRange.from.col, 0))).add(this.tableProps.createCellCoords(-1, Math.max(cellRange.to.col, 0))).commit();\n      }\n      if (highlightRowHeaders && highlightColumnHeaders) {\n        activeCornerHeaderHighlight.add(this.tableProps.createCellCoords(-this.tableProps.countColHeaders(), -this.tableProps.countRowHeaders())).add(this.tableProps.createCellCoords(-1, -1)).commit();\n      }\n    }\n    this.runLocalHooks('afterSetRangeEnd', coords);\n  }\n\n  /**\n   * Returns information if we have a multiselection. This method check multiselection only on the latest layer of\n   * the selection.\n   *\n   * @returns {boolean}\n   */\n  isMultiple() {\n    const isMultipleListener = createObjectPropListener(!this.selectedRange.current().isSingle());\n    this.runLocalHooks('afterIsMultipleSelection', isMultipleListener);\n    return isMultipleListener.value;\n  }\n\n  /**\n   * Selects cell relative to the current cell (if possible).\n   *\n   * @param {number} rowDelta Rows number to move, value can be passed as negative number.\n   * @param {number} colDelta Columns number to move, value can be passed as negative number.\n   * @param {boolean} [createMissingRecords=false] If `true` the new rows/columns will be created if necessary.\n   * Otherwise, row/column will be created according to `minSpareRows/minSpareCols` settings of Handsontable.\n   */\n  transformStart(rowDelta, colDelta) {\n    let createMissingRecords = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.setRangeStart(this.transformation.transformStart(rowDelta, colDelta, createMissingRecords));\n  }\n\n  /**\n   * Sets selection end cell relative to the current selection end cell (if possible).\n   *\n   * @param {number} rowDelta Rows number to move, value can be passed as negative number.\n   * @param {number} colDelta Columns number to move, value can be passed as negative number.\n   */\n  transformEnd(rowDelta, colDelta) {\n    this.setRangeEnd(this.transformation.transformEnd(rowDelta, colDelta));\n  }\n\n  /**\n   * Returns currently used layer level.\n   *\n   * @returns {number} Returns layer level starting from 0. If no selection was added to the table -1 is returned.\n   */\n  getLayerLevel() {\n    return this.selectedRange.size() - 1;\n  }\n\n  /**\n   * Returns `true` if currently there is a selection on the screen, `false` otherwise.\n   *\n   * @returns {boolean}\n   */\n  isSelected() {\n    return !this.selectedRange.isEmpty();\n  }\n\n  /**\n   * Returns `true` if the selection was applied by clicking to the row header. If the `layerLevel`\n   * argument is passed then only that layer will be checked. Otherwise, it checks if any row header\n   * was clicked on any selection layer level.\n   *\n   * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.\n   * @returns {boolean}\n   */\n  isSelectedByRowHeader() {\n    let layerLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getLayerLevel();\n    return !this.isSelectedByCorner(layerLevel) && (layerLevel === -1 ? this.selectedByRowHeader.size > 0 : this.selectedByRowHeader.has(layerLevel));\n  }\n\n  /**\n   * Returns `true` if the selection consists of entire rows (including their headers). If the `layerLevel`\n   * argument is passed then only that layer will be checked. Otherwise, it checks the selection for all layers.\n   *\n   * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.\n   * @returns {boolean}\n   */\n  isEntireRowSelected() {\n    let layerLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getLayerLevel();\n    const tester = range => {\n      const {\n        col\n      } = range.getOuterTopStartCorner();\n      const rowHeaders = this.tableProps.countRowHeaders();\n      const countCols = this.tableProps.countCols();\n      return (rowHeaders > 0 && col < 0 || rowHeaders === 0) && range.getWidth() === countCols;\n    };\n    if (layerLevel === -1) {\n      return Array.from(this.selectedRange).some(range => tester(range));\n    }\n    const range = this.selectedRange.peekByIndex(layerLevel);\n    return range ? tester(range) : false;\n  }\n\n  /**\n   * Returns `true` if the selection was applied by clicking to the column header. If the `layerLevel`\n   * argument is passed then only that layer will be checked. Otherwise, it checks if any column header\n   * was clicked on any selection layer level.\n   *\n   * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.\n   * @returns {boolean}\n   */\n  isSelectedByColumnHeader() {\n    let layerLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getLayerLevel();\n    return !this.isSelectedByCorner() && (layerLevel === -1 ? this.selectedByColumnHeader.size > 0 : this.selectedByColumnHeader.has(layerLevel));\n  }\n\n  /**\n   * Returns `true` if the selection consists of entire columns (including their headers). If the `layerLevel`\n   * argument is passed then only that layer will be checked. Otherwise, it checks the selection for all layers.\n   *\n   * @param {number} [layerLevel=this.getLayerLevel()] Selection layer level to check.\n   * @returns {boolean}\n   */\n  isEntireColumnSelected() {\n    let layerLevel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getLayerLevel();\n    const tester = range => {\n      const {\n        row\n      } = range.getOuterTopStartCorner();\n      const colHeaders = this.tableProps.countColHeaders();\n      const countRows = this.tableProps.countRows();\n      return (colHeaders > 0 && row < 0 || colHeaders === 0) && range.getHeight() === countRows;\n    };\n    if (layerLevel === -1) {\n      return Array.from(this.selectedRange).some(range => tester(range));\n    }\n    const range = this.selectedRange.peekByIndex(layerLevel);\n    return range ? tester(range) : false;\n  }\n\n  /**\n   * Returns `true` if the selection was applied by clicking on the row or column header on any layer level.\n   *\n   * @returns {boolean}\n   */\n  isSelectedByAnyHeader() {\n    return this.isSelectedByRowHeader(-1) || this.isSelectedByColumnHeader(-1) || this.isSelectedByCorner();\n  }\n\n  /**\n   * Returns `true` if the selection was applied by clicking on the left-top corner overlay.\n   *\n   * @returns {boolean}\n   */\n  isSelectedByCorner() {\n    return this.selectedByColumnHeader.has(this.getLayerLevel()) && this.selectedByRowHeader.has(this.getLayerLevel());\n  }\n\n  /**\n   * Returns `true` if coords is within selection coords. This method iterates through all selection layers to check if\n   * the coords object is within selection range.\n   *\n   * @param {CellCoords} coords The CellCoords instance with defined visual coordinates.\n   * @returns {boolean}\n   */\n  inInSelection(coords) {\n    return this.selectedRange.includes(coords);\n  }\n\n  /**\n   * Returns `true` if the cell corner should be visible.\n   *\n   * @private\n   * @returns {boolean} `true` if the corner element has to be visible, `false` otherwise.\n   */\n  isCellCornerVisible() {\n    return this.settings.fillHandle && !this.tableProps.isEditorOpened() && !this.isMultiple();\n  }\n\n  /**\n   * Returns `true` if the area corner should be visible.\n   *\n   * @param {number} layerLevel The layer level.\n   * @returns {boolean} `true` if the corner element has to be visible, `false` otherwise.\n   */\n  isAreaCornerVisible(layerLevel) {\n    if (Number.isInteger(layerLevel) && layerLevel !== this.getLayerLevel()) {\n      return false;\n    }\n    return this.settings.fillHandle && !this.tableProps.isEditorOpened() && this.isMultiple();\n  }\n\n  /**\n   * Clear the selection by resetting the collected ranges and highlights.\n   */\n  clear() {\n    // TODO: collections selectedByColumnHeader and selectedByRowHeader should be clear too.\n    this.selectedRange.clear();\n    this.highlight.clear();\n  }\n\n  /**\n   * Deselects all selected cells.\n   */\n  deselect() {\n    if (!this.isSelected()) {\n      return;\n    }\n    this.inProgress = false;\n    this.clear();\n    this.runLocalHooks('afterDeselect');\n  }\n\n  /**\n   * Selects all cells and headers.\n   *\n   * @param {boolean} [includeRowHeaders=false] `true` If the selection should include the row headers,\n   * `false` otherwise.\n   * @param {boolean} [includeColumnHeaders=false] `true` If the selection should include the column\n   * headers, `false` otherwise.\n   * @param {object} [options] Additional object with options.\n   * @param {{row: number, col: number} | boolean} [options.focusPosition] The argument allows changing the cell/header\n   * focus position. The value takes an object with a `row` and `col` properties from -N to N, where\n   * negative values point to the headers and positive values point to the cell range. If `false`, the focus\n   * position won't be changed.\n   * @param {boolean} [options.disableHeadersHighlight] If `true`, disables highlighting the headers even when\n   * the logical coordinates points on them.\n   */\n  selectAll() {\n    var _this$getSelectedRang;\n    let includeRowHeaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let includeColumnHeaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {\n      focusPosition: false,\n      disableHeadersHighlight: false\n    };\n    const nrOfRows = this.tableProps.countRows();\n    const nrOfColumns = this.tableProps.countCols();\n    const countRowHeaders = this.tableProps.countRowHeaders();\n    const countColHeaders = this.tableProps.countColHeaders();\n    const rowFrom = includeColumnHeaders ? -countColHeaders : 0;\n    const columnFrom = includeRowHeaders ? -countRowHeaders : 0;\n\n    // We can't select cells when there is no data.\n    if (rowFrom === 0 && columnFrom === 0 && (nrOfRows === 0 || nrOfColumns === 0)) {\n      return;\n    }\n    let highlight = (_this$getSelectedRang = this.getSelectedRange().current()) === null || _this$getSelectedRang === void 0 ? void 0 : _this$getSelectedRang.highlight;\n    const {\n      focusPosition,\n      disableHeadersHighlight\n    } = options;\n    _classPrivateFieldSet(this, _disableHeadersHighlight, disableHeadersHighlight);\n    if (focusPosition && Number.isInteger(focusPosition === null || focusPosition === void 0 ? void 0 : focusPosition.row) && Number.isInteger(focusPosition === null || focusPosition === void 0 ? void 0 : focusPosition.col)) {\n      highlight = this.tableProps.createCellCoords(clamp(focusPosition.row, rowFrom, nrOfRows - 1), clamp(focusPosition.col, columnFrom, nrOfColumns - 1));\n    }\n    const startCoords = this.tableProps.createCellCoords(rowFrom, columnFrom);\n    const endCoords = this.tableProps.createCellCoords(nrOfRows - 1, nrOfColumns - 1);\n    this.clear();\n    this.setRangeStartOnly(startCoords, void 0, highlight);\n    if (columnFrom < 0) {\n      this.selectedByRowHeader.add(this.getLayerLevel());\n    }\n    if (rowFrom < 0) {\n      this.selectedByColumnHeader.add(this.getLayerLevel());\n    }\n    this.setRangeEnd(endCoords);\n    this.finish();\n    _classPrivateFieldSet(this, _disableHeadersHighlight, false);\n  }\n\n  /**\n   * Make multiple, non-contiguous selection specified by `row` and `column` values or a range of cells\n   * finishing at `endRow`, `endColumn`. The method supports two input formats, first as an array of arrays such\n   * as `[[rowStart, columnStart, rowEnd, columnEnd]]` and second format as an array of CellRange objects.\n   * If the passed ranges have another format the exception will be thrown.\n   *\n   * @param {Array[]|CellRange[]} selectionRanges The coordinates which define what the cells should be selected.\n   * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.\n   */\n  selectCells(selectionRanges) {\n    const selectionType = detectSelectionType(selectionRanges);\n    if (selectionType === SELECTION_TYPE_EMPTY) {\n      return false;\n    } else if (selectionType === SELECTION_TYPE_UNRECOGNIZED) {\n      throw new Error(toSingleLine`Unsupported format of the selection ranges was passed. To select cells pass\\x20\n        the coordinates as an array of arrays ([[rowStart, columnStart/columnPropStart, rowEnd,\\x20\n        columnEnd/columnPropEnd]]) or as an array of CellRange objects.`);\n    }\n    const selectionSchemaNormalizer = normalizeSelectionFactory(selectionType, {\n      propToCol: prop => this.tableProps.propToCol(prop),\n      keepDirection: true\n    });\n    const navigableHeaders = this.settings.navigableHeaders;\n    const tableParams = {\n      countRows: this.tableProps.countRows(),\n      countCols: this.tableProps.countCols(),\n      countRowHeaders: navigableHeaders ? this.tableProps.countRowHeaders() : 0,\n      countColHeaders: navigableHeaders ? this.tableProps.countColHeaders() : 0\n    };\n\n    // Check if every layer of the coordinates are valid.\n    const isValid = !selectionRanges.some(selection => {\n      const cellRange = selectionSchemaNormalizer(selection);\n      const rangeValidity = cellRange.isValid(tableParams);\n      return !(rangeValidity && !cellRange.containsHeaders() || rangeValidity && cellRange.containsHeaders() && cellRange.isSingleHeader());\n    });\n    if (isValid) {\n      this.clear();\n      arrayEach(selectionRanges, selection => {\n        const {\n          from,\n          to\n        } = selectionSchemaNormalizer(selection);\n        this.setRangeStartOnly(from.clone(), false);\n        this.setRangeEnd(to.clone());\n        this.finish();\n      });\n    }\n    return isValid;\n  }\n\n  /**\n   * Select column specified by `startColumn` visual index or column property or a range of columns finishing at\n   * `endColumn`.\n   *\n   * @param {number|string} startColumn Visual column index or column property from which the selection starts.\n   * @param {number|string} [endColumn] Visual column index or column property from to the selection finishes.\n   * @param {number} [focusPosition=0] The argument allows changing the cell/header focus position.\n   *                                   The value can take visual row index from -N to N, where negative values\n   *                                   point to the headers and positive values point to the cell range.\n   * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.\n   */\n  selectColumns(startColumn) {\n    let endColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startColumn;\n    let focusPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const start = typeof startColumn === 'string' ? this.tableProps.propToCol(startColumn) : startColumn;\n    const end = typeof endColumn === 'string' ? this.tableProps.propToCol(endColumn) : endColumn;\n    const countRows = this.tableProps.countRows();\n    const countCols = this.tableProps.countCols();\n    const countColHeaders = this.tableProps.countColHeaders();\n    const columnHeaderLastIndex = countColHeaders === 0 ? 0 : -countColHeaders;\n    const fromCoords = new CellCoords(columnHeaderLastIndex, start);\n    const toCoords = new CellCoords(countRows - 1, end);\n    const isValid = new CellRange(fromCoords, fromCoords, toCoords).isValid({\n      countRows,\n      countCols,\n      countRowHeaders: 0,\n      countColHeaders\n    });\n    if (isValid) {\n      const fromRow = countColHeaders === 0 ? 0 : clamp(focusPosition, columnHeaderLastIndex, -1);\n      const toRow = countRows - 1;\n      const from = this.tableProps.createCellCoords(fromRow, start);\n      const to = this.tableProps.createCellCoords(toRow, end);\n      const highlight = this.tableProps.createCellCoords(clamp(focusPosition, columnHeaderLastIndex, countRows - 1), start);\n      this.runLocalHooks('beforeSelectColumns', from, to, highlight);\n\n      // disallow modifying row axis for that hooks\n      from.row = fromRow;\n      to.row = toRow;\n      this.setRangeStartOnly(from, void 0, highlight);\n      this.selectedByColumnHeader.add(this.getLayerLevel());\n      this.setRangeEnd(to);\n      this.runLocalHooks('afterSelectColumns', from, to, highlight);\n      this.finish();\n    }\n    return isValid;\n  }\n\n  /**\n   * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.\n   *\n   * @param {number} startRow Visual row index from which the selection starts.\n   * @param {number} [endRow] Visual row index from to the selection finishes.\n   * @param {number} [focusPosition=0] The argument allows changing the cell/header focus position.\n   *                                   The value can take visual column index from -N to N, where negative values\n   *                                   point to the headers and positive values point to the cell range.\n   * @returns {boolean} Returns `true` if selection was successful, `false` otherwise.\n   */\n  selectRows(startRow) {\n    let endRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startRow;\n    let focusPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    const countRows = this.tableProps.countRows();\n    const countCols = this.tableProps.countCols();\n    const countRowHeaders = this.tableProps.countRowHeaders();\n    const rowHeaderLastIndex = countRowHeaders === 0 ? 0 : -countRowHeaders;\n    const fromCoords = new CellCoords(startRow, rowHeaderLastIndex);\n    const toCoords = new CellCoords(endRow, countCols - 1);\n    const isValid = new CellRange(fromCoords, fromCoords, toCoords).isValid({\n      countRows,\n      countCols,\n      countRowHeaders,\n      countColHeaders: 0\n    });\n    if (isValid) {\n      const fromColumn = countRowHeaders === 0 ? 0 : clamp(focusPosition, rowHeaderLastIndex, -1);\n      const toColumn = countCols - 1;\n      const from = this.tableProps.createCellCoords(startRow, fromColumn);\n      const to = this.tableProps.createCellCoords(endRow, toColumn);\n      const highlight = this.tableProps.createCellCoords(startRow, clamp(focusPosition, rowHeaderLastIndex, countCols - 1));\n      this.runLocalHooks('beforeSelectRows', from, to, highlight);\n\n      // disallow modifying column axis for that hooks\n      from.col = fromColumn;\n      to.col = toColumn;\n      this.setRangeStartOnly(from, void 0, highlight);\n      this.selectedByRowHeader.add(this.getLayerLevel());\n      this.setRangeEnd(to);\n      this.runLocalHooks('afterSelectRows', from, to, highlight);\n      this.finish();\n    }\n    return isValid;\n  }\n\n  /**\n   * Rewrite the rendered state of the selection as visual selection may have a new representation in the DOM.\n   */\n  refresh() {\n    const customSelections = this.highlight.getCustomSelections();\n    customSelections.forEach(customSelection => {\n      customSelection.commit();\n    });\n    if (!this.isSelected()) {\n      return;\n    }\n    const focusHighlight = this.highlight.getFocus();\n    const currentLayer = this.getLayerLevel();\n    focusHighlight.commit().syncWith(this.selectedRange.current());\n\n    // Rewriting rendered ranges going through all layers.\n    for (let layerLevel = 0; layerLevel < this.selectedRange.size(); layerLevel += 1) {\n      this.highlight.useLayerLevel(layerLevel);\n      const areaHighlight = this.highlight.createArea();\n      const areaLayeredHighlight = this.highlight.createLayeredArea();\n      const rowHeaderHighlight = this.highlight.createRowHeader();\n      const columnHeaderHighlight = this.highlight.createColumnHeader();\n      const activeRowHeaderHighlight = this.highlight.createActiveRowHeader();\n      const activeColumnHeaderHighlight = this.highlight.createActiveColumnHeader();\n      const activeCornerHeaderHighlight = this.highlight.createActiveCornerHeader();\n      const rowHighlight = this.highlight.createRowHighlight();\n      const columnHighlight = this.highlight.createColumnHighlight();\n      areaHighlight.commit();\n      areaLayeredHighlight.commit();\n      rowHeaderHighlight.commit();\n      columnHeaderHighlight.commit();\n      activeRowHeaderHighlight.commit();\n      activeColumnHeaderHighlight.commit();\n      activeCornerHeaderHighlight.commit();\n      rowHighlight.commit();\n      columnHighlight.commit();\n    }\n\n    // Reverting starting layer for the Highlight.\n    this.highlight.useLayerLevel(currentLayer);\n  }\n}\nmixin(Selection, localHooks);\nexport default Selection;","import \"core-js/modules/es.error.cause.js\";\nimport staticRegister from \"../utils/staticRegister.mjs\";\nimport { registerEditor } from \"../editors/registry.mjs\";\nimport { registerRenderer } from \"../renderers/registry.mjs\";\nimport { registerValidator } from \"../validators/registry.mjs\";\nconst {\n  register,\n  getItem,\n  hasItem,\n  getNames,\n  getValues\n} = staticRegister('cellTypes');\n\n/**\n * Retrieve cell type object.\n *\n * @param {string} name Cell type identification.\n * @returns {object} Returns cell type object.\n */\nfunction _getItem(name) {\n  if (!hasItem(name)) {\n    throw Error(`You declared cell type \"${name}\" as a string that is not mapped to a known object.\n                 Cell type must be an object or a string mapped to an object registered by\n                 \"Handsontable.cellTypes.registerCellType\" method`);\n  }\n  return getItem(name);\n}\n\n/**\n * Register cell type under specified name.\n *\n * @param {string} name Cell type identification.\n * @param {object} type An object with contains keys (eq: `editor`, `renderer`, `validator`) which describes specified behaviour of the cell.\n */\nfunction _register(name, type) {\n  if (typeof name !== 'string') {\n    type = name;\n    name = type.CELL_TYPE;\n  }\n  const {\n    editor,\n    renderer,\n    validator\n  } = type;\n  if (editor) {\n    registerEditor(name, editor);\n  }\n  if (renderer) {\n    registerRenderer(name, renderer);\n  }\n  if (validator) {\n    registerValidator(name, validator);\n  }\n  register(name, type);\n}\nexport { _register as registerCellType, _getItem as getCellType, hasItem as hasCellType, getNames as getRegisteredCellTypeNames, getValues as getRegisteredCellTypes };","import \"core-js/modules/es.error.cause.js\";\nimport { hasOwnProperty, isObject, objectEach, inherit, extend } from \"../../helpers/object.mjs\";\nimport { getCellType } from \"../../cellTypes/registry.mjs\";\n/**\n * Checks if the given property can be overwritten.\n *\n * @param {string} propertyName The property name to check.\n * @param {object} metaObject The current object meta settings.\n * @returns {boolean}\n */\nfunction canBeOverwritten(propertyName, metaObject) {\n  var _metaObject$_automati;\n  if (propertyName === 'CELL_TYPE') {\n    return false;\n  }\n  return ((_metaObject$_automati = metaObject._automaticallyAssignedMetaProps) === null || _metaObject$_automati === void 0 ? void 0 : _metaObject$_automati.has(propertyName)) || !hasOwnProperty(metaObject, propertyName);\n}\n\n/**\n * Expands \"type\" property of the meta object to single values. For example `type: 'numeric'` sets\n * \"renderer\", \"editor\", \"validator\" properties to specific functions designed for numeric values.\n * If \"type\" is passed as an object that object will be returned, excluding properties that\n * already exist in the \"metaObject\".\n *\n * The function utilizes `_automaticallyAssignedMetaProps` meta property that allows tracking what\n * properties are changed by the \"type\" expanding feature. That properties can be always overwritten by\n * the user.\n *\n * @param {object} metaObject The meta object.\n * @param {object} settings The settings object with the \"type\" setting.\n * @param {object} settingsToCompareWith The object to compare which properties need to be updated.\n */\nexport function extendByMetaType(metaObject, settings) {\n  let settingsToCompareWith = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : metaObject;\n  const validType = typeof settings.type === 'string' ? getCellType(settings.type) : settings.type;\n  if (metaObject._automaticallyAssignedMetaProps) {\n    objectEach(settings, (value, key) => void metaObject._automaticallyAssignedMetaProps.delete(key));\n  }\n  if (!isObject(validType)) {\n    return;\n  }\n  if (settingsToCompareWith === metaObject && !metaObject._automaticallyAssignedMetaProps) {\n    metaObject._automaticallyAssignedMetaProps = new Set();\n  }\n  const expandedType = {};\n  objectEach(validType, (value, property) => {\n    if (canBeOverwritten(property, settingsToCompareWith)) {\n      var _metaObject$_automati2;\n      expandedType[property] = value;\n      (_metaObject$_automati2 = metaObject._automaticallyAssignedMetaProps) === null || _metaObject$_automati2 === void 0 || _metaObject$_automati2.add(property);\n    }\n  });\n  extend(metaObject, expandedType);\n}\n\n/**\n * Creates new class which extends properties from TableMeta layer class.\n *\n * @param {TableMeta} TableMeta The TableMeta which the new ColumnMeta is created from.\n * @param {string[]} [conflictList] List of the properties which are conflicted with the column meta layer.\n *                                  Conflicted properties are overwritten by `undefined` value, to separate them\n *                                  from the TableMeta layer.\n * @returns {ColumnMeta} Returns constructor ready to initialize with `new` operator.\n */\nexport function columnFactory(TableMeta) {\n  let conflictList = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  // Do not use ES6 \"class extends\" syntax here. It seems that the babel produces code\n  // which drastically decreases the performance of the ColumnMeta class creation.\n\n  /**\n   * Base \"class\" for column meta.\n   */\n  function ColumnMeta() {}\n  inherit(ColumnMeta, TableMeta);\n\n  // Clear conflict settings\n  for (let i = 0; i < conflictList.length; i++) {\n    ColumnMeta.prototype[conflictList[i]] = void 0;\n  }\n  return ColumnMeta;\n}\n\n/**\n * Helper which checks if the provided argument is an unsigned number.\n *\n * @param {*} value Value to check.\n * @returns {boolean}\n */\nexport function isUnsignedNumber(value) {\n  return Number.isInteger(value) && value >= 0;\n}\n\n/**\n * Function which makes assertion by custom condition. Function throws an error when assertion doesn't meet the spec.\n *\n * @param {Function} condition Function with custom logic. The condition has to return boolean values.\n * @param {string} errorMessage String which describes assertion error.\n */\nexport function assert(condition, errorMessage) {\n  if (!condition()) {\n    throw new Error(`Assertion failed: ${errorMessage}`);\n  }\n}\n\n/**\n * Check if given variable is null or undefined.\n *\n * @param {*} variable Variable to check.\n * @returns {boolean}\n */\nexport function isNullish(variable) {\n  return variable === null || variable === void 0;\n}","import { isEmpty } from \"../../helpers/mixed.mjs\";\nimport { isObjectEqual } from \"../../helpers/object.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @alias Options\n * @class Options\n * @description\n *\n * [Configuration options](@/guides/getting-started/configuration-options.md) let you heavily customize your Handsontable instance. For example, you can:\n *\n * - Enable and disable built-in features\n * - Enable and configure additional [plugins](@/api/plugins.md)\n * - Personalize Handsontable's look\n * - Adjust Handsontable's behavior\n * - Implement your own custom features\n *\n * ::: only-for javascript\n *\n * To apply [configuration options](@/guides/getting-started/configuration-options.md), pass them as\n * a second argument of the [Handsontable constructor](@/guides/getting-started/installation.md#initialize-handsontable),\n * using the [object literal notation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer):\n *\n * Read more on the [Configuration options](@/guides/getting-started/configuration-options.md) page.\n *\n * ```js\n * const container = document.getElementById('example');\n *\n * const hot = new Handsontable(container, {\n *   // configuration options, in the object literal notation\n *   licenseKey: 'non-commercial-and-evaluation',\n *   data: [\n *     ['A1', 'B1', 'C1', 'D1', 'E1'],\n *     ['A2', 'B2', 'C2', 'D2', 'E2'],\n *     ['A3', 'B3', 'C3', 'D3', 'E3'],\n *     ['A4', 'B4', 'C4', 'D4', 'E4'],\n *     ['A5', 'B5', 'C5', 'D5', 'E5'],\n *   ],\n *   width: 400,\n *   height: 300,\n *   colHeaders: true,\n *   rowHeaders: true,\n *   customBorders: true,\n *   dropdownMenu: true,\n *   multiColumnSorting: true,\n *   filters: true,\n *   manualRowMove: true,\n * });\n * ```\n * :::\n *\n * ::: only-for react\n *\n * To apply configuration options, pass them as individual props\n * of the [`HotTable`](@/guides/getting-started/installation.md#_4-use-the-hottable-component)\n * or [`HotColumn`](@/guides/columns/react-hot-column.md) components.\n *\n * Read more on the [Configuration options](@/guides/getting-started/configuration-options.md) page.\n *\n * ```jsx\n * <HotTable\n *   // configuration options, in the object literal notation\n *   licenseKey='non-commercial-and-evaluation'\n *   data={[\n *     ['A1', 'B1', 'C1', 'D1', 'E1'],\n *     ['A2', 'B2', 'C2', 'D2', 'E2'],\n *     ['A3', 'B3', 'C3', 'D3', 'E3'],\n *     ['A4', 'B4', 'C4', 'D4', 'E4'],\n *     ['A5', 'B5', 'C5', 'D5', 'E5'],\n *   ]}\n *   width={400}\n *   height={300}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   customBorders={true}\n *   dropdownMenu={true}\n *   multiColumnSorting={true}\n *   filters={true}\n *   manualRowMove={true}\n * />\n * ```\n * :::\n *\n * Depending on your needs, you can apply [configuration options](@/api/options.md) to different elements of your grid:\n * - [The entire grid](@/guides/getting-started/configuration-options.md#set-grid-options)\n * - [Individual columns](@/guides/getting-started/configuration-options.md#set-column-options)\n * - [Individual rows](@/guides/getting-started/configuration-options.md#set-row-options)\n * - [Individual cells](@/guides/getting-started/configuration-options.md#set-cell-options)\n * - [Individual grid elements, based on any logic you implement](@/guides/getting-started/configuration-options.md#implementing-custom-logic)\n *\n * Read more:\n * - [Configuration options](@/guides/getting-started/configuration-options.md)\n */\nexport default (() => {\n  return {\n    /* eslint-disable jsdoc/require-description-complete-sentence */\n\n    /**\n     * Information on which of the meta properties were added automatically.\n     * For example: setting the `renderer` property directly won't extend the `_automaticallyAssignedMetaProps`\n     * entry, but setting a `type` will modify it to `Set(3) {'renderer', 'editor', 'validator', ...}`.\n     *\n     * @private\n     * @type {Set}\n     * @default undefined\n     */\n    _automaticallyAssignedMetaProps: void 0,\n    /**\n     * The `activeHeaderClassName` option lets you add a CSS class name\n     * to every currently-active, currently-selected header (when a whole column or row is selected).\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @since 0.38.2\n     * @default 'ht__active_highlight'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add an `ht__active_highlight` CSS class name\n     * // to every currently-active, currently-selected header\n     * activeHeaderClassName: 'ht__active_highlight',\n     * ```\n     */\n    activeHeaderClassName: 'ht__active_highlight',\n    /**\n     * The `allowEmpty` option determines whether Handsontable accepts the following values:\n     * - `null`\n     * - `undefined`\n     * - `''`\n     *\n     * You can set the `allowEmpty` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                          |\n     * | ---------------- | ------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `true` (default) | - Accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` or `''` values as `valid`              |\n     * | `false`          | - Don't accept `null`, `undefined` and `''` values<br>- Mark cells that contain `null`, `undefined` or `''` values with as `invalid` |\n     *\n     * ::: tip\n     * To use the [`allowEmpty`](#allowempty) option, you need to set the [`validator`](#validator) option (or the [`type`](#type) option).\n     * :::\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // allow empty values in each cell of the entire grid\n     * allowEmpty: true,\n     *\n     * // or\n     * columns: [\n     *   {\n     *     type: 'date',\n     *     dateFormat: 'DD/MM/YYYY',\n     *     // allow empty values in each cell of the 'date' column\n     *     allowEmpty: true\n     *   }\n     * ],\n     * ```\n     */\n    allowEmpty: true,\n    /**\n     * The `allowHtml` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells' [`source`](#source) data\n     * is treated as HTML.\n     *\n     * You can set the `allowHtml` option to one of the following:\n     *\n     * | Setting           | Description                                         |\n     * | ----------------- | --------------------------------------------------- |\n     * | `false` (default) | The [`source`](#source) data is not treated as HTML |\n     * | `true`            | The [`source`](#source) data is treated as HTML     |\n     *\n     * __Warning:__ Setting the `allowHtml` option to `true` can cause serious XSS vulnerabilities.\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)\n     * - [`source`](#source)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of each cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['<strong>foo</strong>', '<strong>bar</strong>']\n     *   // use HTML in the `source` list\n     *   allowHtml: true,\n     *   },\n     * ],\n     * ```\n     */\n    allowHtml: false,\n    /**\n     * If set to `true`, the `allowInsertColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Insert column left**\n     * - **Insert column right**\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Insert column left' and 'Insert column right' menu items from the context menu\n     * allowInsertColumn: false,\n     * ```\n     */\n    allowInsertColumn: true,\n    /**\n     * If set to `true`, the `allowInsertRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Insert row above**\n     * - **Insert row below**\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Insert row above' and 'Insert row below' menu items from the context menu\n     * allowInsertRow: false,\n     * ```\n     */\n    allowInsertRow: true,\n    /**\n     * The `allowInvalid` option determines whether Handsontable accepts values\n     * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).\n     *\n     * You can set the `allowInvalid` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                                                                        |\n     * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | - Accept `invalid` values<br>- Allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Save `invalid` values into the data source                   |\n     * | `false`          | - Don't accept `invalid` values<br>- Don't allow the user to close the [cell editor](@/guides/cell-functions/cell-editor.md) with `invalid` values<br>- Don't save `invalid` values into the data source |\n     *\n     * Setting the `allowInvalid` option to `false` can be useful when used with the [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode).\n     *\n     * Read more:\n     * - [Cell validator](@/guides/cell-functions/cell-validator.md)\n     * - [Cell editor](@/guides/cell-functions/cell-editor.md)\n     * - [Autocomplete strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't accept `invalid` values\n     * // don't allow the user to close the cell editor\n     * // don't save `invalid` values into the data source\n     * allowInvalid: false,\n     * ```\n     */\n    allowInvalid: true,\n    /**\n     * If set to `true`, the `allowRemoveColumn` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Remove column**\n     *\n     * Read more:\n     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Remove column' menu item from the context menu\n     * allowRemoveColumn: false,\n     * ```\n     */\n    allowRemoveColumn: true,\n    /**\n     * If set to `true`, the `allowRemoveRow` option adds the following menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md):\n     * - **Remove row**\n     *\n     * Read more:\n     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // hide the 'Remove row' menu item from the context menu\n     * allowRemoveRow: false,\n     * ```\n     */\n    allowRemoveRow: true,\n    /**\n     * If set to `true`, the accessibility-related ARIA tags will be added to the table. If set to `false`, they\n     * will be omitted.\n     * Defaults to `true`.\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     * @since 14.0.0\n     */\n    ariaTags: true,\n    /**\n     * The `autoColumnSize` option configures the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.\n     *\n     * You can set the `autoColumnSize` option to one of the following:\n     *\n     * | Setting   | Description                                                                                  |\n     * | --------- | -------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin                               |\n     * | `true`    | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin with the default configuration |\n     * | An object | Enable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin and modify the plugin options  |\n     *\n     * If you set the `autoColumnSize` option to an object, you can set the following [`AutoColumnSize`](@/api/autoColumnSize.md) plugin options:\n     *\n     * | Property                | Possible values                 | Description                                                                                                    |\n     * | ----------------------- | ------------------------------- | -------------------------------------------------------------------------------------------------------------- |\n     * | `syncLimit`             | A number \\| A percentage string | The number/percentage of columns to keep in sync<br>(default: `50`)                                            |\n     * | `useHeaders`            | `true` \\| `false`               | When calculating column widths:<br>`true`: use column headers<br>`false`: don't use column headers          |\n     * | `samplingRatio`         | A number                        | The number of samples of the same length to be used in column width calculations                               |\n     * | `allowSampleDuplicates` | `true` \\| `false`               | When calculating column widths:<br>`true`: Allow duplicate samples<br>`false`: Don't allow duplicate samples |\n     *\n     * By default, the `autoColumnSize` option is set to `undefined`,\n     * but the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin acts as enabled.\n     * To disable the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin completely,\n     * set the `autoColumnSize` option to `false`.\n     *\n     * Using the [`colWidths`](#colWidths) option forcibly disables the [`AutoColumnSize`](@/api/autoColumnSize.md) plugin.\n     *\n     * Read more:\n     * - [Plugins: `AutoColumnSize`](@/api/autoColumnSize.md)\n     *\n     * @memberof Options#\n     * @type {object|boolean}\n     * @default undefined\n     * @category AutoColumnSize\n     *\n     * @example\n     * ```js\n     * autoColumnSize: {\n     *   // keep 40% of columns in sync (the rest of columns: async)\n     *   syncLimit: '40%',\n     *   // when calculating column widths, use column headers\n     *   useHeaders: true,\n     *   // when calculating column widths, use 10 samples of the same length\n     *   samplingRatio: 10,\n     *   // when calculating column widths, allow duplicate samples\n     *   allowSampleDuplicates: true\n     * },\n     * ```\n     */\n    autoColumnSize: void 0,\n    /**\n     * The `autoRowSize` option configures the [`AutoRowSize`](@/api/autoRowSize.md) plugin.\n     *\n     * You can set the `autoRowSize` option to one of the following:\n     *\n     * | Setting   | Description                                                                            |\n     * | --------- | -------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`AutoRowSize`](@/api/autoRowSize.md) plugin                               |\n     * | `true`    | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin with the default configuration |\n     * | An object | Enable the [`AutoRowSize`](@/api/autoRowSize.md) plugin and modify the plugin options  |\n     *\n     * To give Handsontable's [scrollbar](https://handsontable.com/docs/8.0.0/demo-scrolling.html)\n     * a proper size, set the `autoRowSize` option to `true`.\n     *\n     * If you set the `autoRowSize` option to an object, you can set the following [`AutoRowSize`](@/api/autoRowSize.md) plugin options:\n     *\n     * | Property    | Possible values                 | Description                                                       |\n     * | ----------- | ------------------------------- | ----------------------------------------------------------------- |\n     * | `syncLimit` | A number \\| A percentage string | The number/percentage of rows to keep in sync<br>(default: `500`) |\n     *\n     * Using the [`rowHeights`](#rowHeights) option forcibly disables the [`AutoRowSize`](@/api/autoRowSize.md) plugin.\n     *\n     * Read more:\n     * - [Plugins: `AutoRowSize`](@/api/autoRowSize.md)\n     *\n     * @memberof Options#\n     * @type {object|boolean}\n     * @default undefined\n     * @category AutoRowSize\n     *\n     * @example\n     * ```js\n     * autoRowSize: {\n     *   // keep 40% of rows in sync (the rest of rows: async)\n     *   syncLimit: '40%'\n     * },\n     * ```\n     */\n    autoRowSize: void 0,\n    /**\n     * With [`autoWrapCol`](#autowrapcol) enabled:\n     * - When you select a bottom-most cell, pressing <kbd>**↓**</kbd> takes you to the top-most cell of the next column.\n     * - When you select a top-most cell, pressing <kbd>**↑**</kbd> takes you to the bottom-most cell of the previous column.\n     *\n     * You can set the [`autoWrapCol`](#autowrapcol) option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                                                                                                                                  |\n     * | ----------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`            | When you select a bottom-most cell, pressing <kbd>**↓**</kbd> takes you to the top-most cell of the next column.<br><br>When you select a top-most cell, pressing <kbd>**↑**</kbd> takes you to the bottom-most cell of the previous column. |\n     * | `false` (default) | When you select a bottom-most cell, pressing <kbd>**↓**</kbd> doesn't do anything.<br><br>When you select a top-most cell, pressing <kbd>**↑**</kbd> doesn't do anything.                                                                    |\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // when you select a bottom-most cell, pressing ⬇ doesn't do anything\n     * // when you select a top-most cell, pressing ⬆ doesn't do anything\n     * autoWrapCol: false, // default setting\n     *\n     * // when you select a bottom-most cell, pressing ⬇ takes you to the top-most cell of the next column\n     * // when you select a top-most cell, pressing ⬆ takes you to the bottom-most cell of the previous column\n     * autoWrapCol: true,\n     * ```\n     */\n    autoWrapCol: false,\n    /**\n     * With [`autoWrapRow`](#autoWrapRow) enabled:\n     * - When you select the first cell of a row, pressing <kbd>**←**</kbd>* takes you to the last cell of the row above.\n     * - When you select the last cell of a row, pressing <kbd>**→**</kbd>* takes you to the first cell of the row below.\n     *\n     * You can set the [`autoWrapRow`](#autoWrapRow) option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                                                                                                                              |\n     * | ----------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`            | When you select the first cell of a row, pressing <kbd>**←**</kbd>* takes you to the last cell of the row above.<br><br>When you select the last cell of a row, pressing <kbd>**→**</kbd>* takes you to the first cell of the row below. |\n     * | `false` (default) | When you select the first cell of a row, pressing <kbd>**←**</kbd>* doesn't do anything.<br><br>When you select the last cell of a row, pressing <kbd>**→**</kbd>* doesn't do anything.                                                  |\n     *\n     * \\* The exact key depends on your [`layoutDirection`](#layoutdirection) configuration.\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // when you select the first cell of a row, pressing ⬅ doesn't do anything\n     * // when you select the last cell of a row, pressing ➡️ doesn't do anything\n     * autoWrapRow: false, // default setting\n     *\n     * // when you select the first cell of a row, pressing ⬅ takes you to the last cell of the row above\n     * // when you select the last cell of a row, pressing ➡️ takes you to the first cell of the row below\n     * autoWrapRow: true,\n     * ```\n     */\n    autoWrapRow: false,\n    /**\n     * @description\n     * The `bindRowsWithHeaders` option configures the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin.\n     *\n     * You can set the `bindRowsWithHeaders` option to one of the following:\n     *\n     * | Setting | Description                                                                  |\n     * | ------- | ---------------------------------------------------------------------------- |\n     * | `false` | Disable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin |\n     * | `true`  | Enable the the [`BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md) plugin  |\n     *\n     * Read more:\n     * - [Plugins: `BindRowsWithHeaders`](@/api/bindRowsWithHeaders.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string}\n     * @default undefined\n     * @category BindRowsWithHeaders\n     *\n     * @example\n     * ```js\n     * // enable the `BindRowsWithHeaders` plugin\n     * bindRowsWithHeaders: true\n     * ```\n     */\n    bindRowsWithHeaders: void 0,\n    /**\n     * The `cell` option lets you apply [configuration options](@/guides/getting-started/configuration-options.md) to individual cells.\n     *\n     * The `cell` option overwrites the [top-level grid options](@/guides/getting-started/configuration-options.md#set-grid-options),\n     * and the [`columns`](#columns) options.\n     *\n     * Read more:\n     * - [Configuration options: Setting cell options](@/guides/getting-started/configuration-options.md#set-cell-options)\n     * - [`columns`](#columns)\n     *\n     * @memberof Options#\n     * @type {Array[]}\n     * @default []\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `cell` option to an array of objects\n     * cell: [\n     *   // make the cell with coordinates (0, 0) read-only\n     *   {\n     *     row: 0,\n     *     col: 0,\n     *     readOnly: true\n     *   }\n     * ],\n     * ```\n     */\n    cell: [],\n    /**\n     * @description\n     * The `cells` option lets you apply any other [configuration options](@/guides/getting-started/configuration-options.md) to\n     * individual grid elements (columns, rows, cells), based on any logic you implement.\n     *\n     * The `cells` option overwrites all other options (including options set by [`columns`](#columns) and [`cell`](#cell)).\n     * It takes the following parameters:\n     *\n     * | Parameter | Required | Type             | Description                                                                                                                                                                                                                                                                                                                             |\n     * | --------- | -------- | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `row`     | Yes      | Number           | A physical row index                                                                                                                                                                                                                                                                                                                    |\n     * | `column`  | Yes      | Number           | A physical column index                                                                                                                                                                                                                                                                                                                 |\n     * | `prop`    | No       | String \\| Number | If [`data`](#data) is set to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), `prop` is the same number as `column`.<br><br>If [`data`](#data) is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), `prop` is a property name for the column's data object. |\n     *\n     * Read more:\n     * - [Configuration options: Implementing custom logic](@/guides/getting-started/configuration-options.md#implement-custom-logic)\n     * - [Configuration options: Setting row options](@/guides/getting-started/configuration-options.md#set-row-options)\n     * - [`columns`](#columns)\n     * - [`cell`](#cell)\n     *\n     * @memberof Options#\n     * @type {Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `cells` option to your custom function\n     * cells(row, column, prop) {\n     *   const cellProperties = { readOnly: false };\n     *   const visualRowIndex = this.instance.toVisualRow(row);\n     *   const visualColIndex = this.instance.toVisualColumn(column);\n     *\n     *   if (visualRowIndex === 0 && visualColIndex === 0) {\n     *     cellProperties.readOnly = true;\n     *   }\n     *\n     *   return cellProperties;\n     * },\n     * ```\n     */\n    cells: void 0,\n    /**\n     * The `checkedTemplate` option lets you configure what value\n     * a checked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.\n     *\n     * You can set the `checkedTemplate` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                                                                              |\n     * | ---------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `true`                  |\n     * | A string         | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is checked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |\n     *\n     * Read more:\n     * - [Checkbox cell type: Checkbox template](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)\n     * - [`getDataAtCell()`](@/api/core.md#getDataAtCell)\n     * - [`uncheckedTemplate`](#uncheckedTemplate)\n     *\n     * @memberof Options#\n     * @type {boolean|string|number}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of each cell in this column to `checkbox`\n     *     // when checked, the cell's value is `true`\n     *     // when unchecked, the cell's value is `false`\n     *     type: 'checkbox',\n     *   },\n     *   {\n     *     // set the `type` of each cell in this column to `checkbox`\n     *     type: 'checkbox',\n     *     // when checked, the cell's value is `'Yes'`\n     *     checkedTemplate: 'Yes',\n     *     // when unchecked, the cell's value is `'No'`\n     *     uncheckedTemplate: 'No'\n     *  }\n     * ],\n     * ```\n     */\n    checkedTemplate: void 0,\n    /**\n     * The `className` option lets you add CSS class names to every currently-selected element.\n     *\n     * You can set the `className` option to one of the following:\n     *\n     * | Setting             | Description                                                      |\n     * | ------------------- | ---------------------------------------------------------------- |\n     * | A string            | Add a single CSS class name to every currently-selected element  |\n     * | An array of strings | Add multiple CSS class names to every currently-selected element |\n     *\n     * ::: tip\n     * Don't change the `className` metadata of the [column summary](@/guides/columns/column-summary.md) row.\n     * To style the summary row, use the class name assigned automatically by the [`ColumnSummary`](@/api/columnSummary.md) plugin: `columnSummaryResult`.\n     * :::\n     *\n     * To apply different CSS class names on different levels, use Handsontable's [cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration).\n     *\n     * Read more:\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`TableClassName`](#TableClassName)\n     *\n     * @memberof Options#\n     * @type {string|string[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to every currently-selected element\n     * className: 'your-class-name',\n     *\n     * // add `first-class-name` and `second-class-name` CSS class names\n     * // to every currently-selected element\n     * className: ['first-class-name', 'second-class-name'],\n     * ```\n     */\n    className: void 0,\n    /**\n     * The `colHeaders` option configures your grid's column headers.\n     *\n     * You can set the `colHeaders` option to one of the following:\n     *\n     * | Setting  | Description                                                          |\n     * | -------- | -------------------------------------------------------------------- |\n     * | `true`   | Enable the default column headers ('A', 'B', 'C', ...)               |\n     * | `false`  | Disable column headers                                               |\n     * | An array | Define your own column headers (e.g. `['One', 'Two', 'Three', ...]`) |\n     * | A function | Define your own column headers, using a function                     |\n     *\n     * Read more:\n     * - [Column header](@/guides/columns/column-header.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string[]|Function}\n     * @default null\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable the default column headers\n     * colHeaders: true,\n     *\n     * // set your own column headers\n     * colHeaders: ['One', 'Two', 'Three'],\n     *\n     * // set your own column headers, using a function\n     * colHeaders: function(visualColumnIndex) {\n     *   return `${visualColumnIndex} + : AB`;\n     * },\n     * ```\n     */\n    colHeaders: null,\n    /**\n     * @description\n     * The `collapsibleColumns` option configures the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin.\n     *\n     * You can set the `collapsibleColumns` option to one of the following:\n     *\n     * | Setting              | Description                                                                                       |\n     * | -------------------- | ------------------------------------------------------------------------------------------------- |\n     * | `false`              | Disable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                            |\n     * | `true`               | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin                             |\n     * | An array of objects  | Enable the [`CollapsibleColumns`](@/api/collapsibleColumns.md) plugin for selected column headers |\n     *\n     * Read more:\n     * - [Plugins: `CollapsibleColumns`](@/api/collapsibleColumns.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default undefined\n     * @category CollapsibleColumns\n     *\n     * @example\n     * ```js\n     * // enable column collapsing for all headers\n     * collapsibleColumns: true,\n     *\n     * // enable column collapsing for selected headers\n     * collapsibleColumns: [\n     *   {row: -4, col: 1, collapsible: true},\n     *   {row: -3, col: 5, collapsible: true}\n     * ],\n     * ```\n     */\n    collapsibleColumns: void 0,\n    /**\n     * @description\n     * The `columnHeaderHeight` option configures the height of column headers.\n     *\n     * You can set the `columnHeaderHeight` option to one of the following:\n     *\n     * | Setting  | Description                                         |\n     * | -------- | --------------------------------------------------- |\n     * | A number | Set the same height for every column header         |\n     * | An array | Set different heights for individual column headers |\n     *\n     * @memberof Options#\n     * @type {number|number[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the same height for every column header\n     * columnHeaderHeight: 25,\n     *\n     * // set different heights for individual column headers\n     * columnHeaderHeight: [25, 30, 55],\n     * ```\n     */\n    columnHeaderHeight: void 0,\n    /**\n     * @description\n     * The `columns` option lets you apply any other [configuration options](@/guides/getting-started/configuration-options.md) to individual columns (or ranges of columns).\n     *\n     * You can set the `columns` option to one of the following:\n     * - An array of objects (each object represents one column)\n     * - A function that returns an array of objects\n     *\n     * The `columns` option overwrites the [top-level grid options](@/guides/getting-started/configuration-options.md#set-grid-options).\n     *\n     * When you use `columns`, the [`startCols`](#startCols), [`minCols`](#minCols), and [`maxCols`](#maxCols) options are ignored.\n     *\n     * Read more:\n     * - [Configuration options: Setting column options](@/guides/getting-started/configuration-options.md#set-column-options)\n     * - [`startCols`](#startCols)\n     * - [`minCols`](#minCols)\n     * - [`maxCols`](#maxCols)\n     * - [`data`](#data)\n     *\n     * @memberof Options#\n     * @type {object[]|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `columns` option to an array of objects\n     * // each object represents one column\n     * columns: [\n     *   {\n     *     // column options for the first (by physical index) column\n     *     type: 'numeric',\n     *     numericFormat: {\n     *       pattern: '0,0.00 $'\n     *     }\n     *   },\n     *   {\n     *     // column options for the second (by physical index) column\n     *     type: 'text',\n     *     readOnly: true\n     *   }\n     * ],\n     *\n     * // or set the `columns` option to a function, based on physical indexes\n     * columns(index) {\n     *   return {\n     *     type: index > 0 ? 'numeric' : 'text',\n     *     readOnly: index < 1\n     *   }\n     * }\n     * ```\n     */\n    columns: void 0,\n    /**\n     * @description\n     * The `columnSorting` option configures the [`ColumnSorting`](@/api/columnSorting.md) plugin.\n     *\n     * You can set the `columnSorting` option to one of the following:\n     *\n     * | Setting    | Description                                                                                                                            |\n     * | ---------- | -------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`     | Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin with the default configuration                                             |\n     * | `false`    | Disable the [`ColumnSorting`](@/api/columnSorting.md) plugin                                                                           |\n     * | An object  | - Enable the [`ColumnSorting`](@/api/columnSorting.md) plugin<br>- Modify the [`ColumnSorting`](@/api/columnSorting.md) plugin options |\n     *\n     * If you set the `columnSorting` option to an object,\n     * you can set the following [`ColumnSorting`](@/api/columnSorting.md) plugin options:\n     *\n     * | Option                   | Possible settings                                                                                                                                |\n     * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `indicator`              | `true`: Display the arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header  |\n     * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |\n     * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |\n     * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/rows-sorting.md#add-a-custom-comparator)                                                                |\n     *\n     * If you set the `columnSorting` option to an object,\n     * you can also sort individual columns at Handsontable's initialization.\n     * In the `columnSorting` object, add an object named `initialConfig`,\n     * with the following properties:\n     *\n     * | Option      | Possible settings   | Description                                                      |\n     * | ----------- | ------------------- | ---------------------------------------------------------------- |\n     * | `column`    | A number            | The index of the column that you want to sort at initialization  |\n     * | `sortOrder` | `'asc'` \\| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |\n     *\n     * Read more:\n     * - [Rows sorting](@/guides/rows/rows-sorting.md)\n     * - [Rows sorting: Custom compare functions](@/guides/rows/rows-sorting.md#add-a-custom-comparator)\n     * - [`multiColumnSorting`](#multiColumnSorting)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category ColumnSorting\n     *\n     * @example\n     * ```js\n     * // enable the `ColumnSorting` plugin\n     * columnSorting: true\n     *\n     * // enable the `ColumnSorting` plugin with custom configuration\n     * columnSorting: {\n     *   // sort empty cells as well\n     *   sortEmptyCells: true,\n     *   // display the arrow icon in the column header\n     *   indicator: true,\n     *   // disable clicking on the column header to sort the column\n     *   headerAction: false,\n     *   // add a custom compare function\n     *   compareFunctionFactory(sortOrder, columnMeta) {\n     *     return function(value, nextValue) {\n     *       // some value comparisons which will return -1, 0 or 1...\n     *     }\n     *   }\n     * }\n     *\n     * // enable the `ColumnSorting` plugin\n     * columnSorting: {\n     *   // at initialization, sort column 1 in ascending order\n     *   initialConfig: {\n     *     column: 1,\n     *     sortOrder: 'asc'\n     *   },\n     *   // at initialization, sort column 2 in descending order\n     *   initialConfig: {\n     *     column: 2,\n     *     sortOrder: 'desc'\n     *   }\n     * }\n     * ```\n     */\n    columnSorting: void 0,\n    /**\n     * @description\n     * The `columnSummary` option configures the [`ColumnSummary`](@/api/columnSummary.md) plugin.\n     *\n     * You can set the `columnSummary` option to an array of objects.\n     * Each object configures a single column summary, using the following properties:\n     *\n     * | Property                 | Possible values                                                         | Description                                                                                                                  |\n     * | ------------------------ | ----------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------- |\n     * | `sourceColumn`           | A number                                                                | [Column to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)                     |\n     * | `ranges`                 | An array                                                                | [Ranges of rows to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize)             |\n     * | `type`                   | `'sum'` \\| `'min'` \\| `'max'` \\| `'count'` \\| `'average'` \\| `'custom'` | [Summary function](@/guides/columns/column-summary.md#step-3-calculate-your-summary)                                         |\n     * | `destinationRow`         | A number                                                                | [Destination cell's row coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates)    |\n     * | `destinationColumn`      | A number                                                                | [Destination cell's column coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |\n     * | `forceNumeric`           | `true`  \\| `false`                                                      | [Treat non-numerics as numerics](@/guides/columns/column-summary.md#force-numeric-values)                                  |\n     * | `reversedRowCoords`      | `true`  \\| `false`                                                      | [Reverse row coordinates](@/guides/columns/column-summary.md#step-5-make-room-for-the-destination-cell)                      |\n     * | `suppressDataTypeErrors` | `true`  \\| `false`                                                      | [Suppress data type errors](@/guides/columns/column-summary.md#throw-data-type-errors)                                    |\n     * | `readOnly`               | `true`  \\| `false`                                                      | Make summary cell read-only                                                                                                  |\n     * | `roundFloat`             | `true`  \\| `false`                                                      | [Round summary result](@/guides/columns/column-summary.md#round-a-column-summary-result)                                  |\n     * | `customFunction`         | A function                                                              | [Custom summary function](@/guides/columns/column-summary.md#implement-a-custom-summary-function)                         |\n     *\n     * Read more:\n     * - [Column summary](@/guides/columns/column-summary.md)\n     * - [Plugins: `ColumnSummary`](@/api/columnSummary.md)\n     *\n     * @memberof Options#\n     * @type {object[]|Function}\n     * @default undefined\n     * @category ColumnSummary\n     *\n     * @example\n     * ```js\n     * columnSummary: [\n     *   {\n     *     sourceColumn: 0,\n     *     ranges: [\n     *       [0, 2], [4], [6, 8]\n     *     ],\n     *     type: 'custom',\n     *     destinationRow: 4,\n     *     destinationColumn: 1,\n     *     forceNumeric: true,\n     *     reversedRowCoords: true,\n     *     suppressDataTypeErrors: false,\n     *     readOnly: true,\n     *     roundFloat: false,\n     *     customFunction(endpoint) {\n     *        return 100;\n     *     }\n     *   }\n     * ],\n     * ```\n     */\n    columnSummary: void 0,\n    /**\n     * The `colWidths` option sets columns' widths, in pixels.\n     *\n     * The default column width is 50px. To change it, set the `colWidths` option to one of the following:\n     *\n     * | Setting     | Description                                                                                          | Example                                                           |\n     * | ----------- | ---------------------------------------------------------------------------------------------------- | ----------------------------------------------------------------- |\n     * | A number    | Set the same width for every column                                                                  | `colWidths: 100`                                                  |\n     * | A string    | Set the same width for every column                                                                  | `colWidths: '100px'`                                              |\n     * | An array    | Set widths separately for each column                                                                | `colWidths: [100, 120, undefined]`                                |\n     * | A function  | Set column widths dynamically,<br>on each render                                                     | `colWidths(visualColumnIndex) { return visualColumnIndex * 10; }` |\n     * | `undefined` | Used by the [modifyColWidth](@/api/hooks.md#modifyColWidth) hook,<br>to detect column width changes. | `colWidths: undefined`                                            |\n     *\n     * Setting `colWidths` even for a single column disables the {@link AutoColumnSize} plugin\n     * for all columns. For this reason, if you use `colWidths`, we recommend you set a width for each one\n     * of your columns. Otherwise, every column with an undefined width defaults back to 50px,\n     * which may cut longer columns names.\n     *\n     * Read more:\n     * - [Column width](@/guides/columns/column-width.md)\n     * - [Hooks: `modifyColWidth`](@/api/hooks.md#modifyColWidth)\n     * - [`autoColumnSize`](#autoColumnSize)\n     *\n     * @memberof Options#\n     * @type {number|number[]|string|string[]|Array<undefined>|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set every column's width to 100px\n     * colWidths: 100,\n     *\n     * // set every column's width to 100px\n     * colWidths: '100px',\n     *\n     * // set the first (by visual index) column's width to 100\n     * // set the second (by visual index) column's width to 120\n     * // set the third (by visual index) column's width to `undefined`, so that it defaults to 50px\n     * // set any other column's width to the default 50px (note that longer cell values and column names can get cut)\n     * colWidths: [100, 120, undefined],\n     *\n     * // set each column's width individually, using a function\n     * colWidths(visualColumnIndex) {\n     *   return visualColumnIndex * 10;\n     * },\n     * ```\n     */\n    colWidths: void 0,\n    /**\n     * The `commentedCellClassName` option lets you add a CSS class name to cells\n     * that have comments.\n     *\n     * Read more:\n     * - [Comments](@/guides/cell-features/comments.md)\n     * - [`comments`](#comments)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htCommentCell'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `has-comment` CSS class name\n     * // to each cell that has a comment\n     * commentedCellClassName: 'has-comment',\n     * ```\n     */\n    commentedCellClassName: 'htCommentCell',\n    /**\n     * @description\n     * The `comments` option configures the [`Comments`](@/api/comments.md) plugin.\n     *\n     * You can set the `comments` option to one of the following:\n     *\n     * | Setting   | Description                                                                                                                                                                           |\n     * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`    | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)                                 |\n     * | `false`   | Disable the [`Comments`](@/api/comments.md) plugin                                                                                                                                    |\n     * | An object | - Enable the [`Comments`](@/api/comments.md) plugin<br>- Add comment menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)<br>- Configure comment settings |\n     *\n     * If you set the `comments` option to an object, you can configure the following comment options:\n     *\n     * | Option         | Possible settings           | Description                                         |\n     * | -------------- | --------------------------- | --------------------------------------------------- |\n     * | `displayDelay` | A number (default: `250`)   | Display comments after a delay (in milliseconds)    |\n     * | `readOnly`     | `true` \\| `false` (default) | `true`: Make comments read-only                     |\n     * | `style`        | An object                   | Set comment boxes' `width` and `height` (in pixels) |\n     *\n     * Read more:\n     * - [Comments](@/guides/cell-features/comments.md)\n     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)\n     * - [`width`](#width)\n     * - [`height`](#height)\n     * - [`readOnly`](#readOnly)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default false\n     * @category Comments\n     *\n     * @example\n     * ```js\n     * // enable the `Comments` plugin\n     * comments: true,\n     *\n     * // enable the `Comments` plugin\n     * // and configure its settings\n     * comments: {\n     *   // display all comments with a 1-second delay\n     *   displayDelay: 1000,\n     *   // make all comments read-only\n     *   readOnly: true,\n     *   // set the default size of all comment boxes\n     *   style: {\n     *     width: 300,\n     *     height: 100\n     *   }\n     * }\n     * ```\n     */\n    comments: false,\n    /**\n     * @description\n     * The `contextMenu` option configures the [`ContextMenu`](@/api/contextMenu.md) plugin.\n     *\n     * You can set the `contextMenu` option to one of the following:\n     *\n     * | Setting   | Description                                                                                                                                                                                             |\n     * | --------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`ContextMenu`](@/api/contextMenu.md) plugin                                                                                                                                                |\n     * | `true`    | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)                 |\n     * | An array  | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)              |\n     * | An object | - Enable the [`ContextMenu`](@/api/contextMenu.md) plugin<br>- Apply a [custom context menu configuration](@/guides/accessories-and-menus/context-menu.md#context-menu-with-a-fully-custom-configuration) |\n     *\n     * Read more:\n     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)\n     * - [Context menu: Context menu with default options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)\n     * - [Context menu: Context menu with specific options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)\n     * - [Context menu: Context menu with fully custom configuration options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-a-fully-custom-configuration)\n     * - [Plugins: `ContextMenu`](@/api/contextMenu.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string[]|object}\n     * @default undefined\n     * @category ContextMenu\n     *\n     * @example\n     * ```js\n     * // enable the `ContextMenu` plugin\n     * // use the default context menu options\n     * contextMenu: true,\n     *\n     * // enable the `ContextMenu` plugin\n     * // and modify individual context menu options\n     * contextMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],\n     *\n     * // enable the `ContextMenu` plugin\n     * // and apply a custom context menu configuration\n     * contextMenu: {\n     *   items: {\n     *     'option1': {\n     *       name: 'Option 1'\n     *     },\n     *     'option2': {\n     *       name: 'Option 2',\n     *       submenu: {\n     *         items: [\n     *           {\n     *             key: 'option2:suboption1',\n     *             name: 'Suboption 1',\n     *             callback: function(key, options) {\n     *               ...\n     *             }\n     *           },\n     *           ...\n     *         ]\n     *       }\n     *     }\n     *   }\n     * },\n     * ```\n     */\n    contextMenu: void 0,\n    /**\n     * @description\n     * The `copyable` option determines whether a cell's value can be copied to the clipboard or not.\n     *\n     * You can set the `copyable` option to one of the following:\n     *\n     * | Setting                                                                                                        | Description                                                                                                            |\n     * | -------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default)                                                                                               | - On pressing <kbd>**Ctrl**</kbd>/<kbd>**Cmd**</kbd> + <kbd>**C**</kbd>, add the cell's value to the clipboard         |\n     * | `false`<br>(default for the [`password`](@/guides/cell-types/password-cell-type.md) [cell type](#type))        | - On pressing <kbd>**Ctrl**</kbd>/<kbd>**Cmd**</kbd> + <kbd>**C**</kbd>, add an empty string (`\"\"`) to the clipboard   |\n     *\n     * Read more:\n     * - [Clipboard](@/guides/cell-features/clipboard.md)\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     * - [Password cell type](@/guides/cell-types/password-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable copying for each cell of the entire grid\n     * copyable: true,\n     *\n     * // enable copying for individual columns\n     * columns: [\n     *   {\n     *     // enable copying for each cell of this column\n     *     copyable: true\n     *   },\n     *   {\n     *     // disable copying for each cell of this column\n     *     copyable: false\n     *   }\n     * ]\n     *\n     * // enable copying for specific cells\n     * cells: [\n     *   {\n     *     cell: 0,\n     *     row: 0,\n     *     // disable copying for cell (0, 0)\n     *     copyable: false,\n     *   }\n     * ],\n     * ```\n     */\n    copyable: true,\n    /**\n     * The `copyPaste` option configures the [`CopyPaste`](@/api/copyPaste.md) plugin.\n     *\n     * You can set the `copyPaste` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                            |\n     * | ----------------- | ---------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default)  | Enable the [`CopyPaste`](@/api/copyPaste.md) plugin with the default configuration                                     |\n     * | `false`           | Disable the [`CopyPaste`](@/api/copyPaste.md) plugin                                                                   |\n     * | An object         | - Enable the [`CopyPaste`](@/api/copyPaste.md) plugin<br>- Modify the [`CopyPaste`](@/api/copyPaste.md) plugin options |\n     *\n     * ##### copyPaste: Additional options\n     *\n     * If you set the `copyPaste` option to an object, you can set the following `CopyPaste` plugin options:\n     *\n     * | Option                   | Possible settings                                  | Description                                                                                                                                                                                         |\n     * | ------------------------ | -------------------------------------------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `columnsLimit`           | A number (default: `Infinity`)                     | The maximum number of columns that can be copied                                                                                                                                                    |\n     * | `rowsLimit`              | A number (default: `Infinity`)                     | The maximum number of columns that can be copied                                                                                                                                                    |\n     * | `pasteMode`              | `'overwrite'` \\| `'shift_down'` \\| `'shift_right'` | When pasting:<br>`'overwrite'`: overwrite the currently-selected cells<br>`'shift_down'`: move the currently-selected cells down<br>`'shift_right'`: move the currently-selected cells to the right |\n     * | `copyColumnHeaders`      | Boolean (default: `false`)                         | `true`: add a context menu option for copying cells along with their nearest column headers                                                                                                         |\n     * | `copyColumnGroupHeaders` | Boolean (default: `false`)                         | `true`: add a context menu option for copying cells along with all their related columns headers                                                                                                    |\n     * | `copyColumnHeadersOnly`  | Boolean (default: `false`)                         | `true`: add a context menu option for copying column headers nearest to the selected cells (without copying cells)                                                                    |\n     * | `uiContainer`            | An HTML element                                    | The UI container for the secondary focusable element                                                                                                                                                |\n     *\n     * Read more:\n     * - [Plugins: `CopyPaste`](@/api/copyPaste.md)\n     * - [Guides: Clipboard](@/guides/cell-features/clipboard.md)\n     *\n     * @memberof Options#\n     * @type {object|boolean}\n     * @default true\n     * @category CopyPaste\n     *\n     * @example\n     * ```js\n     * // enable the plugin with the default configuration\n     * copyPaste: true // set by default\n     *\n     * // disable the plugin\n     * copyPaste: false,\n     *\n     * // enable the plugin with a custom configuration\n     * copyPaste: {\n     *   // set a maximum number of columns that can be copied\n     *   columnsLimit: 25,\n     *\n     *   // set a maximum number of rows that can be copied\n     *   rowsLimit: 50,\n     *\n     *   // set the paste behavior\n     *   pasteMode: 'shift_down',\n     *\n     *   // add the option to copy cells along with their nearest column headers\n     *   copyColumnHeaders: true,\n     *\n     *   // add the option to copy cells along with all their related columns headers\n     *   copyColumnGroupHeaders: true,\n     *\n     *   // add the option to copy just column headers (without copying cells)\n     *   copyColumnHeadersOnly: true,\n     *\n     *   // set a UI container\n     *   uiContainer: document.body,\n     * },\n     * ```\n     */\n    copyPaste: true,\n    /**\n     * The `correctFormat` option configures whether incorrectly-formatted times and dates are amended or not.\n     *\n     * When the user enters dates and times, Handsontable can automatically adjust their format\n     * to match the [`dateFormat`](#dateFormat) and [`timeFormat`](@/guides/cell-types/time-cell-type.md) settings.\n     *\n     * You can set the `correctFormat` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                                               |\n     * | ----------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Don't correct the format of the entered date or time (treat the entered date or time as invalid)                                                          |\n     * | `true`            | Correct the format of the entered date or time to match the [`dateFormat`](#dateFormat) or [`timeFormat`](@/guides/cell-types/time-cell-type.md) settings |\n     *\n     * Read more:\n     * - [Date cell type](@/guides/cell-types/date-cell-type.md)\n     * - [Time cell type](@/guides/cell-types/time-cell-type.md)\n     * - [`dateFormat`](#dateFormat)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of each cell in this column to `date`\n     *   type: 'date',\n     *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`\n     *   dateFormat: 'YYYY-MM-DD',\n     *   // enforce the `YYYY-MM-DD` date format\n     *   correctFormat: true\n     *   },\n     *\n     *   {\n     *   // set the `type` of each cell in this column to `time`\n     *   type: 'time',\n     *   // for every `time` cell of this column, set the time format to `h:mm:ss a`\n     *   timeFormat: 'h:mm:ss a',\n     *   // enforce the `h:mm:ss a` time format\n     *   correctFormat: true\n     *   },\n     * ],\n     * ```\n     */\n    correctFormat: false,\n    /**\n     * The `currentColClassName` option lets you add a CSS class name\n     * to each cell of the currently-visible, currently-selected columns.\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to each cell of the currently-visible, currently-selected columns\n     * currentColClassName: 'your-class-name',\n     * ```\n     */\n    currentColClassName: void 0,\n    /**\n     * The `currentHeaderClassName` option lets you add a CSS class name\n     * to every currently-visible, currently-selected header.\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'ht__highlight'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add an `ht__highlight` CSS class name\n     * // to every currently-visible, currently-selected header\n     * currentHeaderClassName: 'ht__highlight',\n     * ```\n     */\n    currentHeaderClassName: 'ht__highlight',\n    /**\n     * The `currentRowClassName` option lets you add a CSS class name\n     * to each cell of the currently-visible, currently-selected rows.\n     *\n     * Read more:\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to each cell of the currently-visible, currently-selected rows\n     * currentRowClassName: 'your-class-name',\n     * ```\n     */\n    currentRowClassName: void 0,\n    /**\n     * @description\n     * The `customBorders` option configures the [`CustomBorders`](@/api/customBorders.md) plugin.\n     *\n     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin\n     * (and add its menu items to the [context menu](@/guides/accessories-and-menus/context-menu.md)),\n     * set the `customBorders` option to `true`.\n     *\n     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin\n     * and add a predefined border around a particular cell,\n     * set the `customBorders` option to an array of objects.\n     * Each object represents a border configuration for one cell, and has the following properties:\n     *\n     * | Property | Sub-properties     | Types                              | Description                                                       |\n     * | -------- | ------------------ | ---------------------------------- | ----------------------------------------------------------------- |\n     * | `row`    | -                  | `row`: Number                      | The cell's row coordinate.                                        |\n     * | `col`    | -                  | `col`: Number                      | The cell's column coordinate.                                     |\n     * | `start`  | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `start` sets the width (`width`) and color (`color`) of the left-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `start` sets the width (`width`) and color (`color`) of the right-hand border. |\n     * | `end`    | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `end` sets the width (`width`) and color (`color`) of the right-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `end` sets the width (`width`) and color (`color`) of the left-hand border. |\n     * | `top`    | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the width (`width`) and color (`color`) of the top border. |\n     * | `bottom` | `width`<br>`color` | `width`: Number<br>`color`: String | Sets the width (`width`) and color (`color`) of the bottom border. |\n     *\n     * To enable the [`CustomBorders`](@/api/customBorders.md) plugin\n     * and add a predefined border around a range of cells,\n     * set the `customBorders` option to an array of objects.\n     * Each object represents a border configuration for a single range of cells, and has the following properties:\n     *\n     * | Property | Sub-properties                               | Types                                                            | Description                                                                                  |\n     * | -------- | -------------------------------------------- | ---------------------------------------------------------------- | -------------------------------------------------------------------------------------------- |\n     * | `range`  | `from` {`row`, `col`}<br>`to` {`row`, `col`} | `from`: Object<br>`to`: Object<br>`row`: Number<br>`col`: Number | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default):<br>- `from` selects the range's top-left corner.<br>- `to` selects the range's bottom-right corner.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: <br>- `from` selects the range's top-right corner.<br>- `to` selects the range's bottom-left corner. |\n     * | `start`  | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `start` sets the width (`width`) and color (`color`) of the left-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `start` sets the width (`width`) and color (`color`) of the right-hand border. |\n     * | `end`    | `width`<br>`color` | `width`: Number<br>`color`: String | If the [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default): `end` sets the width (`width`) and color (`color`) of the right-hand border.<br><br>If the [layout direction](@/guides/internationalization/layout-direction.md) is RTL: `end` sets the width (`width`) and color (`color`) of the left-hand border. |\n     * | `top`    | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the width (`width`) and color (`color`) of the top border. |\n     * | `bottom` | `width`<br>`color`                           | `width`: Number<br>`color`: String                               | Sets the width (`width`) and color (`color`) of the bottom border. |\n     *\n     * Read more:\n     * - [Formatting cells: Custom cell borders](@/guides/cell-features/formatting-cells.md#custom-cell-borders)\n     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)\n     * - [Plugins: `CustomBorders`](@/api/customBorders.md)\n     * - [Layout direction](@/guides/internationalization/layout-direction.md)\n     * - [`layoutDirection`](#layoutDirection)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default false\n     * @category CustomBorders\n     *\n     * @example\n     * ```js\n     * // enable the `CustomBorders` plugin\n     * customBorders: true,\n     *\n     * // enable the `CustomBorders` plugin\n     * // and add a predefined border for a particular cell\n     * customBorders: [\n     *   // add an object with a border configuration for one cell\n     *   {\n     *     // set the cell's row coordinate\n     *     row: 2,\n     *     // set the cell's column coordinate\n     *     col: 2,\n     *     // set the left/right border's width and color\n     *     start: {\n     *       width: 2,\n     *       color: 'red'\n     *     },\n     *     // set the right/left border's width and color\n     *     end: {\n     *       width: 1,\n     *       color: 'green'\n     *     },\n     *     // set the top border's width and color\n     *     top: '',\n     *     // set the bottom border's width and color\n     *     bottom: ''\n     *   }\n     * ],\n     *\n     * // enable the `CustomBorders` plugin\n     * // and add a predefined border for a range of cells\n     * customBorders: [\n     *   // add an object with a border configuration for one range of cells\n     *   {\n     *     // select a range of cells\n     *     range: {\n     *       // set the range's top-left corner\n     *       from: {\n     *         row: 1,\n     *         col: 1\n     *       },\n     *       // set the range's bottom-right corner\n     *       to: {\n     *         row: 3,\n     *         col: 4\n     *       }\n     *     },\n     *     // set the left/right border's width and color\n     *     start: {\n     *       width: 2,\n     *       color: 'red'\n     *     },\n     *     // set the right/left border's width and color\n     *     end: {},\n     *     // set the top border's width and color\n     *     top: {},\n     *     // set the bottom border's width and color\n     *     bottom: {}\n     *   }\n     * ],\n     * ```\n     */\n    customBorders: false,\n    /**\n     * @description\n     * The `data` option sets the initial [data](@/guides/getting-started/binding-to-data.md) of your Handsontable instance.\n     *\n     * Handsontable's data is bound to your source data by reference (i.e. when you edit Handsontable's data, your source data alters as well).\n     *\n     * You can set the `data` option:\n     * - Either to an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n     * - Or to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects).\n     *\n     * If you don't set the `data` option (or set it to `null`), Handsontable renders as an empty 5x5 grid by default.\n     *\n     * Read more:\n     * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n     * - [`dataSchema`](#dataSchema)\n     * - [`startRows`](#startRows)\n     * - [`startCols`](#startCols)\n     *\n     * @memberof Options#\n     * @type {Array[]|object[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // as an array of arrays\n     * data: [\n     *   ['A', 'B', 'C'],\n     *   ['D', 'E', 'F'],\n     *   ['G', 'H', 'J']\n     * ]\n     *\n     * // as an array of objects\n     * data: [\n     *   {id: 1, name: 'Ted Right'},\n     *   {id: 2, name: 'Frank Honest'},\n     *   {id: 3, name: 'Joan Well'},\n     *   {id: 4, name: 'Gail Polite'},\n     *   {id: 5, name: 'Michael Fair'},\n     * ]\n     * ```\n     */\n    data: void 0,\n    /**\n     * @description\n     * When the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects)\n     * (or is empty), the `dataSchema` option defines the structure of new rows.\n     *\n     * Using the `dataSchema` option, you can start out with an empty grid.\n     *\n     * You can set the `dataSchema` option to one of the following:\n     * - An object\n     * - A function\n     *\n     * Read more:\n     * - [Binding to data: Array of objects with custom data schema](@/guides/getting-started/binding-to-data.md#array-of-objects-with-custom-data-schema)\n     * - [Binding to data: Function data source and schema](@/guides/getting-started/binding-to-data.md#function-data-source-and-schema)\n     * - [`data`](#data)\n     *\n     * @memberof Options#\n     * @type {object|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // with `dataSchema`, you can start with an empty grid\n     * data: null,\n     * dataSchema: {id: null, name: {first: null, last: null}, address: null},\n     * colHeaders: ['ID', 'First Name', 'Last Name', 'Address'],\n     * columns: [\n     *   {data: 'id'},\n     *   {data: 'name.first'},\n     *   {data: 'name.last'},\n     *   {data: 'address'}\n     * ],\n     * startRows: 5,\n     * minSpareRows: 1\n     * ```\n     */\n    dataSchema: void 0,\n    /**\n     * The `dateFormat` option configures the date format accepted by [`date`](@/guides/cell-types/date-cell-type.md) cells.\n     *\n     * You can set the `dateFormat` option to a string with a proper date format. The default value is: `'DD/MM/YYYY'`.\n     *\n     * To automatically correct dates whose format doesn't match the `dateFormat` setting, use the [`correctFormat`](#correctFormat) option.\n     *\n     * Read more:\n     * - [Date cell type](@/guides/cell-types/date-cell-type.md)\n     * - [`correctFormat`](#correctFormat)\n     * - [`defaultDate`](#defaultDate)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'DD/MM/YYYY'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of each cell in this column to `date`\n     *   type: 'date',\n     *   // for every `date` cell of this column, set the date format to `YYYY-MM-DD`\n     *   dateFormat: 'YYYY-MM-DD',\n     *   },\n     * ],\n     * ```\n     */\n    dateFormat: 'DD/MM/YYYY',\n    /**\n     * The `datePickerConfig` option configures the `date` [cell editor](@/guides/cell-functions/cell-editor.md)'s date picker, which uses an external dependency: [Pikaday](https://github.com/Pikaday/Pikaday/tree/1.8.2).\n     *\n     * You can set the `datePickerConfig` option to an object with any of the available [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration),\n     * except for the following, which are always overwritten by the `date` [cell editor](@/guides/cell-functions/cell-editor.md):\n     * - `bound`\n     * - `container`\n     * - `field`\n     * - `trigger`\n     *\n     * If the `datePickerConfig` option is not defined, the `date` [cell editor](@/guides/cell-functions/cell-editor.md) overwrites the following [Pikaday options](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration) as well:\n     *\n     * | Pikaday option       | Handsontable's setting |\n     * | -------------------- | ---------------------- |\n     * | `format`             | `'DD/MM/YYYY'`         |\n     * | `reposition`         | `false`                |\n     *\n     * Read more:\n     * - [`editor`](#editor)\n     * - [`dateFormat`](#dateFormat)\n     * - [Cell editor](@/guides/cell-functions/cell-editor.md)\n     * - [All Pikaday options &#8594;](https://github.com/Pikaday/Pikaday/tree/1.8.2#configuration)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Core\n     */\n    datePickerConfig: void 0,\n    /**\n     * The `defaultDate` option configures the date displayed\n     * in empty [`date`](@/guides/cell-types/date-cell-type.md) cells.\n     *\n     * You can set the `defaultDate` option to a string.\n     *\n     * Read more:\n     * - [Date cell type](@/guides/cell-types/date-cell-type.md)\n     * - [`dateFormat`](#dateFormat)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of each cell in this column to `date`\n     *     type: 'date',\n     *     // in every empty `date` cell of this column, display `2015-02-02`\n     *     defaultDate: '2015-02-02'\n     *   }\n     * ],\n     * ```\n     */\n    defaultDate: void 0,\n    /**\n     * @description\n     * The `disableVisualSelection` option configures how\n     * [selection](@/guides/cell-features/selection.md) is shown.\n     *\n     * You can set the `disableVisualSelection` option to one of the following:\n     *\n     * | Setting           | Description                                                                                         |\n     * | ----------------- | --------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | - Show single-cell selection<br>- Show range selection<br>- Show header selection                   |\n     * | `true`            | - Don't show single-cell selection<br>- Don't show range selection<br>- Don't show header selection |\n     * | `'current'`       | - Don't show single-cell selection<br>- Show range selection<br>- Show header selection             |\n     * | `'area'`          | - Show single-cell selection<br>- Don't show range selection<br>- Show header selection             |\n     * | `'header'`        | - Show single-cell selection<br>- Show range selection<br>- Don't show header selection             |\n     * | An array          | A combination of `'current'`, `'area'`, and/or `'header'`                                           |\n     *\n     * Read more:\n     * - [Selection](@/guides/cell-features/selection.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string|string[]}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't show single-cell selection\n     * // don't show range selection\n     * // don't show header selection\n     * disableVisualSelection: true,\n     *\n     * // don't show single-cell selection\n     * // show range selection\n     * // show header selection\n     * disableVisualSelection: 'current',\n     *\n     * // don't show single-cell selection\n     * // don't show range selection\n     * // show header selection\n     * disableVisualSelection: ['current', 'area'],\n     * ```\n     */\n    disableVisualSelection: false,\n    /**\n     * @description\n     * The `dragToScroll` option configures the [`DragToScroll`](@/api/dragToScroll.md) plugin.\n     *\n     * You can set the `dragToScroll` option to one of the following:\n     *\n     * | Setting          | Description                                                                 |\n     * | ---------------- | --------------------------------------------------------------------------- |\n     * | `true` (default) | When selection reaches the edge of the grid's viewport, scroll the viewport |\n     * | `false`          | Don't scroll the viewport                                                   |\n     *\n     * Read more:\n     * - [Plugins: `DragToScroll`](@/api/dragToScroll.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category DragToScroll\n     *\n     * @example\n     * ```js\n     * // when selection reaches the edge of the grid's viewport, scroll the viewport\n     * dragToScroll: true,\n     * ```\n     */\n    dragToScroll: true,\n    /**\n     * The `dropdownMenu` option configures the [`DropdownMenu`](@/api/dropdownMenu.md) plugin.\n     *\n     * You can set the `dropdownMenu` option to one of the following:\n     *\n     * | Setting   | Description                                                                                                                                                                                  |\n     * | --------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin                                                                                                                                   |\n     * | `true`    | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Use the [default context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-default-options)    |\n     * | An array  | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Modify [individual context menu options](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options) |\n     * | An object | - Enable the [`DropdownMenu`](@/api/dropdownMenu.md) plugin<br>- Apply a custom dropdown menu configuration                                                                                  |\n     *\n     * Read more:\n     * - [Context menu](@/guides/accessories-and-menus/context-menu.md)\n     * - [Plugins: `DropdownMenu`](@/api/dropdownMenu.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object|string[]}\n     * @default undefined\n     * @category DropdownMenu\n     *\n     * @example\n     * ```js\n     * // enable the `DropdownMenu` plugin\n     * // use the default context menu options\n     * dropdownMenu: true,\n     *\n     * // enable the `DropdownMenu` plugin\n     * // and modify individual context menu options\n     * dropdownMenu: ['row_above', 'row_below', '---------', 'undo', 'redo'],\n     *\n     * // enable the `DropdownMenu` plugin\n     * // and apply a custom dropdown menu configuration\n     * dropdownMenu: {\n     *   items: {\n     *     'option1': {\n     *       name: 'Option 1'\n     *     },\n     *     'option2': {\n     *       name: 'Option 2',\n     *       submenu: {\n     *         items: [\n     *           {\n     *             key: 'option2:suboption1',\n     *             name: 'Suboption 1',\n     *             callback(key, options) {\n     *               ...\n     *             }\n     *           },\n     *           ...\n     *         ]\n     *       }\n     *     }\n     *   }\n     * },\n     * ```\n     */\n    dropdownMenu: void 0,\n    /**\n     * The `editor` option sets a [cell editor](@/guides/cell-functions/cell-editor.md) for a cell.\n     *\n     * You can set the `editor` option to one of the following [cell editor aliases](@/guides/cell-functions/cell-editor.md):\n     *\n     * | Alias               | Cell editor function                                                       |\n     * | ------------------- | -------------------------------------------------------------------------- |\n     * | A custom alias      | Your [custom cell editor](@/guides/cell-functions/cell-editor.md) function |\n     * | `'autocomplete'`    | `AutocompleteEditor`                                                       |\n     * | `'base'`            | `BaseEditor`                                                               |\n     * | `'checkbox'`        | `CheckboxEditor`                                                           |\n     * | `'date'`            | `DateEditor`                                                               |\n     * | `'dropdown'`        | `DropdownEditor`                                                           |\n     * | `'handsontable'`    | `HandsontableEditor`                                                       |\n     * | `'numeric'`         | `NumericEditor`                                                            |\n     * | `'password'`        | `PasswordEditor`                                                           |\n     * | `'select'`          | `SelectEditor`                                                             |\n     * | `'text'`            | `TextEditor`                                                               |\n     * | `'time'`            | `TimeEditor`                                                               |\n     *\n     * To disable editing cells through cell editors,\n     * set the `editor` option to `false`.\n     * You'll still be able to change cells' content through Handsontable's API\n     * or through plugins (e.g. [`CopyPaste`](@/api/copyPaste.md)), though.\n     *\n     * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)\n     * options all at once, use the [`type`](#type) option.\n     *\n     * Read more:\n     * - [Cell editor](@/guides/cell-functions/cell-editor.md)\n     * - [Cell type](@/guides/cell-types/cell-type.md)\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     * - [`type`](#type)\n     *\n     * @memberof Options#\n     * @type {string|Function|boolean}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // use the `numeric` editor for each cell of the entire grid\n     * editor: 'numeric',\n     *\n     * // apply the `editor` option to individual columns\n     * columns: [\n     *   {\n     *     // use the `autocomplete` editor for each cell of this column\n     *     editor: 'autocomplete'\n     *   },\n     *   {\n     *     // disable editing cells through cell editors for each cell of this column\n     *     editor: false\n     *   }\n     * ]\n     * ```\n     */\n    editor: void 0,\n    /**\n     * The `enterBeginsEditing` option configures the action of the <kbd>**Enter**</kbd> key.\n     *\n     * You can set the `enterBeginsEditing` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                                                                                                               |\n     * | ---------------- | --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | - On pressing <kbd>**Enter**</kbd> once, enter the editing mode of the active cell<br>- On pressing <kbd>**Enter**</kbd> twice, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting |\n     * | `false`          | - On pressing <kbd>**Enter**</kbd> once, move to another cell,<br>as configured by the [`enterMoves`](#enterMoves) setting                                                                                    |\n     *\n     * Read more:\n     * - [`enterMoves`](#enterMoves)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // press Enter once to start editing\n     * // press Enter twice to move to another cell\n     * enterBeginsEditing: true,\n     *\n     * // press Enter once to move to another cell\n     * enterBeginsEditing: false,\n     * ```\n     */\n    enterBeginsEditing: true,\n    /**\n     * The `enterMoves` option configures the action of the <kbd>**Enter**</kbd> key.\n     *\n     * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `true`,\n     * the `enterMoves` setting applies to the **second** pressing of the <kbd>**Enter**</kbd> key.\n     *\n     * If the [`enterBeginsEditing`](#enterBeginsEditing) option is set to `false`,\n     * the `enterMoves` setting applies to the **first** pressing of the <kbd>**Enter**</kbd> key.\n     *\n     * You can set the `enterMoves` option to an object with the following properties\n     * (or to a function that returns such an object):\n     *\n     * | Property | Type   | Description                                                                                                                                              |\n     * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `col`    | Number | - On pressing <kbd>**Enter**</kbd>, move selection `col` columns right<br>- On pressing <kbd>**Shift**</kbd> + <kbd>**Enter**</kbd>, move selection `col` columns left |\n     * | `row`    | Number | - On pressing <kbd>**Enter**</kbd>, move selection `row` rows down<br>- On pressing <kbd>**Shift**</kbd> + <kbd>**Enter**</kbd>, move selection `row` rows up          |\n     *\n     * Read more:\n     * - [`enterBeginsEditing`](#enterBeginsEditing)\n     *\n     * @memberof Options#\n     * @type {object|Function}\n     * @default {col: 0, row: 1}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on pressing Enter, move selection 1 column right and 1 row down\n     * // on pressing Shift+Enter, move selection 1 column left and 1 row up\n     * enterMoves: {col: 1, row: 1},\n     *\n     * // the same setting, as a function\n     * // `event` is a DOM Event object received on pressing Enter\n     * // you can use it to check whether the user pressed Enter or Shift+Enter\n     * enterMoves(event) {\n     *   return {col: 1, row: 1};\n     * },\n     * ```\n     */\n    enterMoves: {\n      col: 0,\n      row: 1\n    },\n    /**\n     * The `fillHandle` option configures the [Autofill](@/api/autofill.md) plugin.\n     *\n     * You can set the `fillHandle` option to one the following:\n     *\n     * | Setting        | Description                                                                |\n     * | -------------- | -------------------------------------------------------------------------- |\n     * | `true`         | - Enable autofill in all directions<br>- Add the fill handle               |\n     * | `false`        | Disable autofill                                                           |\n     * | `'vertical'`   | - Enable vertical autofill<br>- Add the fill handle                        |\n     * | `'horizontal'` | - Enable horizontal autofill<br>- Add the fill handle                      |\n     * | An object      | - Enable autofill<br>- Add the fill handle<br>- Configure autofill options |\n     *\n     * If you set the `fillHandle` option to an object, you can configure the following autofill options:\n     *\n     * | Option          | Possible settings              | Description                                                                                               |\n     * | --------------- | ------------------------------ | --------------------------------------------------------------------------------------------------------- |\n     * | `autoInsertRow` | `true` (default) \\| `false`    | `true`: When you reach the grid's bottom, add new rows<br>`false`: When you reach the grid's bottom, stop |\n     * | `direction`     | `'vertical'` \\| `'horizontal'` | `'vertical'`: Enable vertical autofill<br>`'horizontal'`: Enable horizontal autofill                      |\n     *\n     * Read more:\n     * - [AutoFill values](@/guides/cell-features/autofill-values.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string|object}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable autofill in all directions\n     * // with `autoInsertRow` enabled\n     * fillHandle: true,\n     *\n     * // enable vertical autofill\n     * // with `autoInsertRow` enabled\n     * fillHandle: 'vertical',\n     *\n     * // enable horizontal autofill\n     * // with `autoInsertRow` enabled\n     * fillHandle: 'horizontal',\n     *\n     * // enable autofill in all directions\n     * // with `autoInsertRow` disabled\n     * fillHandle: {\n     *   autoInsertRow: false,\n     * },\n     *\n     * // enable vertical autofill\n     * // with `autoInsertRow` disabled\n     * fillHandle: {\n     *   autoInsertRow: false,\n     *   direction: 'vertical'\n     * },\n     * ```\n     */\n    fillHandle: {\n      autoInsertRow: false\n    },\n    /**\n     * The `filter` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'\n     * lists are updated by the end user's input.\n     *\n     * You can set the `filter` option to one of the following:\n     *\n     * | Setting          | Description                                                                                                           |\n     * | ---------------- | --------------------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | When the end user types into the input area, only options matching the input are displayed                            |\n     * | `false`          | When the end user types into the input area, all options are displayed<br>(options matching the input are put in bold |\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [`source`](#source)\n     * - [`filteringCaseSensitive`](#filteringCaseSensitive)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [{\n     *   // set the `type` of each cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['A', 'B', 'C'],\n     *   // when the end user types in `A`, display only the A option\n     *   // when the end user types in `B`, display only the B option\n     *   // when the end user types in `C`, display only the C option\n     *   filter: true\n     * }],\n     * ```\n     */\n    filter: true,\n    /**\n     * The `filteringCaseSensitive` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'\n     * input is case-sensitive.\n     *\n     * You can set the `filteringCaseSensitive` option to one of the following:\n     *\n     * | Setting           | Description                                                                                        |\n     * | ----------------- | -------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is not case-sensitive |\n     * | `true`            | [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells' input is case-sensitive     |\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [`source`](#source)\n     * - [`filter`](#filter)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     type: 'autocomplete',\n     *     source: [ ... ],\n     *     // match case while searching autocomplete options\n     *     filteringCaseSensitive: true\n     *   }\n     * ],\n     * ```\n     */\n    filteringCaseSensitive: false,\n    /**\n     * The `filters` option configures the [`Filters`](@/api/filters.md) plugin.\n     *\n     * You can set the `filters` option to one of the following:\n     *\n     * | Setting | Description                                      |\n     * | ------- | ------------------------------------------------ |\n     * | `false` | Disable the [`Filters`](@/api/filters.md) plugin |\n     * | `true`  | Enable the [`Filters`](@/api/filters.md) plugin  |\n     *\n     * Read more:\n     * - [Column filter](@/guides/columns/column-filter.md)\n     * - [Plugins: `Filters`](@/api/filters.md)\n     * - [`dropdownMenu`](#dropdownMenu)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category Filters\n     *\n     * @example\n     * ```js\n     * // enable the `Filters` plugin\n     * filters: true,\n     * ```\n     */\n    filters: void 0,\n    /**\n     * `fixedColumnsLeft` is a legacy option.\n     *\n     * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default), `fixedColumnsLeft` acts like the [`fixedColumnsStart`](#fixedColumnsStart) option.\n     *\n     * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is RTL, using `fixedColumnsLeft` throws an error.\n     *\n     * Use [`fixedColumnsStart`](#fixedColumnsStart), which works in any layout direction.\n     *\n     * Read more:\n     * - [`fixedColumnsStart`](#fixedcolumnsstart)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // freeze the first 3 columns from the left\n     * fixedColumnsLeft: 3,\n     * ```\n     */\n    fixedColumnsLeft: 0,\n    /**\n     * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is LTR (default), the `fixedColumnsStart` option sets the number of [frozen columns](@/guides/columns/column-freezing.md) at the left-hand edge of the grid.\n     *\n     * If your grid's [layout direction](@/guides/internationalization/layout-direction.md) is RTL, the `fixedColumnsStart` option sets the number of [frozen columns](@/guides/columns/column-freezing.md) at the right-hand edge of the grid.\n     *\n     * Read more:\n     * - [Column freezing](@/guides/columns/column-freezing.md)\n     * - [Layout direction](@/guides/internationalization/layout-direction.md)\n     * - [`fixedColumnsLeft`](#fixedcolumnsleft)\n     * - [`layoutDirection`](#layoutDirection)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // when `layoutDirection` is set to `inherit` (default)\n     * // freeze the first 3 columns from the left or from the right\n     * // depending on your HTML document's `dir` attribute\n     * layoutDirection: 'inherit',\n     * fixedColumnsStart: 3,\n     *\n     * // when `layoutDirection` is set to `rtl`\n     * // freeze the first 3 columns from the right\n     * // regardless of your HTML document's `dir` attribute\n     * layoutDirection: 'rtl',\n     * fixedColumnsStart: 3,\n     *\n     * // when `layoutDirection` is set to `ltr`\n     * // freeze the first 3 columns from the left\n     * // regardless of your HTML document's `dir` attribute\n     * layoutDirection: 'ltr',\n     * fixedColumnsStart: 3,\n     * ```\n     */\n    fixedColumnsStart: 0,\n    /**\n     * The `fixedRowsBottom` option sets the number of [frozen rows](@/guides/rows/row-freezing.md)\n     * at the bottom of the grid.\n     *\n     * Read more:\n     * - [Row freezing](@/guides/rows/row-freezing.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // freeze the bottom 3 rows\n     * fixedRowsBottom: 3,\n     * ```\n     */\n    fixedRowsBottom: 0,\n    /**\n     * The `fixedRowsTop` option sets the number of [frozen rows](@/guides/rows/row-freezing.md) at the top of the grid.\n     *\n     * Read more:\n     * - [Row freezing](@/guides/rows/row-freezing.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // freeze the top 3 rows\n     * fixedRowsTop: 3,\n     * ```\n     */\n    fixedRowsTop: 0,\n    /**\n     * The `formulas` option configures the [`Formulas`](@/api/formulas.md) plugin.\n     *\n     * The [`Formulas`](@/api/formulas.md) plugin uses the [HyperFormula](https://handsontable.github.io/hyperformula/) calculation engine.\n     * To install [HyperFormula](https://handsontable.github.io/hyperformula/), read the following:\n     * - [Formula calculation: Initialization methods](@/guides/formulas/formula-calculation.md#initialization-methods)\n     *\n     * You can set the `formulas` option to an object with the following properties:\n     *\n     * | Property    | Possible values                                                                                                                                                                                                        |\n     * | ----------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `engine`    | `HyperFormula` \\|<br>A [HyperFormula](https://handsontable.github.io/hyperformula/) instance \\|<br>A [HyperFormula configuration](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html) object |\n     * | `sheetId`   | A number                                                                                                                                                                                                               |\n     * | `sheetName` | A string                                                                                                                                                                                                               |\n     *\n     * Read more:\n     * - [Plugins: `Formulas`](@/api/formulas.md)\n     * - [Formula calculation](@/guides/formulas/formula-calculation.md)\n     * - [HyperFormula documentation: Client-side installation](https://handsontable.github.io/hyperformula/guide/client-side-installation)\n     * - [HyperFormula documentation: Configuration options](https://handsontable.github.io/hyperformula/api/interfaces/configparams.html)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Formulas\n     *\n     * @example\n     * ```js\n     * // either add the `HyperFormula` class\n     * formulas: {\n     *   // set `engine` to `HyperFormula`\n     *   engine: HyperFormula,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // or, add a HyperFormula instance\n     * // initialized with the `'internal-use-in-handsontable'` license key\n     * const hyperformulaInstance = HyperFormula.buildEmpty({\n     *   licenseKey: 'internal-use-in-handsontable',\n     * });\n     *\n     * formulas: {\n     *   // set `engine` to a HyperFormula instance\n     *   engine: hyperFormulaInstance,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // or, add a HyperFormula configuration object\n     * formulas: {\n     *   // set `engine` to a HyperFormula configuration object\n     *   engine: {\n     *     hyperformula: HyperFormula // or `engine: hyperFormulaInstance`\n     *     leapYear1900: false,       // this option comes from HyperFormula\n     *     // add more HyperFormula configuration options\n     *   },\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // use the same HyperFormula instance in multiple Handsontable instances\n     *\n     * // a Handsontable instance `hot1`\n     * formulas: {\n     *   engine: HyperFormula,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     *\n     * // a Handsontable instance `hot2`\n     * formulas: {\n     *   engine: hot1.getPlugin('formulas').engine,\n     *   sheetId: 1,\n     *   sheetName: 'Sheet 1'\n     * }\n     * ```\n     */\n    formulas: void 0,\n    /**\n     * The `fragmentSelection` option configures text selection settings.\n     *\n     * You can set the `fragmentSelection` option to one of the following:\n     *\n     * | Setting           | Decription                                        |\n     * | ----------------- | ------------------------------------------------- |\n     * | `false` (default) | Disable text selection                            |\n     * | `true`            | Enable text selection in multiple cells at a time |\n     * | `'cell'`          | Enable text selection in one cell at a time       |\n     *\n     * @memberof Options#\n     * @type {boolean|string}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable text selection in multiple cells at a time\n     * fragmentSelection: true,\n     *\n     * // enable text selection in one cell a time\n     * fragmentSelection: 'cell',\n     * ```\n     */\n    fragmentSelection: false,\n    /**\n     * The `height` option configures the height of your grid.\n     *\n     * You can set `height` option to one of the following:\n     *\n     * | Setting                                                                    | Example                    |\n     * | -------------------------------------------------------------------------- | -------------------------- |\n     * | A number of pixels                                                         | `height: 500`              |\n     * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `height: '75vw'`           |\n     * | A function that returns a valid number or string                           | `height() { return 500; }` |\n     *\n     * Read more:\n     * - [Grid size](@/guides/getting-started/grid-size.md)\n     *\n     * @memberof Options#\n     * @type {number|string|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the grid's height to 500px\n     * height: 500,\n     *\n     * // set the grid's height to 75vh\n     * height: '75vh',\n     *\n     * // set the grid's height to 500px, using a function\n     * height() {\n     *   return 500;\n     * },\n     * ```\n     */\n    height: void 0,\n    /**\n     * The `hiddenColumns` option configures the [`HiddenColumns`](@/api/hiddenColumns.md) plugin.\n     *\n     * You can set the `hiddenColumns` option to one of the following:\n     *\n     * | Setting   | Description                                                                                  |\n     * | --------- | -------------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin                                 |\n     * | `true`    | Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin with the default plugin options  |\n     * | An object | - Enable the [`HiddenColumns`](@/api/hiddenColumns.md) plugin<br>- Modify the plugin options |\n     *\n     * If you set the `hiddenColumns` to an object, you can set the following [`HiddenColumns`](@/api/hiddenColumns.md) plugin options:\n     *\n     * | Property           | Possible values     | Description                                                                                                                                             |\n     * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `columns`          | An array of indexes | An array of indexes of columns that are hidden at initialization                                                                                        |\n     * | `copyPasteEnabled` | `true` \\| `false`   | `true`: when copying or pasting data, take hidden columns into account<br>`false`: when copying or pasting data, don't take hidden columns into account |\n     * | `indicators`       | `true` \\| `false`   | `true`: display UI markers to indicate the presence of hidden columns<br>`false`: display UI markers                                                    |\n     *\n     * Read more:\n     * - [Plugins: `HiddenColumns`](@/api/hiddenColumns.md)\n     * - [Column hiding](@/guides/columns/column-hiding.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category HiddenColumns\n     *\n     * @example\n     * ```js\n     * // enable the `HiddenColumns` plugin\n     * hiddenColumns: true,\n     *\n     * // enable `HiddenColumns` plugin, and modify the plugin options\n     * hiddenColumns: {\n     *   // set columns that are hidden by default\n     *   columns: [5, 10, 15],\n     *   // when copying or pasting data, take hidden columns into account\n     *   copyPasteEnabled: true,\n     *   // show where hidden columns are\n     *   indicators: true\n     * }\n     * ```\n     */\n    hiddenColumns: void 0,\n    /**\n     * The `hiddenRows` option configures the [`HiddenRows`](@/api/hiddenRows.md) plugin.\n     *\n     * You can set the `hiddenRows` option to one of the following:\n     *\n     * | Setting   | Description                                                                            |\n     * | --------- | -------------------------------------------------------------------------------------- |\n     * | `false`   | Disable the [`HiddenRows`](@/api/hiddenRows.md) plugin                                 |\n     * | `true`    | Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin with the default plugin options  |\n     * | An object | - Enable the [`HiddenRows`](@/api/hiddenRows.md) plugin<br>- Modify the plugin options |\n     *\n     * If you set the `hiddenRows` to an object, you can set the following [`HiddenRows`](@/api/hiddenRows.md) plugin options:\n     *\n     * | Property           | Possible values     | Description                                                                                                                                       |\n     * | ------------------ | ------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `rows   `          | An array of indexes | An array of indexes of rows that are hidden at initialization                                                                                     |\n     * | `copyPasteEnabled` | `true` \\| `false`   | `true`: when copying or pasting data, take hidden rows into account<br>`false`: when copying or pasting data, don't take hidden rows into account |\n     * | `indicators`       | `true` \\| `false`   | `true`: display UI markers to indicate the presence of hidden rows<br>`false`: display UI markers                                                 |\n     *\n     * Read more:\n     * - [Plugins: `HiddenRows`](@/api/hiddenRows.md)\n     * - [Row hiding](@/guides/rows/row-hiding.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category HiddenRows\n     *\n     * @example\n     * ```js\n     * // enable the `HiddenRows` plugin\n     * hiddenRows: true,\n     *\n     * // enable `HiddenRows` plugin, and modify the plugin options\n     * hiddenRows: {\n     *   // set rows that are hidden by default\n     *   rows: [5, 10, 15],\n     *   // when copying or pasting data, take hidden rows into account\n     *   copyPasteEnabled: true,\n     *   // show where hidden rows are\n     *   indicators: true\n     * }\n     * ```\n     */\n    hiddenRows: void 0,\n    /**\n     * The `invalidCellClassName` option lets you add a CSS class name to cells\n     * that were marked as `invalid` by the [cell validator](@/guides/cell-functions/cell-validator.md).\n     *\n     * Read more:\n     * - [Cell validator](@/guides/cell-functions/cell-validator.md)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htInvalid'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `highlight-error` CSS class name\n     * // to every `invalid` cell`\n     * invalidCellClassName: 'highlight-error',\n     * ```\n     */\n    invalidCellClassName: 'htInvalid',\n    /**\n     * The `imeFastEdit` option allows using the \"fast edit\" feature for the IME users. It's disabled by default\n     * because of its incompatibility with some of the accessibility features.\n     *\n     * Enabling this option can make a negative impact on how some screen readers handle reading the table cells.\n     *\n     * @since 14.0.0\n     * @memberof Options#\n     * @type {boolean}\n     * @category Core\n     */\n    imeFastEdit: false,\n    /**\n     * The `isEmptyCol` option lets you define your own custom method\n     * for checking if a column at a given visual index is empty.\n     *\n     * The `isEmptyCol` setting overwrites the built-in [`isEmptyCol`](@/api/core.md#isEmptyCol) method.\n     *\n     * @memberof Options#\n     * @type {Function}\n     * @param {number} col Visual column index.\n     * @returns {boolean}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // overwrite the built-in `isEmptyCol` method\n     * isEmptyCol(visualColumnIndex) {\n     *    // your custom method\n     *    ...\n     * },\n     * ```\n     */\n    isEmptyCol(col) {\n      let row;\n      let rowLen;\n      let value;\n      for (row = 0, rowLen = this.countRows(); row < rowLen; row++) {\n        value = this.getDataAtCell(row, col);\n        if (isEmpty(value) === false) {\n          return false;\n        }\n      }\n      return true;\n    },\n    /**\n     * The `isEmptyRow` option lets you define your own custom method\n     * for checking if a row at a given visual index is empty.\n     *\n     * The `isEmptyRow` setting overwrites the built-in [`isEmptyRow`](@/api/core.md#isEmptyRow) method.\n     *\n     * @memberof Options#\n     * @type {Function}\n     * @param {number} row Visual row index.\n     * @returns {boolean}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // overwrite the built-in `isEmptyRow` method\n     * isEmptyRow(visualRowIndex) {\n     *    // your custom method\n     *    ...\n     * },\n     * ```\n     */\n    isEmptyRow(row) {\n      let col;\n      let colLen;\n      let value;\n      let meta;\n      for (col = 0, colLen = this.countCols(); col < colLen; col++) {\n        value = this.getDataAtCell(row, col);\n        if (isEmpty(value) === false) {\n          if (typeof value === 'object') {\n            meta = this.getCellMeta(row, col);\n            return isObjectEqual(this.getSchema()[meta.prop], value);\n          }\n          return false;\n        }\n      }\n      return true;\n    },\n    /**\n     * @description\n     * The `label` option configures [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cells` labels.\n     *\n     * You can set the `label` option to an object with the following properties:\n     *\n     * | Property    | Possible values                   | Description                                                                                                                                                                                                             |\n     * | ----------- | --------------------------------- | ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `position`  | `'after'` (default) \\| `'before'` | `'after'`: place the label to the right of the checkbox<br>`'before'`: place the label to the left of the checkbox                                                                                                      |\n     * | `value`     | A string \\| A function            | The label's text                                                                                                                                                                                                        |\n     * | `separated` | `false` (default) \\| `true`       | `false`: don't separate the label from the checkbox<br>`true`: separate the label from the checkbox                                                                                                                     |\n     * | `property`  | A string                          | - A [`data`](#data) object property name that's used as the label's text <br>- Works only when the [`data`](#data) option is set to an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects) |\n     *\n     * Read more:\n     * - [Checkbox cell type: Checkbox labels](@/guides/cell-types/checkbox-cell-type.md#checkbox-labels)\n     *\n     * @memberof Options#\n     * @type {object}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [{\n     *   type: 'checkbox',\n     *   // add 'My label:' after the checkbox\n     *   label: { position: 'after', value: 'My label: ', separated: true }\n     * }],\n     * ```\n     */\n    label: void 0,\n    /**\n     * The `language` option configures Handsontable's [language](@/guides/internationalization/language.md) settings.\n     *\n     * You can set the `language` option to one of the following:\n     *\n     * | Setting             | Description                 |\n     * | ------------------- | --------------------------- |\n     * | `'en-US'` (default) | English - United States     |\n     * | `'ar-AR'`           | Arabic - Global.<br><br>To properly render this language, set the [layout direction](@/guides/internationalization/layout-direction.md) to RTL. |\n     * | `'cs-CZ'`           | Czech - Czech Republic      |\n     * | `'de-CH'`           | German - Switzerland        |\n     * | `'de-DE'`           | German - Germany            |\n     * | `'es-MX'`           | Spanish - Mexico            |\n     * | `'fr-FR'`           | French - France             |\n     * | `'it-IT'`           | Italian - Italy             |\n     * | `'ja-JP'`           | Japanese - Japan            |\n     * | `'ko-KR'`           | Korean - Korea              |\n     * | `'lv-LV'`           | Latvian - Latvia            |\n     * | `'nb-NO'`           | Norwegian (Bokmål) - Norway |\n     * | `'nl-NL'`           | Dutch - Netherlands         |\n     * | `'pl-PL'`           | Polish - Poland             |\n     * | `'pt-BR'`           | Portuguese - Brazil         |\n     * | `'ru-RU'`           | Russian - Russia            |\n     * | `'sr-SP'`           | Serbian (Latin) - Serbia    |\n     * | `'zh-CN'`           | Chinese - China             |\n     * | `'zh-TW'`           | Chinese - Taiwan            |\n     *\n     * Read more:\n     * - [Language](@/guides/internationalization/language.md)\n     * - [`locale`](#locale)\n     * - [`layoutDirection`](#layoutdirection)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'en-US'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set Handsontable's language to Polish\n     * language: 'pl-PL',\n     * ```\n     */\n    language: 'en-US',\n    /**\n     * The `layoutDirection` option configures whether Handsontable renders from the left to the right, or from the right to the left.\n     *\n     * You can set the layout direction only at Handsontable's [initialization](@/guides/getting-started/installation.md#initialize-handsontable). Any change of the `layoutDirection` option after the initialization (e.g. using the [`updateSettings()`](@/api/core.md#updatesettings) method) is ignored.\n     *\n     * You can set the `layoutDirection` option only [for the entire grid](@/guides/getting-started/configuration-options.md#set-grid-options).\n     * You can't set it for individual columns, rows, or cells.\n     *\n     * You can set the `layoutDirection` option to one of the following strings:\n     *\n     * | Setting             | Description                                                                                                                                                                                  |\n     * | ------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `inherit` (default) | Set Handsontable's layout direction automatically,<br>based on the value of your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute  |\n     * | `rtl`               | Render Handsontable from the right to the left,<br>even when your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute is set to `ltr` |\n     * | `ltr`               | Render Handsontable from the left to the right,<br>even when your HTML document's [`dir`](https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/dir) attribute is set to `rtl` |\n     *\n     * Read more:\n     * - [Layout direction](@/guides/internationalization/layout-direction.md)\n     * - [Language](@/guides/internationalization/language.md)\n     * - [`language`](#language)\n     * - [`locale`](#locale)\n     * - [`fixedColumnsStart`](#fixedcolumnsstart)\n     * - [`customBorders`](#customBorders)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'inherit'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // inherit Handsontable's layout direction\n     * // from the value of your HTML document's `dir` attribute\n     * layoutDirection: 'inherit',\n     *\n     * // render Handsontable from the right to the left\n     * // regardless of your HTML document's `dir`\n     * layoutDirection: 'rtl',\n     *\n     * // render Handsontable from the left to the right\n     * // regardless of your HTML document's `dir`\n     * layoutDirection: 'ltr',\n     * ```\n     */\n    layoutDirection: 'inherit',\n    /**\n     * The `licenseKey` option sets your Handsontable license key.\n     *\n     * You can set the `licenseKey` option to one of the following:\n     *\n     * | Setting                                                                                                 | Description                                                                                       |\n     * | ------------------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------------- |\n     * | A string with your [commercial license key](@/guides/getting-started/license-key.md#commercial-license) | For [commercial use](@/guides/technical-specification/software-license.md#commercial-use)         |\n     * | `'non-commercial-and-evaluation'`                                                                       | For [non-commercial use](@/guides/technical-specification/software-license.md#non-commercial-use) |\n     *\n     * Read more:\n     * - [License key](@/guides/getting-started/license-key.md)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // for commercial use\n     * licenseKey: 'xxxxx-xxxxx-xxxxx-xxxxx-xxxxx', // your commercial license key\n     *\n     * // for non-commercial use\n     * licenseKey: 'non-commercial-and-evaluation',\n     * ```\n     */\n    licenseKey: void 0,\n    /**\n     * The `locale` option configures Handsontable's [locale](@/guides/internationalization/locale.md) settings.\n     *\n     * You can set the `locale` option to any valid and canonicalized Unicode BCP 47 locale tag,\n     * both for the [entire grid](@/guides/internationalization/locale.md#set-the-grid-s-locale),\n     * and for [individual columns](@/guides/internationalization/locale.md#set-a-column-s-locale).\n     *\n     * Read more:\n     * - [Locale](@/guides/internationalization/locale.md)\n     * - [`language`](#language)\n     * - [`layoutDirection`](#layoutdirection)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'en-US'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the entire grid's locale to Polish\n     * locale: 'pl-PL',\n     *\n     * // set individual columns' locales\n     * columns: [\n     *   {\n     *     // set the first column's locale to Polish\n     *     locale: 'pl-PL',\n     *   },\n     *   {\n     *     // set the second column's locale to German\n     *     locale: 'de-DE',\n     *   },\n     * ],\n     * ```\n     */\n    locale: 'en-US',\n    /**\n     * The `manualColumnFreeze` option configures the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin.\n     *\n     * You can set the `manualColumnFreeze` option to one of the following:\n     *\n     * | Setting  | Description                                                            |\n     * | -------- | ---------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin  |\n     * | `false`  | Disable the [`ManualColumnFreeze`](@/api/manualColumnFreeze.md) plugin |\n     *\n     * Read more:\n     * - [Column freezing](@/guides/columns/column-freezing.md#user-triggered-freeze)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category ManualColumnFreeze\n     *\n     * @example\n     * ```js\n     * // enable the `ManualColumnFreeze` plugin\n     * manualColumnFreeze: true,\n     * ```\n     */\n    manualColumnFreeze: void 0,\n    /**\n     * The `manualColumnMove` option configures the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin.\n     *\n     * You can set the `manualColumnMove` option to one of the following:\n     *\n     * | Setting  | Description                                                                                                        |\n     * | -------- | ------------------------------------------------------------------------------------------------------------------ |\n     * | `true`   | Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                  |\n     * | `false`  | Disable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin                                                 |\n     * | An array | - Enable the [`ManualColumnMove`](@/api/manualColumnMove.md) plugin<br>- Move individual columns at initialization |\n     *\n     * Read more:\n     * - [Column moving](@/guides/columns/column-moving.md)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualColumnMove\n     *\n     * @example\n     * ```js\n     * // enable the `ManualColumnMove` plugin\n     * manualColumnMove: true,\n     *\n     * // enable the `ManualColumnMove` plugin\n     * // at initialization, move column 0 to 1\n     * // at initialization, move column 1 to 4\n     * // at initialization, move column 2 to 6\n     * manualColumnMove: [1, 4, 6],\n     * ```\n     */\n    manualColumnMove: void 0,\n    /**\n     * @description\n     * The `manualColumnResize` option configures the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin.\n     *\n     * You can set the `manualColumnResize` option to one of the following:\n     *\n     * | Setting  | Description                                                                                                           |\n     * | -------- | --------------------------------------------------------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                 |\n     * | `false`  | Disable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin                                                |\n     * | An array | - Enable the [`ManualColumnResize`](@/api/manualColumnResize.md) plugin<br>- Set initial widths of individual columns |\n     *\n     * Read more:\n     * - [Column width: Column stretching](@/guides/columns/column-width.md#column-stretching)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualColumnResize\n     *\n     * @example\n     * ```js\n     * // enable the `manualColumnResize` plugin\n     * manualColumnResize: true,\n     *\n     * // enable the `manualColumnResize` plugin\n     * // set the initial width of column 0 to 40 pixels\n     * // set the initial width of column 1 to 50 pixels\n     * // set the initial width of column 2 to 60 pixels\n     * manualColumnResize: [40, 50, 60],\n     * ```\n     */\n    manualColumnResize: void 0,\n    /**\n     * @description\n     * The `manualRowMove` option configures the [`ManualRowMove`](@/api/manualRowMove.md) plugin.\n     *\n     * You can set the `manualRowMove` option to one of the following:\n     *\n     * | Setting  | Description                                                                                               |\n     * | -------- | --------------------------------------------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                               |\n     * | `false`  | Disable the [`ManualRowMove`](@/api/manualRowMove.md) plugin                                              |\n     * | An array | - Enable the [`ManualRowMove`](@/api/manualRowMove.md) plugin<br>- Move individual rows at initialization |\n     *\n     * Read more:\n     * - [Row moving](@/guides/rows/row-moving.md)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualRowMove\n     *\n     * @example\n     * ```js\n     * // enable the `ManualRowMove` plugin\n     * manualRowMove: true,\n     *\n     * // enable the `ManualRowMove` plugin\n     * // at initialization, move row 0 to 1\n     * // at initialization, move row 1 to 4\n     * // at initialization, move row 2 to 6\n     * manualColumnMove: [1, 4, 6],\n     * ```\n     */\n    manualRowMove: void 0,\n    /**\n     * @description\n     * The `manualRowResize` option configures the [`ManualRowResize`](@/api/manualRowResize.md) plugin.\n     *\n     * You can set the `manualRowResize` option to one of the following:\n     *\n     * | Setting  | Description                                                                                                   |\n     * | -------- | ------------------------------------------------------------------------------------------------------------- |\n     * | `true`   | Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                               |\n     * | `false`  | Disable the [`ManualRowResize`](@/api/manualRowResize.md) plugin                                              |\n     * | An array | - Enable the [`ManualRowResize`](@/api/manualRowResize.md) plugin<br>- Set initial heights of individual rows |\n     *\n     * Read more:\n     * - [Row height: Adjust the row height manually](@/guides/rows/row-height.md#adjust-the-row-height-manually)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category ManualRowResize\n     *\n     * @example\n     * ```js\n     * // enable the `ManualRowResize` plugin\n     * manualRowResize: true,\n     *\n     * // enable the `ManualRowResize` plugin\n     * // set the initial height of row 0 to 40 pixels\n     * // set the initial height of row 1 to 50 pixels\n     * // set the initial height of row 2 to 60 pixels\n     * manualRowResize: [40, 50, 60],\n     * ```\n     */\n    manualRowResize: void 0,\n    /**\n     * The `maxCols` option sets a maximum number of columns.\n     *\n     * The `maxCols` option is used:\n     * - At initialization: if the `maxCols` value is lower than the initial number of columns,\n     * Handsontable trims columns from the right.\n     * - At runtime: for example, when inserting columns.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default Infinity\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the maximum number of columns to 300\n     * maxCols: 300,\n     * ```\n     */\n    maxCols: Infinity,\n    /**\n     * The `maxRows` option sets a maximum number of rows.\n     *\n     * The `maxRows` option is used:\n     * - At initialization: if the `maxRows` value is lower than the initial number of rows,\n     * Handsontable trims rows from the bottom.\n     * - At runtime: for example, when inserting rows.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default Infinity\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the maximum number of rows to 300\n     * maxRows: 300,\n     * ```\n     */\n    maxRows: Infinity,\n    /**\n     * @description\n     * The `mergeCells` option configures the [`MergeCells`](@/api/mergeCells.md) plugin.\n     *\n     * You can set the `mergeCells` option to one of the following:\n     *\n     * | Setting             | Description                                                                                         |\n     * | ------------------- | --------------------------------------------------------------------------------------------------- |\n     * | `true`              | Enable the [`MergeCells`](@/api/mergeCells.md) plugin                                               |\n     * | `false`             | Disable the [`MergeCells`](@/api/mergeCells.md) plugin                                              |\n     * | An array of objects | - Enable the [`MergeCells`](@/api/mergeCells.md) plugin<br>- Merge specific cells at initialization |\n     *\n     * To merge specific cells at Handsontable's initialization,\n     * set the `mergeCells` option to an array of objects, with the following properties:\n     *\n     * | Property  | Description                                                |\n     * | --------- | ---------------------------------------------------------- |\n     * | `row`     | The row index of the merged section's beginning            |\n     * | `col`     | The column index of the merged section's beginning         |\n     * | `rowspan` | The width (as a number of rows) of the merged section      |\n     * | `colspan` | The height (as a number of columns ) of the merged section |\n     *\n     * Read more:\n     * - [Merge cells](@/guides/cell-features/merge-cells.md)\n     *\n     * @memberof Options#\n     * @type {boolean|object[]}\n     * @default false\n     * @category MergeCells\n     *\n     * @example\n     * ```js\n     * // enable the `MergeCells` plugin\n     * mergeCells: true,\n     *\n     * // enable the `MergeCells` plugin\n     * // and merge specific cells at initialization\n     * mergeCells: [\n     *   // merge cells from cell (1,1) to cell (3,3)\n     *   {row: 1, col: 1, rowspan: 3, colspan: 3},\n     *   // merge cells from cell (3,4) to cell (2,2)\n     *   {row: 3, col: 4, rowspan: 2, colspan: 2},\n     *   // merge cells from cell (5,6) to cell (3,3)\n     *   {row: 5, col: 6, rowspan: 3, colspan: 3}\n     * ],\n     * ```\n     */\n    mergeCells: false,\n    /**\n     * The `minCols` option sets a minimum number of columns.\n     *\n     * The `minCols` option is used:\n     * - At initialization: if the `minCols` value is higher than the initial number of columns,\n     * Handsontable adds empty columns to the right.\n     * - At runtime: for example, when removing columns.\n     *\n     * The `minCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n     * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),\n     * you can only have as many columns as defined in:\n     * - The first data row\n     * - The [`dataSchema`](#dataSchema) option\n     * - The [`columns`](#columns) option\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the minimum number of columns to 10\n     * minCols: 10,\n     * ```\n     */\n    minCols: 0,\n    /**\n     * The `minRows` option sets a minimum number of rows.\n     *\n     * The `minRows` option is used:\n     * - At initialization: if the `minRows` value is higher than the initial number of rows,\n     * Handsontable adds empty rows at the bottom.\n     * - At runtime: for example, when removing rows.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the minimum number of rows to 10\n     * minRows: 10,\n     * ```\n     */\n    minRows: 0,\n    /**\n     * The `minSpareCols` option sets a minimum number of empty columns\n     * at the grid's right-hand end.\n     *\n     * If there already are other empty columns at the grid's right-hand end,\n     * they are counted into the `minSpareCols` value.\n     *\n     * The total number of columns can't exceed the [`maxCols`](#maxCols) value.\n     *\n     * The `minSpareCols` option works only when your [`data`](#data) is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n     * When your [`data`](#data) is an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects),\n     * you can only have as many columns as defined in:\n     * - The first data row\n     * - The [`dataSchema`](#dataSchema) option\n     * - The [`columns`](#columns) option\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // at Handsontable's initialization, add at least 3 empty columns on the right\n     * minSpareCols: 3,\n     * ```\n     */\n    minSpareCols: 0,\n    /**\n     * The `minSpareRows` option sets a minimum number of empty rows\n     * at the bottom of the grid.\n     *\n     * If there already are other empty rows at the bottom,\n     * they are counted into the `minSpareRows` value.\n     *\n     * The total number of rows can't exceed the [`maxRows`](#maxRows) value.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 0\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // at Handsontable's initialization, add at least 3 empty rows at the bottom\n     * minSpareRows: 3,\n     * ```\n     */\n    minSpareRows: 0,\n    /**\n     * @description\n     * The `multiColumnSorting` option configures the [`MultiColumnSorting`](@/api/columnSorting.md) plugin.\n     *\n     * You can set the `multiColumnSorting` option to one of the following:\n     *\n     * | Setting    | Description                                                                                                                                                |\n     * | ---------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `true`     | Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin with the default configuration                                                       |\n     * | `false`    | Disable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin                                                                                     |\n     * | An object  | - Enable the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin<br>- Modify the [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options |\n     *\n     * If you set the `multiColumnSorting` option to an object,\n     * you can set the following [`MultiColumnSorting`](@/api/multiColumnSorting.md) plugin options:\n     *\n     * | Option                   | Possible settings                                                                                                                                |\n     * | ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `indicator`              | `true`: Display the arrow icon in the column header, to indicate a sortable column<br>`false`: Don't display the arrow icon in the column header |\n     * | `headerAction`           | `true`: Enable clicking on the column header to sort the column<br>`false`: Disable clicking on the column header to sort the column             |\n     * | `sortEmptyCells`         | `true`: Sort empty cells as well<br>`false`: Place empty cells at the end                                                                        |\n     * | `compareFunctionFactory` | A [custom compare function](@/guides/rows/rows-sorting.md#add-a-custom-comparator)                                                               |\n     *\n     * If you set the `multiColumnSorting` option to an object,\n     * you can also sort individual columns at Handsontable's initialization.\n     * In the `multiColumnSorting` object, add an object named `initialConfig`,\n     * with the following properties:\n     *\n     * | Option      | Possible settings   | Description                                                      |\n     * | ----------- | ------------------- | ---------------------------------------------------------------- |\n     * | `column`    | A number            | The index of the column that you want to sort at initialization  |\n     * | `sortOrder` | `'asc'` \\| `'desc'` | The sorting order:<br>`'asc'`: ascending<br>`'desc'`: descending |\n     *\n     * Read more:\n     * - [Rows sorting](@/guides/rows/rows-sorting.md)\n     * - [`columnSorting`](#columnSorting)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default undefined\n     * @category MultiColumnSorting\n     *\n     * @example\n     * ```js\n     * // enable the `MultiColumnSorting` plugin\n     * multiColumnSorting: true\n     *\n     * // enable the `MultiColumnSorting` plugin with custom configuration\n     * multiColumnSorting: {\n     *   // sort empty cells as well\n     *   sortEmptyCells: true,\n     *   // display the arrow icon in the column header\n     *   indicator: true,\n     *   // disable clicking on the column header to sort the column\n     *   headerAction: false,\n     *   // add a custom compare function\n     *   compareFunctionFactory(sortOrder, columnMeta) {\n     *     return function(value, nextValue) {\n     *       // some value comparisons which will return -1, 0 or 1...\n     *     }\n     *   }\n     * }\n     *\n     * // enable the `MultiColumnSorting` plugin\n     * multiColumnSorting: {\n     *   // at initialization, sort column 1 in ascending order\n     *   initialConfig: {\n     *     column: 1,\n     *     sortOrder: 'asc'\n     *   },\n     *   // at initialization, sort column 2 in descending order\n     *   initialConfig: {\n     *     column: 2,\n     *     sortOrder: 'desc'\n     *   }\n     * }\n     * ```\n     */\n    multiColumnSorting: void 0,\n    /**\n     * When set to `true`, the `navigableHeaders` option lets you navigate [row headers](@/guides/rows/row-header.md) and [column headers](@/guides/columns/column-header.md), using the arrow keys or the <kbd>**Tab**</kbd> key (if the [`disableTabNavigation`](#disabletabnavigation) option is set to `false`).\n     *\n     * @since 14.0.0\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // you can navigate row and column headers with the keyboard\n     * navigableHeaders: true,\n     *\n     * // default behavior: you can't navigate row and column headers with the keyboard\n     * navigableHeaders: false,\n     * ```\n     */\n    navigableHeaders: false,\n    /**\n     * When set to `true`, the `disableTabNavigation` option changes the behavior of the\n     * <kbd>Tab</kbd> and <kbd>Shift</kbd>+<kbd>Tab</kbd> keyboard shortcuts. The Handsontable\n     * no more captures that shortcuts to make the grid navigation available (`disableTabNavigation: false`)\n     * but returns control to the browser so the native page navigation is possible.\n     *\n     * @since 14.0.0\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // you can't navigate row and column headers using <kbd>Tab</kbd> or <kbd>Shift</kbd>+<kbd>Tab</kbd> keyboard shortcuts\n     * disableTabNavigation: true,\n     *\n     * // default behavior: you can navigate row and column headers using <kbd>Tab</kbd> or <kbd>Shift</kbd>+<kbd>Tab</kbd> keyboard shortcuts\n     * disableTabNavigation: false,\n     * ```\n     */\n    disableTabNavigation: false,\n    /**\n     * @description\n     * The `nestedHeaders` option configures the [`NestedHeaders`](@/api/nestedHeaders.md) plugin.\n     *\n     * You can set the `nestedHeaders` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                           |\n     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Disable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin                                                                          |\n     * | `true`            | - Enable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin<br>- Don't configure any nested headers                                 |\n     * | Array of arrays   | - Enable the [`NestedHeaders`](@/api/nestedHeaders.md) plugin<br>- Configure headers that are nested on Handsontable's initialization |\n     *\n     * If you set the `nestedHeaders` option to an array of arrays, each array configures one set of nested headers.\n     *\n     * Each array element configures one header, and can be one of the following:\n     *\n     * | Array element | Description                                                                                  |\n     * | ------------- | -------------------------------------------------------------------------------------------- |\n     * | A string      | The header's label                                                                           |\n     * | An object     | Properties:<br>`label` (string): the header's label<br>`colspan` (integer): the column width |\n     *\n     * Read more:\n     * - [Plugins: `NestedHeaders`](@/api/nestedHeaders.md)\n     * - [Column groups: Nested headers](@/guides/columns/column-groups.md#nested-headers)\n     *\n     * @memberof Options#\n     * @type {boolean|Array[]}\n     * @default undefined\n     * @category NestedHeaders\n     *\n     * @example\n     * ```js\n     * nestedHeaders: [\n     *   ['A', {label: 'B', colspan: 8}, 'C'],\n     *   ['D', {label: 'E', colspan: 4}, {label: 'F', colspan: 4}, 'G'],\n     *   ['H', 'I', 'J', 'K', 'L', 'M', 'N', 'R', 'S', 'T']\n     * ],\n     * ```\n     */\n    nestedHeaders: void 0,\n    /**\n     * @description\n     * The `nestedRows` option configures the [`NestedRows`](@/api/nestedRows.md) plugin.\n     *\n     * You can set the `nestedRows` option to one of the following:\n     *\n     * | Setting           | Description                                            |\n     * | ----------------- | ------------------------------------------------------ |\n     * | `false` (default) | Disable the [`NestedRows`](@/api/nestedRows.md) plugin |\n     * | `true`            | Enable the [`NestedRows`](@/api/nestedRows.md) plugin  |\n     *\n     * Read more:\n     * - [Plugins: `NestedRows`](@/api/nestedRows.md)\n     *\n     * @example\n     * ```js\n     * // enable the `NestedRows` plugin\n     * nestedRows: true,\n     * ```\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category NestedRows\n     */\n    nestedRows: void 0,\n    /**\n     * The `noWordWrapClassName` option lets you add a CSS class name\n     * to each cell that has the [`wordWrap`](#wordWrap) option set to `false`.\n     *\n     * Read more:\n     * - [`wordWrap`](#wordWrap)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htNoWrap'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add an `is-noWrapCell` CSS class name\n     * // to each cell that doesn't wrap content\n     * noWordWrapClassName: 'is-noWrapCell',\n     * ```\n     */\n    noWordWrapClassName: 'htNoWrap',\n    /**\n     * The `numericFormat` option configures the number format and the currency format\n     * of [`numeric`](@/guides/cell-types/numeric-cell-type.md) cells` displayed output\n     * in the numeric cell renderer.\n     *\n     * You can set the `numericFormat` option to an object with the following properties:\n     *\n     * | Property    | Possible values                                                               | Description     |\n     * | ----------- | ----------------------------------------------------------------------------- | --------------- |\n     * | `pattern`   | All [`numbro.js` number formats](https://numbrojs.com/format.html#numbers)    | Number format   |\n     * | `culture`   | All [`numbro.js` currency formats](https://numbrojs.com/format.html#currency) | Currency format |\n     *\n     * The `numericFormat` option as no effect on the numeric cell editor.\n     *\n     * In the source data, numeric data is stored as JavaScript numbers.\n     *\n     * Read more:\n     * - [Numeric cell type](@/guides/cell-types/numeric-cell-type.md)\n     * - [Third-party licenses](@/guides/technical-specification/third-party-licenses.md)\n     *\n     * @memberof Options#\n     * @since 0.35.0\n     * @type {object}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of each cell in this column to `numeric`\n     *     type: 'numeric',\n     *     // set the `numericFormat` option for every `numeric` cell of this column\n     *     numericFormat: {\n     *       // set the number format\n     *       pattern: '0,00',\n     *       // set the currency format\n     *       culture: 'en-US'\n     *     }\n     *   }\n     * ],\n     * ```\n     */\n    numericFormat: void 0,\n    /**\n     * If the `observeDOMVisibility` option is set to `true`,\n     * Handsontable rerenders every time it detects that the grid was made visible in the DOM.\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't rerender the grid on visibility changes\n     * observeDOMVisibility: false,\n     * ```\n     */\n    observeDOMVisibility: true,\n    /**\n     * The `outsideClickDeselects` option determines what happens to the current [selection](@/guides/cell-features/selection.md)\n     * when you click outside of the grid.\n     *\n     * You can set the `outsideClickDeselects` option to one of the following:\n     *\n     * | Setting          | Description                                                                                              |\n     * | ---------------- | -------------------------------------------------------------------------------------------------------- |\n     * | `true` (default) | On a mouse click outside of the grid, clear the current [selection](@/guides/cell-features/selection.md) |\n     * | `false`          | On a mouse click outside of the grid, keep the current [selection](@/guides/cell-features/selection.md)  |\n     * | A function       | A function that takes the click event target and returns a boolean                                       |\n     *\n     * @memberof Options#\n     * @type {boolean|Function}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on a mouse click outside of the grid, clear the current selection\n     * outsideClickDeselects: true,\n     *\n     * // on a mouse click outside of the grid, keep the current selection\n     * outsideClickDeselects: false,\n     *\n     * // take the click event target and return `false`\n     * outsideClickDeselects(event) {\n     *   return false;\n     * }\n     *\n     * // take the click event target and return `true`\n     * outsideClickDeselects(event) {\n     *   return false;\n     * }\n     * ```\n     */\n    outsideClickDeselects: true,\n    /**\n     * @description\n     * The `persistentState` option configures the [`PersistentState`](@/api/persistentState.md) plugin.\n     *\n     * You can set the `persistentState` to one of the following:\n     *\n     * | Setting           | Description                                                      |\n     * | ----------------- | ---------------------------------------------------------------- |\n     * | `false` (default) | Disable the [`PersistentState`](@/api/persistentState.md) plugin |\n     * | `true`            | Enable the [`PersistentState`](@/api/persistentState.md) plugin  |\n     *\n     * Read more:\n     * - [Saving data: Saving data locally](@/guides/getting-started/saving-data.md#save-data-locally)\n     * - [Plugins: `PersistentState`](@/api/persistentState.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category PersistentState\n     *\n     * @example\n     * ```js\n     * // enable the `PersistentState` plugin\n     * persistentState: true,\n     * ```\n     */\n    persistentState: void 0,\n    /**\n     * The `placeholder` option lets you display placeholder text in every empty cell.\n     *\n     * You can set the `placeholder` option to one of the following:\n     *\n     * | Setting            | Example        | Description                                                           |\n     * | ------------------ | -------------- | --------------------------------------------------------------------- |\n     * | A non-empty string | `'Empty cell'` | Display `Empty cell` text in empty cells                              |\n     * | A non-string value | `000`          | Display `000` text in empty cells (non-string values get stringified) |\n     *\n     * Read more:\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // display 'Empty cell' text\n     * // in every empty cell of the entire grid\n     * placeholder: 'Empty cell',\n     *\n     * // or\n     * columns: [\n     *   {\n     *     data: 'date',\n     *     dateFormat: 'DD/MM/YYYY',\n     *     // display 'Empty date cell' text\n     *     // in every empty cell of the `date` column\n     *     placeholder: 'Empty date cell'\n     *   }\n     * ],\n     * ```\n     */\n    placeholder: void 0,\n    /**\n     * The `placeholderCellClassName` option lets you add a CSS class name to cells\n     * that contain [`placeholder`](#placeholder) text.\n     *\n     * Read more:\n     * - [Cell validator](@/guides/cell-functions/cell-validator.md)\n     * - [`placeholder`](#placeholder)\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`TableClassName`](#TableClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htPlaceholder'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `has-placeholder` CSS class name\n     * // to each cell that contains `placeholder` text\n     * placeholderCellClassName: 'has-placeholder',\n     * ```\n     */\n    placeholderCellClassName: 'htPlaceholder',\n    /**\n     * The `preventOverflow` option configures preventing Handsontable\n     * from overflowing outside of its parent element.\n     *\n     * You can set the `preventOverflow` option to one of the following:\n     *\n     * | Setting           | Description                      |\n     * | ----------------- | -------------------------------- |\n     * | `false` (default) | Don't prevent overflowing        |\n     * | `'horizontal'`      | Prevent horizontal overflowing |\n     * | `'vertical'`        | Prevent vertical overflowing   |\n     *\n     * @memberof Options#\n     * @type {string|boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // prevent horizontal overflowing\n     * preventOverflow: 'horizontal',\n     * ```\n     */\n    preventOverflow: false,\n    /**\n     * The `preventWheel` option configures preventing the `wheel` event's default action\n     * on overlays.\n     *\n     * You can set the `preventWheel` option to one of the following:\n     *\n     * | Setting           | Description                                      |\n     * | ----------------- | ------------------------------------------------ |\n     * | `false` (default) | Don't prevent the `wheel` event's default action |\n     * | `true`            | Prevent the `wheel` event's default action       |\n     *\n     * @memberof Options#\n     * @private\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // don't prevent the `wheel` event's default action\n     * preventWheel: false,\n     * ```\n     */\n    preventWheel: false,\n    /**\n     * @description\n     * The `readOnly` option determines whether a cell, column or comment is editable or not.\n     *\n     * You can set the `readOnly` option to one of the following:\n     *\n     * | Setting           | Decription                                                                                                                |\n     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Set as editable                                                                                                           |\n     * | `true`            | - Set as read-only<br>- Add the [`readOnlyCellClassName`](#readOnlyCellClassName) CSS class name (by default: `htDimmed`) |\n     *\n     * `readOnly` cells can't be changed by the [`populateFromArray()`](@/api/core.md#populatefromarray) method.\n     *\n     * Read more:\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set as read-only\n     * readOnly: true,\n     * ```\n     */\n    readOnly: false,\n    /**\n     * The `readOnlyCellClassName` option lets you add a CSS class name to [read-only](#readOnly) cells.\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`TableClassName`](#TableClassName)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'htDimmed'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `is-readOnly` CSS class name\n     * // to every read-only cell\n     * readOnlyCellClassName: 'is-readOnly',\n     * ```\n     */\n    readOnlyCellClassName: 'htDimmed',\n    /**\n     * The `renderAllRows` option configures Handsontable's [row virtualization](@/guides/rows/row-virtualization.md).\n     *\n     * You can set the `renderAllRows` option to one of the following:\n     *\n     * | Setting           | Description                                                                                        |\n     * | ----------------- | -------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Enable [row virtualization](@/guides/rows/row-virtualization.md)                                   |\n     * | `true`            | Disable [row virtualization](@/guides/rows/row-virtualization.md)<br>(render all rows of the grid) |\n     *\n     * Read more:\n     * - [Row virtualization](@/guides/rows/row-virtualization.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // disable row virtualization\n     * renderAllRows: true,\n     * ```\n     */\n    renderAllRows: void 0,\n    /**\n     * @description\n     * The `renderer` option sets a [cell renderer](@/guides/cell-functions/cell-renderer.md) for a cell.\n     *\n     * You can set the `renderer` option to one of the following:\n     * - A custom renderer function\n     * - One of the following [cell renderer aliases](@/guides/cell-functions/cell-renderer.md):\n     *\n     * | Alias               | Cell renderer function                                                         |\n     * | ------------------- | ------------------------------------------------------------------------------ |\n     * | A custom alias      | Your [custom cell renderer](@/guides/cell-functions/cell-renderer.md) function |\n     * | `'autocomplete'`    | `AutocompleteRenderer`                                                         |\n     * | `'base'`            | `BaseRenderer`                                                                 |\n     * | `'checkbox'`        | `CheckboxRenderer`                                                             |\n     * | `'date'`            | `DateRenderer`                                                                 |\n     * | `'dropdown'`        | `DropdownRenderer`                                                             |\n     * | `'html'`            | `HtmlRenderer`                                                                 |\n     * | `'numeric'`         | `NumericRenderer`                                                              |\n     * | `'password'`        | `PasswordRenderer`                                                             |\n     * | `'text'`            | `TextRenderer`                                                                 |\n     * | `'time'`            | `TimeRenderer`                                                                 |\n     *\n     * To set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)\n     * options all at once, use the [`type`](#type) option.\n     *\n     * Read more:\n     * - [Cell renderer](@/guides/cell-functions/cell-renderer.md)\n     * - [Cell type](@/guides/cell-types/cell-type.md)\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     * - [`type`](#type)\n     *\n     * @memberof Options#\n     * @type {string|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // use the `numeric` renderer for each cell of the entire grid\n     * renderer: `'numeric'`,\n     *\n     * // add a custom renderer function\n     * renderer(hotInstance, td, row, column, prop, value, cellProperties) {\n     *   // your custom renderer's logic\n     *   ...\n     * }\n     *\n     * // apply the `renderer` option to individual columns\n     * columns: [\n     *   {\n     *     // use the `autocomplete` renderer for each cell of this column\n     *     renderer: 'autocomplete'\n     *   },\n     *   {\n     *     // use the `myCustomRenderer` renderer for each cell of this column\n     *     renderer: 'myCustomRenderer'\n     *   }\n     * ]\n     * ```\n     */\n    renderer: void 0,\n    /**\n     * The `rowHeaders` option configures your grid's row headers.\n     *\n     * You can set the `rowHeaders` option to one of the following:\n     *\n     * | Setting    | Description                                                       |\n     * | ---------- | ----------------------------------------------------------------- |\n     * | `true`     | Enable the default row headers ('1', '2', '3', ...)               |\n     * | `false`    | Disable row headers                                               |\n     * | An array   | Define your own row headers (e.g. `['One', 'Two', 'Three', ...]`) |\n     * | A function | Define your own row headers, using a function                     |\n     *\n     * Read more:\n     * - [Row header](@/guides/rows/row-header.md)\n     *\n     * @memberof Options#\n     * @type {boolean|string[]|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // enable the default row headers\n     * rowHeaders: true,\n     *\n     * // set your own row headers\n     * rowHeaders: ['One', 'Two', 'Three'],\n     *\n     * // set your own row headers, using a function\n     * rowHeaders: function(visualRowIndex) {\n     *   return `${visualRowIndex}: AB`;\n     * },\n     * ```\n     */\n    rowHeaders: void 0,\n    /**\n     * @description\n     * The `rowHeaderWidth` option configures the width of row headers.\n     *\n     * You can set the `rowHeaderWidth` option to one of the following:\n     *\n     * | Setting  | Description                                     |\n     * | -------- | ----------------------------------------------- |\n     * | A number | Set the same width for every row header         |\n     * | An array | Set different widths for individual row headers |\n     *\n     * @memberof Options#\n     * @type {number|number[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the same width for every row header\n     * rowHeaderWidth: 25,\n     *\n     * // set different widths for individual row headers\n     * rowHeaderWidth: [25, 30, 55],\n     * ```\n     */\n    rowHeaderWidth: void 0,\n    /**\n     * The `rowHeights` option sets rows' heights, in pixels.\n     *\n     * In the rendering process, the default row height is 23 px (22 px + 1 px of the row's bottom border).\n     * You can change it to equal or greater than 23px, by setting the `rowHeights` option to one of the following:\n     *\n     * | Setting     | Description                                                                                         | Example                                                      |\n     * | ----------- | --------------------------------------------------------------------------------------------------- | ------------------------------------------------------------ |\n     * | A number    | Set the same height for every row                                                                   | `rowHeights: 100`                                            |\n     * | A string    | Set the same height for every row                                                                   | `rowHeights: '100px'`                                        |\n     * | An array    | Set heights separately for each row                                                                 | `rowHeights: [100, 120, undefined]`                          |\n     * | A function  | Set row heights dynamically,<br>on each render                                                      | `rowHeights(visualRowIndex) { return visualRowIndex * 10; }` |\n     * | `undefined` | Used by the [modifyRowHeight](@/api/hooks.md#modifyRowHeight) hook,<br>to detect row height changes | `rowHeights: undefined`                                      |\n     *\n     * The `rowHeights` option also sets the minimum row height that can be set\n     * via the {@link ManualRowResize} and {@link AutoRowSize} plugins (if they are enabled).\n     *\n     * Read more:\n     * - [Row height](@/guides/rows/row-height.md)\n     *\n     * @memberof Options#\n     * @type {number|number[]|string|string[]|Array<undefined>|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set every row's height to 100px\n     * rowHeights: 100,\n     *\n     * // set every row's height to 100px\n     * rowHeights: '100px',\n     *\n     * // set the first (by visual index) row's height to 100\n     * // set the second (by visual index) row's height to 120\n     * // set the third (by visual index) row's height to `undefined`\n     * // set any other row's height to the default 23px\n     * rowHeights: [100, 120, undefined],\n     *\n     * // set each row's height individually, using a function\n     * rowHeights(visualRowIndex) {\n     *   return visualRowIndex * 10;\n     * },\n     * ```\n     */\n    rowHeights: void 0,\n    /**\n     * @description\n     * The `search` option configures the [`Search`](@/api/search.md) plugin.\n     *\n     * You can set the `search` option to one of the following:\n     *\n     * | Setting           | Description                                                                          |\n     * | ----------------- | ------------------------------------------------------------------------------------ |\n     * | `false` (default) | Disable the [`Search`](@/api/search.md) plugin                                       |\n     * | `true`            | Enable the [`Search`](@/api/search.md) plugin with the default configuration         |\n     * | An object         | - Enable the [`Search`](@/api/search.md) plugin<br>- Apply your custom configuration |\n     *\n     * If you set the `search` option to an object, you can configure the following search options:\n     *\n     * | Option              | Possible settings | Description                                                                                          |\n     * | ------------------- | ----------------- | ---------------------------------------------------------------------------------------------------- |\n     * | `searchResultClass` | A string          | Add a custom CSS class name to search results                                                        |\n     * | `queryMethod`       | A function        | Add a [custom query method](@/guides/accessories-and-menus/searching-values.md#custom-query-method)  |\n     * | `callback`          | A function        | Add a [custom callback function](@/guides/accessories-and-menus/searching-values.md#custom-callback) |\n     *\n     * Read more:\n     * - [Searching values](@/guides/accessories-and-menus/searching-values.md)\n     * - [Searching values: Custom query method](@/guides/accessories-and-menus/searching-values.md#custom-query-method)\n     * - [Searching values: Custom callback](@/guides/accessories-and-menus/searching-values.md#custom-callback)\n     *\n     * @memberof Options#\n     * @type {boolean|object}\n     * @default false\n     * @category Search\n     *\n     * @example\n     * ```js\n     * // enable the `Search` plugin with the default configuration\n     * search: true,\n     *\n     * // enable the `Search` plugin with a custom configuration\n     * search: {\n     *   // add a `customClass` CSS class name to search results\n     *   searchResultClass: 'customClass',\n     *   // add a custom query method\n     *   queryMethod(queryStr, value) {\n     *     ...\n     *   },\n     *   // add a custom callback function\n     *   callback(instance, row, column, value, result) {\n     *     ...\n     *   }\n     * }\n     * ```\n     */\n    search: false,\n    /**\n     * @description\n     * The `selectionMode` option configures how [selection](@/guides/cell-features/selection.md) works.\n     *\n     * You can set the `selectionMode` option to one of the following:\n     *\n     * | Setting      | Description                                                  |\n     * | ------------ | ------------------------------------------------------------ |\n     * | `'single'`   | Allow the user to select only one cell at a time.            |\n     * | `'range'`    | Allow the user to select one range of cells at a time.       |\n     * | `'multiple'` | Allow the user to select multiple ranges of cells at a time. |\n     *\n     * Read more:\n     * - [Selection: Selecting ranges](@/guides/cell-features/selection.md#select-ranges)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'multiple'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // you can only select one cell at at a time\n     * selectionMode: 'single',\n     *\n     * // you can select one range of cells at a time\n     * selectionMode: 'range',\n     *\n     * // you can select multiple ranges of cells at a time\n     * selectionMode: 'multiple',\n     * ```\n     */\n    selectionMode: 'multiple',\n    /**\n     * The `selectOptions` option configures options that the end user can choose from in [`select`](@/guides/cell-types/select-cell-type.md) cells.\n     *\n     * You can set the `selectOptions` option to one of the following:\n     *\n     * | Setting                         | Description                                                                   |\n     * | ------------------------------- | ----------------------------------------------------------------------------- |\n     * | An array of strings             | Each string is one option's value and label                                   |\n     * | An object with key-string pairs | - Each key is one option's value<br>- The key's string is that option's label |\n     * | A function                      | A function that returns an object with key-string pairs                       |\n     *\n     * Read more:\n     * - [Select cell type](@/guides/cell-types/select-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {string[]|object|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of each cell in this column to `select`\n     *     type: 'select',\n     *     // set the first option's value and label to `A`\n     *     // set the second option's value and label to `B`\n     *     // set the third option's value and label to `C`\n     *     selectOptions: ['A', 'B', 'C'],\n     *   },\n     *   {\n     *     // set the `type` of each cell in this column to `select`\n     *     type: 'select',\n     *     selectOptions: {\n     *       // set the first option's value to `value1` and label to `Label 1`\n     *       value1: 'Label 1',\n     *       // set the second option's value to `value2` and label to `Label 2`\n     *       value2: 'Label 2',\n     *       // set the third option's value to `value3` and label to `Label 3`\n     *       value3: 'Label 3',\n     *     },\n     *   },\n     *   {\n     *     // set the `type` of each cell in this column to `select`\n     *     type: 'select',\n     *     // set `selectOption` to a function that returns available options as an object\n     *     selectOptions(visualRow, visualColumn, prop) {\n     *       return {\n     *         value1: 'Label 1',\n     *         value2: 'Label 2',\n     *         value3: 'Label 3',\n     *       };\n     *   },\n     * ],\n     * ```\n     */\n    selectOptions: void 0,\n    /**\n     * @description\n     * The `skipColumnOnPaste` option determines whether you can paste data into a given column.\n     *\n     * You can only apply the `skipColumnOnPaste` option to an entire column, using the [`columns`](#columns) option.\n     *\n     * You can set the `skipColumnOnPaste` option to one of the following:\n     *\n     * | Setting           | Description                                                                                           |\n     * | ----------------- | ----------------------------------------------------------------------------------------------------- |\n     * | `false` (default) | Enable pasting data into this column                                                                  |\n     * | `true`            | - Disable pasting data into this column<br>- On pasting, paste data into the next column to the right |\n     *\n     * Read more:\n     * - [Configuration options: Setting column options](@/guides/getting-started/configuration-options.md#set-column-options)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // disable pasting data into this column\n     *     skipColumnOnPaste: true\n     *   }\n     * ],\n     * ```\n     */\n    skipColumnOnPaste: false,\n    /**\n     * @description\n     *\n     * The `skipRowOnPaste` option determines whether you can paste data into a given row.\n     *\n     * You can only apply the `skipRowOnPaste` option to an entire row, using the [`cells`](#cells) option.\n     *\n     * You can set the `skipRowOnPaste` option to one of the following:\n     *\n     * | Setting           | Description                                                                         |\n     * | ----------------- | ----------------------------------------------------------------------------------- |\n     * | `false` (default) | Enable pasting data into this row                                                   |\n     * | `true`            | - Disable pasting data into this row<br>- On pasting, paste data into the row below |\n     *\n     * Read more:\n     * - [Configuration options: Setting row options](@/guides/getting-started/configuration-options.md#set-row-options)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * cells(row, column) {\n     *  const cellProperties = {};\n     *\n     *  // disable pasting data into row 1\n     *  if (row === 1) {\n     *    cellProperties.skipRowOnPaste = true;\n     *  }\n     *\n     *  return cellProperties;\n     * }\n     * ```\n     */\n    skipRowOnPaste: false,\n    /**\n     * The `sortByRelevance` option configures whether [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells'\n     * lists are sorted in the same order as provided in the [`source`](#source) option.\n     *\n     * You can set the `sortByRelevance` option to one of the following:\n     *\n     * | Setting          | Description                                                                  |\n     * | ---------------- | ---------------------------------------------------------------------------- |\n     * | `true` (default) | Sort options in the same order as provided in the [`source`](#source) option |\n     * | `false`          | Sort options alphabetically                                                  |\n     *\n     * Read more:\n     * - [`source`](#source)\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [{\n     *   // set the `type` of each cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['D', 'C', 'B', 'A'],\n     *   // sort the `autocomplete` option in this order: D, C, B, A\n     *   sortByRelevance: true\n     * }],\n     * ```\n     */\n    sortByRelevance: true,\n    /**\n     * The `source` option sets options available in [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) cells.\n     *\n     * You can set the `source` option to one of the following:\n     *\n     * - An array\n     * - A function\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)\n     * - [`strict`](#strict)\n     * - [`allowHtml`](#allowHtml)\n     * - [`filter`](#filter)\n     * - [`sortByRelevance`](#sortByRelevance)\n     *\n     * @memberof Options#\n     * @type {Array|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set `source` to an array\n     * columns: [{\n     *   // set the `type` of each cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['A', 'B', 'C', 'D']\n     * }],\n     *\n     * // set `source` to a function\n     * columns: [{\n     *   // set the `type` of each cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // for every `autocomplete` cell in this column, fetch data from an external source\n     *   source(query, callback) {\n     *     fetch('https://example.com/query?q=' + query, function(response) {\n     *       callback(response.items);\n     *     })\n     *   }\n     * }],\n     * ```\n     */\n    source: void 0,\n    /**\n     * @description\n     * If the [`data`](#data) option is not set, the `startCols` option sets the initial number of empty columns.\n     *\n     * The `startCols` option works only in Handsontable's constructor.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 5\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // start with 15 empty columns\n     * startCols: 15,\n     * ```\n     */\n    startCols: 5,\n    /**\n     * @description\n     * If the [`data`](#data) option is not set, the `startRows` option sets the initial number of empty rows.\n     *\n     * The `startRows` option works only in Handsontable's constructor.\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 5\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // start with 15 empty rows\n     * startRows: 15,\n     * ```\n     */\n    startRows: 5,\n    /**\n     * @description\n     * The `stretchH` option determines what happens when the declared grid width\n     * is different from the calculated sum of all column widths.\n     *\n     * You can set the `stretchH` option to one of the following:\n     *\n     * | Setting            | Description                                                       |\n     * | ------------------ | ----------------------------------------------------------------- |\n     * | `'none'` (default) | Don't fit the grid to the container (disable column stretching)   |\n     * | `'last'`           | Fit the grid to the container, by stretching only the last column |\n     * | `'all'`            | Fit the grid to the container, by stretching all columns evenly   |\n     *\n     * Read more:\n     * - [Column width: Column stretching](@/guides/columns/column-width.md#column-stretching)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'none'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // fit the grid to the container\n     * // by stretching all columns evenly\n     * stretchH: 'all',\n     * ```\n     */\n    stretchH: 'none',\n    /**\n     * The `strict` option configures the behavior of [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md) cells.\n     *\n     * You can set the `strict` option to one of the following:\n     *\n     * | Setting | Mode                                                                                          | Description                                                                                |\n     * | ------- | --------------------------------------------------------------------------------------------- | ------------------------------------------------------------------------------------------ |\n     * | `true`  | [Strict mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-strict-mode)         | The end user:<br>- Can only choose one of suggested values<br>- Can't enter a custom value |\n     * | `false` | [Flexible mode](@/guides/cell-types/autocomplete-cell-type.md#autocomplete-flexible-mode)     | The end user:<br>- Can choose one of suggested values<br>- Can enter a custom value        |\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [`source`](#source)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *   // set the `type` of each cell in this column to `autocomplete`\n     *   type: 'autocomplete',\n     *   // set options available in every `autocomplete` cell of this column\n     *   source: ['A', 'B', 'C'],\n     *   // values entered must match `A`, `B`, or `C`\n     *   strict: true\n     *   },\n     * ],\n     * ```\n     */\n    strict: void 0,\n    /**\n     * The `tableClassName` option lets you add CSS class names\n     * to every Handsontable instance inside the `container` element.\n     *\n     * You can set the `tableClassName` option to one of the following:\n     *\n     * | Setting             | Description                                                                                |\n     * | ------------------- | ------------------------------------------------------------------------------------------ |\n     * | A string            | Add a single CSS class name to every Handsontable instance inside the `container` element  |\n     * | An array of strings | Add multiple CSS class names to every Handsontable instance inside the `container` element |\n     *\n     * Read more:\n     * - [`currentRowClassName`](#currentRowClassName)\n     * - [`currentColClassName`](#currentColClassName)\n     * - [`currentHeaderClassName`](#currentHeaderClassName)\n     * - [`activeHeaderClassName`](#activeHeaderClassName)\n     * - [`invalidCellClassName`](#invalidCellClassName)\n     * - [`placeholderCellClassName`](#placeholderCellClassName)\n     * - [`readOnlyCellClassName`](#readOnlyCellClassName)\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     * - [`commentedCellClassName`](#commentedCellClassName)\n     * - [`className`](#className)\n     *\n     * @memberof Options#\n     * @type {string|string[]}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // add a `your-class-name` CSS class name\n     * // to every Handsontable instance inside the `container` element\n     * tableClassName: 'your-class-name',\n     *\n     * // add `first-class-name` and `second-class-name` CSS class names\n     * // to every Handsontable instance inside the `container` element\n     * tableClassName: ['first-class-name', 'second-class-name'],\n     * ```\n     */\n    tableClassName: void 0,\n    /**\n     * The `tabMoves` option configures the action of the <kbd>**Tab**</kbd> key.\n     *\n     * You can set the `tabMoves` option to an object with the following properties\n     * (or to a function that returns such an object):\n     *\n     * | Property | Type   | Description                                                                                                                                              |\n     * | -------- | ------ | -------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | `row`    | Number | - On pressing <kbd>**Tab**</kbd>, move selection `row` rows down<br>- On pressing <kbd>**Shift**</kbd> + <kbd>**Tab**</kbd>, move selection `row` rows up              |\n     * | `col`    | Number | - On pressing <kbd>**Tab**</kbd>, move selection `col` columns right<br>- On pressing <kbd>**Shift**</kbd> + <kbd>**Tab**</kbd>, move selection `col` columns left     |\n     *\n     * @memberof Options#\n     * @type {object|Function}\n     * @default {row: 0, col: 1}\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // on pressing Tab, move selection 2 rows down and 2 columns right\n     * // on pressing Shift+Tab, move selection 2 rows up and 2 columns left\n     * tabMoves: {row: 2, col: 2},\n     *\n     * // the same setting, as a function\n     * // `event` is a DOM Event object received on pressing Tab\n     * // you can use it to check whether the user pressed Tab or Shift+Tab\n     * tabMoves(event) {\n     *   return {row: 2, col: 2};\n     * },\n     * ```\n     */\n    tabMoves: {\n      row: 0,\n      col: 1\n    },\n    /**\n     * @description\n     * The `title` option configures [column header](@/guides/columns/column-header.md) names.\n     *\n     * You can set the `title` option to a string.\n     *\n     * Read more:\n     * - [Column header](@/guides/columns/column-header.md)\n     * - [`columns`](#columns)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the first column header name to `First name`\n     *     title: 'First name',\n     *     type: 'text',\n     *   },\n     *   {\n     *     // set the second column header name to `Last name`\n     *     title: 'Last name',\n     *     type: 'text',\n     *   }\n     * ],\n     * ```\n     */\n    title: void 0,\n    /**\n     * The `trimDropdown` option configures the width of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.\n     *\n     * You can set the `trimDropdown` option to one of the following:\n     *\n     * | Setting          | Description                                                                     |\n     * | ---------------- | ------------------------------------------------------------------------------- |\n     * | `true` (default) | Make the dropdown/autocomplete list's width the same as the edited cell's width |\n     * | `false`          | Scale the dropdown/autocomplete list's width to the list's content              |\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     type: 'autocomplete',\n     *     // for each cell of this column\n     *     // make the `autocomplete` list's width the same as the edited cell's width\n     *     trimDropdown: true,\n     *   },\n     *   {\n     *     type: 'dropdown',\n     *     // for each cell of this column\n     *     // scale the `dropdown` list's width to the list's content\n     *     trimDropdown: false,\n     *   }\n     * ],\n     * ```\n     */\n    trimDropdown: true,\n    /**\n     * @description\n     * The `trimRows` option configures the [`TrimRows`](@/api/trimRows.md) plugin.\n     *\n     * You can set the `trimRows` option to one of the following:\n     *\n     * | Setting                          | Description                                                                                   |\n     * | -------------------------------- | --------------------------------------------------------------------------------------------- |\n     * | `false`                          | Disable the [`TrimRows`](@/api/trimRows.md) plugin                                            |\n     * | `true`                           | Enable the [`TrimRows`](@/api/trimRows.md) plugin                                             |\n     * | An array of physical row indexes | - Enable the [`TrimRows`](@/api/trimRows.md) plugin<br>- Trim selected rows at initialization |\n     *\n     * Read more:\n     * - [Plugins: `TrimRows`](@/api/trimRows.md)\n     * - [Row trimming](@/guides/rows/row-trimming.md)\n     *\n     * @memberof Options#\n     * @type {boolean|number[]}\n     * @default undefined\n     * @category TrimRows\n     *\n     * @example\n     * ```js\n     * // enable the `TrimRows` plugin\n     * trimRows: true,\n     *\n     * // enable the `TrimRows` plugin\n     * // at Handsontable's initialization, trim rows 5, 10, and 15\n     * trimRows: [5, 10, 15],\n     * ```\n     */\n    trimRows: void 0,\n    /**\n     * The `trimWhitespace` option configures automatic whitespace removal. This option\n     * affects the cell renderer and the cell editor.\n     *\n     * You can set the `trimWhitespace` option to one of the following:\n     *\n     * | Setting          | Description                                                     |\n     * | ---------------- | --------------------------------------------------------------- |\n     * | `true` (default) | Remove whitespace at the beginning and at the end of each cell |\n     * | `false`          | Don't remove whitespace                                         |\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // don't remove whitespace\n     *     // from any cell of this column\n     *     trimWhitespace: false\n     *   }\n     * ]\n     * ```\n     */\n    trimWhitespace: true,\n    /**\n     * @description\n     * The `type` option lets you set the [`renderer`](#renderer), [`editor`](#editor), and [`validator`](#validator)\n     * options all at once, by selecting a [cell type](@/guides/cell-types/cell-type.md).\n     *\n     * You can set the `type` option to one of the following:\n     *\n     * | Cell type                                                         | Renderer, editor & validator                                                                                                                                                                                                                       |\n     * | ----------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n     * | A [custom cell type](@/guides/cell-types/cell-type.md)            | Renderer: your [custom cell renderer](@/guides/cell-functions/cell-renderer.md)<br>Editor: your [custom cell editor](@/guides/cell-functions/cell-editor.md)<br>Validator: your [custom cell validator](@/guides/cell-functions/cell-validator.md) |\n     * | [`'autocomplete'`](@/guides/cell-types/autocomplete-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `AutocompleteEditor`<br>Validator: `AutocompleteValidator`                                                                         |\n     * | [`'checkbox'`](@/guides/cell-types/checkbox-cell-type.md)         | Renderer: `CheckboxRenderer`<br>Editor: `CheckboxEditor`<br>Validator: -                                                                                                                               |\n     * | [`'date'`](@/guides/cell-types/date-cell-type.md)                 | Renderer: `DateRenderer`<br>Editor: `DateEditor`<br>Validator: `DateValidator`                                                                                                 |\n     * | [`'dropdown'`](@/guides/cell-types/dropdown-cell-type.md)         | Renderer: `DropdownRenderer`<br>Editor: `DropdownEditor`<br>Validator: `DropdownValidator`                                                                                     |\n     * | [`'handsontable'`](@/guides/cell-types/handsontable-cell-type.md) | Renderer: `AutocompleteRenderer`<br>Editor: `HandsontableEditor`<br>Validator: -                                                                                                                       |\n     * | [`'numeric'`](@/guides/cell-types/numeric-cell-type.md)           | Renderer: `NumericRenderer`<br>Editor: `NumericEditor`<br>Validator: `NumericValidator`                                                                                        |\n     * | [`'password'`](@/guides/cell-types/password-cell-type.md)         | Renderer: `PasswordRenderer`<br>Editor: `PasswordEditor`<br>Validator: -                                                                                                                               |\n     * | `'text'`                                                          | Renderer: `TextRenderer`<br>Editor: `TextEditor`<br>Validator: -                                                                                                                                       |\n     * | [`'time`'](@/guides/cell-types/time-cell-type.md)                 | Renderer: `TimeRenderer`<br>Editor: `TimeEditor`<br>Validator: `TimeValidator`                                                                                                 |\n     *\n     * Read more:\n     * - [Cell type](@/guides/cell-types/cell-type.md)\n     * - [Cell renderer](@/guides/cell-functions/cell-renderer.md)\n     * - [Cell editor](@/guides/cell-functions/cell-editor.md)\n     * - [Cell validator](@/guides/cell-functions/cell-validator.md)\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     * - [`renderer`](#renderer)\n     * - [`editor`](#editor)\n     * - [`validator`](#validator)\n     *\n     * @memberof Options#\n     * @type {string}\n     * @default 'text'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the `numeric` cell type for each cell of the entire grid\n     * type: `'numeric'`,\n     *\n     * // apply the `type` option to individual columns\n     * columns: [\n     *   {\n     *     // set the `autocomplete` cell type for each cell of this column\n     *     type: 'autocomplete'\n     *   },\n     *   {\n     *     // set the `myCustomCellType` cell type for each cell of this column\n     *     type: 'myCustomCellType'\n     *   }\n     * ]\n     * ```\n     */\n    type: 'text',\n    /**\n     * The `uncheckedTemplate` option lets you configure what value\n     * an unchecked [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell has.\n     *\n     * You can set the `uncheckedTemplate` option to one of the following:\n     *\n     * | Setting           | Description                                                                                                                                                                                |\n     * | ----------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n     * | `false` (default) | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns `false`                 |\n     * | A string          | If a [`checkbox`](@/guides/cell-types/checkbox-cell-type.md) cell is unchecked,<br>the [`getDataAtCell`](@/api/core.md#getDataAtCell) method for this cell returns a string of your choice |\n     *\n     * Read more:\n     * - [Checkbox cell type: Checkbox template](@/guides/cell-types/checkbox-cell-type.md#checkbox-template)\n     * - [`getDataAtCell()`](@/api/core.md#getDataAtCell)\n     * - [`checkedTemplate`](#checkedTemplate)\n     *\n     * @memberof Options#\n     * @type {boolean|string|number}\n     * @default false\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     // set the `type` of each cell in this column to `checkbox`\n     *     // when unchecked, the cell's value is `false`\n     *     // when checked, the cell's value is `true`\n     *     type: 'checkbox',\n     *   },\n     *   {\n     *     // set the `type` of each cell in this column to `checkbox`\n     *     // when unchecked, the cell's value is `'No'`\n     *     // when checked, the cell's value is `'Yes'`\n     *     type: 'checkbox',\n     *     uncheckedTemplate: 'No'\n     *     checkedTemplate: 'Yes',\n     *  }\n     * ],\n     * ```\n     */\n    uncheckedTemplate: void 0,\n    /**\n     * The `undo` option configures the [`UndoRedo`](@/api/undoRedo.md) plugin.\n     *\n     * You can set the `undo` option to one of the following:\n     *\n     * | Setting | Description                                        |\n     * | ------- | -------------------------------------------------- |\n     * | `true`  | Enable the [`UndoRedo`](@/api/undoRedo.md) plugin  |\n     * | `false` | Disable the [`UndoRedo`](@/api/undoRedo.md) plugin |\n     *\n     * By default, the `undo` option is set to `undefined`,\n     * but the [`UndoRedo`](@/api/undoRedo.md) plugin acts as enabled.\n     * To disable the [`UndoRedo`](@/api/undoRedo.md) plugin completely,\n     * set the `undo` option to `false`.\n     *\n     * Read more:\n     * - [Undo and redo](@/guides/accessories-and-menus/undo-redo.md)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default undefined\n     * @category UndoRedo\n     *\n     * @example\n     * ```js\n     * // enable the `UndoRedo` plugin\n     * undo: true,\n     * ```\n     */\n    undo: void 0,\n    /**\n     * @description\n     * The `validator` option sets a [cell validator](@/guides/cell-functions/cell-validator.md) for a cell.\n     *\n     * You can set the `validator` option to one of the following:\n     *\n     * | Setting              | Description                                                                      |\n     * | -------------------- | -------------------------------------------------------------------------------- |\n     * | A string             | A [cell validator alias](@/guides/cell-functions/cell-validator.md)              |\n     * | A function           | Your [custom cell validator function](@/guides/cell-functions/cell-validator.md) |\n     * | A regular expression | A regular expression used for cell validation                                    |\n     *\n     * By setting the `validator` option to a string,\n     * you can use one of the following [cell validator aliases](@/guides/cell-functions/cell-validator.md):\n     *\n     * | Alias               | Cell validator function                                                 |\n     * | ------------------- | ----------------------------------------------------------------------- |\n     * | A custom alias      | Your [custom cell validator](@/guides/cell-functions/cell-validator.md) |\n     * | `'autocomplete'`    | `AutocompleteValidator`                                                 |\n     * | `'date'`            | `DateValidator`                                                         |\n     * | `'dropdown'`        | `DropdownValidator`                                                     |\n     * | `'numeric'`         | `NumericValidator`                                                      |\n     * | `'time'`            | `TimeValidator`                                                         |\n     *\n     * To set the [`editor`](#editor), [`renderer`](#renderer), and [`validator`](#validator)\n     * options all at once, use the [`type`](#type) option.\n     *\n     * Read more:\n     * - [Cell validator](@/guides/cell-functions/cell-validator.md)\n     * - [Cell type](@/guides/cell-types/cell-type.md)\n     * - [Configuration options: Cascading configuration](@/guides/getting-started/configuration-options.md#cascading-configuration)\n     * - [`type`](#type)\n     *\n     * @memberof Options#\n     * @type {Function|RegExp|string}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *    {\n     *      // use a built-in `numeric` cell validator\n     *      validator: 'numeric'\n     *    },\n     *    {\n     *      // validate against a regular expression\n     *      validator: /^[0-9]$/\n     *    },\n     *    {\n     *      // add a custom cell validator function\n     *      validator(value, callback) {\n     *          ...\n     *      }\n     *    },\n     * ],\n     * ```\n     */\n    validator: void 0,\n    /**\n     * @description\n     * The `viewportColumnRenderingOffset` option configures the number of columns\n     * to be rendered outside of the grid's viewport.\n     *\n     * You can set the `viewportColumnRenderingOffset` option to one of the following:\n     *\n     * | Setting            | Description                                             |\n     * | ------------------ | ------------------------------------------------------- |\n     * | `auto` (default)   | Use the offset calculated automatically by Handsontable |\n     * | A number           | Set the offset manually                                 |\n     *\n     * Read more:\n     * - [Performance: Define the number of pre-rendered rows and columns](@/guides/optimization/performance.md#define-the-number-of-pre-rendered-rows-and-columns)\n     *\n     * @memberof Options#\n     * @type {number|string}\n     * @default 'auto'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // render 70 columns outside of the grid's viewport\n     * viewportColumnRenderingOffset: 70,\n     * ```\n     */\n    viewportColumnRenderingOffset: 'auto',\n    /**\n     * @description\n     * The `viewportRowRenderingOffset` option configures the number of rows\n     * to be rendered outside of the grid's viewport.\n     *\n     * You can set the `viewportRowRenderingOffset` option to one of the following:\n     *\n     * | Setting            | Description                                             |\n     * | ------------------ | ------------------------------------------------------- |\n     * | `auto` (default)   | Use the offset calculated automatically by Handsontable |\n     * | A number           | Set the offset manually                                 |\n     *\n     * Read more:\n     * - [Performance: Define the number of pre-rendered rows and columns](@/guides/optimization/performance.md#define-the-number-of-pre-rendered-rows-and-columns)\n     * - [Column virtualization](@/guides/columns/column-virtualization.md)\n     *\n     * @memberof Options#\n     * @type {number|string}\n     * @default 'auto'\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // render 70 rows outside of the grid's viewport\n     * viewportRowRenderingOffset: 70,\n     * ```\n     */\n    viewportRowRenderingOffset: 'auto',\n    /**\n     * The `visibleRows` option sets the height of the [`autocomplete`](@/guides/cell-types/autocomplete-cell-type.md)\n     * and [`dropdown`](@/guides/cell-types/dropdown-cell-type.md) lists.\n     *\n     * When the number of list options exceeds the `visibleRows` number, a scrollbar appears.\n     *\n     * Read more:\n     * - [Autocomplete cell type](@/guides/cell-types/autocomplete-cell-type.md)\n     * - [Dropdown cell type](@/guides/cell-types/dropdown-cell-type.md)\n     *\n     * @memberof Options#\n     * @type {number}\n     * @default 10\n     * @category Core\n     *\n     * @example\n     * ```js\n     * columns: [\n     *   {\n     *     type: 'autocomplete',\n     *     // set the `autocomplete` list's height to 15 options\n     *     // for each cell of this column\n     *     visibleRows: 15,\n     *   },\n     *   {\n     *     type: 'dropdown',\n     *     // set the `dropdown` list's height to 5 options\n     *     // for each cell of this column\n     *     visibleRows: 5,\n     *   }\n     * ],\n     * ```\n     */\n    visibleRows: 10,\n    /**\n     * The `width` option configures the width of your grid.\n     *\n     * You can set the `width` option to one of the following:\n     *\n     * | Setting                                                                    | Example                   |\n     * | -------------------------------------------------------------------------- | ------------------------- |\n     * | A number of pixels                                                         | `width: 500`              |\n     * | A string with a [CSS unit](https://www.w3schools.com/cssref/css_units.asp) | `width: '75vw'`           |\n     * | A function that returns a valid number or string                           | `width() { return 500; }` |\n     *\n     * Read more:\n     * - [Grid size](@/guides/getting-started/grid-size.md)\n     *\n     * @memberof Options#\n     * @type {number|string|Function}\n     * @default undefined\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set the grid's width to 500px\n     * width: 500,\n     *\n     * // set the grid's width to 75vw\n     * width: '75vw',\n     *\n     * // set the grid's width to 500px, using a function\n     * width() {\n     *   return 500;\n     * },\n     * ```\n     */\n    width: void 0,\n    /**\n     * The `wordWrap` option configures whether content that exceeds a column's width is wrapped or not.\n     *\n     * You can set the `wordWrap` option to one of the following:\n     *\n     * | Setting          | Description                                             |\n     * | ---------------- | ------------------------------------------------------- |\n     * | `true` (default) | If content exceeds the column's width, wrap the content |\n     * | `false`          | Don't wrap content                                      |\n     *\n     * To style cells that don't wrap content, use the [`noWordWrapClassName`](#noWordWrapClassName) option.\n     *\n     * Read more:\n     * - [`noWordWrapClassName`](#noWordWrapClassName)\n     *\n     * @memberof Options#\n     * @type {boolean}\n     * @default true\n     * @category Core\n     *\n     * @example\n     * ```js\n     * // set column width for every column of the entire grid\n     * colWidths: 100,\n     *\n     * columns: [\n     *   {\n     *     // don't wrap content in this column\n     *     wordWrap: false,\n     *   },\n     *   {\n     *     // if content exceeds this column's width, wrap the content\n     *     wordWrap: true,\n     *   }\n     * ],\n     * ```\n     */\n    wordWrap: true\n\n    /* eslint-enable jsdoc/require-description-complete-sentence */\n  };\n});","import { extend } from \"../../../helpers/object.mjs\";\nimport { extendByMetaType } from \"../utils.mjs\";\nimport metaSchemaFactory from \"../metaSchema.mjs\";\n/**\n * @typedef {Options} TableMeta\n */\n/**\n * @returns {TableMeta} Returns an empty object. The holder for global meta object.\n */\nfunction createTableMetaEmptyClass() {\n  return class TableMeta {};\n}\n\n/**\n * The global meta object is a root of all default settings, which are recognizable by Handsontable.\n * Other layers are inherited from this object. Adding, removing, or changing property in that\n * object has a direct reflection to all layers such as: TableMeta, ColumnMeta, or CellMeta layers.\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\nexport default class GlobalMeta {\n  constructor(hot) {\n    /**\n     * An alias for the constructor. Necessary for inheritance for creating new layers.\n     *\n     * @type {TableMeta}\n     */\n    this.metaCtor = createTableMetaEmptyClass();\n    /**\n     * Main object (prototype of the internal TableMeta class), holder for all default settings.\n     *\n     * @type {object}\n     */\n    this.meta = this.metaCtor.prototype;\n    extend(this.meta, metaSchemaFactory());\n    this.meta.instance = hot;\n  }\n\n  /**\n   * Gets constructor of the global meta object. Necessary for inheritance for creating the next meta layers.\n   *\n   * @returns {Function}\n   */\n  getMetaConstructor() {\n    return this.metaCtor;\n  }\n\n  /**\n   * Gets settings object for this layer.\n   *\n   * @returns {object}\n   */\n  getMeta() {\n    return this.meta;\n  }\n\n  /**\n   * Updates global settings object by merging settings with the current state.\n   *\n   * @param {object} settings An object to merge with.\n   */\n  updateMeta(settings) {\n    var _settings$type;\n    extend(this.meta, settings);\n    extendByMetaType(this.meta, {\n      ...settings,\n      type: (_settings$type = settings.type) !== null && _settings$type !== void 0 ? _settings$type : this.meta.type\n    }, settings);\n  }\n}","import { extend } from \"../../../helpers/object.mjs\";\nimport { extendByMetaType } from \"../utils.mjs\";\n/**\n * The table meta object is a layer that keeps all settings of the Handsontable that was passed in\n * the constructor. That layer contains all default settings inherited from the GlobalMeta layer\n * merged with settings passed by the developer. Adding, removing, or changing property in that\n * object has no direct reflection on any other layers.\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\nexport default class TableMeta {\n  constructor(globalMeta) {\n    const MetaCtor = globalMeta.getMetaConstructor();\n\n    /**\n     * Main object (instance of the internal TableMeta class from GlobalMeta), holder for all settings defined in the table scope.\n     *\n     * @type {TableMeta}\n     */\n    this.meta = new MetaCtor();\n  }\n\n  /**\n   * Gets settings object for this layer.\n   *\n   * @returns {TableMeta}\n   */\n  getMeta() {\n    return this.meta;\n  }\n\n  /**\n   * Updates table settings object by merging settings with the current state.\n   *\n   * @param {object} settings An object to merge with.\n   */\n  updateMeta(settings) {\n    extend(this.meta, settings);\n    extendByMetaType(this.meta, settings, settings);\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { arrayFilter } from \"../../helpers/array.mjs\";\nimport { assert, isUnsignedNumber, isNullish } from \"./utils.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @class LazyFactoryMap\n *\n * The LazyFactoryMap object holds key-value pairs in the structure similar to the\n * regular Map. Once created, items can be moved around a grid depending on the operations\n * performed on that grid - adding or removing rows. The collection requires \"key\"\n * to be a zero-based index.\n *\n * It's essential to notice that the \"key\" index under which the item was created\n * is volatile. After altering the grid, the \"key\" index can change.\n *\n * Having created N items with corresponding example data where the data has 10\n * holes (`undefined` values) within (that's why internal storage index counts from 10).\n * +------+------+------+------+------+.\n * | 0/10 | 1/11 | 2/12 | 3/13 | 4/14 |  Keys (volatile zero-based index / internal storage index)\n * +------+------+------+------+------+.\n *    │      │      │      │      │\n * +------+------+------+------+------+.\n * | AAA  | BBB  | CCC  | DDD  | EEE  |  Data\n * +------+------+------+------+------+.\n *\n * Map.obtain(0) // returns \"AAA\"\n * map.obtain(2) // returns \"CCC\".\n *\n * After inserting 2 new rows, keys that hold the data positioned after the place\n * where the new rows are added are upshifted by 2.\n *               │\n *               │ Insert 2 rows\n *              \\│/\n * +------+------+------+------+------+.\n * | 0/10 | 1/11 | 2/12 | 3/13 | 4/14 |  Keys before\n * +------+------+------+------+------+.\n *\n *                / 2 new rows \\\n * +------+------+------+------+------+------+------+.\n * | 0/10 | 1/11 | 2/15 | 3/16 | 4/12 | 5/13 | 6/14 |  Keys after\n * +------+------+------+------+------+------+------+.\n *    │       │      │      │      │      │     │\n *    │       │      └──────┼──────┼──────┼┐    │\n *    │       │             └──────┼──────┼┼────┼┐\n *    │       │      ┌─────────────┘      ││    ││\n *    │       │      │      ┌─────────────┘│    ││\n *    │       │      │      │      ┌───────┼────┘│\n *    │       │      │      │      │       │     │\n * +------+------+------+------+------+------+------+.\n * | AAA  | BBB  | CCC  | DDD  | EEE  | FFF  | GGG  |  Data\n * +------+------+------+------+------+------+------+\n *\n * Now at index 2 and 3 we have access to new items.\n *\n * map.obtain(2) // returns new value \"FFF\" for newly created row.\n * map.obtain(4) // index shifted by 2 has access to the old \"CCC\" value, as before inserting.\n *\n * after removing 4 rows, keys that hold the data positioned after the place where the\n * rows are removed are downshifted by 4.\n *        │\n *        │ Remove 4 rows\n *        ├───────────────────────────┐\n *       \\│/                          │\n * +------+------+------+------+------+------+------+\n * | 0/10 | 1/11 | 2/15 | 3/16 | 4/12 | 5/13 | 6/14 |  Keys after\n * +------+------+------+------+------+------+------+\n *    │       │      │      │      │      │     │\n *    │       │      └──────┼──────┼──────┼┐    │\n *    │       │             └──────┼──────┼┼────┼┐\n *    │       │      ┌─────────────┘      ││    ││\n *    │       │      │      ┌─────────────┘│    ││\n *    │       │      │      │      ┌───────┼────┘│\n *    │       │      │      │      │       │     │\n * +------+------+------+------+------+------+------+\n * | AAA  | BBB  | CCC  | DDD  | EEE  | FFF  | GGG  |  Data\n * +------+------+------+------+------+------+------+\n *\n * +------+------+------+\n * | 0/10 | 1/13 | 2/14 |  Keys after\n * +------+------+------+\n *    │       │      │\n *    │       │      └─────────────┐\n *    │       └────────────┐       │\n *    │                    │       │\n *    │                    │       │\n *    │                    │       │\n *    │                    │       │\n * +------+------+------+------+------+------+------+\n * | AAA  | BBB  | CCC  | DDD  | EEE  | FFF  | GGG  |  Data\n * +------+------+------+------+------+------+------+\n *           /│\\   /│\\                   /│\\   /│\\\n *            └──┬──┘                     └──┬──┘\n *           This data is marked as \"hole\" which\n *           means that can be replaced by new item\n *           when that will be created.\n *\n * map.obtain(2) // returns the value (\"EEE\") as it should. Access to the value is\n *               // changed (the key was downshifted). However, the internal index has not changed,\n *               // which means that the data does not need to be changed (spliced) too.\n *\n * After previous remove operation which creates some \"holes\" obtaining new\n * items replaces that \"holes\" as follows:\n *\n * // Obtains new item\n * map.obtain(90) // Returns \"NEW\" value\n *\n * +------+------+------+...+------+\n * | 0/10 | 1/13 | 2/14 |   | 90/0 |  Keys after\n * +------+------+------+...+------+\n *    │       │      │          │\n *    │       │      └──────────┼────────────┐\n *    │       └─────────────────┼─────┐      │\n *    └──────────┐              │     │      │\n *               │              │     │      │\n *    ┌──────────┼──────────────┘     │      │\n *    │          │                    │      │\n * +------+...+------+------+------+------+------+-----+\n * | NEW  |   | AAA  | BBB  | CCC  | DDD  | EEE  | FFF |  Data\n * +------+...+------+------+------+------+------+-----+\n *   /│\\\n *    │\n * The first \"hole\" (at index 0) item is permanently removed and replaced by a new item.\n * The hole index is taken from the hole collection which act as FIFO (First In First Out).\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\nexport default class LazyFactoryMap {\n  constructor(valueFactory) {\n    this.valueFactory = valueFactory;\n    /**\n     * An array which contains data.\n     *\n     * @type {Array}\n     */\n    this.data = [];\n    /**\n     * An array of indexes where the key of the array is mapped to the value which points to the\n     * specific position of the data array.\n     *\n     * @type {number[]}\n     */\n    this.index = [];\n    /**\n     * The collection of indexes that points to the data items which can be replaced by obtaining new\n     * ones. The \"holes\" are an intended effect of deleting entries.\n     *\n     * The idea of \"holes\" generally allows us to not modify the \"data\" structure while removing\n     * items from the collection.\n     *\n     * @type {Set<number>}\n     */\n    this.holes = new Set();\n  }\n\n  /**\n   * Gets or if data not exist creates and returns new data.\n   *\n   * @param {number} key The item key as zero-based index.\n   * @returns {*}\n   */\n  obtain(key) {\n    assert(() => isUnsignedNumber(key), 'Expecting an unsigned number.');\n    const dataIndex = this._getStorageIndexByKey(key);\n    let result;\n    if (dataIndex >= 0) {\n      result = this.data[dataIndex];\n      if (result === void 0) {\n        result = this.valueFactory(key);\n        this.data[dataIndex] = result;\n      }\n    } else {\n      result = this.valueFactory(key);\n      if (this.holes.size > 0) {\n        const reuseIndex = this.holes.values().next().value; // Gets first item from the collection\n\n        this.holes.delete(reuseIndex);\n        this.data[reuseIndex] = result;\n        this.index[key] = reuseIndex;\n      } else {\n        this.data.push(result);\n        this.index[key] = this.data.length - 1;\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Inserts an empty data to the map. This method creates an empty space for obtaining\n   * new data.\n   *\n   * @param {number} key The key as volatile zero-based index at which to begin inserting space for new data.\n   * @param {number} [amount=1] Ammount of data to insert.\n   */\n  insert(key) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    assert(() => isUnsignedNumber(key) || isNullish(key), 'Expecting an unsigned number or null/undefined argument.');\n    const newIndexes = [];\n    const dataLength = this.data.length;\n    for (let i = 0; i < amount; i++) {\n      newIndexes.push(dataLength + i);\n      this.data.push(void 0);\n    }\n    const insertionIndex = isNullish(key) ? this.index.length : key;\n    this.index = [...this.index.slice(0, insertionIndex), ...newIndexes, ...this.index.slice(insertionIndex)];\n  }\n\n  /**\n   * Removes (soft remove) data from \"index\" and according to the amount of data.\n   *\n   * @param {number} key The key as volatile zero-based index at which to begin removing the data.\n   * @param {number} [amount=1] Ammount data to remove.\n   */\n  remove(key) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    assert(() => isUnsignedNumber(key) || isNullish(key), 'Expecting an unsigned number or null/undefined argument.');\n    const removed = this.index.splice(isNullish(key) ? this.index.length - amount : key, amount);\n    for (let i = 0; i < removed.length; i++) {\n      const removedIndex = removed[i];\n      if (typeof removedIndex === 'number') {\n        this.holes.add(removedIndex);\n      }\n    }\n  }\n\n  /**\n   * Returns the size of the data which this map holds.\n   *\n   * @returns {number}\n   */\n  size() {\n    return this.data.length - this.holes.size;\n  }\n\n  /**\n   * Returns a new Iterator object that contains the values for each item in the LazyMap object.\n   *\n   * @returns {Iterator}\n   */\n  values() {\n    return arrayFilter(this.data, (_, index) => !this.holes.has(index))[Symbol.iterator]();\n  }\n\n  /**\n   * Returns a new Iterator object that contains an array of `[index, value]` for each item in the LazyMap object.\n   *\n   * @returns {Iterator}\n   */\n  entries() {\n    const validEntries = [];\n    for (let i = 0; i < this.data.length; i++) {\n      const keyIndex = this._getKeyByStorageIndex(i);\n      if (keyIndex !== -1) {\n        validEntries.push([keyIndex, this.data[i]]);\n      }\n    }\n    let dataIndex = 0;\n    return {\n      next: () => {\n        if (dataIndex < validEntries.length) {\n          const value = validEntries[dataIndex];\n          dataIndex += 1;\n          return {\n            value,\n            done: false\n          };\n        }\n        return {\n          done: true\n        };\n      }\n    };\n  }\n\n  /**\n   * Clears the map.\n   */\n  clear() {\n    this.data = [];\n    this.index = [];\n    this.holes.clear();\n  }\n\n  /**\n   * Gets storage index calculated from the key associated with the specified value.\n   *\n   * @param {number} key Volatile zero-based index.\n   * @returns {number} Returns index 0-N or -1 if no storage index found.\n   */\n  _getStorageIndexByKey(key) {\n    return this.index.length > key ? this.index[key] : -1;\n  }\n\n  /**\n   * Gets the key associated with the specified value calculated from storage index.\n   *\n   * @param {number} dataIndex Zero-based storage index.\n   * @returns {number} Returns index 0-N or -1 if no key found.\n   */\n  _getKeyByStorageIndex(dataIndex) {\n    return this.index.indexOf(dataIndex);\n  }\n\n  /**\n   * Makes this object iterable.\n   *\n   * @returns {Iterator}\n   */\n  [Symbol.iterator]() {\n    return this.entries();\n  }\n}","import { extend } from \"../../../helpers/object.mjs\";\nimport { columnFactory, extendByMetaType } from \"../utils.mjs\";\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\n/**\n * List of props which have to be cleared in the column meta-layer. That props have a\n * different meaning when using in column meta.\n *\n * @type {string[]}\n */\nconst COLUMNS_PROPS_CONFLICTS = ['data', 'width'];\n\n/**\n * The column meta object is a root of all settings defined in the column property of the Handsontable\n * settings. Each column in the Handsontable is associated with a unique meta object which is managed by\n * this layer. Adding, removing, or changing property in that object has a direct reflection only for\n * the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower\n * layers (prototype lookup).\n *\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n */\nexport default class ColumnMeta {\n  constructor(globalMeta) {\n    /**\n     * Reference to the GlobalMeta layer. While creating new column meta objects, all new objects\n     * inherit properties from the GlobalMeta layer.\n     *\n     * @type {GlobalMeta}\n     */\n    this.globalMeta = globalMeta;\n    /**\n     * The LazyFactoryMap structure, holder for column meta objects where each column meta is\n     * stored under the physical column index.\n     *\n     * @type {LazyFactoryMap}\n     */\n    this.metas = new LazyFactoryMap(() => this._createMeta());\n  }\n\n  /**\n   * Updates column meta object by merging settings with the current state.\n   *\n   * @param {number} physicalColumn The physical column index which points what column meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n  updateMeta(physicalColumn, settings) {\n    const meta = this.getMeta(physicalColumn);\n    extend(meta, settings);\n    extendByMetaType(meta, settings);\n  }\n\n  /**\n   * Creates one or more columns at specific position.\n   *\n   * @param {number} physicalColumn The physical column index which points from what position the column is added.\n   * @param {number} amount An amount of columns to add.\n   */\n  createColumn(physicalColumn, amount) {\n    this.metas.insert(physicalColumn, amount);\n  }\n\n  /**\n   * Removes one or more columns from the collection.\n   *\n   * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n   * @param {number} amount An amount columns to remove.\n   */\n  removeColumn(physicalColumn, amount) {\n    this.metas.remove(physicalColumn, amount);\n  }\n\n  /**\n   * Gets settings object for this layer.\n   *\n   * @param {number} physicalColumn The physical column index.\n   * @returns {object}\n   */\n  getMeta(physicalColumn) {\n    return this.metas.obtain(physicalColumn);\n  }\n\n  /**\n   * Gets constructor of the column meta object. Necessary for inheritance - creating the next meta layers.\n   *\n   * @param {number} physicalColumn The physical column index.\n   * @returns {Function}\n   */\n  getMetaConstructor(physicalColumn) {\n    return this.metas.obtain(physicalColumn).constructor;\n  }\n\n  /**\n   * Clears all saved column meta objects.\n   */\n  clearCache() {\n    this.metas.clear();\n  }\n\n  /**\n   * Creates and returns new column meta object with properties inherited from the global meta layer.\n   *\n   * @private\n   * @returns {object}\n   */\n  _createMeta() {\n    return columnFactory(this.globalMeta.getMetaConstructor(), COLUMNS_PROPS_CONFLICTS).prototype;\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { extend } from \"../../../helpers/object.mjs\";\nimport { extendByMetaType, assert, isUnsignedNumber } from \"../utils.mjs\";\nimport LazyFactoryMap from \"../lazyFactoryMap.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @class CellMeta\n *\n * The cell meta object is a root of all settings defined for the specific cell rendered by the\n * Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't\n * exist in that layer, it is looked up through a prototype to the highest layer. Starting\n * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,\n * removing, or changing property in that object has no direct reflection on any other layers.\n *\n * +-------------+\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\nexport default class CellMeta {\n  constructor(columnMeta) {\n    /**\n     * Reference to the ColumnMeta layer. While creating new cell meta objects, all new objects\n     * inherit properties from the ColumnMeta layer.\n     *\n     * @type {ColumnMeta}\n     */\n    this.columnMeta = columnMeta;\n    /**\n     * Holder for cell meta objects, organized as a grid of LazyFactoryMap of LazyFactoryMaps.\n     * The access to the cell meta object is done through access to the row defined by the physical\n     * row index and then by accessing the second LazyFactory Map under the physical column index.\n     *\n     * @type {LazyFactoryMap<number, LazyFactoryMap<number, object>>}\n     */\n    this.metas = new LazyFactoryMap(() => this._createRow());\n  }\n\n  /**\n   * Updates cell meta object by merging settings with the current state.\n   *\n   * @param {number} physicalRow The physical row index which points what cell meta object is updated.\n   * @param {number} physicalColumn The physical column index which points what cell meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n  updateMeta(physicalRow, physicalColumn, settings) {\n    const meta = this.getMeta(physicalRow, physicalColumn);\n    extend(meta, settings);\n    extendByMetaType(meta, settings);\n  }\n\n  /**\n   * Creates one or more rows at specific position.\n   *\n   * @param {number} physicalRow The physical row index which points from what position the row is added.\n   * @param {number} amount An amount of rows to add.\n   */\n  createRow(physicalRow, amount) {\n    this.metas.insert(physicalRow, amount);\n  }\n\n  /**\n   * Creates one or more columns at specific position.\n   *\n   * @param {number} physicalColumn The physical column index which points from what position the column is added.\n   * @param {number} amount An amount of columns to add.\n   */\n  createColumn(physicalColumn, amount) {\n    for (let i = 0; i < this.metas.size(); i++) {\n      this.metas.obtain(i).insert(physicalColumn, amount);\n    }\n  }\n\n  /**\n   * Removes one or more rows from the collection.\n   *\n   * @param {number} physicalRow The physical row index which points from what position the row is removed.\n   * @param {number} amount An amount of rows to remove.\n   */\n  removeRow(physicalRow, amount) {\n    this.metas.remove(physicalRow, amount);\n  }\n\n  /**\n   * Removes one or more columns from the collection.\n   *\n   * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n   * @param {number} amount An amount of columns to remove.\n   */\n  removeColumn(physicalColumn, amount) {\n    for (let i = 0; i < this.metas.size(); i++) {\n      this.metas.obtain(i).remove(physicalColumn, amount);\n    }\n  }\n\n  /**\n   * Gets settings object for this layer.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {string} [key] If the key exists its value will be returned, otherwise the whole cell meta object.\n   * @returns {object}\n   */\n  getMeta(physicalRow, physicalColumn, key) {\n    const cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n    if (key === void 0) {\n      return cellMeta;\n    }\n    return cellMeta[key];\n  }\n\n  /**\n   * Sets settings object for this layer defined by \"key\" property.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {string} key The property name to set.\n   * @param {*} value Value to save.\n   */\n  setMeta(physicalRow, physicalColumn, key, value) {\n    var _cellMeta$_automatica;\n    const cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n    (_cellMeta$_automatica = cellMeta._automaticallyAssignedMetaProps) === null || _cellMeta$_automatica === void 0 || _cellMeta$_automatica.delete(key);\n    cellMeta[key] = value;\n  }\n\n  /**\n   * Removes a property defined by the \"key\" argument from the cell meta object.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {string} key The property name to remove.\n   */\n  removeMeta(physicalRow, physicalColumn, key) {\n    const cellMeta = this.metas.obtain(physicalRow).obtain(physicalColumn);\n    delete cellMeta[key];\n  }\n\n  /**\n   * Returns all cell meta objects that were created during the Handsontable operation. As cell meta\n   * objects are created lazy, the length of the returned collection depends on how and when the\n   * table has asked for access to that meta objects.\n   *\n   * @returns {object[]}\n   */\n  getMetas() {\n    const metas = [];\n    const rows = Array.from(this.metas.values());\n    for (let row = 0; row < rows.length; row++) {\n      metas.push(...rows[row].values());\n    }\n    return metas;\n  }\n\n  /**\n   * Returns all cell meta objects that were created during the Handsontable operation but for\n   * specific row index.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @returns {object[]}\n   */\n  getMetasAtRow(physicalRow) {\n    assert(() => isUnsignedNumber(physicalRow), 'Expecting an unsigned number.');\n    const rowsMeta = new Map(this.metas);\n    return rowsMeta.has(physicalRow) ? Array.from(rowsMeta.get(physicalRow).values()) : [];\n  }\n\n  /**\n   * Clears all saved cell meta objects.\n   */\n  clearCache() {\n    this.metas.clear();\n  }\n\n  /**\n   * Creates and returns new structure for cell meta objects stored in columnar axis.\n   *\n   * @private\n   * @returns {object}\n   */\n  _createRow() {\n    return new LazyFactoryMap(physicalColumn => this._createMeta(physicalColumn));\n  }\n\n  /**\n   * Creates and returns new cell meta object with properties inherited from the column meta layer.\n   *\n   * @private\n   * @param {number} physicalColumn The physical column index.\n   * @returns {object}\n   */\n  _createMeta(physicalColumn) {\n    const ColumnMeta = this.columnMeta.getMetaConstructor(physicalColumn);\n    return new ColumnMeta();\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nimport GlobalMeta from \"./metaLayers/globalMeta.mjs\";\nimport TableMeta from \"./metaLayers/tableMeta.mjs\";\nimport ColumnMeta from \"./metaLayers/columnMeta.mjs\";\nimport CellMeta from \"./metaLayers/cellMeta.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\n/**\n * With the Meta Manager class, it can be possible to manage with meta objects for different layers in\n * one place. All coordinates used to fetch, updating, removing, or creating rows or columns have to\n * be passed as physical values.\n *\n * The diagram of the meta layers:\n * +-------------+.\n * │ GlobalMeta  │\n * │ (prototype) │\n * +-------------+\\\n *       │         \\\n *       │          \\\n *      \\│/         _\\|\n * +-------------+    +-------------+.\n * │ TableMeta   │    │ ColumnMeta  │\n * │ (instance)  │    │ (prototype) │\n * +-------------+    +-------------+.\n *                         │\n *                         │\n *                        \\│/\n *                    +-------------+.\n *                    │  CellMeta   │\n *                    │ (instance)  │\n *                    +-------------+.\n *\n * A more detailed description of the specific layers can be found in the \"metaLayers/\" modules description.\n */\nexport default class MetaManager {\n  constructor(hot) {\n    let customSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let metaMods = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    /**\n     * @type {Handsontable}\n     */\n    this.hot = hot;\n    /**\n     * @type {GlobalMeta}\n     */\n    this.globalMeta = new GlobalMeta(hot);\n    /**\n     * @type {TableMeta}\n     */\n    this.tableMeta = new TableMeta(this.globalMeta);\n    /**\n     * @type {ColumnMeta}\n     */\n    this.columnMeta = new ColumnMeta(this.globalMeta);\n    /**\n     * @type {CellMeta}\n     */\n    this.cellMeta = new CellMeta(this.columnMeta);\n    metaMods.forEach(ModifierClass => new ModifierClass(this));\n    this.globalMeta.updateMeta(customSettings);\n  }\n\n  /**\n   * Gets the global meta object that is a root of all default settings, which are recognizable by Handsontable.\n   * Other layers inherites all properties from this. Adding, removing, or changing property in that\n   * object has a direct reflection to all layers.\n   *\n   * @returns {object}\n   */\n  getGlobalMeta() {\n    return this.globalMeta.getMeta();\n  }\n\n  /**\n   * Updates global settings object by merging settings with the current state.\n   *\n   * @param {object} settings An object to merge with.\n   */\n  updateGlobalMeta(settings) {\n    this.globalMeta.updateMeta(settings);\n  }\n\n  /**\n   * Gets settings object that was passed in the Handsontable constructor. That layer contains all\n   * default settings inherited from the GlobalMeta layer merged with settings passed by the developer.\n   * Adding, removing, or changing property in that object has no direct reflection on any other layers.\n   *\n   * @returns {TableMeta}\n   */\n  getTableMeta() {\n    return this.tableMeta.getMeta();\n  }\n\n  /**\n   * Updates table settings object by merging settings with the current state.\n   *\n   * @param {object} settings An object to merge with.\n   */\n  updateTableMeta(settings) {\n    this.tableMeta.updateMeta(settings);\n  }\n\n  /**\n   * Gets column meta object that is a root of all settings defined in the column property of the Handsontable\n   * settings. Each column in the Handsontable is associated with a unique meta object which identified by\n   * the physical column index. Adding, removing, or changing property in that object has a direct reflection\n   * only for the CellMeta layer. The reflection will be visible only if the property doesn't exist in the lower\n   * layers (prototype lookup).\n   *\n   * @param {number} physicalColumn The physical column index.\n   * @returns {object}\n   */\n  getColumnMeta(physicalColumn) {\n    return this.columnMeta.getMeta(physicalColumn);\n  }\n\n  /**\n   * Updates column meta object by merging settings with the current state.\n   *\n   * @param {number} physicalColumn The physical column index which points what column meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n  updateColumnMeta(physicalColumn, settings) {\n    this.columnMeta.updateMeta(physicalColumn, settings);\n  }\n\n  /**\n   * Gets the cell meta object that is a root of all settings defined for the specific cell rendered by\n   * the Handsontable. Each cell meta inherits settings from higher layers. When a property doesn't\n   * exist in that layer, it is looked up through a prototype to the highest layer. Starting\n   * from CellMeta -> ColumnMeta and ending to GlobalMeta, which stores default settings. Adding,\n   * removing, or changing property in that object has no direct reflection on any other layers.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {object} options Additional options that are used to extend the cell meta object.\n   * @param {number} options.visualRow The visual row index of the currently requested cell meta object.\n   * @param {number} options.visualColumn The visual column index of the currently requested cell meta object.\n   * @returns {object}\n   */\n  getCellMeta(physicalRow, physicalColumn, _ref) {\n    let {\n      visualRow,\n      visualColumn\n    } = _ref;\n    const cellMeta = this.cellMeta.getMeta(physicalRow, physicalColumn);\n    cellMeta.visualRow = visualRow;\n    cellMeta.visualCol = visualColumn;\n    cellMeta.row = physicalRow;\n    cellMeta.col = physicalColumn;\n    this.runLocalHooks('afterGetCellMeta', cellMeta);\n    return cellMeta;\n  }\n\n  /**\n   * Gets a value (defined by the `key` property) from the cell meta object.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {string} key Defines the value that will be returned from the cell meta object.\n   * @returns {*}\n   */\n  getCellMetaKeyValue(physicalRow, physicalColumn, key) {\n    if (typeof key !== 'string') {\n      throw new Error('The passed cell meta object key is not a string');\n    }\n    return this.cellMeta.getMeta(physicalRow, physicalColumn, key);\n  }\n\n  /**\n   * Sets settings object for cell meta object defined by \"key\" property.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {string} key The property name to set.\n   * @param {*} value Value to save.\n   */\n  setCellMeta(physicalRow, physicalColumn, key, value) {\n    this.cellMeta.setMeta(physicalRow, physicalColumn, key, value);\n  }\n\n  /**\n   * Updates cell meta object by merging settings with the current state.\n   *\n   * @param {number} physicalRow The physical row index which points what cell meta object is updated.\n   * @param {number} physicalColumn The physical column index which points what cell meta object is updated.\n   * @param {object} settings An object to merge with.\n   */\n  updateCellMeta(physicalRow, physicalColumn, settings) {\n    this.cellMeta.updateMeta(physicalRow, physicalColumn, settings);\n  }\n\n  /**\n   * Removes a property defined by the \"key\" argument from the cell meta object.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @param {number} physicalColumn The physical column index.\n   * @param {string} key The property name to remove.\n   */\n  removeCellMeta(physicalRow, physicalColumn, key) {\n    this.cellMeta.removeMeta(physicalRow, physicalColumn, key);\n  }\n\n  /**\n   * Returns all cell meta objects that were created during the Handsontable operation. As cell meta\n   * objects are created lazy, the length of the returned collection depends on how and when the\n   * table has asked for access to that meta objects.\n   *\n   * @returns {object[]}\n   */\n  getCellsMeta() {\n    return this.cellMeta.getMetas();\n  }\n\n  /**\n   * Returns all cell meta objects that were created during the Handsontable operation but for\n   * specyfic row index.\n   *\n   * @param {number} physicalRow The physical row index.\n   * @returns {object[]}\n   */\n  getCellsMetaAtRow(physicalRow) {\n    return this.cellMeta.getMetasAtRow(physicalRow);\n  }\n\n  /**\n   * Creates one or more rows at specific position.\n   *\n   * @param {number} physicalRow The physical row index which points from what position the row is added.\n   * @param {number} [amount=1] An amount of rows to add.\n   */\n  createRow(physicalRow) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.cellMeta.createRow(physicalRow, amount);\n  }\n\n  /**\n   * Removes one or more rows from the collection.\n   *\n   * @param {number} physicalRow The physical row index which points from what position the row is removed.\n   * @param {number} [amount=1] An amount rows to remove.\n   */\n  removeRow(physicalRow) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.cellMeta.removeRow(physicalRow, amount);\n  }\n\n  /**\n   * Creates one or more columns at specific position.\n   *\n   * @param {number} physicalColumn The physical column index which points from what position the column is added.\n   * @param {number} [amount=1] An amount of columns to add.\n   */\n  createColumn(physicalColumn) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.cellMeta.createColumn(physicalColumn, amount);\n    this.columnMeta.createColumn(physicalColumn, amount);\n  }\n\n  /**\n   * Removes one or more columns from the collection.\n   *\n   * @param {number} physicalColumn The physical column index which points from what position the column is removed.\n   * @param {number} [amount=1] An amount of columns to remove.\n   */\n  removeColumn(physicalColumn) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    this.cellMeta.removeColumn(physicalColumn, amount);\n    this.columnMeta.removeColumn(physicalColumn, amount);\n  }\n\n  /**\n   * Clears all saved cell meta objects. It keeps column meta, table meta, and global meta intact.\n   */\n  clearCellsCache() {\n    this.cellMeta.clearCache();\n  }\n\n  /**\n   * Clears all saved cell and columns meta objects.\n   */\n  clearCache() {\n    this.cellMeta.clearCache();\n    this.columnMeta.clearCache();\n  }\n}\nmixin(MetaManager, localHooks);","import Hooks from \"../../../pluginHooks.mjs\";\nimport { hasOwnProperty } from \"../../../helpers/object.mjs\";\nimport { isFunction } from \"../../../helpers/function.mjs\";\n/**\n * @class DynamicCellMetaMod\n *\n * The `DynamicCellMetaMod` modifier allows for extending cell meta objects\n * (returned by `getCellMeta()` from `MetaManager`)\n * by user-specific properties.\n *\n * The user-specific properties can be added and changed dynamically,\n * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),\n * or by Handsontable's `cells` option.\n *\n * The `getCellMeta()` method is used widely throughout the source code.\n * To boost the method's execution time,\n * the logic is triggered only once per one Handsontable slow render cycle.\n */\nexport class DynamicCellMetaMod {\n  constructor(metaManager) {\n    /**\n     * @type {MetaManager}\n     */\n    this.metaManager = metaManager;\n    /**\n     * @type {Map}\n     */\n    this.metaSyncMemo = new Map();\n    metaManager.addLocalHook('afterGetCellMeta', cellMeta => this.extendCellMeta(cellMeta));\n    Hooks.getSingleton().add('beforeRender', forceFullRender => {\n      if (forceFullRender) {\n        this.metaSyncMemo.clear();\n      }\n    }, this.metaManager.hot);\n  }\n\n  /**\n   * Extends the cell meta object by user-specific properties.\n   *\n   * The cell meta object can be extended dynamically,\n   * either by Handsontable's hooks (`beforeGetCellMeta` and`afterGetCellMeta`),\n   * or by Handsontable's `cells` option.\n   *\n   * To boost performance, the extending process is triggered only once per one slow Handsontable render cycle.\n   *\n   * @param {object} cellMeta The cell meta object.\n   */\n  extendCellMeta(cellMeta) {\n    var _this$metaSyncMemo$ge;\n    const {\n      row: physicalRow,\n      col: physicalColumn\n    } = cellMeta;\n    if ((_this$metaSyncMemo$ge = this.metaSyncMemo.get(physicalRow)) !== null && _this$metaSyncMemo$ge !== void 0 && _this$metaSyncMemo$ge.has(physicalColumn)) {\n      return;\n    }\n    const {\n      visualRow,\n      visualCol\n    } = cellMeta;\n    const hot = this.metaManager.hot;\n    const prop = hot.colToProp(visualCol);\n    cellMeta.prop = prop;\n    hot.runHooks('beforeGetCellMeta', visualRow, visualCol, cellMeta);\n\n    // extend a `type` value, added or changed in the `beforeGetCellMeta` hook\n    const cellType = hasOwnProperty(cellMeta, 'type') ? cellMeta.type : null;\n    let cellSettings = isFunction(cellMeta.cells) ? cellMeta.cells(physicalRow, physicalColumn, prop) : null;\n    if (cellType) {\n      if (cellSettings) {\n        var _cellSettings$type;\n        cellSettings.type = (_cellSettings$type = cellSettings.type) !== null && _cellSettings$type !== void 0 ? _cellSettings$type : cellType;\n      } else {\n        cellSettings = {\n          type: cellType\n        };\n      }\n    }\n    if (cellSettings) {\n      this.metaManager.updateCellMeta(physicalRow, physicalColumn, cellSettings);\n    }\n    hot.runHooks('afterGetCellMeta', visualRow, visualCol, cellMeta);\n    if (!this.metaSyncMemo.has(physicalRow)) {\n      this.metaSyncMemo.set(physicalRow, new Set());\n    }\n    this.metaSyncMemo.get(physicalRow).add(physicalColumn);\n  }\n}","import \"core-js/modules/es.error.cause.js\";\n/**\n * @class ExtendMetaPropertiesMod\n */\nexport class ExtendMetaPropertiesMod {\n  constructor(metaManager) {\n    /**\n     * @type {MetaManager}\n     */\n    this.metaManager = metaManager;\n    /**\n     * @type {Set}\n     */\n    this.usageTracker = new Set();\n    /**\n     * @type {Map}\n     */\n    this.propDescriptors = new Map([['ariaTags', {\n      onChange(propName, value, isInitialChange) {\n        if (!isInitialChange) {\n          throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable instance was initialized.`);\n        }\n      }\n    }], ['fixedColumnsLeft', {\n      target: 'fixedColumnsStart',\n      onChange(propName) {\n        const isRtl = this.metaManager.hot.isRtl();\n        if (isRtl && propName === 'fixedColumnsLeft') {\n          throw new Error('The `fixedColumnsLeft` is not supported for RTL. Please use option `fixedColumnsStart`.');\n        }\n        if (this.usageTracker.has('fixedColumnsLeft') && this.usageTracker.has('fixedColumnsStart')) {\n          throw new Error('The `fixedColumnsLeft` and `fixedColumnsStart` should not be used together. ' + 'Please use only the option `fixedColumnsStart`.');\n        }\n      }\n    }], ['layoutDirection', {\n      onChange(propName, value, isInitialChange) {\n        if (!isInitialChange) {\n          throw new Error(`The \\`${propName}\\` option can not be updated after the Handsontable is initialized.`);\n        }\n      }\n    }]]);\n    this.extendMetaProps();\n  }\n\n  /**\n   * Extends the meta options based on the object descriptors from the `propDescriptors` list.\n   */\n  extendMetaProps() {\n    this.propDescriptors.forEach((descriptor, alias) => {\n      const {\n        target,\n        onChange = () => {}\n      } = descriptor;\n      const hasTarget = typeof target === 'string';\n      const targetProp = hasTarget ? target : alias;\n      const origProp = `_${targetProp}`;\n      this.metaManager.globalMeta.meta[origProp] = this.metaManager.globalMeta.meta[targetProp];\n      this.installPropWatcher(alias, origProp, onChange);\n      if (hasTarget) {\n        this.installPropWatcher(target, origProp, onChange);\n      }\n    });\n  }\n\n  /**\n   * Installs the property watcher to the `propName` option and forwards getter and setter to\n   * the new one.\n   *\n   * @param {string} propName The property to watch.\n   * @param {string} origProp The property from/to the value is forwarded.\n   * @param {Function} onChange The callback.\n   */\n  installPropWatcher(propName, origProp, onChange) {\n    const self = this;\n    Object.defineProperty(this.metaManager.globalMeta.meta, propName, {\n      get() {\n        return this[origProp];\n      },\n      set(value) {\n        const isInitialChange = !self.usageTracker.has(propName);\n        self.usageTracker.add(propName);\n        onChange.call(self, propName, value, isInitialChange);\n        this[origProp] = value;\n      },\n      enumerable: true,\n      configurable: true\n    });\n  }\n}","/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * SheetClip - Spreadsheet Clipboard Parser.\n * version 0.2\n *\n * This tiny library transforms JavaScript arrays to strings that are pasteable by LibreOffice, OpenOffice,\n * Google Docs and Microsoft Excel.\n *\n * Copyright 2012, Marcin Warpechowski\n * Licensed under the MIT license.\n * http://github.com/warpech/sheetclip/\n */\n\nconst regUniversalNewLine = /^(\\r\\n|\\n\\r|\\r|\\n)/;\nconst regNextCellNoQuotes = /^[^\\t\\r\\n]+/;\nconst regNextEmptyCell = /^\\t/;\n\n/**\n * Decode spreadsheet string into array.\n *\n * @param {string} str The string to parse.\n * @returns {Array}\n */\nexport function parse(str) {\n  const arr = [['']];\n  if (str.length === 0) {\n    return arr;\n  }\n  let column = 0;\n  let row = 0;\n  let lastLength;\n  while (str.length > 0) {\n    if (lastLength === str.length) {\n      // In the case If in last cycle we didn't match anything, we have to leave the infinite loop\n      break;\n    }\n    lastLength = str.length;\n    if (str.match(regNextEmptyCell)) {\n      str = str.replace(regNextEmptyCell, '');\n      column += 1;\n      arr[row][column] = '';\n    } else if (str.match(regUniversalNewLine)) {\n      str = str.replace(regUniversalNewLine, '');\n      column = 0;\n      row += 1;\n      arr[row] = [''];\n    } else {\n      let nextCell = '';\n      if (str.startsWith('\"')) {\n        let quoteNo = 0;\n        let isStillCell = true;\n        while (isStillCell) {\n          const nextChar = str.slice(0, 1);\n          if (nextChar === '\"') {\n            quoteNo += 1;\n          }\n          nextCell += nextChar;\n          str = str.slice(1);\n          if (str.length === 0 || str.match(/^[\\t\\r\\n]/) && quoteNo % 2 === 0) {\n            isStillCell = false;\n          }\n        }\n        nextCell = nextCell.replace(/^\"/, '').replace(/\"$/, '').replace(/[\"]*/g, match => new Array(Math.floor(match.length / 2)).fill('\"').join(''));\n      } else {\n        const matchedText = str.match(regNextCellNoQuotes);\n        nextCell = matchedText ? matchedText[0] : '';\n        str = str.slice(nextCell.length);\n      }\n      arr[row][column] = nextCell;\n    }\n  }\n  return arr;\n}\n\n/**\n * Encode array into valid spreadsheet string.\n *\n * @param {Array} arr An array of arrays to stringify.\n * @returns {string}\n */\nexport function stringify(arr) {\n  let r;\n  let rLen;\n  let c;\n  let cLen;\n  let str = '';\n  let val;\n  for (r = 0, rLen = arr.length; r < rLen; r += 1) {\n    cLen = arr[r].length;\n    for (c = 0; c < cLen; c += 1) {\n      if (c > 0) {\n        str += '\\t';\n      }\n      val = arr[r][c];\n      if (typeof val === 'string') {\n        if (val.indexOf('\\n') > -1) {\n          str += `\"${val.replace(/\"/g, '\"\"')}\"`;\n        } else {\n          str += val;\n        }\n      } else if (val === null || val === void 0) {\n        // void 0 resolves to undefined\n        str += '';\n      } else {\n        str += val;\n      }\n    }\n    if (r !== rLen - 1) {\n      str += '\\n';\n    }\n  }\n  return str;\n}","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { stringify } from \"../3rdparty/SheetClip/index.mjs\";\nimport { countFirstRowKeys } from \"../helpers/data.mjs\";\nimport { createObjectPropListener, deepClone, deepExtend, deepObjectSize, duckSchema, hasOwnProperty, isObject, objectEach } from \"../helpers/object.mjs\";\nimport { extendArray, to2dArray } from \"../helpers/array.mjs\";\nimport { rangeEach } from \"../helpers/number.mjs\";\nimport { isDefined } from \"../helpers/mixed.mjs\";\n/*\nThis class contains open-source contributions covered by the MIT license.\n\n1) In the `createRow` method: Row creation using functional `dataSchema` value\n2) In the `set` method: Data setting using functional `prop` value\n3) in the `get` method: Data getting using functional `prop` value\n\nThe remaining part of this code comment contains the full license text of these contributions.\n\n======\n\nThe MIT License\n\nCopyright 2013 Nicholas Bollweg\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n/**\n * Utility class that gets and saves data from/to the data source using mapping of columns numbers to object property names.\n *\n * @todo Refactor arguments of methods getRange, getText to be numbers (not objects).\n * @todo Remove priv, GridSettings from object constructor.\n *\n * @class DataMap\n * @private\n */\nclass DataMap {\n  /**\n   * @type {number}\n   */\n  static get DESTINATION_RENDERER() {\n    return 1;\n  }\n\n  /**\n   * @type {number}\n   */\n  static get DESTINATION_CLIPBOARD_GENERATOR() {\n    return 2;\n  }\n\n  /**\n   * @param {object} instance Instance of Handsontable.\n   * @param {Array} data Array of arrays or array of objects containing data.\n   * @param {MetaManager} metaManager The meta manager instance.\n   */\n  constructor(instance, data, metaManager) {\n    /**\n     * Instance of {@link Handsontable}.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Instance of {@link MetaManager}.\n     *\n     * @private\n     * @type {MetaManager}\n     */\n    this.metaManager = metaManager;\n    /**\n     * Instance of {@link TableMeta}.\n     *\n     * @private\n     * @type {TableMeta}\n     */\n    this.tableMeta = metaManager.getTableMeta();\n    /**\n     * Reference to the original dataset.\n     *\n     * @type {*}\n     */\n    this.dataSource = data;\n    /**\n     * Generated schema based on the first row from the source data.\n     *\n     * @type {object}\n     */\n    this.duckSchema = this.createDuckSchema();\n    /**\n     * Cached array of properties to columns.\n     *\n     * @type {Array}\n     */\n    this.colToPropCache = void 0;\n    /**\n     * Cached map of properties to columns.\n     *\n     * @type {Map}\n     */\n    this.propToColCache = void 0;\n    this.createMap();\n  }\n\n  /**\n   * Generates cache for property to and from column addressation.\n   */\n  createMap() {\n    const schema = this.getSchema();\n    if (typeof schema === 'undefined') {\n      throw new Error('trying to create `columns` definition but you didn\\'t provide `schema` nor `data`');\n    }\n    const columns = this.tableMeta.columns;\n    let i;\n    this.colToPropCache = [];\n    this.propToColCache = new Map();\n    if (columns) {\n      let columnsLen = 0;\n      let filteredIndex = 0;\n      let columnsAsFunc = false;\n      if (typeof columns === 'function') {\n        const schemaLen = deepObjectSize(schema);\n        columnsLen = schemaLen > 0 ? schemaLen : this.countFirstRowKeys();\n        columnsAsFunc = true;\n      } else {\n        const maxCols = this.tableMeta.maxCols;\n        columnsLen = Math.min(maxCols, columns.length);\n      }\n      for (i = 0; i < columnsLen; i++) {\n        const column = columnsAsFunc ? columns(i) : columns[i];\n        if (isObject(column)) {\n          if (typeof column.data !== 'undefined') {\n            const index = columnsAsFunc ? filteredIndex : i;\n            this.colToPropCache[index] = column.data;\n            this.propToColCache.set(column.data, index);\n          }\n          filteredIndex += 1;\n        }\n      }\n    } else {\n      this.recursiveDuckColumns(schema);\n    }\n  }\n\n  /**\n   * Get the amount of physical columns in the first data row.\n   *\n   * @returns {number} Amount of physical columns in the first data row.\n   */\n  countFirstRowKeys() {\n    return countFirstRowKeys(this.dataSource);\n  }\n\n  /**\n   * Generates columns' translation cache.\n   *\n   * @param {object} schema An object to generate schema from.\n   * @param {number} lastCol The column index.\n   * @param {number} parent The property cache for recursive calls.\n   * @returns {number}\n   */\n  recursiveDuckColumns(schema, lastCol, parent) {\n    let lastColumn = lastCol;\n    let propertyParent = parent;\n    let prop;\n    if (typeof lastColumn === 'undefined') {\n      lastColumn = 0;\n      propertyParent = '';\n    }\n    if (typeof schema === 'object' && !Array.isArray(schema)) {\n      objectEach(schema, (value, key) => {\n        if (value === null) {\n          prop = propertyParent + key;\n          this.colToPropCache.push(prop);\n          this.propToColCache.set(prop, lastColumn);\n          lastColumn += 1;\n        } else {\n          lastColumn = this.recursiveDuckColumns(value, lastColumn, `${key}.`);\n        }\n      });\n    }\n    return lastColumn;\n  }\n\n  /**\n   * Returns property name that corresponds with the given column index.\n   *\n   * @param {string|number} column Visual column index or another passed argument.\n   * @returns {string|number} Column property, physical column index or passed argument.\n   */\n  colToProp(column) {\n    // TODO: Should it work? Please, look at the test:\n    // \"it should return the provided property name, when the user passes a property name as a column number\".\n    if (Number.isInteger(column) === false) {\n      return column;\n    }\n    const physicalColumn = this.instance.toPhysicalColumn(column);\n\n    // Out of range, not visible column index.\n    if (physicalColumn === null) {\n      return column;\n    }\n\n    // Cached property.\n    if (this.colToPropCache && isDefined(this.colToPropCache[physicalColumn])) {\n      return this.colToPropCache[physicalColumn];\n    }\n    return physicalColumn;\n  }\n\n  /**\n   * Translates property into visual column index.\n   *\n   * @param {string|number} prop Column property which may be also a physical column index.\n   * @returns {string|number} Visual column index or passed argument.\n   */\n  propToCol(prop) {\n    const cachedPhysicalIndex = this.propToColCache.get(prop);\n    if (isDefined(cachedPhysicalIndex)) {\n      return this.instance.toVisualColumn(cachedPhysicalIndex);\n    }\n\n    // Property may be a physical column index.\n    const visualColumn = this.instance.toVisualColumn(prop);\n    if (visualColumn === null) {\n      return prop;\n    }\n    return visualColumn;\n  }\n\n  /**\n   * Returns data's schema.\n   *\n   * @returns {object}\n   */\n  getSchema() {\n    const schema = this.tableMeta.dataSchema;\n    if (schema) {\n      if (typeof schema === 'function') {\n        return schema();\n      }\n      return schema;\n    }\n    return this.duckSchema;\n  }\n\n  /**\n   * Creates the duck schema based on the current dataset.\n   *\n   * @returns {Array|object}\n   */\n  createDuckSchema() {\n    return this.dataSource && this.dataSource[0] ? duckSchema(this.dataSource[0]) : {};\n  }\n\n  /**\n   * Refresh the data schema.\n   */\n  refreshDuckSchema() {\n    this.duckSchema = this.createDuckSchema();\n  }\n\n  /**\n   * Creates row at the bottom of the data array.\n   *\n   * @param {number} [index] Physical index of the row before which the new row will be inserted.\n   * @param {number} [amount=1] An amount of rows to add.\n   * @param {object} [options] Additional options for created rows.\n   * @param {string} [options.source] Source of method call.\n   * @param {'above'|'below'} [options.mode] Sets where the row is inserted: above or below the passed index.\n   * @fires Hooks#afterCreateRow\n   * @returns {number} Returns number of created rows.\n   */\n  createRow(index) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let {\n      source,\n      mode = 'above'\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const sourceRowsCount = this.instance.countSourceRows();\n    let physicalRowIndex = sourceRowsCount;\n    let numberOfCreatedRows = 0;\n    let rowIndex = index;\n    if (typeof rowIndex !== 'number' || rowIndex >= sourceRowsCount) {\n      rowIndex = sourceRowsCount;\n    }\n    if (rowIndex < this.instance.countRows()) {\n      physicalRowIndex = this.instance.toPhysicalRow(rowIndex);\n    }\n    const continueProcess = this.instance.runHooks('beforeCreateRow', rowIndex, amount, source);\n    if (continueProcess === false || physicalRowIndex === null) {\n      return {\n        delta: 0\n      };\n    }\n    const maxRows = this.tableMeta.maxRows;\n    const columnCount = this.getSchema().length;\n    const rowsToAdd = [];\n    while (numberOfCreatedRows < amount && sourceRowsCount + numberOfCreatedRows < maxRows) {\n      let row = null;\n      if (this.instance.dataType === 'array') {\n        if (this.tableMeta.dataSchema) {\n          // Clone template array\n          row = deepClone(this.getSchema());\n        } else {\n          row = [];\n          /* eslint-disable no-loop-func */\n          rangeEach(columnCount - 1, () => row.push(null));\n        }\n      } else if (this.instance.dataType === 'function') {\n        row = this.tableMeta.dataSchema(rowIndex + numberOfCreatedRows);\n      } else {\n        row = {};\n        deepExtend(row, this.getSchema());\n      }\n      rowsToAdd.push(row);\n      numberOfCreatedRows += 1;\n    }\n    this.instance.rowIndexMapper.insertIndexes(rowIndex, numberOfCreatedRows);\n    if (mode === 'below') {\n      physicalRowIndex = Math.min(physicalRowIndex + 1, sourceRowsCount);\n    }\n    this.spliceData(physicalRowIndex, 0, rowsToAdd);\n    const newVisualRowIndex = this.instance.toVisualRow(physicalRowIndex);\n\n    // In case the created rows are the only ones in the table, the column index mappers need to be rebuilt based on\n    // the number of columns created in the row or the schema.\n    if (this.instance.countSourceRows() === rowsToAdd.length) {\n      this.instance.columnIndexMapper.initToLength(this.instance.getInitialColumnCount());\n    }\n    if (numberOfCreatedRows > 0) {\n      if (index === void 0 || index === null) {\n        // Creates the meta rows at the end of the rows collection without shifting the cells\n        // that were defined out of the range of the dataset.\n        this.metaManager.createRow(null, numberOfCreatedRows);\n      } else if (source !== 'auto') {\n        this.metaManager.createRow(physicalRowIndex, amount);\n      }\n    }\n    this.instance.runHooks('afterCreateRow', newVisualRowIndex, numberOfCreatedRows, source);\n    this.instance.forceFullRender = true; // used when data was changed\n\n    return {\n      delta: numberOfCreatedRows,\n      startPhysicalIndex: physicalRowIndex\n    };\n  }\n\n  /**\n   * Creates column at the right of the data array.\n   *\n   * @param {number} [index] Visual index of the column before which the new column will be inserted.\n   * @param {number} [amount=1] An amount of columns to add.\n   * @param {object} [options] Additional options for created columns.\n   * @param {string} [options.source] Source of method call.\n   * @param {'start'|'end'} [options.mode] Sets where the column is inserted: at the start (left in [LTR](@/api/options.md#layoutdirection), right in [RTL](@/api/options.md#layoutdirection)) or at the end (right in LTR, left in LTR)\n   * the passed index.\n   * @fires Hooks#afterCreateCol\n   * @returns {number} Returns number of created columns.\n   */\n  createCol(index) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let {\n      source,\n      mode = 'start'\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    if (!this.instance.isColumnModificationAllowed()) {\n      throw new Error('Cannot create new column. When data source in an object, ' + 'you can only have as much columns as defined in first data row, data schema or in the \\'columns\\' setting.' + 'If you want to be able to add new columns, you have to use array datasource.');\n    }\n    const dataSource = this.dataSource;\n    const maxCols = this.tableMeta.maxCols;\n    const countSourceCols = this.instance.countSourceCols();\n    let columnIndex = index;\n    if (typeof columnIndex !== 'number' || columnIndex >= countSourceCols) {\n      columnIndex = countSourceCols;\n    }\n    const continueProcess = this.instance.runHooks('beforeCreateCol', columnIndex, amount, source);\n    if (continueProcess === false) {\n      return {\n        delta: 0\n      };\n    }\n    let physicalColumnIndex = countSourceCols;\n    if (columnIndex < this.instance.countCols()) {\n      physicalColumnIndex = this.instance.toPhysicalColumn(columnIndex);\n    }\n    const numberOfSourceRows = this.instance.countSourceRows();\n    let nrOfColumns = this.instance.countCols();\n    let numberOfCreatedCols = 0;\n    let currentIndex = physicalColumnIndex;\n    if (mode === 'end') {\n      currentIndex = Math.min(currentIndex + 1, countSourceCols);\n    }\n    const startPhysicalIndex = currentIndex;\n    while (numberOfCreatedCols < amount && nrOfColumns < maxCols) {\n      if (typeof columnIndex !== 'number' || columnIndex >= nrOfColumns) {\n        if (numberOfSourceRows > 0) {\n          for (let row = 0; row < numberOfSourceRows; row += 1) {\n            if (typeof dataSource[row] === 'undefined') {\n              dataSource[row] = [];\n            }\n            dataSource[row].push(null);\n          }\n        } else {\n          dataSource.push([null]);\n        }\n      } else {\n        for (let row = 0; row < numberOfSourceRows; row++) {\n          dataSource[row].splice(currentIndex, 0, null);\n        }\n      }\n      numberOfCreatedCols += 1;\n      currentIndex += 1;\n      nrOfColumns += 1;\n    }\n    this.instance.columnIndexMapper.insertIndexes(columnIndex, numberOfCreatedCols);\n    if (numberOfCreatedCols > 0) {\n      if (index === void 0 || index === null) {\n        // Creates the meta columns at the end of the columns collection without shifting the cells\n        // that were defined out of the range of the dataset.\n        this.metaManager.createColumn(null, numberOfCreatedCols);\n      } else if (source !== 'auto') {\n        this.metaManager.createColumn(startPhysicalIndex, amount);\n      }\n    }\n    const newVisualColumnIndex = this.instance.toVisualColumn(startPhysicalIndex);\n    this.instance.runHooks('afterCreateCol', newVisualColumnIndex, numberOfCreatedCols, source);\n    this.instance.forceFullRender = true; // used when data was changed\n\n    this.refreshDuckSchema();\n    return {\n      delta: numberOfCreatedCols,\n      startPhysicalIndex\n    };\n  }\n\n  /**\n   * Removes row from the data array.\n   *\n   * @fires Hooks#beforeRemoveRow\n   * @fires Hooks#afterRemoveRow\n   * @param {number} [index] Visual index of the row to be removed. If not provided, the last row will be removed.\n   * @param {number} [amount=1] Amount of the rows to be removed. If not provided, one row will be removed.\n   * @param {string} [source] Source of method call.\n   * @returns {boolean} Returns `false` when action was cancelled, otherwise `true`.\n   */\n  removeRow(index) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let source = arguments.length > 2 ? arguments[2] : undefined;\n    let rowIndex = Number.isInteger(index) ? index : -amount; // -amount = taking indexes from the end.\n    const removedPhysicalIndexes = this.visualRowsToPhysical(rowIndex, amount);\n    const sourceRowsLength = this.instance.countSourceRows();\n    rowIndex = (sourceRowsLength + rowIndex) % sourceRowsLength;\n\n    // It handle also callback from the `NestedRows` plugin. Removing parent node has effect in removing children nodes.\n    const actionWasNotCancelled = this.instance.runHooks('beforeRemoveRow', rowIndex, removedPhysicalIndexes.length, removedPhysicalIndexes, source);\n    if (actionWasNotCancelled === false) {\n      return false;\n    }\n\n    // List of removed indexes might be changed in the `beforeRemoveRow` hook. There may be new values.\n    const numberOfRemovedIndexes = removedPhysicalIndexes.length;\n    this.filterData(rowIndex, numberOfRemovedIndexes, removedPhysicalIndexes);\n\n    // TODO: Function `removeRow` should validate fully, probably above.\n    if (rowIndex < this.instance.countRows()) {\n      this.instance.rowIndexMapper.removeIndexes(removedPhysicalIndexes);\n      const customDefinedColumns = isDefined(this.tableMeta.columns) || isDefined(this.tableMeta.dataSchema);\n\n      // All rows have been removed. There shouldn't be any columns.\n      if (this.instance.rowIndexMapper.getNotTrimmedIndexesLength() === 0 && customDefinedColumns === false) {\n        this.instance.columnIndexMapper.setIndexesSequence([]);\n      }\n    }\n    const descendingPhysicalRows = removedPhysicalIndexes.slice(0).sort((a, b) => b - a);\n    descendingPhysicalRows.forEach(rowPhysicalIndex => {\n      this.metaManager.removeRow(rowPhysicalIndex, 1);\n    });\n    this.instance.runHooks('afterRemoveRow', rowIndex, numberOfRemovedIndexes, removedPhysicalIndexes, source);\n    this.instance.forceFullRender = true; // used when data was changed\n\n    return true;\n  }\n\n  /**\n   * Removes column from the data array.\n   *\n   * @fires Hooks#beforeRemoveCol\n   * @fires Hooks#afterRemoveCol\n   * @param {number} [index] Visual index of the column to be removed. If not provided, the last column will be removed.\n   * @param {number} [amount=1] Amount of the columns to be removed. If not provided, one column will be removed.\n   * @param {string} [source] Source of method call.\n   * @returns {boolean} Returns `false` when action was cancelled, otherwise `true`.\n   */\n  removeCol(index) {\n    let amount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let source = arguments.length > 2 ? arguments[2] : undefined;\n    if (this.instance.dataType === 'object' || this.tableMeta.columns) {\n      throw new Error('cannot remove column with object data source or columns option specified');\n    }\n    let columnIndex = typeof index !== 'number' ? -amount : index;\n    columnIndex = (this.instance.countCols() + columnIndex) % this.instance.countCols();\n    const removedPhysicalIndexes = this.visualColumnsToPhysical(columnIndex, amount);\n    const descendingPhysicalColumns = removedPhysicalIndexes.slice(0).sort((a, b) => b - a);\n    const actionWasNotCancelled = this.instance.runHooks('beforeRemoveCol', columnIndex, amount, removedPhysicalIndexes, source);\n    if (actionWasNotCancelled === false) {\n      return false;\n    }\n    let isTableUniform = true;\n    const removedColumnsCount = descendingPhysicalColumns.length;\n    const data = this.dataSource;\n    for (let c = 0; c < removedColumnsCount; c++) {\n      if (isTableUniform && removedPhysicalIndexes[0] !== removedPhysicalIndexes[c] - c) {\n        isTableUniform = false;\n      }\n    }\n    if (isTableUniform) {\n      for (let r = 0, rlen = this.instance.countSourceRows(); r < rlen; r++) {\n        data[r].splice(removedPhysicalIndexes[0], amount);\n        if (r === 0) {\n          this.metaManager.removeColumn(removedPhysicalIndexes[0], amount);\n        }\n      }\n    } else {\n      for (let r = 0, rlen = this.instance.countSourceRows(); r < rlen; r++) {\n        for (let c = 0; c < removedColumnsCount; c++) {\n          data[r].splice(descendingPhysicalColumns[c], 1);\n          if (r === 0) {\n            this.metaManager.removeColumn(descendingPhysicalColumns[c], 1);\n          }\n        }\n      }\n    }\n\n    // TODO: Function `removeCol` should validate fully, probably above.\n    if (columnIndex < this.instance.countCols()) {\n      this.instance.columnIndexMapper.removeIndexes(removedPhysicalIndexes);\n\n      // All columns have been removed. There shouldn't be any rows.\n      if (this.instance.columnIndexMapper.getNotTrimmedIndexesLength() === 0) {\n        this.instance.rowIndexMapper.setIndexesSequence([]);\n      }\n    }\n    this.instance.runHooks('afterRemoveCol', columnIndex, amount, removedPhysicalIndexes, source);\n    this.instance.forceFullRender = true; // used when data was changed\n    this.refreshDuckSchema();\n    return true;\n  }\n\n  /**\n   * Add/Removes data from the column.\n   *\n   * @param {number} col Physical index of column in which do you want to do splice.\n   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {Array} [elements] The new columns to add.\n   * @returns {Array} Returns removed portion of columns.\n   */\n  spliceCol(col, index, amount) {\n    const colData = this.instance.getDataAtCol(col);\n    const removed = colData.slice(index, index + amount);\n    const after = colData.slice(index + amount);\n    for (var _len = arguments.length, elements = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      elements[_key - 3] = arguments[_key];\n    }\n    extendArray(elements, after);\n    let i = 0;\n    while (i < amount) {\n      elements.push(null); // add null in place of removed elements\n      i += 1;\n    }\n    to2dArray(elements);\n    this.instance.populateFromArray(index, col, elements, null, null, 'spliceCol');\n    return removed;\n  }\n\n  /**\n   * Add/Removes data from the row.\n   *\n   * @param {number} row Physical index of row in which do you want to do splice.\n   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {Array} [elements] The new rows to add.\n   * @returns {Array} Returns removed portion of rows.\n   */\n  spliceRow(row, index, amount) {\n    const rowData = this.instance.getSourceDataAtRow(row);\n    const removed = rowData.slice(index, index + amount);\n    const after = rowData.slice(index + amount);\n    for (var _len2 = arguments.length, elements = new Array(_len2 > 3 ? _len2 - 3 : 0), _key2 = 3; _key2 < _len2; _key2++) {\n      elements[_key2 - 3] = arguments[_key2];\n    }\n    extendArray(elements, after);\n    let i = 0;\n    while (i < amount) {\n      elements.push(null); // add null in place of removed elements\n      i += 1;\n    }\n    this.instance.populateFromArray(row, index, [elements], null, null, 'spliceRow');\n    return removed;\n  }\n\n  /**\n   * Add/remove row(s) to/from the data source.\n   *\n   * @param {number} index Physical index of the element to add/remove.\n   * @param {number} deleteCount Number of rows to remove.\n   * @param {Array<object>} elements Row elements to be added.\n   */\n  spliceData(index, deleteCount, elements) {\n    const continueSplicing = this.instance.runHooks('beforeDataSplice', index, deleteCount, elements);\n    if (continueSplicing !== false) {\n      const newData = [...this.dataSource.slice(0, index), ...elements, ...this.dataSource.slice(index)];\n\n      // We try not to change the reference.\n      this.dataSource.length = 0;\n\n      // Pushing to array instead of using `splice`, because Babel changes the code to one that uses the `apply` method.\n      // The used method was cause of the problem described within #7840.\n      newData.forEach(row => this.dataSource.push(row));\n    }\n  }\n\n  /**\n   * Filter unwanted data elements from the data source.\n   *\n   * @param {number} index Visual index of the element to remove.\n   * @param {number} amount Number of rows to add/remove.\n   * @param {number} physicalRows Physical row indexes.\n   */\n  filterData(index, amount, physicalRows) {\n    // Custom data filtering (run as a consequence of calling the below hook) provide an array containing new data.\n    let data = this.instance.runHooks('filterData', index, amount, physicalRows);\n\n    // Hooks by default returns first argument (when there is no callback changing execution result).\n    if (Array.isArray(data) === false) {\n      data = this.dataSource.filter((row, rowIndex) => physicalRows.indexOf(rowIndex) === -1);\n    }\n    this.dataSource.length = 0;\n    Array.prototype.push.apply(this.dataSource, data);\n  }\n\n  /**\n   * Returns single value from the data array.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} prop The column property.\n   * @returns {*}\n   */\n  get(row, prop) {\n    const physicalRow = this.instance.toPhysicalRow(row);\n    let dataRow = this.dataSource[physicalRow];\n    // TODO: To remove, use 'modifyData' hook instead (see below)\n    const modifiedRowData = this.instance.runHooks('modifyRowData', physicalRow);\n    dataRow = isNaN(modifiedRowData) ? modifiedRowData : dataRow;\n    //\n\n    let value = null;\n\n    // try to get value under property `prop` (includes dot)\n    if (dataRow && dataRow.hasOwnProperty && hasOwnProperty(dataRow, prop)) {\n      value = dataRow[prop];\n    } else if (typeof prop === 'string' && prop.indexOf('.') > -1) {\n      const sliced = prop.split('.');\n      let out = dataRow;\n      if (!out) {\n        return null;\n      }\n      for (let i = 0, ilen = sliced.length; i < ilen; i++) {\n        out = out[sliced[i]];\n        if (typeof out === 'undefined') {\n          return null;\n        }\n      }\n      value = out;\n    } else if (typeof prop === 'function') {\n      value = prop(this.dataSource.slice(physicalRow, physicalRow + 1)[0]);\n    }\n    if (this.instance.hasHook('modifyData')) {\n      const valueHolder = createObjectPropListener(value);\n      this.instance.runHooks('modifyData', physicalRow, this.propToCol(prop), valueHolder, 'get');\n      if (valueHolder.isTouched()) {\n        value = valueHolder.value;\n      }\n    }\n    return value;\n  }\n\n  /**\n   * Returns single value from the data array (intended for clipboard copy to an external application).\n   *\n   * @param {number} row Physical row index.\n   * @param {number} prop The column property.\n   * @returns {string}\n   */\n  getCopyable(row, prop) {\n    if (this.instance.getCellMeta(row, this.propToCol(prop)).copyable) {\n      return this.get(row, prop);\n    }\n    return '';\n  }\n\n  /**\n   * Saves single value to the data array.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} prop The column property.\n   * @param {string} value The value to set.\n   */\n  set(row, prop, value) {\n    const physicalRow = this.instance.toPhysicalRow(row);\n    let newValue = value;\n    let dataRow = this.dataSource[physicalRow];\n    // TODO: To remove, use 'modifyData' hook instead (see below)\n    const modifiedRowData = this.instance.runHooks('modifyRowData', physicalRow);\n    dataRow = isNaN(modifiedRowData) ? modifiedRowData : dataRow;\n    //\n\n    if (this.instance.hasHook('modifyData')) {\n      const valueHolder = createObjectPropListener(newValue);\n      this.instance.runHooks('modifyData', physicalRow, this.propToCol(prop), valueHolder, 'set');\n      if (valueHolder.isTouched()) {\n        newValue = valueHolder.value;\n      }\n    }\n\n    // try to set value under property `prop` (includes dot)\n    if (dataRow && dataRow.hasOwnProperty && hasOwnProperty(dataRow, prop)) {\n      dataRow[prop] = newValue;\n    } else if (typeof prop === 'string' && prop.indexOf('.') > -1) {\n      const sliced = prop.split('.');\n      let out = dataRow;\n      let i = 0;\n      let ilen;\n      for (i = 0, ilen = sliced.length - 1; i < ilen; i++) {\n        if (typeof out[sliced[i]] === 'undefined') {\n          out[sliced[i]] = {};\n        }\n        out = out[sliced[i]];\n      }\n      out[sliced[i]] = newValue;\n    } else if (typeof prop === 'function') {\n      prop(this.dataSource.slice(physicalRow, physicalRow + 1)[0], newValue);\n    } else {\n      dataRow[prop] = newValue;\n    }\n  }\n\n  /**\n   * This ridiculous piece of code maps rows Id that are present in table data to those displayed for user.\n   * The trick is, the physical row id (stored in settings.data) is not necessary the same\n   * as the visual (displayed) row id (e.g. When sorting is applied).\n   *\n   * @param {number} index Visual row index.\n   * @param {number} amount An amount of rows to translate.\n   * @returns {number}\n   */\n  visualRowsToPhysical(index, amount) {\n    const totalRows = this.instance.countSourceRows();\n    const logicRows = [];\n    let physicRow = (totalRows + index) % totalRows;\n    let rowsToRemove = amount;\n    let row;\n    while (physicRow < totalRows && rowsToRemove) {\n      row = this.instance.toPhysicalRow(physicRow);\n      logicRows.push(row);\n      rowsToRemove -= 1;\n      physicRow += 1;\n    }\n    return logicRows;\n  }\n\n  /**\n   *\n   * @param {number} index Visual column index.\n   * @param {number} amount An amount of rows to translate.\n   * @returns {Array}\n   */\n  visualColumnsToPhysical(index, amount) {\n    const totalCols = this.instance.countCols();\n    const visualCols = [];\n    let physicalCol = (totalCols + index) % totalCols;\n    let colsToRemove = amount;\n    while (physicalCol < totalCols && colsToRemove) {\n      const col = this.instance.toPhysicalColumn(physicalCol);\n      visualCols.push(col);\n      colsToRemove -= 1;\n      physicalCol += 1;\n    }\n    return visualCols;\n  }\n\n  /**\n   * Clears the data array.\n   */\n  clear() {\n    for (let r = 0; r < this.instance.countSourceRows(); r++) {\n      for (let c = 0; c < this.instance.countCols(); c++) {\n        this.set(r, this.colToProp(c), '');\n      }\n    }\n  }\n\n  /**\n   * Get data length.\n   *\n   * @returns {number}\n   */\n  getLength() {\n    const maxRowsFromSettings = this.tableMeta.maxRows;\n    let maxRows;\n    if (maxRowsFromSettings < 0 || maxRowsFromSettings === 0) {\n      maxRows = 0;\n    } else {\n      maxRows = maxRowsFromSettings || Infinity;\n    }\n    const length = this.instance.rowIndexMapper.getNotTrimmedIndexesLength();\n    return Math.min(length, maxRows);\n  }\n\n  /**\n   * Returns the data array.\n   *\n   * @returns {Array}\n   */\n  getAll() {\n    const start = {\n      row: 0,\n      col: 0\n    };\n    const end = {\n      row: Math.max(this.instance.countRows() - 1, 0),\n      col: Math.max(this.instance.countCols() - 1, 0)\n    };\n    if (start.row - end.row === 0 && !this.instance.countSourceRows()) {\n      return [];\n    }\n    return this.getRange(start, end, DataMap.DESTINATION_RENDERER);\n  }\n\n  /**\n   * Count the number of columns cached in the `colToProp` cache.\n   *\n   * @returns {number} Amount of cached columns.\n   */\n  countCachedColumns() {\n    return this.colToPropCache.length;\n  }\n\n  /**\n   * Returns data range as array.\n   *\n   * @param {object} [start] Start selection position. Visual indexes.\n   * @param {object} [end] End selection position. Visual indexes.\n   * @param {number} destination Destination of datamap.get.\n   * @returns {Array}\n   */\n  getRange(start, end, destination) {\n    const output = [];\n    let r;\n    let c;\n    let row;\n    const maxRows = this.tableMeta.maxRows;\n    const maxCols = this.tableMeta.maxCols;\n    if (maxRows === 0 || maxCols === 0) {\n      return [];\n    }\n    const getFn = destination === DataMap.DESTINATION_CLIPBOARD_GENERATOR ? this.getCopyable : this.get;\n    const rlen = Math.min(Math.max(maxRows - 1, 0), Math.max(start.row, end.row));\n    const clen = Math.min(Math.max(maxCols - 1, 0), Math.max(start.col, end.col));\n    for (r = Math.min(start.row, end.row); r <= rlen; r++) {\n      row = [];\n      // We just store indexes for rows without headers.\n      const physicalRow = r >= 0 ? this.instance.toPhysicalRow(r) : r;\n      for (c = Math.min(start.col, end.col); c <= clen; c++) {\n        if (physicalRow === null) {\n          break;\n        }\n        row.push(getFn.call(this, r, this.colToProp(c)));\n      }\n      if (physicalRow !== null) {\n        output.push(row);\n      }\n    }\n    return output;\n  }\n\n  /**\n   * Return data as text (tab separated columns).\n   *\n   * @param {object} [start] Start selection position. Visual indexes.\n   * @param {object} [end] End selection position. Visual indexes.\n   * @returns {string}\n   */\n  getText(start, end) {\n    return stringify(this.getRange(start, end, DataMap.DESTINATION_RENDERER));\n  }\n\n  /**\n   * Return data as copyable text (tab separated columns intended for clipboard copy to an external application).\n   *\n   * @param {object} [start] Start selection position. Visual indexes.\n   * @param {object} [end] End selection position. Visual indexes.\n   * @returns {string}\n   */\n  getCopyableText(start, end) {\n    return stringify(this.getRange(start, end, DataMap.DESTINATION_CLIPBOARD_GENERATOR));\n  }\n\n  /**\n   * Destroy instance.\n   */\n  destroy() {\n    this.instance = null;\n    this.metaManager = null;\n    this.dataSource = null;\n    this.duckSchema = null;\n    this.colToPropCache.length = 0;\n    this.propToColCache.clear();\n    this.propToColCache = void 0;\n  }\n}\nexport default DataMap;","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport { toUpperCaseFirst } from \"../helpers/string.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\nimport DataMap from \"./dataMap.mjs\";\nimport { deepClone } from \"../helpers/object.mjs\";\nimport { setAttribute } from \"../helpers/dom/element.mjs\";\nimport { A11Y_COLCOUNT, A11Y_ROWCOUNT } from \"../helpers/a11y.mjs\";\n/**\n * Loads new data to Handsontable.\n *\n * @private\n * @param {Array} data Array of arrays or array of objects containing data.\n * @param {Function} setDataMapFunction Function that updates the datamap instance.\n * @param {Function} callbackFunction Function that takes care of updating Handsontable to the new dataset. Called\n * right before the `after-` hooks.\n * @param {object} config The configuration object containing all the needed dependency references and information.\n * @param {Handsontable.Core} config.hotInstance The Handsontable instance.\n * @param {DataMap} config.dataMap The current `dataMap` instance.\n * @param {DataSource} config.dataSource The current `dataSource` instance.\n * @param {string} config.internalSource The immediate internal source of the `replaceData` call.\n * @param {string} config.source The source of the call.\n * @param {boolean} config.firstRun `true` if it's a first call in the Handsontable lifecycle, `false` otherwise.\n * @fires Hooks#beforeLoadData\n * @fires Hooks#beforeUpdateData\n * @fires Hooks#afterLoadData\n * @fires Hooks#afterUpdateData\n * @fires Hooks#afterChange\n */\nfunction replaceData(data, setDataMapFunction, callbackFunction, config) {\n  const {\n    hotInstance,\n    dataMap,\n    dataSource,\n    internalSource,\n    source,\n    metaManager,\n    firstRun\n  } = config;\n  const capitalizedInternalSource = toUpperCaseFirst(internalSource);\n  const tableMeta = hotInstance.getSettings();\n  if (Array.isArray(tableMeta.dataSchema)) {\n    hotInstance.dataType = 'array';\n  } else if (isFunction(tableMeta.dataSchema)) {\n    hotInstance.dataType = 'function';\n  } else {\n    hotInstance.dataType = 'object';\n  }\n  if (dataMap) {\n    dataMap.destroy();\n  }\n  data = hotInstance.runHooks(`before${capitalizedInternalSource}`, data, firstRun, source);\n  const newDataMap = new DataMap(hotInstance, data, metaManager);\n\n  // We need to apply the new dataMap immediately, because of some asynchronous logic in the\n  // `autoRowSize`/`autoColumnSize` plugins.\n  setDataMapFunction(newDataMap);\n  if (typeof data === 'object' && data !== null) {\n    if (!(data.push && data.splice)) {\n      // check if data is array. Must use duck-type check so Backbone Collections also pass it\n      // when data is not an array, attempt to make a single-row array of it\n      // eslint-disable-next-line no-param-reassign\n      data = [data];\n    }\n  } else if (data === null) {\n    const dataSchema = newDataMap.getSchema();\n\n    // eslint-disable-next-line no-param-reassign\n    data = [];\n    let row;\n    let r = 0;\n    let rlen = 0;\n    for (r = 0, rlen = tableMeta.startRows; r < rlen; r++) {\n      if ((hotInstance.dataType === 'object' || hotInstance.dataType === 'function') && tableMeta.dataSchema) {\n        row = deepClone(dataSchema);\n        data.push(row);\n      } else if (hotInstance.dataType === 'array') {\n        row = deepClone(dataSchema[0]);\n        data.push(row);\n      } else {\n        row = [];\n        for (let c = 0, clen = tableMeta.startCols; c < clen; c++) {\n          row.push(null);\n        }\n        data.push(row);\n      }\n    }\n  } else {\n    throw new Error(`${internalSource} only accepts array of objects or array of arrays (${typeof data} given)`);\n  }\n  if (Array.isArray(data[0])) {\n    hotInstance.dataType = 'array';\n  }\n  tableMeta.data = data;\n  newDataMap.dataSource = data;\n  dataSource.data = data;\n  dataSource.dataType = hotInstance.dataType;\n  dataSource.colToProp = newDataMap.colToProp.bind(newDataMap);\n  dataSource.propToCol = newDataMap.propToCol.bind(newDataMap);\n  dataSource.countCachedColumns = newDataMap.countCachedColumns.bind(newDataMap);\n\n  // Run the logic for reassuring that the table structure fits the new dataset.\n  callbackFunction(newDataMap);\n  hotInstance.runHooks(`after${capitalizedInternalSource}`, data, firstRun, source);\n\n  // TODO: rethink the way the `afterChange` hook is being run here in the core `init` method.\n  if (!firstRun) {\n    hotInstance.runHooks('afterChange', null, internalSource);\n    hotInstance.render();\n  }\n  if (hotInstance.getSettings().ariaTags) {\n    setAttribute(hotInstance.rootElement, [A11Y_ROWCOUNT(hotInstance.countRows()), A11Y_COLCOUNT(hotInstance.countCols())]);\n  }\n}\nexport { replaceData };","/**\n * Group name for keyboard shortcuts that are active when the cell is selected.\n */\nexport const GRID_GROUP = 'gridDefault';\n/**\n * Group name for keyboard shortcuts that are active when the cell editor is active.\n */\nexport const EDITOR_EDIT_GROUP = 'editorManager.handlingEditor';","import { setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { A11Y_PRESENTATION } from \"../../helpers/a11y.mjs\";\n/**\n * Installs a focus detector module. The module appends two input elements into the DOM side by side.\n * When the first input is focused, then it means that a user entered to the component using the TAB key\n * from the element above. When the second input is focused, a user enters to the component from\n * the element below the table. Each action, once detected, triggers the specific hook.\n *\n * @param {Handsontable} hot The Handsontable instance.\n * @param {{ onFocusFromTop: Function, onFocusFromBottom: Function }} hooks An object with defined callbacks to call.\n * @returns {{ activate: Function, deactivate: Function }}\n */\nexport function installFocusDetector(hot) {\n  let hooks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const rootElement = hot.rootElement;\n  const inputTrapTop = createInputElement(hot);\n  const inputTrapBottom = createInputElement(hot);\n  inputTrapTop.addEventListener('focus', () => hooks === null || hooks === void 0 ? void 0 : hooks.onFocusFromTop());\n  inputTrapBottom.addEventListener('focus', () => hooks === null || hooks === void 0 ? void 0 : hooks.onFocusFromBottom());\n  rootElement.firstChild.before(inputTrapTop);\n  rootElement.lastChild.after(inputTrapBottom);\n  return {\n    /**\n     * Activates the detector by resetting the tabIndex of the input elements.\n     */\n    activate() {\n      hot._registerTimeout(() => {\n        inputTrapTop.tabIndex = 0;\n        inputTrapBottom.tabIndex = 0;\n      }, 10);\n    },\n    /**\n     * Deactivates the detector by setting tabIndex to -1.\n     */\n    deactivate() {\n      hot._registerTimeout(() => {\n        inputTrapTop.tabIndex = -1;\n        inputTrapBottom.tabIndex = -1;\n      }, 10);\n    }\n  };\n}\n\n/**\n * Creates a new HTML input element.\n *\n * @param {Handsontable} hot The Handsontable instance.\n * @returns {HTMLInputElement}\n */\nfunction createInputElement(hot) {\n  const rootDocument = hot.rootDocument;\n  const input = rootDocument.createElement('input');\n  input.type = 'text';\n  input.classList.add('htFocusCatcher');\n  if (hot.getSettings().ariaTags) {\n    setAttribute(input, [A11Y_PRESENTATION()]);\n  }\n  return input;\n}","import { GRID_GROUP } from \"../../shortcutContexts/index.mjs\";\nimport { installFocusDetector } from \"./focusDetector.mjs\";\n/**\n * Installs a focus catcher module. The module observes when the table is focused and depending on\n * from the which side it was focused on it selects a specified cell or releases the TAB navigation\n * to the browser.\n *\n * @param {Core} hot The Handsontable instance.\n */\nexport function installFocusCatcher(hot) {\n  let recentlyAddedFocusCoords;\n  const {\n    activate,\n    deactivate\n  } = installFocusDetector(hot, {\n    onFocusFromTop() {\n      var _recentlyAddedFocusCo;\n      const mostTopStartCoords = (_recentlyAddedFocusCo = recentlyAddedFocusCoords) !== null && _recentlyAddedFocusCo !== void 0 ? _recentlyAddedFocusCo : getMostTopStartPosition(hot);\n      if (mostTopStartCoords) {\n        hot.runHooks('modifyFocusOnTabNavigation', 'from_above', mostTopStartCoords);\n        hot.selectCell(mostTopStartCoords.row, mostTopStartCoords.col);\n      }\n      hot.listen();\n    },\n    onFocusFromBottom() {\n      var _recentlyAddedFocusCo2;\n      const mostBottomEndCoords = (_recentlyAddedFocusCo2 = recentlyAddedFocusCoords) !== null && _recentlyAddedFocusCo2 !== void 0 ? _recentlyAddedFocusCo2 : getMostBottomEndPosition(hot);\n      if (mostBottomEndCoords) {\n        hot.runHooks('modifyFocusOnTabNavigation', 'from_below', mostBottomEndCoords);\n        hot.selectCell(mostBottomEndCoords.row, mostBottomEndCoords.col);\n      }\n      hot.listen();\n    }\n  });\n  hot.addHook('afterListen', () => deactivate());\n  hot.addHook('afterUnlisten', () => activate());\n  hot.addHook('afterSelection', () => {\n    var _hot$getSelectedRange;\n    recentlyAddedFocusCoords = (_hot$getSelectedRange = hot.getSelectedRangeLast()) === null || _hot$getSelectedRange === void 0 ? void 0 : _hot$getSelectedRange.highlight;\n  });\n  hot.getShortcutManager().getContext('grid').addShortcut({\n    keys: [['Tab'], ['Shift', 'Tab']],\n    callback: event => {\n      var _hot$getSelectedRange2;\n      const {\n        disableTabNavigation,\n        autoWrapRow\n      } = hot.getSettings();\n      if (disableTabNavigation) {\n        hot.deselectCell();\n        hot.unlisten();\n        return false;\n      }\n      const isSelected = hot.selection.isSelected();\n      const highlight = (_hot$getSelectedRange2 = hot.getSelectedRangeLast()) === null || _hot$getSelectedRange2 === void 0 ? void 0 : _hot$getSelectedRange2.highlight;\n      const mostTopStartCoords = getMostTopStartPosition(hot);\n      const mostBottomEndCoords = getMostBottomEndPosition(hot);\n\n      // For disabled `autoWrapRow` option set the row to the same position as the currently selected row.\n      if (!autoWrapRow) {\n        mostTopStartCoords.row = highlight.row;\n        mostBottomEndCoords.row = highlight.row;\n      }\n      if (event.shiftKey && (!isSelected || highlight.isEqual(mostTopStartCoords)) || !event.shiftKey && (!isSelected || highlight.isEqual(mostBottomEndCoords))) {\n        hot.deselectCell();\n        hot.unlisten();\n        return false;\n      }\n      return true;\n    },\n    runOnlyIf: () => !hot.getSettings().minSpareCols,\n    preventDefault: false,\n    stopPropagation: false,\n    position: 'before',\n    relativeToGroup: GRID_GROUP,\n    group: 'focusCatcher'\n  });\n}\n\n/**\n * Gets the coordinates of the most top-start cell or header (depends on the table settings and its size).\n *\n * @param {Core} hot The Handsontable instance.\n * @returns {CellCoords|null}\n */\nfunction getMostTopStartPosition(hot) {\n  const {\n    rowIndexMapper,\n    columnIndexMapper\n  } = hot;\n  const {\n    navigableHeaders\n  } = hot.getSettings();\n  let topRow = navigableHeaders && hot.countColHeaders() > 0 ? -hot.countColHeaders() : 0;\n  let startColumn = navigableHeaders && hot.countRowHeaders() > 0 ? -hot.countRowHeaders() : 0;\n  if (topRow === 0) {\n    topRow = rowIndexMapper.getVisualFromRenderableIndex(topRow);\n  }\n  if (startColumn === 0) {\n    startColumn = columnIndexMapper.getVisualFromRenderableIndex(startColumn);\n  }\n  if (topRow === null || startColumn === null) {\n    return null;\n  }\n  return hot._createCellCoords(topRow, startColumn);\n}\n\n/**\n * Gets the coordinates of the most bottom-end cell or header (depends on the table settings and its size).\n *\n * @param {Core} hot The Handsontable instance.\n * @returns {CellCoords|null}\n */\nfunction getMostBottomEndPosition(hot) {\n  var _rowIndexMapper$getVi, _columnIndexMapper$ge;\n  const {\n    rowIndexMapper,\n    columnIndexMapper\n  } = hot;\n  const {\n    navigableHeaders\n  } = hot.getSettings();\n  let bottomRow = rowIndexMapper.getRenderableIndexesLength() - 1;\n  let endColumn = columnIndexMapper.getRenderableIndexesLength() - 1;\n  if (bottomRow < 0) {\n    if (!navigableHeaders || hot.countColHeaders() === 0) {\n      return null;\n    }\n    bottomRow = -1;\n  }\n  if (endColumn < 0) {\n    if (!navigableHeaders || hot.countColHeaders() === 0) {\n      return null;\n    }\n    endColumn = -1;\n  }\n  return hot._createCellCoords((_rowIndexMapper$getVi = rowIndexMapper.getVisualFromRenderableIndex(bottomRow)) !== null && _rowIndexMapper$getVi !== void 0 ? _rowIndexMapper$getVi : bottomRow, (_columnIndexMapper$ge = columnIndexMapper.getVisualFromRenderableIndex(endColumn)) !== null && _columnIndexMapper$ge !== void 0 ? _columnIndexMapper$ge : endColumn);\n}","// This file handles key-name discrepancies between browsers.\n// For the list of discrepancies, go to: https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.\nconst mappings = new Map([[' ', 'space'],\n// custom mapping\n['spacebar', 'space'], ['scroll', 'scrolllock'], ['del', 'delete'], ['esc', 'escape'], ['medianexttrack', 'mediatracknext'], ['mediaprevioustrack', 'mediatrackprevious'], ['volumeup', 'audiovolumeup'], ['volumedown', 'audiovolumedown'], ['volumemute', 'audiovolumemute'], ['multiply', '*'], ['add', '+'], ['divide', '/'], ['subtract', '-'], ['left', 'arrowleft'], ['right', 'arrowright'], ['up', 'arrowup'], ['down', 'arrowdown']]);\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * Get a single, normalized string from the list of the `KeyboardEvent.key` properties.\n *\n * @param {Array<string>} keys The list of the `KeyboardEvent.key` properties\n * @returns {string}\n */\nexport const normalizeKeys = keys => {\n  return keys.map(key => {\n    const lowercaseKey = key.toLowerCase();\n    if (mappings.has(lowercaseKey)) {\n      return mappings.get(lowercaseKey);\n    }\n    return lowercaseKey;\n  }).sort().join('+');\n};\n\n/**\n * Get the list of the `KeyboardEvent.key` properties from a single, normalized string.\n *\n * @param {string} normalizedKeys A single, normalized string that contains the list of the `KeyboardEvent.key` properties\n * @returns {Array<string>}\n */\nexport const getKeysList = normalizedKeys => {\n  return normalizedKeys.split('+');\n};\n\n/**\n * The regex tests if the event.code matches to the pattern and it's used to extract letters and digits from\n * the string.\n */\nconst codeToKeyRegExp = new RegExp('^(?:Key|Digit)([A-Z0-9])$');\n\n/**\n * Normalizes a keyboard event key value to a key before its modification. When the keyboard event\n * is triggered with Alt, Control or Shift keys the `key` property contains modified key e.g. for Alt+L\n * it will be `ł`. But that value is only valid for polish keyboard layout. To fix that limitations, for\n * letters and digits the value is taken from the `code` property which holds original value before\n * transformation.\n *\n * @param {Event} event The KeyboardEvent object.\n * @returns {string}\n */\nexport const normalizeEventKey = _ref => {\n  let {\n    key,\n    code\n  } = _ref;\n  return (codeToKeyRegExp.test(code) ? code.replace(codeToKeyRegExp, '$1') : key).toLowerCase();\n};","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { createUniqueMap } from \"../utils/dataStructures/uniqueMap.mjs\";\nimport { normalizeKeys, getKeysList } from \"./utils.mjs\";\nimport { isUndefined, isDefined } from \"../helpers/mixed.mjs\";\nimport { isFunction } from \"../helpers/function.mjs\";\nimport { objectEach, isObject } from \"../helpers/object.mjs\";\nimport { toSingleLine } from \"../helpers/templateLiteralTag.mjs\";\nconst __kindOf = Symbol('shortcut-context');\n\n/**\n * Checks if the provided object is a context object.\n *\n * @param {*} objectToCheck An object to check.\n * @returns {boolean}\n */\nexport function isContextObject(objectToCheck) {\n  return isObject(objectToCheck) && objectToCheck.__kindOf === __kindOf;\n}\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * The `ShortcutContext` API lets you store and manage [keyboard shortcuts](@/guides/accessories-and-menus/keyboard-shortcuts.md) in a given [context](@/guides/accessories-and-menus/keyboard-shortcuts.md#keyboard-shortcut-contexts).\n *\n * Each `ShortcutContext` object stores and manages its own set of keyboard shortcuts.\n *\n * @alias ShortcutContext\n * @class ShortcutContext\n * @param {string} name The name of the keyboard shortcut context\n * @returns {object}\n */\nexport const createContext = name => {\n  const SHORTCUTS = createUniqueMap({\n    errorIdExists: keys => `The \"${keys}\" shortcut is already registered in the \"${name}\" context.`\n  });\n\n  /**\n   * Add a keyboard shortcut to this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {object} options The shortcut's options\n   * @param {Array<Array<string>>} options.keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   * @param {Function} options.callback The shortcut's action\n   * @param {object} options.group A group of shortcuts to which the shortcut belongs\n   * @param {object} [options.runOnlyIf] A condition on which the shortcut's action runs\n   * @param {object} [options.stopPropagation=false] If set to `true`: stops the event's propagation\n   * @param {object} [options.captureCtrl=false] If set to `true`: captures the state of the Control/Meta modifier key\n   * @param {object} [options.preventDefault=true] If set to `true`: prevents the default behavior\n   * @param {object} [options.position='after'] The order in which the shortcut's action runs:\n   * `'before'` or `'after'` the `relativeToGroup` group of actions\n   * @param {object} [options.relativeToGroup] The name of a group of actions, used to determine an action's `position`\n   * @param {object} [options.forwardToContext] The context object where the event will be forwarded to.\n   */\n  const addShortcut = function () {\n    let {\n      keys,\n      callback,\n      group,\n      runOnlyIf = () => true,\n      captureCtrl = false,\n      preventDefault = true,\n      stopPropagation = false,\n      relativeToGroup,\n      position,\n      forwardToContext\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (isUndefined(group)) {\n      throw new Error('You need to define the shortcut\\'s group.');\n    }\n    if (isFunction(callback) === false) {\n      throw new Error('The shortcut\\'s callback needs to be a function.');\n    }\n    if (Array.isArray(keys) === false) {\n      throw new Error(toSingleLine`Pass the shortcut\\'s keys as an array of arrays,\\x20\n      using the KeyboardEvent.key properties:\\x20\n      https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values.`);\n    }\n    const newShortcut = {\n      callback,\n      group,\n      runOnlyIf,\n      captureCtrl,\n      preventDefault,\n      stopPropagation\n    };\n    if (isDefined(relativeToGroup)) {\n      [newShortcut.relativeToGroup, newShortcut.position] = [relativeToGroup, position];\n    }\n    if (isContextObject(forwardToContext)) {\n      newShortcut.forwardToContext = forwardToContext;\n    }\n    keys.forEach(keyCombination => {\n      const normalizedKeys = normalizeKeys(keyCombination);\n      const hasKeyCombination = SHORTCUTS.hasItem(normalizedKeys);\n      if (hasKeyCombination) {\n        const shortcuts = SHORTCUTS.getItem(normalizedKeys);\n        let insertionIndex = shortcuts.findIndex(shortcut => shortcut.group === relativeToGroup);\n        if (insertionIndex !== -1) {\n          if (position === 'before') {\n            insertionIndex -= 1;\n          } else {\n            insertionIndex += 1;\n          }\n        } else {\n          insertionIndex = shortcuts.length;\n        }\n        shortcuts.splice(insertionIndex, 0, newShortcut);\n      } else {\n        SHORTCUTS.addItem(normalizedKeys, [newShortcut]);\n      }\n    });\n  };\n\n  /**\n   * Add multiple keyboard shortcuts to this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<object>} shortcuts List of shortcuts to add to this shortcut context\n   * @param {object} [options] A shortcut's options\n   * @param {Function} [options.callback] A shortcut's action\n   * @param {object} [options.group] A group of shortcuts to which a shortcut belongs\n   * @param {object} [options.runOnlyIf] A condition on which a shortcut's action runs\n   * @param {object} [options.stopPropagation=false] If set to `true`: stops the event's propagation\n   * @param {object} [options.preventDefault=true] If set to `true`: prevents the default behavior\n   * @param {object} [options.position='after'] The order in which a shortcut's action runs:\n   * `'before'` or `'after'` a `relativeToGroup` group of actions\n   * @param {object} [options.relativeToGroup] The name of a group of actions, used to determine an action's `position`\n   * @param {object} [options.forwardToContext] The context object where the event will be forwarded to.\n   */\n  const addShortcuts = function (shortcuts) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    shortcuts.forEach(shortcut => {\n      objectEach(options, (value, key) => {\n        if (Object.prototype.hasOwnProperty.call(shortcut, key) === false) {\n          shortcut[key] = options[key];\n        }\n      });\n      addShortcut(shortcut);\n    });\n  };\n\n  /**\n   * Remove a shortcut from this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<string>} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   */\n  const removeShortcutsByKeys = keys => {\n    const normalizedKeys = normalizeKeys(keys);\n    SHORTCUTS.removeItem(normalizedKeys);\n  };\n\n  /**\n   * Remove a group of shortcuts from this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {string} group The name of the group of shortcuts\n   */\n  const removeShortcutsByGroup = group => {\n    const shortcuts = SHORTCUTS.getItems();\n    shortcuts.forEach(_ref => {\n      let [normalizedKeys, shortcutOptions] = _ref;\n      const leftOptions = shortcutOptions.filter(option => option.group !== group);\n      if (leftOptions.length === 0) {\n        removeShortcutsByKeys(getKeysList(normalizedKeys));\n      } else {\n        shortcutOptions.length = 0;\n        shortcutOptions.push(...leftOptions);\n      }\n    });\n  };\n\n  /**\n   * Get a shortcut's details.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<string>} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   * @returns {Array}\n   */\n  const getShortcuts = keys => {\n    const normalizedKeys = normalizeKeys(keys);\n    const shortcuts = SHORTCUTS.getItem(normalizedKeys);\n    return isDefined(shortcuts) ? shortcuts.slice() : [];\n  };\n\n  /**\n   * Check if a shortcut exists in this context.\n   *\n   * @memberof ShortcutContext#\n   * @param {Array<string>} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers\n   * @returns {boolean}\n   */\n  const hasShortcut = keys => {\n    const normalizedKeys = normalizeKeys(keys);\n    return SHORTCUTS.hasItem(normalizedKeys);\n  };\n  return {\n    __kindOf,\n    addShortcut,\n    addShortcuts,\n    getShortcuts,\n    hasShortcut,\n    removeShortcutsByKeys,\n    removeShortcutsByGroup\n  };\n};","/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * Create a key observer.\n *\n * @returns {object}\n */\nexport function createKeysObserver() {\n  const PRESSED_KEYS = new Set();\n  return {\n    /**\n     * Press a key.\n     *\n     * @param {string} key Names of the shortcut's keys,\n     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n     * in lowercase or uppercase, unified across browsers\n     */\n    press(key) {\n      PRESSED_KEYS.add(key);\n    },\n    /**\n     * Release a pressed key.\n     *\n     * @param {string} key Names of the shortcut's keys,\n     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n     * in lowercase or uppercase, unified across browsers\n     */\n    release(key) {\n      PRESSED_KEYS.delete(key);\n    },\n    /**\n     * Release all pressed keys.\n     */\n    releaseAll() {\n      PRESSED_KEYS.clear();\n    },\n    /**\n     * Check if a key is pressed.\n     *\n     * @param {string} key Names of the shortcut's keys,\n     * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n     * in lowercase or uppercase, unified across browsers\n     * @returns {boolean}\n     */\n    isPressed(key) {\n      return PRESSED_KEYS.has(key);\n    }\n  };\n}","import \"core-js/modules/es.array.push.js\";\nimport { createKeysObserver } from \"./keyObserver.mjs\";\nimport { normalizeEventKey } from \"./utils.mjs\";\nimport { isImmediatePropagationStopped } from \"../helpers/dom/event.mjs\";\nimport { getParentWindow } from \"../helpers/dom/element.mjs\";\nimport { isMacOS } from \"../helpers/browser.mjs\";\nconst MODIFIER_KEYS = ['meta', 'alt', 'shift', 'control'];\nconst modifierKeysObserver = createKeysObserver();\nlet instanceCounter = 0;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * A key recorder, used for tracking key events.\n *\n * @param {EventTarget} ownerWindow A starting `window` element\n * @param {Function} handleEvent A condition on which event is handled.\n * @param {Function} beforeKeyDown A hook fired before the `keydown` event is handled.\n * @param {Function} afterKeyDown A hook fired after the `keydown` event is handled\n * @param {Function} callback `KeyEvent`'s listener's callback function\n * @returns {object}\n */\nexport function useRecorder(ownerWindow, handleEvent, beforeKeyDown, afterKeyDown, callback) {\n  /**\n   * Check if a pressed key is tracked or not.\n   *\n   * @param {string} pressedKey A pressed key\n   * @returns {boolean}\n   */\n  const isModifierKey = pressedKey => {\n    return MODIFIER_KEYS.includes(pressedKey);\n  };\n\n  /**\n   * Get every pressed modifier key from the performed `KeyboardEvent`.\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object.\n   * @param {boolean} [mergeMetaKeys=false] If `true,` the function will return the \"control\" and \"meta\"\n   *                                        modifiers keys as the \"control/meta\" name. This allows creating\n   *                                        keyboard shortcuts with modifier key that trigger the shortcut\n   *                                        actions depend on the OS keyboard layout (the Meta key for macOS\n   *                                        and Control for non macOS system).\n   * @returns {string[]}\n   */\n  const getPressedModifierKeys = function (event) {\n    let mergeMetaKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const pressedModifierKeys = [];\n    if (event.altKey) {\n      pressedModifierKeys.push('alt');\n    }\n    if (mergeMetaKeys && (event.ctrlKey || event.metaKey)) {\n      pressedModifierKeys.push('control/meta');\n    } else {\n      if (event.ctrlKey) {\n        pressedModifierKeys.push('control');\n      }\n      if (event.metaKey) {\n        pressedModifierKeys.push('meta');\n      }\n    }\n    if (event.shiftKey) {\n      pressedModifierKeys.push('shift');\n    }\n    return pressedModifierKeys;\n  };\n\n  /**\n   * `KeyboardEvent`'s callback function\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object\n   */\n  const onkeydown = event => {\n    if (handleEvent(event) === false) {\n      return;\n    }\n    const result = beforeKeyDown(event);\n\n    // keyCode 229 aka 'uninitialized' doesn't take into account with editors. This key code is\n    // produced when unfinished character is entering using the IME editor. It is fired on macOS,\n    // Windows and linux (ubuntu) with installed ibus-pinyin package.\n    if (event.keyCode === 229 || result === false || isImmediatePropagationStopped(event)) {\n      return;\n    }\n    const pressedKey = normalizeEventKey(event);\n    let extraModifierKeys = [];\n    if (!isModifierKey(pressedKey)) {\n      extraModifierKeys = getPressedModifierKeys(event);\n    }\n    const pressedKeys = [pressedKey].concat(extraModifierKeys);\n    const isExecutionCancelled = callback(event, pressedKeys);\n    if (!isExecutionCancelled && (isMacOS() && extraModifierKeys.includes('meta') || !isMacOS() && extraModifierKeys.includes('control'))) {\n      // Trigger the callback for the virtual OS-dependent \"control/meta\" key\n      callback(event, [pressedKey].concat(getPressedModifierKeys(event, true)));\n    }\n    afterKeyDown(event);\n  };\n\n  /**\n   * `KeyboardEvent`'s callback function for observing the pressed state of the mod keys.\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object\n   */\n  const onkeydownForModKeys = event => {\n    const pressedKey = normalizeEventKey(event);\n    if (isModifierKey(pressedKey)) {\n      modifierKeysObserver.press(pressedKey);\n    }\n  };\n\n  /**\n   * `KeyboardEvent`'s callback function for observing the pressed state of the mod keys.\n   *\n   * @private\n   * @param {KeyboardEvent} event The event object\n   */\n  const onkeyupForModKeys = event => {\n    const pressedKey = normalizeEventKey(event);\n    if (isModifierKey(pressedKey)) {\n      modifierKeysObserver.release(pressedKey);\n    }\n  };\n\n  /**\n   * `FocusEvent`'s callback function\n   *\n   * @private\n   */\n  const onblur = () => {\n    modifierKeysObserver.releaseAll();\n  };\n\n  /**\n   * Add event listeners to the starting window and its parents' windows.\n   */\n  const mount = () => {\n    let eventTarget = ownerWindow;\n    instanceCounter += 1;\n    while (eventTarget) {\n      if (instanceCounter === 1) {\n        eventTarget.document.documentElement.addEventListener('keydown', onkeydownForModKeys);\n        eventTarget.document.documentElement.addEventListener('keyup', onkeyupForModKeys);\n      }\n      eventTarget.document.documentElement.addEventListener('keydown', onkeydown);\n      eventTarget.document.documentElement.addEventListener('blur', onblur);\n      eventTarget = getParentWindow(eventTarget);\n    }\n  };\n\n  /**\n   * Remove event listeners from the starting window and its parents' windows.\n   */\n  const unmount = () => {\n    let eventTarget = ownerWindow;\n    instanceCounter -= 1;\n    while (eventTarget) {\n      if (instanceCounter === 0) {\n        eventTarget.document.documentElement.removeEventListener('keydown', onkeydownForModKeys);\n        eventTarget.document.documentElement.removeEventListener('keyup', onkeyupForModKeys);\n      }\n      eventTarget.document.documentElement.removeEventListener('keydown', onkeydown);\n      eventTarget.document.documentElement.removeEventListener('blur', onblur);\n      eventTarget = getParentWindow(eventTarget);\n    }\n  };\n  return {\n    mount,\n    unmount,\n    isPressed: key => modifierKeysObserver.isPressed(key),\n    releasePressedKeys: () => modifierKeysObserver.releaseAll()\n  };\n}","import \"core-js/modules/es.error.cause.js\";\nimport { createUniqueMap } from \"../utils/dataStructures/uniqueMap.mjs\";\nimport { stopImmediatePropagation } from \"../helpers/dom/event.mjs\";\nimport { createContext, isContextObject } from \"./context.mjs\";\nimport { useRecorder } from \"./recorder.mjs\";\nimport { toSingleLine } from \"../helpers/templateLiteralTag.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * The `ShortcutManager` API lets you store and manage [keyboard shortcut contexts](@/guides/accessories-and-menus/keyboard-shortcuts.md#keyboard-shortcut-contexts) ([`ShortcutContext`](@/api/shortcutContext.md)).\n *\n * Each `ShortcutManager` object:\n * - Stores and manages its own set of keyboard shortcut contexts.\n * - Listens to the [`KeyboardEvent`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent) events and runs actions for them.\n *\n * @alias ShortcutManager\n * @class ShortcutManager\n * @param {object} options The manager's options\n * @param {EventTarget} options.ownerWindow A starting `window` element\n * @param {Function} options.handleEvent A condition on which `event` is handled.\n * @param {Function} options.beforeKeyDown A hook fired before the `keydown` event is handled. You can use it to [block a keyboard shortcut's actions](@/guides/accessories-and-menus/keyboard-shortcuts.md#block-a-keyboard-shortcut-s-actions).\n * @param {Function} options.afterKeyDown A hook fired after the `keydown` event is handled\n */\nexport const createShortcutManager = _ref => {\n  let {\n    ownerWindow,\n    handleEvent,\n    beforeKeyDown,\n    afterKeyDown\n  } = _ref;\n  /**\n   * A unique map that stores keyboard shortcut contexts.\n   *\n   * @type {UniqueMap}\n   */\n  const CONTEXTS = createUniqueMap({\n    errorIdExists: keys => `The \"${keys}\" context name is already registered.`\n  });\n  /**\n   * The name of the active [`ShortcutContext`](@/api/shortcutContext.md).\n   *\n   * @type {string}\n   */\n  let activeContextName = 'grid';\n\n  /**\n   * Create a new [`ShortcutContext`](@/api/shortcutContext.md) object.\n   *\n   * @memberof ShortcutManager#\n   * @param {string} contextName The name of the new shortcut context\n   * @returns {object}\n   */\n  const addContext = contextName => {\n    const context = createContext(contextName);\n    CONTEXTS.addItem(contextName, context);\n    return context;\n  };\n\n  /**\n   * Get the ID of the active [`ShortcutContext`](@/api/shortcutContext.md).\n   *\n   * @memberof ShortcutManager#\n   * @returns {string}\n   */\n  const getActiveContextName = () => {\n    return activeContextName;\n  };\n\n  /**\n   * Get a keyboard shortcut context by its name.\n   *\n   * @memberof ShortcutManager#\n   * @param {string} contextName The name of the shortcut context\n   * @returns {object|undefined} A [`ShortcutContext`](@/api/shortcutContext.md) object that stores registered shortcuts\n   */\n  const getContext = contextName => {\n    return CONTEXTS.getItem(contextName);\n  };\n\n  /**\n   * Start listening to keyboard shortcuts within a given [`ShortcutContext`](@/api/shortcutContext.md).\n   *\n   * @memberof ShortcutManager#\n   * @param {string} contextName The name of the shortcut context\n   */\n  const setActiveContextName = contextName => {\n    if (!CONTEXTS.hasItem(contextName)) {\n      throw new Error(toSingleLine`You've tried to activate the \"${contextName}\" shortcut context\\x20\n        that does not exist. Before activation, register the context using the \"addContext\" method.`);\n    }\n    activeContextName = contextName;\n  };\n\n  /**\n   * This variable relates to the `captureCtrl` shortcut option,\n   * which allows for capturing the state of the Control/Meta modifier key.\n   * Some of the default keyboard shortcuts related to cell selection need this feature for working properly.\n   *\n   * @type {boolean}\n   */\n  let isCtrlKeySilenced = false;\n\n  /**\n   * A callback function for listening events from the recorder.\n   *\n   * @param {KeyboardEvent} event The keyboard event.\n   * @param {string[]} keys Names of the shortcut's keys,\n   * (coming from [`KeyboardEvent.key`](https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/key/Key_Values)),\n   * in lowercase or uppercase, unified across browsers.\n   * @param {object | string} context The context object or name.\n   * @returns {boolean}\n   */\n  const recorderCallback = function (event, keys) {\n    let context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : getActiveContextName();\n    const activeContext = isContextObject(context) ? context : getContext(context);\n    let isExecutionCancelled = false;\n    if (!activeContext.hasShortcut(keys)) {\n      return isExecutionCancelled;\n    }\n\n    // Processing just actions being in stack at the moment of shortcut pressing (without respecting additions/removals performed dynamically).\n    const shortcuts = activeContext.getShortcuts(keys);\n    for (let index = 0; index < shortcuts.length; index++) {\n      const {\n        callback,\n        runOnlyIf,\n        preventDefault,\n        stopPropagation,\n        captureCtrl,\n        forwardToContext\n      } = shortcuts[index];\n      if (runOnlyIf(event) !== false) {\n        isCtrlKeySilenced = captureCtrl;\n        isExecutionCancelled = callback(event, keys) === false;\n        isCtrlKeySilenced = false;\n        if (preventDefault) {\n          event.preventDefault();\n        }\n        if (stopPropagation) {\n          stopImmediatePropagation(event);\n          event.stopPropagation();\n        }\n        if (isExecutionCancelled) {\n          break;\n        }\n        if (forwardToContext) {\n          recorderCallback(event, keys, forwardToContext);\n        }\n      }\n    }\n    return isExecutionCancelled;\n  };\n\n  /**\n   * Internal key recorder.\n   *\n   * @private\n   */\n  const keyRecorder = useRecorder(ownerWindow, handleEvent, beforeKeyDown, afterKeyDown, recorderCallback);\n  keyRecorder.mount();\n  return {\n    addContext,\n    getActiveContextName,\n    getContext,\n    setActiveContextName,\n    /**\n     * Returns whether `control` or `meta` keys are pressed.\n     *\n     * @memberof ShortcutManager#\n     * @type {Function}\n     * @returns {boolean}\n     */\n    isCtrlPressed: () => !isCtrlKeySilenced && (keyRecorder.isPressed('control') || keyRecorder.isPressed('meta')),\n    /**\n     * Release every previously pressed key.\n     *\n     * @type {Function}\n     * @memberof ShortcutManager#\n     */\n    releasePressedKeys: () => keyRecorder.releasePressedKeys(),\n    /**\n     * Destroy a context manager instance.\n     *\n     * @type {Function}\n     * @memberof ShortcutManager#\n     */\n    destroy: () => keyRecorder.unmount()\n  };\n};","export const command = {\n  name: 'editorCloseAndSave',\n  callback(hot, event, keys) {\n    const editorManager = hot._getEditorManager();\n    editorManager.closeEditorAndSaveChanges(hot.getShortcutManager().isCtrlPressed());\n    editorManager.moveSelectionAfterEnter(keys.includes('shift'));\n  }\n};","export const command = {\n  name: 'editorCloseWithoutSaving',\n  callback(hot) {\n    const editorManager = hot._getEditorManager();\n    editorManager.closeEditorAndRestoreOriginalValue(hot.getShortcutManager().isCtrlPressed());\n    editorManager.activeEditor.focus();\n  }\n};","export const command = {\n  name: 'editorFastOpen',\n  callback(hot, event) {\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isHeader()) {\n      return;\n    }\n    hot._getEditorManager().openEditor(null, event, true);\n  }\n};","import { stopImmediatePropagation } from \"../../../helpers/dom/event.mjs\";\nexport const command = {\n  name: 'editorOpen',\n  callback(hot, event, keys) {\n    const editorManager = hot._getEditorManager();\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isHeader()) {\n      return;\n    }\n    if (hot.getSettings().enterBeginsEditing) {\n      if (editorManager.cellProperties.readOnly) {\n        editorManager.moveSelectionAfterEnter();\n      } else {\n        editorManager.openEditor(null, event, true);\n      }\n    } else {\n      editorManager.moveSelectionAfterEnter(keys.includes('shift'));\n    }\n    stopImmediatePropagation(event); // required by HandsontableEditor\n  }\n};","import { command as closeAndSave } from \"./closeAndSave.mjs\";\nimport { command as closeWithoutSaving } from \"./closeWithoutSaving.mjs\";\nimport { command as fastOpen } from \"./fastOpen.mjs\";\nimport { command as open } from \"./open.mjs\";\n/**\n * Returns complete list of the shortcut commands for the cells editing feature.\n *\n * @returns {Function[]}\n */\nexport function getAllCommands() {\n  return [closeAndSave, closeWithoutSaving, fastOpen, open];\n}","export const command = {\n  name: 'extendCellsSelectionDown',\n  callback(hot) {\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isCell() || highlight.isHeader() && hot.selection.isSelectedByRowHeader()) {\n      hot.selection.transformEnd(1, 0);\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionDownByViewportHeight',\n  callback(hot) {\n    const {\n      to\n    } = hot.getSelectedRangeLast();\n    const nextRowIndexToSelect = Math.min(to.row + hot.countVisibleRows(), hot.countRows() - 1);\n    const row = hot.rowIndexMapper.getNearestNotHiddenIndex(nextRowIndexToSelect, -1);\n    if (row !== null) {\n      const coords = hot._createCellCoords(row, to.col);\n      const scrollPadding = to.row - hot.view.getFirstFullyVisibleRow();\n      const nextVerticalScroll = Math.min(coords.row - scrollPadding, hot.countRows() - 1);\n      hot.selection.setRangeEnd(coords);\n      hot.scrollViewportTo({\n        row: nextVerticalScroll,\n        verticalSnap: 'top',\n        horizontalSnap: 'start'\n      });\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionLeft',\n  callback(hot) {\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isCell() || highlight.isHeader() && hot.selection.isSelectedByColumnHeader()) {\n      hot.selection.transformEnd(0, -1 * hot.getDirectionFactor());\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionRight',\n  callback(hot) {\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isCell() || highlight.isHeader() && hot.selection.isSelectedByColumnHeader()) {\n      hot.selection.transformEnd(0, hot.getDirectionFactor());\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionToColumns',\n  callback(hot) {\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    if (hot.selection.isSelectedByRowHeader()) {\n      hot.selection.selectAll(true, true);\n    } else {\n      hot.selectColumns(from.col, to.col, highlight.row);\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionToMostBottom',\n  callback(hot) {\n    const {\n      selection,\n      rowIndexMapper\n    } = hot;\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    const isFocusHighlightedByHeader = highlight.isHeader() && hot.selection.isSelectedByRowHeader();\n    if (highlight.isCell() || isFocusHighlightedByHeader) {\n      const row = rowIndexMapper.getNearestNotHiddenIndex(hot.countRows() - 1, -1);\n      selection.setRangeStart(from.clone());\n\n      // Restore the row highlight by header flag after setting up a new selection.\n      if (isFocusHighlightedByHeader) {\n        selection.selectedByRowHeader.add(selection.getLayerLevel());\n      }\n      selection.setRangeEnd(hot._createCellCoords(row, to.col));\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionToMostInlineEnd',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isCell()) {\n      selection.setRangeEnd(hot._createCellCoords(selection.selectedRange.current().from.row, columnIndexMapper.getNearestNotHiddenIndex(hot.countCols() - 1, -1)));\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionToMostInlineStart',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isCell()) {\n      selection.setRangeEnd(hot._createCellCoords(selection.selectedRange.current().from.row, columnIndexMapper.getNearestNotHiddenIndex(0, 1)));\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionToMostLeft',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    const isFocusHighlightedByHeader = highlight.isHeader() && hot.selection.isSelectedByColumnHeader();\n    if (highlight.isCell() || isFocusHighlightedByHeader) {\n      const column = columnIndexMapper.getNearestNotHiddenIndex(...(hot.isRtl() ? [hot.countCols() - 1, -1] : [0, 1]));\n      selection.setRangeStart(from.clone());\n\n      // Restore the column highlight by header flag after setting up a new selection.\n      if (isFocusHighlightedByHeader) {\n        selection.selectedByColumnHeader.add(selection.getLayerLevel());\n      }\n      selection.setRangeEnd(hot._createCellCoords(to.row, column));\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionToMostRight',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    const isFocusHighlightedByHeader = highlight.isHeader() && hot.selection.isSelectedByColumnHeader();\n    if (highlight.isCell() || isFocusHighlightedByHeader) {\n      const column = columnIndexMapper.getNearestNotHiddenIndex(...(hot.isRtl() ? [0, 1] : [hot.countCols() - 1, -1]));\n      selection.setRangeStart(from.clone());\n\n      // Restore the column highlight by header flag after setting up a new selection.\n      if (isFocusHighlightedByHeader) {\n        selection.selectedByColumnHeader.add(selection.getLayerLevel());\n      }\n      selection.setRangeEnd(hot._createCellCoords(to.row, column));\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionToMostTop',\n  callback(hot) {\n    const {\n      selection,\n      rowIndexMapper\n    } = hot;\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    const isFocusHighlightedByHeader = highlight.isHeader() && hot.selection.isSelectedByRowHeader();\n    if (highlight.isCell() || isFocusHighlightedByHeader) {\n      const row = rowIndexMapper.getNearestNotHiddenIndex(0, 1);\n      selection.setRangeStart(from.clone());\n\n      // Restore the row highlight by header flag after setting up a new selection.\n      if (isFocusHighlightedByHeader) {\n        selection.selectedByRowHeader.add(selection.getLayerLevel());\n      }\n      selection.setRangeEnd(hot._createCellCoords(row, to.col));\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionToRows',\n  callback(hot) {\n    const {\n      highlight,\n      from,\n      to\n    } = hot.getSelectedRangeLast();\n    if (hot.selection.isSelectedByColumnHeader()) {\n      hot.selection.selectAll(true, true);\n    } else {\n      hot.selectRows(from.row, to.row, highlight.col);\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionUp',\n  callback(hot) {\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    if (highlight.isCell() || highlight.isHeader() && hot.selection.isSelectedByRowHeader()) {\n      hot.selection.transformEnd(-1, 0);\n    }\n  }\n};","export const command = {\n  name: 'extendCellsSelectionUpByViewportHeight',\n  callback(hot) {\n    const {\n      to\n    } = hot.getSelectedRangeLast();\n    const nextRowIndexToSelect = Math.max(to.row - hot.countVisibleRows(), 0);\n    const row = hot.rowIndexMapper.getNearestNotHiddenIndex(nextRowIndexToSelect, 1);\n    if (row !== null) {\n      const coords = hot._createCellCoords(row, to.col);\n      const scrollPadding = to.row - hot.view.getFirstFullyVisibleRow();\n      const nextVerticalScroll = Math.max(coords.row - scrollPadding, 0);\n      hot.selection.setRangeEnd(coords);\n      hot.scrollViewportTo({\n        row: nextVerticalScroll,\n        verticalSnap: 'top',\n        horizontalSnap: 'start'\n      });\n    }\n  }\n};","import { command as down } from \"./down.mjs\";\nimport { command as downByViewportHeight } from \"./downByViewportHeight.mjs\";\nimport { command as left } from \"./left.mjs\";\nimport { command as right } from \"./right.mjs\";\nimport { command as toColumns } from \"./toColumns.mjs\";\nimport { command as toMostBottom } from \"./toMostBottom.mjs\";\nimport { command as toMostInlineEnd } from \"./toMostInlineEnd.mjs\";\nimport { command as toMostInlineStart } from \"./toMostInlineStart.mjs\";\nimport { command as toMostLeft } from \"./toMostLeft.mjs\";\nimport { command as toMostRight } from \"./toMostRight.mjs\";\nimport { command as toMostTop } from \"./toMostTop.mjs\";\nimport { command as toRows } from \"./toRows.mjs\";\nimport { command as up } from \"./up.mjs\";\nimport { command as upByViewportHeight } from \"./upByViewportHeight.mjs\";\n/**\n * Returns complete list of the shortcut commands for the cells selection extending feature.\n *\n * @returns {Function[]}\n */\nexport function getAllCommands() {\n  return [down, downByViewportHeight, left, right, toColumns, toMostBottom, toMostInlineEnd, toMostInlineStart, toMostLeft, toMostRight, toMostTop, toRows, up, upByViewportHeight];\n}","export const command = {\n  name: 'moveCellSelectionDown',\n  callback(_ref) {\n    let {\n      selection\n    } = _ref;\n    selection.transformStart(1, 0);\n  }\n};","export const command = {\n  name: 'moveCellSelectionDownByViewportHeight',\n  callback(hot) {\n    const {\n      navigableHeaders\n    } = hot.getSettings();\n    const columnHeadersCount = navigableHeaders ? hot.countColHeaders() : 0;\n    const {\n      row\n    } = hot.getSelectedRangeLast().highlight;\n    let rowsStep = hot.countVisibleRows() + columnHeadersCount;\n\n    // if the last row is currently selected move the focus to the first row (if autoWrap is enabled)\n    if (row === hot.countRows() - 1) {\n      rowsStep = 1;\n\n      // if the next move would move the focus off the table calculate the delta to move the selection to\n      // the last row\n    } else if (row + rowsStep > hot.countRows()) {\n      rowsStep = hot.countRows() - row - 1;\n    }\n    hot.selection.transformStart(rowsStep, 0);\n    if (hot.getSelectedRangeLast().highlight.row < 0) {\n      hot.scrollViewportTo({\n        row: 0\n      });\n    }\n  }\n};","export const command = {\n  name: 'moveCellSelectionInlineEnd',\n  callback(hot, event) {\n    const settings = hot.getSettings();\n    const tabMoves = typeof settings.tabMoves === 'function' ? settings.tabMoves(event) : settings.tabMoves;\n    hot.selection.transformStart(-tabMoves.row, -tabMoves.col);\n  }\n};","export const command = {\n  name: 'moveCellSelectionInlineStart',\n  callback(hot, event) {\n    const settings = hot.getSettings();\n    const tabMoves = typeof settings.tabMoves === 'function' ? settings.tabMoves(event) : settings.tabMoves;\n    hot.selection.transformStart(tabMoves.row, tabMoves.col, true);\n  }\n};","export const command = {\n  name: 'moveCellSelectionLeft',\n  callback(hot) {\n    hot.selection.transformStart(0, -1 * hot.getDirectionFactor());\n  }\n};","export const command = {\n  name: 'moveCellSelectionRight',\n  callback(hot) {\n    hot.selection.transformStart(0, hot.getDirectionFactor());\n  }\n};","export const command = {\n  name: 'moveCellSelectionToMostBottom',\n  callback(hot) {\n    const {\n      col\n    } = hot.getSelectedRangeLast().highlight;\n    let row = hot.rowIndexMapper.getNearestNotHiddenIndex(hot.countRows() - 1, -1);\n    if (row === null) {\n      row = -1;\n    }\n    hot.selection.setRangeStart(hot._createCellCoords(row, col));\n  }\n};","export const command = {\n  name: 'moveCellSelectionToMostBottomInlineEnd',\n  callback(hot) {\n    const {\n      selection,\n      rowIndexMapper,\n      columnIndexMapper\n    } = hot;\n    const fixedRows = parseInt(hot.getSettings().fixedRowsBottom, 10);\n    const row = rowIndexMapper.getNearestNotHiddenIndex(hot.countRows() - fixedRows - 1, -1);\n    const column = columnIndexMapper.getNearestNotHiddenIndex(hot.countCols() - 1, -1);\n    selection.setRangeStart(hot._createCellCoords(row, column));\n  }\n};","export const command = {\n  name: 'moveCellSelectionToMostInlineEnd',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    selection.setRangeStart(hot._createCellCoords(hot.getSelectedRangeLast().highlight.row, columnIndexMapper.getNearestNotHiddenIndex(hot.countCols() - 1, -1)));\n  }\n};","export const command = {\n  name: 'moveCellSelectionToMostInlineStart',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const fixedColumns = parseInt(hot.getSettings().fixedColumnsStart, 10);\n    const row = hot.getSelectedRangeLast().highlight.row;\n    const column = columnIndexMapper.getNearestNotHiddenIndex(fixedColumns, 1);\n    selection.setRangeStart(hot._createCellCoords(row, column));\n  }\n};","export const command = {\n  name: 'moveCellSelectionToMostLeft',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const row = hot.getSelectedRangeLast().highlight.row;\n    let column = columnIndexMapper.getNearestNotHiddenIndex(...(hot.isRtl() ? [hot.countCols() - 1, -1] : [0, 1]));\n    if (column === null) {\n      column = hot.isRtl() ? -1 : -hot.countRowHeaders();\n    }\n    selection.setRangeStart(hot._createCellCoords(row, column));\n  }\n};","export const command = {\n  name: 'moveCellSelectionToMostRight',\n  callback(hot) {\n    const {\n      selection,\n      columnIndexMapper\n    } = hot;\n    const {\n      row\n    } = hot.getSelectedRangeLast().highlight;\n    let column = columnIndexMapper.getNearestNotHiddenIndex(...(hot.isRtl() ? [0, 1] : [hot.countCols() - 1, -1]));\n    if (column === null) {\n      column = hot.isRtl() ? -hot.countRowHeaders() : -1;\n    }\n    selection.setRangeStart(hot._createCellCoords(row, column));\n  }\n};","export const command = {\n  name: 'moveCellSelectionToMostTop',\n  callback(hot) {\n    const {\n      col\n    } = hot.getSelectedRangeLast().highlight;\n    let row = hot.rowIndexMapper.getNearestNotHiddenIndex(0, 1);\n    if (row === null) {\n      row = -hot.countColHeaders();\n    }\n    hot.selection.setRangeStart(hot._createCellCoords(row, col));\n  }\n};","export const command = {\n  name: 'moveCellSelectionToMostTopInlineStart',\n  callback(hot) {\n    const {\n      selection,\n      rowIndexMapper,\n      columnIndexMapper\n    } = hot;\n    const fixedRows = parseInt(hot.getSettings().fixedRowsTop, 10);\n    const fixedColumns = parseInt(hot.getSettings().fixedColumnsStart, 10);\n    const row = rowIndexMapper.getNearestNotHiddenIndex(fixedRows, 1);\n    const column = columnIndexMapper.getNearestNotHiddenIndex(fixedColumns, 1);\n    selection.setRangeStart(hot._createCellCoords(row, column));\n  }\n};","export const command = {\n  name: 'moveCellSelectionUp',\n  callback(_ref) {\n    let {\n      selection\n    } = _ref;\n    selection.transformStart(-1, 0);\n  }\n};","export const command = {\n  name: 'moveCellSelectionUpByViewportHight',\n  callback(hot) {\n    const {\n      navigableHeaders\n    } = hot.getSettings();\n    const columnHeadersCount = navigableHeaders ? hot.countColHeaders() : 0;\n    const {\n      row\n    } = hot.getSelectedRangeLast().highlight;\n    let rowsStep = -(hot.countVisibleRows() + columnHeadersCount);\n\n    // if the first row is currently selected move the focus to the last row (if autoWrap is enabled)\n    if (row === -columnHeadersCount) {\n      rowsStep = -1;\n\n      // if the next move would move the focus off the table calculate the delta to move the selection to\n      // the first row\n    } else if (row + rowsStep < columnHeadersCount) {\n      rowsStep = -(row + columnHeadersCount);\n    }\n    hot.selection.transformStart(rowsStep, 0);\n    if (hot.getSelectedRangeLast().highlight.row < 0) {\n      hot.scrollViewportTo({\n        row: 0\n      });\n    }\n  }\n};","import { command as down } from \"./down.mjs\";\nimport { command as downByViewportHeight } from \"./downByViewportHeight.mjs\";\nimport { command as inlineEnd } from \"./inlineEnd.mjs\";\nimport { command as inlineStart } from \"./inlineStart.mjs\";\nimport { command as left } from \"./left.mjs\";\nimport { command as right } from \"./right.mjs\";\nimport { command as toMostBottom } from \"./toMostBottom.mjs\";\nimport { command as toMostBottomInlineEnd } from \"./toMostBottomInlineEnd.mjs\";\nimport { command as toMostInlineEnd } from \"./toMostInlineEnd.mjs\";\nimport { command as toMostInlineStart } from \"./toMostInlineStart.mjs\";\nimport { command as toMostLeft } from \"./toMostLeft.mjs\";\nimport { command as toMostRight } from \"./toMostRight.mjs\";\nimport { command as toMostTop } from \"./toMostTop.mjs\";\nimport { command as toMostTopInlineStart } from \"./toMostTopInlineStart.mjs\";\nimport { command as up } from \"./up.mjs\";\nimport { command as upByViewportHeight } from \"./upByViewportHeight.mjs\";\n/**\n * Returns complete list of the shortcut commands for the cells moving feature.\n *\n * @returns {Function[]}\n */\nexport function getAllCommands() {\n  return [down, downByViewportHeight, inlineEnd, inlineStart, left, right, toMostBottom, toMostBottomInlineEnd, toMostInlineEnd, toMostInlineStart, toMostLeft, toMostRight, toMostTop, toMostTopInlineStart, up, upByViewportHeight];\n}","export const command = {\n  name: 'emptySelectedCells',\n  callback(hot) {\n    hot.emptySelectedCells();\n    hot._getEditorManager().prepareEditor();\n  }\n};","export const command = {\n  name: 'scrollToFocusedCell',\n  callback(hot) {\n    const {\n      highlight\n    } = hot.getSelectedRangeLast();\n    const firstVisibleRow = hot.view.getFirstFullyVisibleRow() - 1;\n    const firstVisibleColumn = hot.view.getFirstFullyVisibleColumn() - 1;\n    const lastVisibleRow = hot.view.getLastFullyVisibleRow() + 1;\n    const lastVisibleColumn = hot.view.getLastFullyVisibleColumn() + 1;\n    const visibleCoordsFrom = hot._createCellCoords(firstVisibleRow, firstVisibleColumn);\n    const visibleCoordsTo = hot._createCellCoords(lastVisibleRow, lastVisibleColumn);\n    const visibleRange = hot._createCellRange(visibleCoordsFrom, visibleCoordsFrom, visibleCoordsTo);\n    if (!visibleRange.includes(highlight) && (highlight.row >= 0 || highlight.col >= 0)) {\n      const scrollCoords = {};\n      if (highlight.col >= 0) {\n        const offsetColumns = Math.floor(hot.countVisibleCols() / 2);\n        scrollCoords.col = Math.max(highlight.col - offsetColumns, 0);\n      }\n      if (highlight.row >= 0) {\n        const offsetRows = Math.floor(hot.countVisibleRows() / 2);\n        scrollCoords.row = Math.max(highlight.row - offsetRows, 0);\n      }\n      hot.scrollViewportTo({\n        ...scrollCoords,\n        verticalSnap: 'top',\n        horizontalSnap: 'start'\n      });\n    }\n  }\n};","export const command = {\n  name: 'selectAll',\n  callback(hot) {\n    hot.selection.selectAll(true, true, {\n      disableHeadersHighlight: true\n    });\n  }\n};","export const command = {\n  name: 'populateSelectedCellsData',\n  callback(hot) {\n    const selectedRange = hot.getSelectedRange();\n    const {\n      row: highlightRow,\n      col: highlightColumn\n    } = selectedRange[selectedRange.length - 1].highlight.normalize();\n    const valueToPopulate = hot.getDataAtCell(highlightRow, highlightColumn);\n    const cellValues = new Map();\n    for (let i = 0; i < selectedRange.length; i++) {\n      selectedRange[i].forAll((row, column) => {\n        if (row >= 0 && column >= 0 && (row !== highlightRow || column !== highlightColumn)) {\n          const {\n            readOnly\n          } = hot.getCellMeta(row, column);\n          if (!readOnly) {\n            cellValues.set(`${row}x${column}`, [row, column, valueToPopulate]);\n          }\n        }\n      });\n    }\n    hot.setDataAtCell(Array.from(cellValues.values()));\n  }\n};","import { getAllCommands as getAllEditorCommands } from \"./editor/index.mjs\";\nimport { getAllCommands as getAllSelectionExtendCommands } from \"./extendCellsSelection/index.mjs\";\nimport { getAllCommands as getAllSelectionMoveCommands } from \"./moveCellSelection/index.mjs\";\nimport { command as emptySelectedCells } from \"./emptySelectedCells.mjs\";\nimport { command as scrollToFocusedCell } from \"./scrollToFocusedCell.mjs\";\nimport { command as selectAll } from \"./selectAll.mjs\";\nimport { command as populateSelectedCellsData } from \"./populateSelectedCellsData.mjs\";\nconst allCommands = [...getAllEditorCommands(), ...getAllSelectionExtendCommands(), ...getAllSelectionMoveCommands(), emptySelectedCells, scrollToFocusedCell, selectAll, populateSelectedCellsData];\n\n/**\n * Prepares and creates an object with all available commands to trigger.\n *\n * @param {Handsontable} hot The Handsontable instance.\n * @returns {object}\n */\nexport function createKeyboardShortcutCommandsPool(hot) {\n  const commands = {};\n  allCommands.forEach(_ref => {\n    let {\n      name,\n      callback\n    } = _ref;\n    commands[name] = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return callback(hot, ...args);\n    };\n  });\n  return commands;\n}","import { EDITOR_EDIT_GROUP } from \"./constants.mjs\";\nimport { createKeyboardShortcutCommandsPool } from \"./commands/index.mjs\";\n/**\n * The context that defines a base shortcut list available for cells editors.\n *\n * @param {Handsontable} hot The Handsontable instance.\n */\nexport function shortcutsEditorContext(hot) {\n  const context = hot.getShortcutManager().addContext('editor');\n  const commandsPool = createKeyboardShortcutCommandsPool(hot);\n  const config = {\n    group: EDITOR_EDIT_GROUP\n  };\n  context.addShortcuts([{\n    keys: [['Enter'], ['Enter', 'Shift'], ['Enter', 'Control/Meta'], ['Enter', 'Control/Meta', 'Shift']],\n    callback: (event, keys) => commandsPool.editorCloseAndSave(event, keys)\n  }, {\n    keys: [['Escape'], ['Escape', 'Control/Meta']],\n    callback: () => commandsPool.editorCloseWithoutSaving()\n  }], config);\n}","import { isDefined } from \"../helpers/mixed.mjs\";\nimport { GRID_GROUP, EDITOR_EDIT_GROUP } from \"./constants.mjs\";\nimport { createKeyboardShortcutCommandsPool } from \"./commands/index.mjs\";\n/**\n * The context that defines shortcut list available for selected cell or cells.\n *\n * @param {Handsontable} hot The Handsontable instance.\n */\nexport function shortcutsGridContext(hot) {\n  const context = hot.getShortcutManager().addContext('grid');\n  const commandsPool = createKeyboardShortcutCommandsPool(hot);\n  const config = {\n    runOnlyIf: () => {\n      const {\n        navigableHeaders\n      } = hot.getSettings();\n      return isDefined(hot.getSelected()) && (navigableHeaders || !navigableHeaders && hot.countRenderedRows() > 0 && hot.countRenderedCols() > 0);\n    },\n    group: GRID_GROUP\n  };\n  context.addShortcuts([{\n    keys: [['F2']],\n    callback: event => commandsPool.editorFastOpen(event)\n  }, {\n    keys: [['Enter'], ['Enter', 'Shift']],\n    callback: (event, keys) => commandsPool.editorOpen(event, keys)\n  }, {\n    keys: [['Backspace'], ['Delete']],\n    callback: () => commandsPool.emptySelectedCells()\n  }], {\n    group: EDITOR_EDIT_GROUP,\n    runOnlyIf: () => isDefined(hot.getSelected())\n  });\n  context.addShortcuts([{\n    keys: [['Control/Meta', 'A'], ['Control/Meta', 'Shift', 'Space']],\n    callback: () => commandsPool.selectAll()\n  }, {\n    keys: [['Control/Meta', 'Enter']],\n    callback: () => commandsPool.populateSelectedCellsData(),\n    runOnlyIf: () => {\n      return !hot.getSelectedRangeLast().highlight.isHeader() && hot.getSelectedRangeLast().getCellsCount() > 1;\n    }\n  }, {\n    keys: [['Control', 'Space']],\n    captureCtrl: true,\n    callback: () => commandsPool.extendCellsSelectionToColumns()\n  }, {\n    keys: [['Shift', 'Space']],\n    stopPropagation: true,\n    callback: () => commandsPool.extendCellsSelectionToRows()\n  }, {\n    keys: [['ArrowUp']],\n    callback: () => commandsPool.moveCellSelectionUp()\n  }, {\n    keys: [['ArrowUp', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostTop()\n  }, {\n    keys: [['ArrowUp', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionUp()\n  }, {\n    keys: [['ArrowUp', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.extendCellsSelectionToMostTop(),\n    runOnlyIf: () => !(hot.selection.isSelectedByCorner() || hot.selection.isSelectedByColumnHeader())\n  }, {\n    keys: [['ArrowDown']],\n    callback: () => commandsPool.moveCellSelectionDown()\n  }, {\n    keys: [['ArrowDown', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostBottom()\n  }, {\n    keys: [['ArrowDown', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionDown()\n  }, {\n    keys: [['ArrowDown', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.extendCellsSelectionToMostBottom(),\n    runOnlyIf: () => !(hot.selection.isSelectedByCorner() || hot.selection.isSelectedByColumnHeader())\n  }, {\n    keys: [['ArrowLeft']],\n    callback: () => commandsPool.moveCellSelectionLeft()\n  }, {\n    keys: [['ArrowLeft', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostLeft()\n  }, {\n    keys: [['ArrowLeft', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionLeft()\n  }, {\n    keys: [['ArrowLeft', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.extendCellsSelectionToMostLeft(),\n    runOnlyIf: () => !(hot.selection.isSelectedByCorner() || hot.selection.isSelectedByRowHeader())\n  }, {\n    keys: [['ArrowRight']],\n    callback: () => commandsPool.moveCellSelectionRight()\n  }, {\n    keys: [['ArrowRight', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostRight()\n  }, {\n    keys: [['ArrowRight', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionRight()\n  }, {\n    keys: [['ArrowRight', 'Shift', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.extendCellsSelectionToMostRight(),\n    runOnlyIf: () => !(hot.selection.isSelectedByCorner() || hot.selection.isSelectedByRowHeader())\n  }, {\n    keys: [['Home']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostInlineStart(),\n    runOnlyIf: () => hot.view.isMainTableNotFullyCoveredByOverlays()\n  }, {\n    keys: [['Home', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionToMostInlineStart()\n  }, {\n    keys: [['Home', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostTopInlineStart(),\n    runOnlyIf: () => hot.view.isMainTableNotFullyCoveredByOverlays()\n  }, {\n    keys: [['End']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostInlineEnd(),\n    runOnlyIf: () => hot.view.isMainTableNotFullyCoveredByOverlays()\n  }, {\n    keys: [['End', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionToMostInlineEnd()\n  }, {\n    keys: [['End', 'Control/Meta']],\n    captureCtrl: true,\n    callback: () => commandsPool.moveCellSelectionToMostBottomInlineEnd(),\n    runOnlyIf: () => hot.view.isMainTableNotFullyCoveredByOverlays()\n  }, {\n    keys: [['PageUp']],\n    callback: () => commandsPool.moveCellSelectionUpByViewportHight()\n  }, {\n    keys: [['PageUp', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionUpByViewportHeight()\n  }, {\n    keys: [['PageDown']],\n    callback: () => commandsPool.moveCellSelectionDownByViewportHeight()\n  }, {\n    keys: [['PageDown', 'Shift']],\n    callback: () => commandsPool.extendCellsSelectionDownByViewportHeight()\n  }, {\n    keys: [['Tab']],\n    callback: () => commandsPool.moveCellSelectionInlineStart()\n  }, {\n    keys: [['Shift', 'Tab']],\n    callback: () => commandsPool.moveCellSelectionInlineEnd()\n  }, {\n    keys: [['Control/Meta', 'Backspace']],\n    callback: () => commandsPool.scrollToFocusedCell()\n  }], config);\n}","import { shortcutsEditorContext } from \"./editor.mjs\";\nimport { shortcutsGridContext } from \"./grid.mjs\";\nexport * from \"./constants.mjs\";\n/**\n * Register all shortcut contexts.\n *\n * @param {Handsontable} hotInstance The Handsontable instance.\n */\nexport function registerAllShortcutContexts(hotInstance) {\n  [shortcutsEditorContext, shortcutsGridContext].forEach(context => context(hotInstance));\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/web.immediate.js\";\nimport { addClass, empty, observeVisibilityChangeOnce, removeClass } from \"./helpers/dom/element.mjs\";\nimport { isFunction } from \"./helpers/function.mjs\";\nimport { isDefined, isUndefined, isRegExp, _injectProductInfo, isEmpty } from \"./helpers/mixed.mjs\";\nimport { isMobileBrowser, isIpadOS } from \"./helpers/browser.mjs\";\nimport EditorManager from \"./editorManager.mjs\";\nimport EventManager from \"./eventManager.mjs\";\nimport { deepClone, duckSchema, isObjectEqual, isObject, deepObjectSize, hasOwnProperty, createObjectPropListener, objectEach } from \"./helpers/object.mjs\";\nimport { FocusManager } from \"./focusManager.mjs\";\nimport { arrayMap, arrayEach, arrayReduce, getDifferenceOfArrays, stringToArray, pivot } from \"./helpers/array.mjs\";\nimport { instanceToHTML } from \"./utils/parseTable.mjs\";\nimport { getPlugin, getPluginsNames } from \"./plugins/registry.mjs\";\nimport { getRenderer } from \"./renderers/registry.mjs\";\nimport { getEditor } from \"./editors/registry.mjs\";\nimport { getValidator } from \"./validators/registry.mjs\";\nimport { randomString, toUpperCaseFirst } from \"./helpers/string.mjs\";\nimport { rangeEach, rangeEachReverse, isNumericLike } from \"./helpers/number.mjs\";\nimport TableView from \"./tableView.mjs\";\nimport DataSource from \"./dataMap/dataSource.mjs\";\nimport { spreadsheetColumnLabel } from \"./helpers/data.mjs\";\nimport { IndexMapper } from \"./translations/index.mjs\";\nimport { registerAsRootInstance, hasValidParameter, isRootInstance } from \"./utils/rootInstance.mjs\";\nimport { ViewportColumnsCalculator } from \"./3rdparty/walkontable/src/index.mjs\";\nimport Hooks from \"./pluginHooks.mjs\";\nimport { hasLanguageDictionary, getValidLanguageCode, getTranslatedPhrase } from \"./i18n/registry.mjs\";\nimport { warnUserAboutLanguageRegistration, normalizeLanguageCode } from \"./i18n/utils.mjs\";\nimport { Selection } from \"./selection/index.mjs\";\nimport { MetaManager, DynamicCellMetaMod, ExtendMetaPropertiesMod, replaceData } from \"./dataMap/index.mjs\";\nimport { installFocusCatcher } from \"./core/index.mjs\";\nimport { createUniqueMap } from \"./utils/dataStructures/uniqueMap.mjs\";\nimport { createShortcutManager } from \"./shortcuts/index.mjs\";\nimport { registerAllShortcutContexts } from \"./shortcutContexts/index.mjs\";\nlet activeGuid = null;\n\n/**\n * Keeps the collection of the all Handsontable instances created on the same page. The\n * list is then used to trigger the \"afterUnlisten\" hook when the \"listen()\" method was\n * called on another instance.\n *\n * @type {Map<string, Core>}\n */\nconst foreignHotInstances = new Map();\n\n/**\n * A set of deprecated feature names.\n *\n * @type {Set<string>}\n */\n// eslint-disable-next-line no-unused-vars\nconst deprecationWarns = new Set();\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * Handsontable constructor.\n *\n * @core\n * @class Core\n * @description\n *\n * The `Handsontable` class (known as the `Core`) lets you modify the grid's behavior by using Handsontable's public API methods.\n *\n * ::: only-for react\n * To use these methods, associate a Handsontable instance with your instance\n * of the [`HotTable` component](@/guides/getting-started/installation.md#_4-use-the-hottable-component),\n * by using React's `ref` feature (read more on the [Instance methods](@/guides/getting-started/react-methods.md) page).\n * :::\n *\n * ## How to call a method\n *\n * ::: only-for javascript\n * ```js\n * // create a Handsontable instance\n * const hot = new Handsontable(document.getElementById('example'), options);\n *\n * // call a method\n * hot.setDataAtCell(0, 0, 'new value');\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * import { useRef } from 'react';\n *\n * const hotTableComponent = useRef(null);\n *\n * <HotTable\n *   // associate your `HotTable` component with a Handsontable instance\n *   ref={hotTableComponent}\n *   settings={options}\n * />\n *\n * // access the Handsontable instance, under the `.current.hotInstance` property\n * // call a method\n * hotTableComponent.current.hotInstance.setDataAtCell(0, 0, 'new value');\n * ```\n * :::\n *\n * @param {HTMLElement} rootElement The element to which the Handsontable instance is injected.\n * @param {object} userSettings The user defined options.\n * @param {boolean} [rootInstanceSymbol=false] Indicates if the instance is root of all later instances created.\n */\nexport default function Core(rootElement, userSettings) {\n  var _userSettings$layoutD,\n    _this = this;\n  let rootInstanceSymbol = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let preventScrollingToCell = false;\n  let instance = this;\n  const eventManager = new EventManager(instance);\n  let datamap;\n  let dataSource;\n  let grid;\n  let editorManager;\n  let focusManager;\n  let firstRun = true;\n  if (hasValidParameter(rootInstanceSymbol)) {\n    registerAsRootInstance(this);\n  }\n\n  // TODO: check if references to DOM elements should be move to UI layer (Walkontable)\n  /**\n   * Reference to the container element.\n   *\n   * @private\n   * @type {HTMLElement}\n   */\n  this.rootElement = rootElement;\n  /**\n   * The nearest document over container.\n   *\n   * @private\n   * @type {Document}\n   */\n  this.rootDocument = rootElement.ownerDocument;\n  /**\n   * Window object over container's document.\n   *\n   * @private\n   * @type {Window}\n   */\n  this.rootWindow = this.rootDocument.defaultView;\n  /**\n   * A boolean to tell if the Handsontable has been fully destroyed. This is set to `true`\n   * after `afterDestroy` hook is called.\n   *\n   * @memberof Core#\n   * @member isDestroyed\n   * @type {boolean}\n   */\n  this.isDestroyed = false;\n  /**\n   * The counter determines how many times the render suspending was called. It allows\n   * tracking the nested suspending calls. For each render suspend resuming call the\n   * counter is decremented. The value equal to 0 means the render suspending feature\n   * is disabled.\n   *\n   * @private\n   * @type {number}\n   */\n  this.renderSuspendedCounter = 0;\n  /**\n   * The counter determines how many times the execution suspending was called. It allows\n   * tracking the nested suspending calls. For each execution suspend resuming call the\n   * counter is decremented. The value equal to 0 means the execution suspending feature\n   * is disabled.\n   *\n   * @private\n   * @type {number}\n   */\n  this.executionSuspendedCounter = 0;\n  const layoutDirection = (_userSettings$layoutD = userSettings === null || userSettings === void 0 ? void 0 : userSettings.layoutDirection) !== null && _userSettings$layoutD !== void 0 ? _userSettings$layoutD : 'inherit';\n  const rootElementDirection = ['rtl', 'ltr'].includes(layoutDirection) ? layoutDirection : this.rootWindow.getComputedStyle(this.rootElement).direction;\n  this.rootElement.setAttribute('dir', rootElementDirection);\n\n  /**\n   * Checks if the grid is rendered using the right-to-left layout direction.\n   *\n   * @since 12.0.0\n   * @memberof Core#\n   * @function isRtl\n   * @returns {boolean} True if RTL.\n   */\n  this.isRtl = function () {\n    return rootElementDirection === 'rtl';\n  };\n\n  /**\n   * Checks if the grid is rendered using the left-to-right layout direction.\n   *\n   * @since 12.0.0\n   * @memberof Core#\n   * @function isLtr\n   * @returns {boolean} True if LTR.\n   */\n  this.isLtr = function () {\n    return !instance.isRtl();\n  };\n\n  /**\n   * Returns 1 for LTR; -1 for RTL. Useful for calculations.\n   *\n   * @since 12.0.0\n   * @memberof Core#\n   * @function getDirectionFactor\n   * @returns {number} Returns 1 for LTR; -1 for RTL.\n   */\n  this.getDirectionFactor = function () {\n    return instance.isLtr() ? 1 : -1;\n  };\n  userSettings.language = getValidLanguageCode(userSettings.language);\n  const metaManager = new MetaManager(instance, userSettings, [DynamicCellMetaMod, ExtendMetaPropertiesMod]);\n  const tableMeta = metaManager.getTableMeta();\n  const globalMeta = metaManager.getGlobalMeta();\n  const pluginsRegistry = createUniqueMap();\n  this.container = this.rootDocument.createElement('div');\n  this.renderCall = false;\n  rootElement.insertBefore(this.container, rootElement.firstChild);\n  if (isRootInstance(this)) {\n    _injectProductInfo(userSettings.licenseKey, rootElement);\n  }\n  this.guid = `ht_${randomString()}`; // this is the namespace for global events\n\n  foreignHotInstances.set(this.guid, this);\n\n  /**\n   * Instance of index mapper which is responsible for managing the column indexes.\n   *\n   * @memberof Core#\n   * @member columnIndexMapper\n   * @type {IndexMapper}\n   */\n  this.columnIndexMapper = new IndexMapper();\n  /**\n   * Instance of index mapper which is responsible for managing the row indexes.\n   *\n   * @memberof Core#\n   * @member rowIndexMapper\n   * @type {IndexMapper}\n   */\n  this.rowIndexMapper = new IndexMapper();\n  this.columnIndexMapper.addLocalHook('indexesSequenceChange', source => {\n    instance.runHooks('afterColumnSequenceChange', source);\n  });\n  this.rowIndexMapper.addLocalHook('indexesSequenceChange', source => {\n    instance.runHooks('afterRowSequenceChange', source);\n  });\n  dataSource = new DataSource(instance);\n  if (!this.rootElement.id || this.rootElement.id.substring(0, 3) === 'ht_') {\n    this.rootElement.id = this.guid; // if root element does not have an id, assign a random id\n  }\n\n  const visualToRenderableCoords = coords => {\n    const {\n      row: visualRow,\n      col: visualColumn\n    } = coords;\n    return instance._createCellCoords(\n    // We just store indexes for rows and columns without headers.\n    visualRow >= 0 ? instance.rowIndexMapper.getRenderableFromVisualIndex(visualRow) : visualRow, visualColumn >= 0 ? instance.columnIndexMapper.getRenderableFromVisualIndex(visualColumn) : visualColumn);\n  };\n  const renderableToVisualCoords = coords => {\n    const {\n      row: renderableRow,\n      col: renderableColumn\n    } = coords;\n    return instance._createCellCoords(\n    // We just store indexes for rows and columns without headers.\n    renderableRow >= 0 ? instance.rowIndexMapper.getVisualFromRenderableIndex(renderableRow) : renderableRow, renderableColumn >= 0 ? instance.columnIndexMapper.getVisualFromRenderableIndex(renderableColumn) : renderableColumn // eslint-disable-line max-len\n    );\n  };\n\n  let selection = new Selection(tableMeta, {\n    rowIndexMapper: instance.rowIndexMapper,\n    columnIndexMapper: instance.columnIndexMapper,\n    countCols: () => instance.countCols(),\n    countRows: () => instance.countRows(),\n    propToCol: prop => datamap.propToCol(prop),\n    isEditorOpened: () => instance.getActiveEditor() ? instance.getActiveEditor().isOpened() : false,\n    countRenderableColumns: () => this.view.countRenderableColumns(),\n    countRenderableRows: () => this.view.countRenderableRows(),\n    countRowHeaders: () => this.countRowHeaders(),\n    countColHeaders: () => this.countColHeaders(),\n    getShortcutManager: () => instance.getShortcutManager(),\n    createCellCoords: (row, column) => instance._createCellCoords(row, column),\n    createCellRange: (highlight, from, to) => instance._createCellRange(highlight, from, to),\n    visualToRenderableCoords,\n    renderableToVisualCoords,\n    isDisabledCellSelection: (visualRow, visualColumn) => instance.getCellMeta(visualRow, visualColumn).disableVisualSelection\n  });\n  this.selection = selection;\n  const onIndexMapperCacheUpdate = _ref => {\n    let {\n      hiddenIndexesChanged\n    } = _ref;\n    if (hiddenIndexesChanged) {\n      this.selection.refresh();\n    }\n  };\n  this.columnIndexMapper.addLocalHook('cacheUpdated', onIndexMapperCacheUpdate);\n  this.rowIndexMapper.addLocalHook('cacheUpdated', onIndexMapperCacheUpdate);\n  this.selection.addLocalHook('beforeHighlightSet', () => {\n    this.runHooks('beforeSelectionHighlightSet');\n  });\n  this.selection.addLocalHook('beforeSetRangeStart', cellCoords => {\n    this.runHooks('beforeSetRangeStart', cellCoords);\n  });\n  this.selection.addLocalHook('beforeSetRangeStartOnly', cellCoords => {\n    this.runHooks('beforeSetRangeStartOnly', cellCoords);\n  });\n  this.selection.addLocalHook('beforeSetRangeEnd', cellCoords => {\n    this.runHooks('beforeSetRangeEnd', cellCoords);\n  });\n  this.selection.addLocalHook('afterSetRangeEnd', cellCoords => {\n    const preventScrolling = createObjectPropListener(false);\n    const selectionRange = this.selection.getSelectedRange();\n    const {\n      from,\n      to\n    } = selectionRange.current();\n    const selectionLayerLevel = selectionRange.size() - 1;\n    this.runHooks('afterSelection', from.row, from.col, to.row, to.col, preventScrolling, selectionLayerLevel);\n    this.runHooks('afterSelectionByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), preventScrolling, selectionLayerLevel); // eslint-disable-line max-len\n\n    let scrollToCell = true;\n    if (preventScrollingToCell) {\n      scrollToCell = false;\n    }\n    if (preventScrolling.isTouched()) {\n      scrollToCell = !preventScrolling.value;\n    }\n    const currentSelectedRange = this.selection.selectedRange.current();\n    const isSelectedByAnyHeader = this.selection.isSelectedByAnyHeader();\n    const isSelectedByRowHeader = this.selection.isSelectedByRowHeader();\n    const isSelectedByColumnHeader = this.selection.isSelectedByColumnHeader();\n    if (scrollToCell !== false) {\n      if (!isSelectedByAnyHeader) {\n        if (currentSelectedRange && !this.selection.isMultiple()) {\n          const {\n            row,\n            col\n          } = currentSelectedRange.from;\n          if (row < 0 && col >= 0) {\n            this.scrollViewportTo({\n              col\n            });\n          } else if (col < 0 && row >= 0) {\n            this.scrollViewportTo({\n              row\n            });\n          } else {\n            this.scrollViewportTo({\n              row,\n              col\n            });\n          }\n        } else {\n          this.scrollViewportTo(cellCoords.toObject());\n        }\n      } else if (isSelectedByRowHeader) {\n        this.scrollViewportTo({\n          row: cellCoords.row\n        });\n      } else if (isSelectedByColumnHeader) {\n        this.scrollViewportTo({\n          col: cellCoords.col\n        });\n      }\n    }\n\n    // @TODO: These CSS classes are no longer needed anymore. They are used only as a indicator of the selected\n    // rows/columns in the MergedCells plugin (via border.js#L520 in the walkontable module). After fixing\n    // the Border class this should be removed.\n    if (isSelectedByRowHeader && isSelectedByColumnHeader) {\n      addClass(this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    } else if (isSelectedByRowHeader) {\n      removeClass(this.rootElement, 'ht__selection--columns');\n      addClass(this.rootElement, 'ht__selection--rows');\n    } else if (isSelectedByColumnHeader) {\n      removeClass(this.rootElement, 'ht__selection--rows');\n      addClass(this.rootElement, 'ht__selection--columns');\n    } else {\n      removeClass(this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    }\n    this._refreshBorders(null);\n  });\n  this.selection.addLocalHook('afterSelectionFinished', cellRanges => {\n    const selectionLayerLevel = cellRanges.length - 1;\n    const {\n      from,\n      to\n    } = cellRanges[selectionLayerLevel];\n    this.runHooks('afterSelectionEnd', from.row, from.col, to.row, to.col, selectionLayerLevel);\n    this.runHooks('afterSelectionEndByProp', from.row, instance.colToProp(from.col), to.row, instance.colToProp(to.col), selectionLayerLevel);\n  });\n  this.selection.addLocalHook('afterIsMultipleSelection', isMultiple => {\n    const changedIsMultiple = this.runHooks('afterIsMultipleSelection', isMultiple.value);\n    if (isMultiple.value) {\n      isMultiple.value = changedIsMultiple;\n    }\n  });\n  this.selection.addLocalHook('beforeSelectColumns', function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return _this.runHooks('beforeSelectColumns', ...args);\n  });\n  this.selection.addLocalHook('afterSelectColumns', function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return _this.runHooks('afterSelectColumns', ...args);\n  });\n  this.selection.addLocalHook('beforeSelectRows', function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return _this.runHooks('beforeSelectRows', ...args);\n  });\n  this.selection.addLocalHook('afterSelectRows', function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    return _this.runHooks('afterSelectRows', ...args);\n  });\n  this.selection.addLocalHook('beforeModifyTransformStart', cellCoordsDelta => {\n    this.runHooks('modifyTransformStart', cellCoordsDelta);\n  });\n  this.selection.addLocalHook('afterModifyTransformStart', (coords, rowTransformDir, colTransformDir) => {\n    this.runHooks('afterModifyTransformStart', coords, rowTransformDir, colTransformDir);\n  });\n  this.selection.addLocalHook('beforeModifyTransformEnd', cellCoordsDelta => {\n    this.runHooks('modifyTransformEnd', cellCoordsDelta);\n  });\n  this.selection.addLocalHook('afterModifyTransformEnd', (coords, rowTransformDir, colTransformDir) => {\n    this.runHooks('afterModifyTransformEnd', coords, rowTransformDir, colTransformDir);\n  });\n  this.selection.addLocalHook('afterDeselect', () => {\n    editorManager.destroyEditor();\n    this._refreshBorders();\n    removeClass(this.rootElement, ['ht__selection--rows', 'ht__selection--columns']);\n    this.runHooks('afterDeselect');\n  });\n  this.selection.addLocalHook('insertRowRequire', totalRows => {\n    this.alter('insert_row_above', totalRows, 1, 'auto');\n  });\n  this.selection.addLocalHook('insertColRequire', totalCols => {\n    this.alter('insert_col_start', totalCols, 1, 'auto');\n  });\n  grid = {\n    /**\n     * Inserts or removes rows and columns.\n     *\n     * @private\n     * @param {string} action Possible values: \"insert_row_above\", \"insert_row_below\", \"insert_col_start\", \"insert_col_end\",\n     *                        \"remove_row\", \"remove_col\".\n     * @param {number|Array} index Row or column visual index which from the alter action will be triggered.\n     *                             Alter actions such as \"remove_row\" and \"remove_col\" support array indexes in the\n     *                             format `[[index, amount], [index, amount]...]` this can be used to remove\n     *                             non-consecutive columns or rows in one call.\n     * @param {number} [amount=1] Amount of rows or columns to remove.\n     * @param {string} [source] Optional. Source of hook runner.\n     * @param {boolean} [keepEmptyRows] Optional. Flag for preventing deletion of empty rows.\n     */\n    alter(action, index) {\n      var _index, _index2;\n      let amount = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n      let source = arguments.length > 3 ? arguments[3] : undefined;\n      let keepEmptyRows = arguments.length > 4 ? arguments[4] : undefined;\n      const normalizeIndexesGroup = indexes => {\n        if (indexes.length === 0) {\n          return [];\n        }\n        const sortedIndexes = [...indexes];\n\n        // Sort the indexes in ascending order.\n        sortedIndexes.sort((_ref2, _ref3) => {\n          let [indexA] = _ref2;\n          let [indexB] = _ref3;\n          if (indexA === indexB) {\n            return 0;\n          }\n          return indexA > indexB ? 1 : -1;\n        });\n\n        // Normalize the {index, amount} groups into bigger groups.\n        const normalizedIndexes = arrayReduce(sortedIndexes, (acc, _ref4) => {\n          let [groupIndex, groupAmount] = _ref4;\n          const previousItem = acc[acc.length - 1];\n          const [prevIndex, prevAmount] = previousItem;\n          const prevLastIndex = prevIndex + prevAmount;\n          if (groupIndex <= prevLastIndex) {\n            const amountToAdd = Math.max(groupAmount - (prevLastIndex - groupIndex), 0);\n            previousItem[1] += amountToAdd;\n          } else {\n            acc.push([groupIndex, groupAmount]);\n          }\n          return acc;\n        }, [sortedIndexes[0]]);\n        return normalizedIndexes;\n      };\n\n      /* eslint-disable no-case-declarations */\n      switch (action) {\n        case 'insert_row_below':\n        case 'insert_row_above':\n          const numberOfSourceRows = instance.countSourceRows();\n          if (tableMeta.maxRows === numberOfSourceRows) {\n            return;\n          }\n\n          // `above` is the default behavior for creating new rows\n          const insertRowMode = action === 'insert_row_below' ? 'below' : 'above';\n\n          // Calling the `insert_row_above` action adds a new row at the beginning of the data set.\n          // eslint-disable-next-line no-param-reassign\n          index = (_index = index) !== null && _index !== void 0 ? _index : insertRowMode === 'below' ? numberOfSourceRows : 0;\n          const {\n            delta: rowDelta,\n            startPhysicalIndex: startRowPhysicalIndex\n          } = datamap.createRow(index, amount, {\n            source,\n            mode: insertRowMode\n          });\n          if (rowDelta) {\n            const currentSelectedRange = selection.selectedRange.current();\n            const currentFromRange = currentSelectedRange === null || currentSelectedRange === void 0 ? void 0 : currentSelectedRange.from;\n            const currentFromRow = currentFromRange === null || currentFromRange === void 0 ? void 0 : currentFromRange.row;\n            const startVisualRowIndex = instance.toVisualRow(startRowPhysicalIndex);\n            if (selection.isSelectedByCorner()) {\n              selection.selectAll(true, true, {\n                disableHeadersHighlight: true\n              });\n            } else if (isDefined(currentFromRow) && currentFromRow >= startVisualRowIndex) {\n              // Moving the selection (if it exists) downward – it should be applied to the \"old\" row.\n              // TODO: The logic here should be handled by selection module.\n              const {\n                row: currentToRow,\n                col: currentToColumn\n              } = currentSelectedRange.to;\n              let currentFromColumn = currentFromRange.col;\n\n              // Workaround: headers are not stored inside selection.\n              if (selection.isSelectedByRowHeader()) {\n                currentFromColumn = -1;\n              }\n\n              // Remove from the stack the last added selection as that selection below will be\n              // replaced by new transformed selection.\n              selection.getSelectedRange().pop();\n              // I can't use transforms as they don't work in negative indexes.\n              selection.setRangeStartOnly(instance._createCellCoords(currentFromRow + rowDelta, currentFromColumn), true);\n              selection.setRangeEnd(instance._createCellCoords(currentToRow + rowDelta, currentToColumn)); // will call render() internally\n            } else {\n              instance._refreshBorders(); // it will call render and prepare methods\n            }\n          }\n\n          break;\n        case 'insert_col_start':\n        case 'insert_col_end':\n          // \"start\" is a default behavior for creating new columns\n          const insertColumnMode = action === 'insert_col_end' ? 'end' : 'start';\n\n          // Calling the `insert_col_start` action adds a new column to the left of the data set.\n          // eslint-disable-next-line no-param-reassign\n          index = (_index2 = index) !== null && _index2 !== void 0 ? _index2 : insertColumnMode === 'end' ? instance.countSourceCols() : 0;\n          const {\n            delta: colDelta,\n            startPhysicalIndex: startColumnPhysicalIndex\n          } = datamap.createCol(index, amount, {\n            source,\n            mode: insertColumnMode\n          });\n          if (colDelta) {\n            if (Array.isArray(tableMeta.colHeaders)) {\n              const spliceArray = [instance.toVisualColumn(startColumnPhysicalIndex), 0];\n              spliceArray.length += colDelta; // inserts empty (undefined) elements at the end of an array\n              Array.prototype.splice.apply(tableMeta.colHeaders, spliceArray); // inserts empty (undefined) elements into the colHeader array\n            }\n\n            const currentSelectedRange = selection.selectedRange.current();\n            const currentFromRange = currentSelectedRange === null || currentSelectedRange === void 0 ? void 0 : currentSelectedRange.from;\n            const currentFromColumn = currentFromRange === null || currentFromRange === void 0 ? void 0 : currentFromRange.col;\n            const startVisualColumnIndex = instance.toVisualColumn(startColumnPhysicalIndex);\n            if (selection.isSelectedByCorner()) {\n              selection.selectAll(true, true, {\n                disableHeadersHighlight: true\n              });\n            } else if (isDefined(currentFromColumn) && currentFromColumn >= startVisualColumnIndex) {\n              // Moving the selection (if it exists) rightward – it should be applied to the \"old\" column.\n              // TODO: The logic here should be handled by selection module.\n              const {\n                row: currentToRow,\n                col: currentToColumn\n              } = currentSelectedRange.to;\n              let currentFromRow = currentFromRange.row;\n\n              // Workaround: headers are not stored inside selection.\n              if (selection.isSelectedByColumnHeader()) {\n                currentFromRow = -1;\n              }\n\n              // Remove from the stack the last added selection as that selection below will be\n              // replaced by new transformed selection.\n              selection.getSelectedRange().pop();\n\n              // I can't use transforms as they don't work in negative indexes.\n              selection.setRangeStartOnly(instance._createCellCoords(currentFromRow, currentFromColumn + colDelta), true);\n              selection.setRangeEnd(instance._createCellCoords(currentToRow, currentToColumn + colDelta)); // will call render() internally\n            } else {\n              instance._refreshBorders(); // it will call render and prepare methods\n            }\n          }\n\n          break;\n        case 'remove_row':\n          const removeRow = indexes => {\n            let offset = 0;\n\n            // Normalize the {index, amount} groups into bigger groups.\n            arrayEach(indexes, _ref5 => {\n              let [groupIndex, groupAmount] = _ref5;\n              const calcIndex = isEmpty(groupIndex) ? instance.countRows() - 1 : Math.max(groupIndex - offset, 0);\n\n              // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value\n              // compatible with datamap.removeCol method.\n              if (Number.isInteger(groupIndex)) {\n                // eslint-disable-next-line no-param-reassign\n                groupIndex = Math.max(groupIndex - offset, 0);\n              }\n\n              // TODO: for datamap.removeRow index should be passed as it is (with undefined and null values). If not, the logic\n              // inside the datamap.removeRow breaks the removing functionality.\n              const wasRemoved = datamap.removeRow(groupIndex, groupAmount, source);\n              if (!wasRemoved) {\n                return;\n              }\n              const totalRows = instance.countRows();\n              const fixedRowsTop = tableMeta.fixedRowsTop;\n              if (fixedRowsTop >= calcIndex + 1) {\n                tableMeta.fixedRowsTop -= Math.min(groupAmount, fixedRowsTop - calcIndex);\n              }\n              const fixedRowsBottom = tableMeta.fixedRowsBottom;\n              if (fixedRowsBottom && calcIndex >= totalRows - fixedRowsBottom) {\n                tableMeta.fixedRowsBottom -= Math.min(groupAmount, fixedRowsBottom);\n              }\n              offset += groupAmount;\n            });\n          };\n          if (Array.isArray(index)) {\n            removeRow(normalizeIndexesGroup(index));\n          } else {\n            removeRow([[index, amount]]);\n          }\n          grid.adjustRowsAndCols();\n          instance._refreshBorders(); // it will call render and prepare methods\n          break;\n        case 'remove_col':\n          const removeCol = indexes => {\n            let offset = 0;\n\n            // Normalize the {index, amount} groups into bigger groups.\n            arrayEach(indexes, _ref6 => {\n              let [groupIndex, groupAmount] = _ref6;\n              const calcIndex = isEmpty(groupIndex) ? instance.countCols() - 1 : Math.max(groupIndex - offset, 0);\n              let physicalColumnIndex = instance.toPhysicalColumn(calcIndex);\n\n              // If the 'index' is an integer decrease it by 'offset' otherwise pass it through to make the value\n              // compatible with datamap.removeCol method.\n              if (Number.isInteger(groupIndex)) {\n                // eslint-disable-next-line no-param-reassign\n                groupIndex = Math.max(groupIndex - offset, 0);\n              }\n\n              // TODO: for datamap.removeCol index should be passed as it is (with undefined and null values). If not, the logic\n              // inside the datamap.removeCol breaks the removing functionality.\n              const wasRemoved = datamap.removeCol(groupIndex, groupAmount, source);\n              if (!wasRemoved) {\n                return;\n              }\n              const fixedColumnsStart = tableMeta.fixedColumnsStart;\n              if (fixedColumnsStart >= calcIndex + 1) {\n                tableMeta.fixedColumnsStart -= Math.min(groupAmount, fixedColumnsStart - calcIndex);\n              }\n              if (Array.isArray(tableMeta.colHeaders)) {\n                if (typeof physicalColumnIndex === 'undefined') {\n                  physicalColumnIndex = -1;\n                }\n                tableMeta.colHeaders.splice(physicalColumnIndex, groupAmount);\n              }\n              offset += groupAmount;\n            });\n          };\n          if (Array.isArray(index)) {\n            removeCol(normalizeIndexesGroup(index));\n          } else {\n            removeCol([[index, amount]]);\n          }\n          grid.adjustRowsAndCols();\n          instance._refreshBorders(); // it will call render and prepare methods\n\n          break;\n        default:\n          throw new Error(`There is no such action \"${action}\"`);\n      }\n      if (!keepEmptyRows) {\n        grid.adjustRowsAndCols(); // makes sure that we did not add rows that will be removed in next refresh\n      }\n    },\n\n    /**\n     * Makes sure there are empty rows at the bottom of the table.\n     *\n     * @private\n     */\n    adjustRowsAndCols() {\n      const minRows = tableMeta.minRows;\n      const minSpareRows = tableMeta.minSpareRows;\n      const minCols = tableMeta.minCols;\n      const minSpareCols = tableMeta.minSpareCols;\n      if (instance.countRows() === 0 && instance.countCols() === 0) {\n        selection.deselect();\n      }\n      if (minRows) {\n        // should I add empty rows to data source to meet minRows?\n        const nrOfRows = instance.countRows();\n        if (nrOfRows < minRows) {\n          // The synchronization with cell meta is not desired here. For `minRows` option,\n          // we don't want to touch/shift cell meta objects.\n          datamap.createRow(nrOfRows, minRows - nrOfRows, {\n            source: 'auto'\n          });\n        }\n      }\n      if (minSpareRows) {\n        const emptyRows = instance.countEmptyRows(true);\n\n        // should I add empty rows to meet minSpareRows?\n        if (emptyRows < minSpareRows) {\n          const emptyRowsMissing = minSpareRows - emptyRows;\n          const rowsToCreate = Math.min(emptyRowsMissing, tableMeta.maxRows - instance.countSourceRows());\n\n          // The synchronization with cell meta is not desired here. For `minSpareRows` option,\n          // we don't want to touch/shift cell meta objects.\n          datamap.createRow(instance.countRows(), rowsToCreate, {\n            source: 'auto'\n          });\n        }\n      }\n      {\n        let emptyCols;\n\n        // count currently empty cols\n        if (minCols || minSpareCols) {\n          emptyCols = instance.countEmptyCols(true);\n        }\n        let nrOfColumns = instance.countCols();\n\n        // should I add empty cols to meet minCols?\n        if (minCols && !tableMeta.columns && nrOfColumns < minCols) {\n          // The synchronization with cell meta is not desired here. For `minSpareRows` option,\n          // we don't want to touch/shift cell meta objects.\n          const colsToCreate = minCols - nrOfColumns;\n          emptyCols += colsToCreate;\n          datamap.createCol(nrOfColumns, colsToCreate, {\n            source: 'auto'\n          });\n        }\n        // should I add empty cols to meet minSpareCols?\n        if (minSpareCols && !tableMeta.columns && instance.dataType === 'array' && emptyCols < minSpareCols) {\n          nrOfColumns = instance.countCols();\n          const emptyColsMissing = minSpareCols - emptyCols;\n          const colsToCreate = Math.min(emptyColsMissing, tableMeta.maxCols - nrOfColumns);\n\n          // The synchronization with cell meta is not desired here. For `minSpareRows` option,\n          // we don't want to touch/shift cell meta objects.\n          datamap.createCol(nrOfColumns, colsToCreate, {\n            source: 'auto'\n          });\n        }\n      }\n      if (selection.isSelected()) {\n        const rowCount = instance.countRows();\n        const colCount = instance.countCols();\n        arrayEach(selection.selectedRange, range => {\n          let selectionChanged = false;\n          let fromRow = range.from.row;\n          let fromCol = range.from.col;\n          let toRow = range.to.row;\n          let toCol = range.to.col;\n\n          // if selection is outside, move selection to last row\n          if (fromRow > rowCount - 1) {\n            fromRow = rowCount - 1;\n            selectionChanged = true;\n            if (toRow > fromRow) {\n              toRow = fromRow;\n            }\n          } else if (toRow > rowCount - 1) {\n            toRow = rowCount - 1;\n            selectionChanged = true;\n            if (fromRow > toRow) {\n              fromRow = toRow;\n            }\n          }\n          // if selection is outside, move selection to last row\n          if (fromCol > colCount - 1) {\n            fromCol = colCount - 1;\n            selectionChanged = true;\n            if (toCol > fromCol) {\n              toCol = fromCol;\n            }\n          } else if (toCol > colCount - 1) {\n            toCol = colCount - 1;\n            selectionChanged = true;\n            if (fromCol > toCol) {\n              fromCol = toCol;\n            }\n          }\n          if (selectionChanged) {\n            instance.selectCell(fromRow, fromCol, toRow, toCol);\n          }\n        });\n      }\n      if (instance.view) {\n        instance.view.adjustElementsSize();\n      }\n    },\n    /**\n     * Populate the data from the provided 2d array from the given cell coordinates.\n     *\n     * @private\n     * @param {object} start Start selection position. Visual indexes.\n     * @param {Array} input 2d data array.\n     * @param {object} [end] End selection position (only for drag-down mode). Visual indexes.\n     * @param {string} [source=\"populateFromArray\"] Source information string.\n     * @param {string} [method=\"overwrite\"] Populate method. Possible options: `shift_down`, `shift_right`, `overwrite`.\n     * @returns {object|undefined} Ending td in pasted area (only if any cell was changed).\n     */\n    populateFromArray(start, input, end, source, method) {\n      let r;\n      let rlen;\n      let c;\n      let clen;\n      const setData = [];\n      const current = {};\n      const newDataByColumns = [];\n      const startRow = start.row;\n      const startColumn = start.col;\n      rlen = input.length;\n      if (rlen === 0) {\n        return false;\n      }\n      let columnsPopulationEnd = 0;\n      let rowsPopulationEnd = 0;\n      if (isObject(end)) {\n        columnsPopulationEnd = end.col - startColumn + 1;\n        rowsPopulationEnd = end.row - startRow + 1;\n      }\n\n      // insert data with specified pasteMode method\n      switch (method) {\n        case 'shift_down':\n          // translate data from a list of rows to a list of columns\n          const populatedDataByColumns = pivot(input);\n          const numberOfDataColumns = populatedDataByColumns.length;\n          // method's argument can extend the range of data population (data would be repeated)\n          const numberOfColumnsToPopulate = Math.max(numberOfDataColumns, columnsPopulationEnd);\n          const pushedDownDataByRows = instance.getData().slice(startRow);\n\n          // translate data from a list of rows to a list of columns\n          const pushedDownDataByColumns = pivot(pushedDownDataByRows).slice(startColumn, startColumn + numberOfColumnsToPopulate);\n          for (c = 0; c < numberOfColumnsToPopulate; c += 1) {\n            if (c < numberOfDataColumns) {\n              for (r = 0, rlen = populatedDataByColumns[c].length; r < rowsPopulationEnd - rlen; r += 1) {\n                // repeating data for rows\n                populatedDataByColumns[c].push(populatedDataByColumns[c][r % rlen]);\n              }\n              if (c < pushedDownDataByColumns.length) {\n                newDataByColumns.push(populatedDataByColumns[c].concat(pushedDownDataByColumns[c]));\n              } else {\n                // if before data population, there was no data in the column\n                // we fill the required rows' newly-created cells with `null` values\n                newDataByColumns.push(populatedDataByColumns[c].concat(new Array(pushedDownDataByRows.length).fill(null)));\n              }\n            } else {\n              // Repeating data for columns.\n              newDataByColumns.push(populatedDataByColumns[c % numberOfDataColumns].concat(pushedDownDataByColumns[c]));\n            }\n          }\n          instance.populateFromArray(startRow, startColumn, pivot(newDataByColumns));\n          break;\n        case 'shift_right':\n          const numberOfDataRows = input.length;\n          // method's argument can extend the range of data population (data would be repeated)\n          const numberOfRowsToPopulate = Math.max(numberOfDataRows, rowsPopulationEnd);\n          const pushedRightDataByRows = instance.getData().slice(startRow).map(rowData => rowData.slice(startColumn));\n          for (r = 0; r < numberOfRowsToPopulate; r += 1) {\n            if (r < numberOfDataRows) {\n              for (c = 0, clen = input[r].length; c < columnsPopulationEnd - clen; c += 1) {\n                // repeating data for rows\n                input[r].push(input[r][c % clen]);\n              }\n              if (r < pushedRightDataByRows.length) {\n                for (let i = 0; i < pushedRightDataByRows[r].length; i += 1) {\n                  input[r].push(pushedRightDataByRows[r][i]);\n                }\n              } else {\n                // if before data population, there was no data in the row\n                // we fill the required columns' newly-created cells with `null` values\n                input[r].push(...new Array(pushedRightDataByRows[0].length).fill(null));\n              }\n            } else {\n              // Repeating data for columns.\n              input.push(input[r % rlen].slice(0, numberOfRowsToPopulate).concat(pushedRightDataByRows[r]));\n            }\n          }\n          instance.populateFromArray(startRow, startColumn, input);\n          break;\n        case 'overwrite':\n        default:\n          // overwrite and other not specified options\n          current.row = start.row;\n          current.col = start.col;\n          let skippedRow = 0;\n          let skippedColumn = 0;\n          let pushData = true;\n          let cellMeta;\n          const getInputValue = function getInputValue(row) {\n            let col = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n            const rowValue = input[row % input.length];\n            if (col !== null) {\n              return rowValue[col % rowValue.length];\n            }\n            return rowValue;\n          };\n          const rowInputLength = input.length;\n          const rowSelectionLength = end ? end.row - start.row + 1 : 0;\n          if (end) {\n            rlen = rowSelectionLength;\n          } else {\n            rlen = Math.max(rowInputLength, rowSelectionLength);\n          }\n          for (r = 0; r < rlen; r++) {\n            if (end && current.row > end.row && rowSelectionLength > rowInputLength || !tableMeta.allowInsertRow && current.row > instance.countRows() - 1 || current.row >= tableMeta.maxRows) {\n              break;\n            }\n            const visualRow = r - skippedRow;\n            const colInputLength = getInputValue(visualRow).length;\n            const colSelectionLength = end ? end.col - start.col + 1 : 0;\n            if (end) {\n              clen = colSelectionLength;\n            } else {\n              clen = Math.max(colInputLength, colSelectionLength);\n            }\n            current.col = start.col;\n            cellMeta = instance.getCellMeta(current.row, current.col);\n            if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipRowOnPaste) {\n              skippedRow += 1;\n              current.row += 1;\n              rlen += 1;\n              /* eslint-disable no-continue */\n              continue;\n            }\n            skippedColumn = 0;\n            for (c = 0; c < clen; c++) {\n              if (end && current.col > end.col && colSelectionLength > colInputLength || !tableMeta.allowInsertColumn && current.col > instance.countCols() - 1 || current.col >= tableMeta.maxCols) {\n                break;\n              }\n              cellMeta = instance.getCellMeta(current.row, current.col);\n              if ((source === 'CopyPaste.paste' || source === 'Autofill.fill') && cellMeta.skipColumnOnPaste) {\n                skippedColumn += 1;\n                current.col += 1;\n                clen += 1;\n                continue;\n              }\n              if (cellMeta.readOnly && source !== 'UndoRedo.undo') {\n                current.col += 1;\n                /* eslint-disable no-continue */\n                continue;\n              }\n              const visualColumn = c - skippedColumn;\n              let value = getInputValue(visualRow, visualColumn);\n              let orgValue = instance.getDataAtCell(current.row, current.col);\n              if (value !== null && typeof value === 'object') {\n                // when 'value' is array and 'orgValue' is null, set 'orgValue' to\n                // an empty array so that the null value can be compared to 'value'\n                // as an empty value for the array context\n                if (Array.isArray(value) && orgValue === null) orgValue = [];\n                if (orgValue === null || typeof orgValue !== 'object') {\n                  pushData = false;\n                } else {\n                  const orgValueSchema = duckSchema(Array.isArray(orgValue) ? orgValue : orgValue[0] || orgValue);\n                  const valueSchema = duckSchema(Array.isArray(value) ? value : value[0] || value);\n\n                  // Allow overwriting values with the same object-based schema or any array-based schema.\n                  if (isObjectEqual(orgValueSchema, valueSchema) || Array.isArray(orgValueSchema) && Array.isArray(valueSchema)) {\n                    value = deepClone(value);\n                  } else {\n                    pushData = false;\n                  }\n                }\n              } else if (orgValue !== null && typeof orgValue === 'object') {\n                pushData = false;\n              }\n              if (pushData) {\n                setData.push([current.row, current.col, value]);\n              }\n              pushData = true;\n              current.col += 1;\n            }\n            current.row += 1;\n          }\n          instance.setDataAtCell(setData, null, null, source || 'populateFromArray');\n          break;\n      }\n    }\n  };\n\n  /**\n   * Internal function to set `language` key of settings.\n   *\n   * @private\n   * @param {string} languageCode Language code for specific language i.e. 'en-US', 'pt-BR', 'de-DE'.\n   * @fires Hooks#afterLanguageChange\n   */\n  function setLanguage(languageCode) {\n    const normalizedLanguageCode = normalizeLanguageCode(languageCode);\n    if (hasLanguageDictionary(normalizedLanguageCode)) {\n      instance.runHooks('beforeLanguageChange', normalizedLanguageCode);\n      globalMeta.language = normalizedLanguageCode;\n      instance.runHooks('afterLanguageChange', normalizedLanguageCode);\n    } else {\n      warnUserAboutLanguageRegistration(languageCode);\n    }\n  }\n\n  /**\n   * Internal function to set `className` or `tableClassName`, depending on the key from the settings object.\n   *\n   * @private\n   * @param {string} className `className` or `tableClassName` from the key in the settings object.\n   * @param {string|string[]} classSettings String or array of strings. Contains class name(s) from settings object.\n   */\n  function setClassName(className, classSettings) {\n    const element = className === 'className' ? instance.rootElement : instance.table;\n    if (firstRun) {\n      addClass(element, classSettings);\n    } else {\n      let globalMetaSettingsArray = [];\n      let settingsArray = [];\n      if (globalMeta[className]) {\n        globalMetaSettingsArray = Array.isArray(globalMeta[className]) ? globalMeta[className] : stringToArray(globalMeta[className]);\n      }\n      if (classSettings) {\n        settingsArray = Array.isArray(classSettings) ? classSettings : stringToArray(classSettings);\n      }\n      const classNameToRemove = getDifferenceOfArrays(globalMetaSettingsArray, settingsArray);\n      const classNameToAdd = getDifferenceOfArrays(settingsArray, globalMetaSettingsArray);\n      if (classNameToRemove.length) {\n        removeClass(element, classNameToRemove);\n      }\n      if (classNameToAdd.length) {\n        addClass(element, classNameToAdd);\n      }\n    }\n    globalMeta[className] = classSettings;\n  }\n  this.init = function () {\n    dataSource.setData(tableMeta.data);\n    instance.runHooks('beforeInit');\n    if (isMobileBrowser() || isIpadOS()) {\n      addClass(instance.rootElement, 'mobile');\n    }\n    this.updateSettings(tableMeta, true);\n    this.view = new TableView(this);\n    editorManager = EditorManager.getInstance(instance, tableMeta, selection);\n    focusManager = new FocusManager(instance);\n    if (isRootInstance(this)) {\n      installFocusCatcher(instance);\n    }\n    instance.runHooks('init');\n    this.forceFullRender = true; // used when data was changed\n    this.view.render();\n\n    // Run the logic only if it's the table's initialization and the root element is not visible.\n    if (!!firstRun && instance.rootElement.offsetParent === null) {\n      observeVisibilityChangeOnce(instance.rootElement, () => {\n        // Update the spreader size cache before rendering.\n        instance.view._wt.wtOverlays.updateLastSpreaderSize();\n        instance.render();\n        instance.view.adjustElementsSize();\n      });\n    }\n    if (typeof firstRun === 'object') {\n      instance.runHooks('afterChange', firstRun[0], firstRun[1]);\n      firstRun = false;\n    }\n    instance.runHooks('afterInit');\n  };\n\n  /**\n   * @ignore\n   * @returns {object}\n   */\n  function ValidatorsQueue() {\n    // moved this one level up so it can be used in any function here. Probably this should be moved to a separate file\n    let resolved = false;\n    return {\n      validatorsInQueue: 0,\n      valid: true,\n      addValidatorToQueue() {\n        this.validatorsInQueue += 1;\n        resolved = false;\n      },\n      removeValidatorFormQueue() {\n        this.validatorsInQueue = this.validatorsInQueue - 1 < 0 ? 0 : this.validatorsInQueue - 1;\n        this.checkIfQueueIsEmpty();\n      },\n      onQueueEmpty() {},\n      checkIfQueueIsEmpty() {\n        if (this.validatorsInQueue === 0 && resolved === false) {\n          resolved = true;\n          this.onQueueEmpty(this.valid);\n        }\n      }\n    };\n  }\n\n  /**\n   * Get parsed number from numeric string.\n   *\n   * @private\n   * @param {string} numericData Float (separated by a dot or a comma) or integer.\n   * @returns {number} Number if we get data in parsable format, not changed value otherwise.\n   */\n  function getParsedNumber(numericData) {\n    // Unifying \"float like\" string. Change from value with comma determiner to value with dot determiner,\n    // for example from `450,65` to `450.65`.\n    const unifiedNumericData = numericData.replace(',', '.');\n    if (isNaN(parseFloat(unifiedNumericData)) === false) {\n      return parseFloat(unifiedNumericData);\n    }\n    return numericData;\n  }\n\n  /**\n   * @ignore\n   * @param {Array} changes The 2D array containing information about each of the edited cells.\n   * @param {string} source The string that identifies source of validation.\n   * @param {Function} callback The callback function fot async validation.\n   */\n  function validateChanges(changes, source, callback) {\n    if (!changes.length) {\n      return;\n    }\n    const activeEditor = instance.getActiveEditor();\n    const waitingForValidator = new ValidatorsQueue();\n    let shouldBeCanceled = true;\n    waitingForValidator.onQueueEmpty = isValid => {\n      if (activeEditor && shouldBeCanceled) {\n        activeEditor.cancelChanges();\n      }\n      callback(isValid); // called when async validators are resolved and beforeChange was not async\n    };\n\n    for (let i = changes.length - 1; i >= 0; i--) {\n      const [row, prop,, newValue] = changes[i];\n      const col = datamap.propToCol(prop);\n      const cellProperties = instance.getCellMeta(row, col);\n      if (cellProperties.type === 'numeric' && typeof newValue === 'string' && isNumericLike(newValue)) {\n        changes[i][3] = getParsedNumber(newValue);\n      }\n\n      /* eslint-disable no-loop-func */\n      if (instance.getCellValidator(cellProperties)) {\n        waitingForValidator.addValidatorToQueue();\n        instance.validateCell(changes[i][3], cellProperties, function (index, cellPropertiesReference) {\n          return function (result) {\n            if (typeof result !== 'boolean') {\n              throw new Error('Validation error: result is not boolean');\n            }\n            if (result === false && cellPropertiesReference.allowInvalid === false) {\n              shouldBeCanceled = false;\n              changes.splice(index, 1); // cancel the change\n              cellPropertiesReference.valid = true; // we cancelled the change, so cell value is still valid\n\n              const cell = instance.getCell(cellPropertiesReference.visualRow, cellPropertiesReference.visualCol);\n              if (cell !== null) {\n                removeClass(cell, tableMeta.invalidCellClassName);\n              }\n            }\n            waitingForValidator.removeValidatorFormQueue();\n          };\n        }(i, cellProperties), source);\n      }\n    }\n    waitingForValidator.checkIfQueueIsEmpty();\n  }\n\n  /**\n   * Internal function to apply changes. Called after validateChanges.\n   *\n   * @private\n   * @param {Array} changes Array in form of [row, prop, oldValue, newValue].\n   * @param {string} source String that identifies how this change will be described in changes array (useful in onChange callback).\n   * @fires Hooks#beforeChangeRender\n   * @fires Hooks#afterChange\n   */\n  function applyChanges(changes, source) {\n    let i = changes.length - 1;\n    if (i < 0) {\n      return;\n    }\n    for (; i >= 0; i--) {\n      let skipThisChange = false;\n      if (changes[i] === null) {\n        changes.splice(i, 1);\n        /* eslint-disable no-continue */\n        continue;\n      }\n      if ((changes[i][2] === null || changes[i][2] === void 0) && (changes[i][3] === null || changes[i][3] === void 0)) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n      if (tableMeta.allowInsertRow) {\n        while (changes[i][0] > instance.countRows() - 1) {\n          const {\n            delta: numberOfCreatedRows\n          } = datamap.createRow(void 0, void 0, {\n            source\n          });\n          if (numberOfCreatedRows === 0) {\n            skipThisChange = true;\n            break;\n          }\n        }\n      }\n      if (instance.dataType === 'array' && (!tableMeta.columns || tableMeta.columns.length === 0) && tableMeta.allowInsertColumn) {\n        while (datamap.propToCol(changes[i][1]) > instance.countCols() - 1) {\n          const {\n            delta: numberOfCreatedColumns\n          } = datamap.createCol(void 0, void 0, {\n            source\n          });\n          if (numberOfCreatedColumns === 0) {\n            skipThisChange = true;\n            break;\n          }\n        }\n      }\n      if (skipThisChange) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n      datamap.set(changes[i][0], changes[i][1], changes[i][3]);\n    }\n    instance.forceFullRender = true; // used when data was changed\n    grid.adjustRowsAndCols();\n    instance.runHooks('beforeChangeRender', changes, source);\n    editorManager.lockEditor();\n    instance._refreshBorders(null);\n    editorManager.unlockEditor();\n    instance.view.adjustElementsSize();\n    instance.runHooks('afterChange', changes, source || 'edit');\n    const activeEditor = instance.getActiveEditor();\n    if (activeEditor && isDefined(activeEditor.refreshValue)) {\n      activeEditor.refreshValue();\n    }\n  }\n\n  /**\n   * Creates and returns the CellCoords object.\n   *\n   * @private\n   * @memberof Core#\n   * @function _createCellCoords\n   * @param {number} row The row index.\n   * @param {number} column The column index.\n   * @returns {CellCoords}\n   */\n  this._createCellCoords = function (row, column) {\n    return instance.view._wt.createCellCoords(row, column);\n  };\n\n  /**\n   * Creates and returns the CellRange object.\n   *\n   * @private\n   * @memberof Core#\n   * @function _createCellRange\n   * @param {CellCoords} highlight Defines the border around a cell where selection was started and to edit the cell\n   *                               when you press Enter. The highlight cannot point to headers (negative values).\n   * @param {CellCoords} from Initial coordinates.\n   * @param {CellCoords} to Final coordinates.\n   * @returns {CellRange}\n   */\n  this._createCellRange = function (highlight, from, to) {\n    return instance.view._wt.createCellRange(highlight, from, to);\n  };\n\n  /**\n   * Validate a single cell.\n   *\n   * @memberof Core#\n   * @function validateCell\n   * @param {string|number} value The value to validate.\n   * @param {object} cellProperties The cell meta which corresponds with the value.\n   * @param {Function} callback The callback function.\n   * @param {string} source The string that identifies source of the validation.\n   */\n  this.validateCell = function (value, cellProperties, callback, source) {\n    let validator = instance.getCellValidator(cellProperties);\n\n    // the `canBeValidated = false` argument suggests, that the cell passes validation by default.\n    /**\n     * @private\n     * @function done\n     * @param {boolean} valid Indicates if the validation was successful.\n     * @param {boolean} [canBeValidated=true] Flag which controls the validation process.\n     */\n    function done(valid) {\n      let canBeValidated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      // Fixes GH#3903\n      if (!canBeValidated || cellProperties.hidden === true) {\n        callback(valid);\n        return;\n      }\n      const col = cellProperties.visualCol;\n      const row = cellProperties.visualRow;\n      const td = instance.getCell(row, col, true);\n      if (td && td.nodeName !== 'TH') {\n        const renderableRow = instance.rowIndexMapper.getRenderableFromVisualIndex(row);\n        const renderableColumn = instance.columnIndexMapper.getRenderableFromVisualIndex(col);\n        instance.view._wt.getSetting('cellRenderer', renderableRow, renderableColumn, td);\n      }\n      callback(valid);\n    }\n    if (isRegExp(validator)) {\n      validator = function (expression) {\n        return function (cellValue, validatorCallback) {\n          validatorCallback(expression.test(cellValue));\n        };\n      }(validator);\n    }\n    if (isFunction(validator)) {\n      // eslint-disable-next-line no-param-reassign\n      value = instance.runHooks('beforeValidate', value, cellProperties.visualRow, cellProperties.prop, source);\n\n      // To provide consistent behaviour, validation should be always asynchronous\n      instance._registerImmediate(() => {\n        validator.call(cellProperties, value, valid => {\n          if (!instance) {\n            return;\n          }\n          // eslint-disable-next-line no-param-reassign\n          valid = instance.runHooks('afterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);\n          cellProperties.valid = valid;\n          done(valid);\n          instance.runHooks('postAfterValidate', valid, value, cellProperties.visualRow, cellProperties.prop, source);\n        });\n      });\n    } else {\n      // resolve callback even if validator function was not found\n      instance._registerImmediate(() => {\n        cellProperties.valid = true;\n        done(cellProperties.valid, false);\n      });\n    }\n  };\n\n  /**\n   * @ignore\n   * @param {number} row The visual row index.\n   * @param {string|number} propOrCol The visual prop or column index.\n   * @param {*} value The cell value.\n   * @returns {Array}\n   */\n  function setDataInputToArray(row, propOrCol, value) {\n    if (Array.isArray(row)) {\n      // it's an array of changes\n      return row;\n    }\n    return [[row, propOrCol, value]];\n  }\n\n  /**\n   * Process changes prepared for applying to the dataset (unifying list of changes, closing an editor - when needed,\n   * calling a hook).\n   *\n   * @private\n   * @param {Array} changes Array of changes in format `[[row, col, value],...]`.\n   * @param {string} [source] String that identifies how this change will be described in the changes array (useful in afterChange or beforeChange callback). Set to 'edit' if left empty.\n   * @returns {Array} List of changes finally applied to the dataset.\n   */\n  function processChanges(changes, source) {\n    const activeEditor = instance.getActiveEditor();\n    const beforeChangeResult = instance.runHooks('beforeChange', changes, source || 'edit');\n    // The `beforeChange` hook could add a `null` for purpose of cancelling some dataset's change.\n    const filteredChanges = changes.filter(change => change !== null);\n    if (beforeChangeResult === false || filteredChanges.length === 0) {\n      if (activeEditor) {\n        activeEditor.cancelChanges();\n      }\n      return [];\n    }\n    return filteredChanges;\n  }\n\n  /**\n   * @description\n   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format\n   * `[[row, col, value],...]` as the first argument.\n   *\n   * @memberof Core#\n   * @function setDataAtCell\n   * @param {number|Array} row Visual row index or array of changes in format `[[row, col, value],...]`.\n   * @param {number} [column] Visual column index.\n   * @param {string} [value] New value.\n   * @param {string} [source] String that identifies how this change will be described in the changes array (useful in afterChange or beforeChange callback). Set to 'edit' if left empty.\n   */\n  this.setDataAtCell = function (row, column, value, source) {\n    const input = setDataInputToArray(row, column, value);\n    const changes = [];\n    let changeSource = source;\n    let i;\n    let ilen;\n    let prop;\n    for (i = 0, ilen = input.length; i < ilen; i++) {\n      if (typeof input[i] !== 'object') {\n        throw new Error('Method `setDataAtCell` accepts row number or changes array of arrays as its first parameter');\n      }\n      if (typeof input[i][1] !== 'number') {\n        throw new Error('Method `setDataAtCell` accepts row and column number as its parameters. If you want to use object property name, use method `setDataAtRowProp`'); // eslint-disable-line max-len\n      }\n\n      if (input[i][1] >= this.countCols()) {\n        prop = input[i][1];\n      } else {\n        prop = datamap.colToProp(input[i][1]);\n      }\n      changes.push([input[i][0], prop, dataSource.getAtCell(this.toPhysicalRow(input[i][0]), input[i][1]), input[i][2]]);\n    }\n    if (!changeSource && typeof row === 'object') {\n      changeSource = column;\n    }\n    const processedChanges = processChanges(changes, source);\n    instance.runHooks('afterSetDataAtCell', processedChanges, changeSource);\n    validateChanges(processedChanges, changeSource, () => {\n      applyChanges(processedChanges, changeSource);\n    });\n  };\n\n  /**\n   * @description\n   * Set new value to a cell. To change many cells at once (recommended way), pass an array of `changes` in format\n   * `[[row, prop, value],...]` as the first argument.\n   *\n   * @memberof Core#\n   * @function setDataAtRowProp\n   * @param {number|Array} row Visual row index or array of changes in format `[[row, prop, value], ...]`.\n   * @param {string} prop Property name or the source string (e.g. `'first.name'` or `'0'`).\n   * @param {string} value Value to be set.\n   * @param {string} [source] String that identifies how this change will be described in changes array (useful in onChange callback).\n   */\n  this.setDataAtRowProp = function (row, prop, value, source) {\n    const input = setDataInputToArray(row, prop, value);\n    const changes = [];\n    let changeSource = source;\n    let i;\n    let ilen;\n    for (i = 0, ilen = input.length; i < ilen; i++) {\n      changes.push([input[i][0], input[i][1], dataSource.getAtCell(this.toPhysicalRow(input[i][0]), input[i][1]), input[i][2]]);\n    }\n    if (!changeSource && typeof row === 'object') {\n      changeSource = prop;\n    }\n    const processedChanges = processChanges(changes, source);\n    instance.runHooks('afterSetDataAtRowProp', processedChanges, changeSource);\n    validateChanges(processedChanges, changeSource, () => {\n      applyChanges(processedChanges, changeSource);\n    });\n  };\n\n  /**\n   * Listen to the keyboard input on document body. This allows Handsontable to capture keyboard events and respond\n   * in the right way.\n   *\n   * @memberof Core#\n   * @function listen\n   * @fires Hooks#afterListen\n   */\n  this.listen = function () {\n    if (instance && !instance.isListening()) {\n      foreignHotInstances.forEach(foreignHot => {\n        if (instance !== foreignHot) {\n          foreignHot.unlisten();\n        }\n      });\n      activeGuid = instance.guid;\n      instance.runHooks('afterListen');\n    }\n  };\n\n  /**\n   * Stop listening to keyboard input on the document body. Calling this method makes the Handsontable inactive for\n   * any keyboard events.\n   *\n   * @memberof Core#\n   * @function unlisten\n   */\n  this.unlisten = function () {\n    if (this.isListening()) {\n      activeGuid = null;\n      instance.runHooks('afterUnlisten');\n    }\n  };\n\n  /**\n   * Returns `true` if the current Handsontable instance is listening to keyboard input on document body.\n   *\n   * @memberof Core#\n   * @function isListening\n   * @returns {boolean} `true` if the instance is listening, `false` otherwise.\n   */\n  this.isListening = function () {\n    return activeGuid === instance.guid;\n  };\n\n  /**\n   * Destroys the current editor, render the table and prepares the editor of the newly selected cell.\n   *\n   * @memberof Core#\n   * @function destroyEditor\n   * @param {boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.\n   * @param {boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.\n   */\n  this.destroyEditor = function () {\n    let revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    instance._refreshBorders(revertOriginal, prepareEditorIfNeeded);\n  };\n\n  /**\n   * Populates cells at position with 2D input array (e.g. `[[1, 2], [3, 4]]`). Use `endRow`, `endCol` when you\n   * want to cut input when a certain row is reached.\n   *\n   * The `populateFromArray()` method can't change [`readOnly`](@/api/options.md#readonly) cells.\n   *\n   * Optional `method` argument has the same effect as pasteMode option (see {@link Options#pasteMode}).\n   *\n   * @memberof Core#\n   * @function populateFromArray\n   * @param {number} row Start visual row index.\n   * @param {number} column Start visual column index.\n   * @param {Array} input 2d array.\n   * @param {number} [endRow] End visual row index (use when you want to cut input when certain row is reached).\n   * @param {number} [endCol] End visual column index (use when you want to cut input when certain column is reached).\n   * @param {string} [source=populateFromArray] Used to identify this call in the resulting events (beforeChange, afterChange).\n   * @param {string} [method=overwrite] Populate method, possible values: `'shift_down'`, `'shift_right'`, `'overwrite'`.\n   * @returns {object|undefined} Ending td in pasted area (only if any cell was changed).\n   */\n  this.populateFromArray = function (row, column, input, endRow, endCol, source, method) {\n    if (!(typeof input === 'object' && typeof input[0] === 'object')) {\n      throw new Error('populateFromArray parameter `input` must be an array of arrays'); // API changed in 0.9-beta2, let's check if you use it correctly\n    }\n\n    const c = typeof endRow === 'number' ? instance._createCellCoords(endRow, endCol) : null;\n    return grid.populateFromArray(instance._createCellCoords(row, column), input, c, source, method);\n  };\n\n  /**\n   * Adds/removes data from the column. This method works the same as Array.splice for arrays.\n   *\n   * @memberof Core#\n   * @function spliceCol\n   * @param {number} column Index of the column in which do you want to do splice.\n   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {...number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.\n   * @returns {Array} Returns removed portion of columns.\n   */\n  this.spliceCol = function (column, index, amount) {\n    for (var _len5 = arguments.length, elements = new Array(_len5 > 3 ? _len5 - 3 : 0), _key5 = 3; _key5 < _len5; _key5++) {\n      elements[_key5 - 3] = arguments[_key5];\n    }\n    return datamap.spliceCol(column, index, amount, ...elements);\n  };\n\n  /**\n   * Adds/removes data from the row. This method works the same as Array.splice for arrays.\n   *\n   * @memberof Core#\n   * @function spliceRow\n   * @param {number} row Index of column in which do you want to do splice.\n   * @param {number} index Index at which to start changing the array. If negative, will begin that many elements from the end.\n   * @param {number} amount An integer indicating the number of old array elements to remove. If amount is 0, no elements are removed.\n   * @param {...number} [elements] The elements to add to the array. If you don't specify any elements, spliceCol simply removes elements from the array.\n   * @returns {Array} Returns removed portion of rows.\n   */\n  this.spliceRow = function (row, index, amount) {\n    for (var _len6 = arguments.length, elements = new Array(_len6 > 3 ? _len6 - 3 : 0), _key6 = 3; _key6 < _len6; _key6++) {\n      elements[_key6 - 3] = arguments[_key6];\n    }\n    return datamap.spliceRow(row, index, amount, ...elements);\n  };\n\n  /**\n   * Returns indexes of the currently selected cells as an array of arrays `[[startRow, startCol, endRow, endCol],...]`.\n   *\n   * Start row and start column are the coordinates of the active cell (where the selection was started).\n   *\n   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.\n   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)\n   * you need to use `getSelectedLast` method.\n   *\n   * @memberof Core#\n   * @function getSelected\n   * @returns {Array[]|undefined} An array of arrays of the selection's coordinates.\n   */\n  this.getSelected = function () {\n    // https://github.com/handsontable/handsontable/issues/44  //cjl\n    if (selection.isSelected()) {\n      return arrayMap(selection.getSelectedRange(), _ref7 => {\n        let {\n          from,\n          to\n        } = _ref7;\n        return [from.row, from.col, to.row, to.col];\n      });\n    }\n  };\n\n  /**\n   * Returns the last coordinates applied to the table as a an array `[startRow, startCol, endRow, endCol]`.\n   *\n   * @since 0.36.0\n   * @memberof Core#\n   * @function getSelectedLast\n   * @returns {Array|undefined} An array of the selection's coordinates.\n   */\n  this.getSelectedLast = function () {\n    const selected = this.getSelected();\n    let result;\n    if (selected && selected.length > 0) {\n      result = selected[selected.length - 1];\n    }\n    return result;\n  };\n\n  /**\n   * Returns the current selection as an array of CellRange objects.\n   *\n   * The version 0.36.0 adds a non-consecutive selection feature. Since this version, the method returns an array of arrays.\n   * Additionally to collect the coordinates of the currently selected area (as it was previously done by the method)\n   * you need to use `getSelectedRangeLast` method.\n   *\n   * @memberof Core#\n   * @function getSelectedRange\n   * @returns {CellRange[]|undefined} Selected range object or undefined if there is no selection.\n   */\n  this.getSelectedRange = function () {\n    // https://github.com/handsontable/handsontable/issues/44  //cjl\n    if (selection.isSelected()) {\n      return Array.from(selection.getSelectedRange());\n    }\n  };\n\n  /**\n   * Returns the last coordinates applied to the table as a CellRange object.\n   *\n   * @memberof Core#\n   * @function getSelectedRangeLast\n   * @since 0.36.0\n   * @returns {CellRange|undefined} Selected range object or undefined` if there is no selection.\n   */\n  this.getSelectedRangeLast = function () {\n    const selectedRange = this.getSelectedRange();\n    let result;\n    if (selectedRange && selectedRange.length > 0) {\n      result = selectedRange[selectedRange.length - 1];\n    }\n    return result;\n  };\n\n  /**\n   * Erases content from cells that have been selected in the table.\n   *\n   * @memberof Core#\n   * @function emptySelectedCells\n   * @param {string} [source] String that identifies how this change will be described in the changes array (useful in afterChange or beforeChange callback). Set to 'edit' if left empty.\n   * @since 0.36.0\n   */\n  this.emptySelectedCells = function (source) {\n    if (!selection.isSelected() || this.countRows() === 0 || this.countCols() === 0) {\n      return;\n    }\n    const changes = [];\n    arrayEach(selection.getSelectedRange(), cellRange => {\n      if (cellRange.isSingleHeader()) {\n        return;\n      }\n      const topStart = cellRange.getTopStartCorner();\n      const bottomEnd = cellRange.getBottomEndCorner();\n      rangeEach(topStart.row, bottomEnd.row, row => {\n        rangeEach(topStart.col, bottomEnd.col, column => {\n          if (!this.getCellMeta(row, column).readOnly) {\n            changes.push([row, column, null]);\n          }\n        });\n      });\n    });\n    if (changes.length > 0) {\n      this.setDataAtCell(changes, source);\n    }\n  };\n\n  /**\n   * Checks if the table rendering process was suspended. See explanation in {@link Core#suspendRender}.\n   *\n   * @memberof Core#\n   * @function isRenderSuspended\n   * @since 8.3.0\n   * @returns {boolean}\n   */\n  this.isRenderSuspended = function () {\n    return this.renderSuspendedCounter > 0;\n  };\n\n  /**\n   * Suspends the rendering process. It's helpful to wrap the table render\n   * cycles triggered by API calls or UI actions (or both) and call the \"render\"\n   * once in the end. As a result, it improves the performance of wrapped operations.\n   * When the table is in the suspend state, most operations will have no visual\n   * effect until the rendering state is resumed. Resuming the state automatically\n   * invokes the table rendering. To make sure that after executing all operations,\n   * the table will be rendered, it's highly recommended to use the {@link Core#batchRender}\n   * method or {@link Core#batch}, which additionally aggregates the logic execution\n   * that happens behind the table.\n   *\n   * The method is intended to be used by advanced users. Suspending the rendering\n   * process could cause visual glitches when wrongly implemented.\n   *\n   * Every [`suspendRender()`](@/api/core.md#suspendrender) call needs to correspond with one [`resumeRender()`](@/api/core.md#resumerender) call.\n   * For example, if you call [`suspendRender()`](@/api/core.md#suspendrender) 5 times, you need to call [`resumeRender()`](@/api/core.md#resumerender) 5 times as well.\n   *\n   * @memberof Core#\n   * @function suspendRender\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendRender();\n   * hot.alter('insert_row_above', 5, 45);\n   * hot.alter('insert_col_start', 10, 40);\n   * hot.setDataAtCell(1, 1, 'John');\n   * hot.setDataAtCell(2, 2, 'Mark');\n   * hot.setDataAtCell(3, 3, 'Ann');\n   * hot.setDataAtCell(4, 4, 'Sophia');\n   * hot.setDataAtCell(5, 5, 'Mia');\n   * hot.selectCell(0, 0);\n   * hot.resumeRender(); // It re-renders the table internally\n   * ```\n   */\n  this.suspendRender = function () {\n    this.renderSuspendedCounter += 1;\n  };\n\n  /**\n   * Resumes the rendering process. In combination with the {@link Core#suspendRender}\n   * method it allows aggregating the table render cycles triggered by API calls or UI\n   * actions (or both) and calls the \"render\" once in the end. When the table is in\n   * the suspend state, most operations will have no visual effect until the rendering\n   * state is resumed. Resuming the state automatically invokes the table rendering.\n   *\n   * The method is intended to be used by advanced users. Suspending the rendering\n   * process could cause visual glitches when wrongly implemented.\n   *\n   * Every [`suspendRender()`](@/api/core.md#suspendrender) call needs to correspond with one [`resumeRender()`](@/api/core.md#resumerender) call.\n   * For example, if you call [`suspendRender()`](@/api/core.md#suspendrender) 5 times, you need to call [`resumeRender()`](@/api/core.md#resumerender) 5 times as well.\n   *\n   * @memberof Core#\n   * @function resumeRender\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendRender();\n   * hot.alter('insert_row_above', 5, 45);\n   * hot.alter('insert_col_start', 10, 40);\n   * hot.setDataAtCell(1, 1, 'John');\n   * hot.setDataAtCell(2, 2, 'Mark');\n   * hot.setDataAtCell(3, 3, 'Ann');\n   * hot.setDataAtCell(4, 4, 'Sophia');\n   * hot.setDataAtCell(5, 5, 'Mia');\n   * hot.selectCell(0, 0);\n   * hot.resumeRender(); // It re-renders the table internally\n   * ```\n   */\n  this.resumeRender = function () {\n    const nextValue = this.renderSuspendedCounter - 1;\n    this.renderSuspendedCounter = Math.max(nextValue, 0);\n    if (!this.isRenderSuspended() && nextValue === this.renderSuspendedCounter) {\n      if (this.renderCall) {\n        this.render();\n      } else {\n        this._refreshBorders(null);\n      }\n    }\n  };\n\n  /**\n   * Rerender the table. Calling this method starts the process of recalculating, redrawing and applying the changes\n   * to the DOM. While rendering the table all cell renderers are recalled.\n   *\n   * Calling this method manually is not recommended. Handsontable tries to render itself by choosing the most\n   * optimal moments in its lifecycle.\n   *\n   * @memberof Core#\n   * @function render\n   */\n  this.render = function () {\n    if (this.view) {\n      this.renderCall = true;\n      this.forceFullRender = true; // used when data was changed\n\n      if (!this.isRenderSuspended()) {\n        editorManager.lockEditor();\n        this._refreshBorders(null);\n        editorManager.unlockEditor();\n      }\n    }\n  };\n\n  /**\n   * The method aggregates multi-line API calls into a callback and postpones the\n   * table rendering process. After the execution of the operations, the table is\n   * rendered once. As a result, it improves the performance of wrapped operations.\n   * Without batching, a similar case could trigger multiple table render calls.\n   *\n   * @memberof Core#\n   * @function batchRender\n   * @param {Function} wrappedOperations Batched operations wrapped in a function.\n   * @returns {*} Returns result from the wrappedOperations callback.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.batchRender(() => {\n   *   hot.alter('insert_row_above', 5, 45);\n   *   hot.alter('insert_col_start', 10, 40);\n   *   hot.setDataAtCell(1, 1, 'John');\n   *   hot.setDataAtCell(2, 2, 'Mark');\n   *   hot.setDataAtCell(3, 3, 'Ann');\n   *   hot.setDataAtCell(4, 4, 'Sophia');\n   *   hot.setDataAtCell(5, 5, 'Mia');\n   *   hot.selectCell(0, 0);\n   *   // The table will be rendered once after executing the callback\n   * });\n   * ```\n   */\n  this.batchRender = function (wrappedOperations) {\n    this.suspendRender();\n    const result = wrappedOperations();\n    this.resumeRender();\n    return result;\n  };\n\n  /**\n   * Checks if the table indexes recalculation process was suspended. See explanation\n   * in {@link Core#suspendExecution}.\n   *\n   * @memberof Core#\n   * @function isExecutionSuspended\n   * @since 8.3.0\n   * @returns {boolean}\n   */\n  this.isExecutionSuspended = function () {\n    return this.executionSuspendedCounter > 0;\n  };\n\n  /**\n   * Suspends the execution process. It's helpful to wrap the table logic changes\n   * such as index changes into one call after which the cache is updated. As a result,\n   * it improves the performance of wrapped operations.\n   *\n   * The method is intended to be used by advanced users. Suspending the execution\n   * process could cause visual glitches caused by not updated the internal table cache.\n   *\n   * @memberof Core#\n   * @function suspendExecution\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendExecution();\n   * const filters = hot.getPlugin('filters');\n   *\n   * filters.addCondition(2, 'contains', ['3']);\n   * filters.filter();\n   * hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   * hot.resumeExecution(); // It updates the cache internally\n   * ```\n   */\n  this.suspendExecution = function () {\n    this.executionSuspendedCounter += 1;\n    this.columnIndexMapper.suspendOperations();\n    this.rowIndexMapper.suspendOperations();\n  };\n\n  /**\n   * Resumes the execution process. In combination with the {@link Core#suspendExecution}\n   * method it allows aggregating the table logic changes after which the cache is\n   * updated. Resuming the state automatically invokes the table cache updating process.\n   *\n   * The method is intended to be used by advanced users. Suspending the execution\n   * process could cause visual glitches caused by not updated the internal table cache.\n   *\n   * @memberof Core#\n   * @function resumeExecution\n   * @param {boolean} [forceFlushChanges=false] If `true`, the table internal data cache\n   * is recalculated after the execution of the batched operations. For nested\n   * {@link Core#batchExecution} calls, it can be desire to recalculate the table\n   * after each batch.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.suspendExecution();\n   * const filters = hot.getPlugin('filters');\n   *\n   * filters.addCondition(2, 'contains', ['3']);\n   * filters.filter();\n   * hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   * hot.resumeExecution(); // It updates the cache internally\n   * ```\n   */\n  this.resumeExecution = function () {\n    let forceFlushChanges = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const nextValue = this.executionSuspendedCounter - 1;\n    this.executionSuspendedCounter = Math.max(nextValue, 0);\n    if (!this.isExecutionSuspended() && nextValue === this.executionSuspendedCounter || forceFlushChanges) {\n      this.columnIndexMapper.resumeOperations();\n      this.rowIndexMapper.resumeOperations();\n    }\n  };\n\n  /**\n   * The method aggregates multi-line API calls into a callback and postpones the\n   * table execution process. After the execution of the operations, the internal table\n   * cache is recalculated once. As a result, it improves the performance of wrapped\n   * operations. Without batching, a similar case could trigger multiple table cache rebuilds.\n   *\n   * @memberof Core#\n   * @function batchExecution\n   * @param {Function} wrappedOperations Batched operations wrapped in a function.\n   * @param {boolean} [forceFlushChanges=false] If `true`, the table internal data cache\n   * is recalculated after the execution of the batched operations. For nested calls,\n   * it can be a desire to recalculate the table after each batch.\n   * @returns {*} Returns result from the wrappedOperations callback.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.batchExecution(() => {\n   *   const filters = hot.getPlugin('filters');\n   *\n   *   filters.addCondition(2, 'contains', ['3']);\n   *   filters.filter();\n   *   hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   *   // The table cache will be recalculated once after executing the callback\n   * });\n   * ```\n   */\n  this.batchExecution = function (wrappedOperations) {\n    let forceFlushChanges = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.suspendExecution();\n    const result = wrappedOperations();\n    this.resumeExecution(forceFlushChanges);\n    return result;\n  };\n\n  /**\n   * It batches the rendering process and index recalculations. The method aggregates\n   * multi-line API calls into a callback and postpones the table rendering process\n   * as well aggregates the table logic changes such as index changes into one call\n   * after which the cache is updated. After the execution of the operations, the\n   * table is rendered, and the cache is updated once. As a result, it improves the\n   * performance of wrapped operations.\n   *\n   * @memberof Core#\n   * @function batch\n   * @param {Function} wrappedOperations Batched operations wrapped in a function.\n   * @returns {*} Returns result from the wrappedOperations callback.\n   * @since 8.3.0\n   * @example\n   * ```js\n   * hot.batch(() => {\n   *   hot.alter('insert_row_above', 5, 45);\n   *   hot.alter('insert_col_start', 10, 40);\n   *   hot.setDataAtCell(1, 1, 'x');\n   *   hot.setDataAtCell(2, 2, 'c');\n   *   hot.setDataAtCell(3, 3, 'v');\n   *   hot.setDataAtCell(4, 4, 'b');\n   *   hot.setDataAtCell(5, 5, 'n');\n   *   hot.selectCell(0, 0);\n   *\n   *   const filters = hot.getPlugin('filters');\n   *\n   *   filters.addCondition(2, 'contains', ['3']);\n   *   filters.filter();\n   *   hot.getPlugin('columnSorting').sort({ column: 1, sortOrder: 'desc' });\n   *   // The table will be re-rendered and cache will be recalculated once after executing the callback\n   * });\n   * ```\n   */\n  this.batch = function (wrappedOperations) {\n    this.suspendRender();\n    this.suspendExecution();\n    const result = wrappedOperations();\n    this.resumeExecution();\n    this.resumeRender();\n    return result;\n  };\n\n  /**\n   * Updates dimensions of the table. The method compares previous dimensions with the current ones and updates accordingly.\n   *\n   * @memberof Core#\n   * @function refreshDimensions\n   * @fires Hooks#beforeRefreshDimensions\n   * @fires Hooks#afterRefreshDimensions\n   */\n  this.refreshDimensions = function () {\n    if (!instance.view) {\n      return;\n    }\n    const {\n      width: lastWidth,\n      height: lastHeight\n    } = instance.view.getLastSize();\n    const {\n      width,\n      height\n    } = instance.rootElement.getBoundingClientRect();\n    const isSizeChanged = width !== lastWidth || height !== lastHeight;\n    const isResizeBlocked = instance.runHooks('beforeRefreshDimensions', {\n      width: lastWidth,\n      height: lastHeight\n    }, {\n      width,\n      height\n    }, isSizeChanged) === false;\n    if (isResizeBlocked) {\n      return;\n    }\n    if (isSizeChanged || instance.view._wt.wtOverlays.scrollableElement === instance.rootWindow) {\n      instance.view.setLastSize(width, height);\n      instance.render();\n    }\n    instance.runHooks('afterRefreshDimensions', {\n      width: lastWidth,\n      height: lastHeight\n    }, {\n      width,\n      height\n    }, isSizeChanged);\n  };\n\n  /**\n   * The `updateData()` method replaces Handsontable's [`data`](@/api/options.md#data) with a new dataset.\n   *\n   * The `updateData()` method:\n   * - Keeps cells' states (e.g. cells' [formatting](@/guides/cell-features/formatting-cells.md) and cells' [`readOnly`](@/api/options.md#readonly) states)\n   * - Keeps rows' states (e.g. row order)\n   * - Keeps columns' states (e.g. column order)\n   *\n   * To replace Handsontable's [`data`](@/api/options.md#data) and reset states, use the [`loadData()`](#loaddata) method.\n   *\n   * Read more:\n   * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n   * - [Saving data](@/guides/getting-started/saving-data.md)\n   *\n   * @memberof Core#\n   * @function updateData\n   * @since 11.1.0\n   * @param {Array} data An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data\n   * @param {string} [source] The source of the `updateData()` call\n   * @fires Hooks#beforeUpdateData\n   * @fires Hooks#afterUpdateData\n   * @fires Hooks#afterChange\n   */\n  this.updateData = function (data, source) {\n    replaceData(data, newDataMap => {\n      datamap = newDataMap;\n    }, newDataMap => {\n      datamap = newDataMap;\n      instance.columnIndexMapper.fitToLength(this.getInitialColumnCount());\n      instance.rowIndexMapper.fitToLength(this.countSourceRows());\n      grid.adjustRowsAndCols();\n    }, {\n      hotInstance: instance,\n      dataMap: datamap,\n      dataSource,\n      internalSource: 'updateData',\n      source,\n      metaManager,\n      firstRun\n    });\n  };\n\n  /**\n   * The `loadData()` method replaces Handsontable's [`data`](@/api/options.md#data) with a new dataset.\n   *\n   * Additionally, the `loadData()` method:\n   * - Resets cells' states (e.g. cells' [formatting](@/guides/cell-features/formatting-cells.md) and cells' [`readOnly`](@/api/options.md#readonly) states)\n   * - Resets rows' states (e.g. row order)\n   * - Resets columns' states (e.g. column order)\n   *\n   * To replace Handsontable's [`data`](@/api/options.md#data) without resetting states, use the [`updateData()`](#updatedata) method.\n   *\n   * Read more:\n   * - [Binding to data](@/guides/getting-started/binding-to-data.md)\n   * - [Saving data](@/guides/getting-started/saving-data.md)\n   *\n   * @memberof Core#\n   * @function loadData\n   * @param {Array} data An [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays), or an [array of objects](@/guides/getting-started/binding-to-data.md#array-of-objects), that contains Handsontable's data\n   * @param {string} [source] The source of the `loadData()` call\n   * @fires Hooks#beforeLoadData\n   * @fires Hooks#afterLoadData\n   * @fires Hooks#afterChange\n   */\n  this.loadData = function (data, source) {\n    replaceData(data, newDataMap => {\n      datamap = newDataMap;\n    }, () => {\n      metaManager.clearCellsCache();\n      instance.initIndexMappers();\n      grid.adjustRowsAndCols();\n      if (firstRun) {\n        firstRun = [null, 'loadData'];\n      }\n    }, {\n      hotInstance: instance,\n      dataMap: datamap,\n      dataSource,\n      internalSource: 'loadData',\n      source,\n      metaManager,\n      firstRun\n    });\n  };\n\n  /**\n   * Gets the initial column count, calculated based on the `columns` setting.\n   *\n   * @private\n   * @returns {number} The calculated number of columns.\n   */\n  this.getInitialColumnCount = function () {\n    const columnsSettings = tableMeta.columns;\n    let finalNrOfColumns = 0;\n\n    // We will check number of columns when the `columns` property was defined as an array. Columns option may\n    // narrow down or expand displayed dataset in that case.\n    if (Array.isArray(columnsSettings)) {\n      finalNrOfColumns = columnsSettings.length;\n    } else if (isFunction(columnsSettings)) {\n      if (instance.dataType === 'array') {\n        const nrOfSourceColumns = this.countSourceCols();\n        for (let columnIndex = 0; columnIndex < nrOfSourceColumns; columnIndex += 1) {\n          if (columnsSettings(columnIndex)) {\n            finalNrOfColumns += 1;\n          }\n        }\n\n        // Extended dataset by the `columns` property? Moved code right from the refactored `countCols` method.\n      } else if (instance.dataType === 'object' || instance.dataType === 'function') {\n        finalNrOfColumns = datamap.colToPropCache.length;\n      }\n\n      // In some cases we need to check columns length from the schema, i.e. `data` may be empty.\n    } else if (isDefined(tableMeta.dataSchema)) {\n      const schema = datamap.getSchema();\n\n      // Schema may be defined as an array of objects. Each object will define column.\n      finalNrOfColumns = Array.isArray(schema) ? schema.length : deepObjectSize(schema);\n    } else {\n      // We init index mappers by length of source data to provide indexes also for skipped indexes.\n      finalNrOfColumns = this.countSourceCols();\n    }\n    return finalNrOfColumns;\n  };\n\n  /**\n   * Init index mapper which manage indexes assigned to the data.\n   *\n   * @private\n   */\n  this.initIndexMappers = function () {\n    this.columnIndexMapper.initToLength(this.getInitialColumnCount());\n    this.rowIndexMapper.initToLength(this.countSourceRows());\n  };\n\n  /**\n   * Returns the current data object (the same one that was passed by `data` configuration option or `loadData` method,\n   * unless some modifications have been applied (i.e. Sequence of rows/columns was changed, some row/column was skipped).\n   * If that's the case - use the {@link Core#getSourceData} method.).\n   *\n   * Optionally you can provide cell range by defining `row`, `column`, `row2`, `column2` to get only a fragment of table data.\n   *\n   * @memberof Core#\n   * @function getData\n   * @param {number} [row] From visual row index.\n   * @param {number} [column] From visual column index.\n   * @param {number} [row2] To visual row index.\n   * @param {number} [column2] To visual column index.\n   * @returns {Array[]} Array with the data.\n   * @example\n   * ```js\n   * // Get all data (in order how it is rendered in the table).\n   * hot.getData();\n   * // Get data fragment (from top-left 0, 0 to bottom-right 3, 3).\n   * hot.getData(3, 3);\n   * // Get data fragment (from top-left 2, 1 to bottom-right 3, 3).\n   * hot.getData(2, 1, 3, 3);\n   * ```\n   */\n  this.getData = function (row, column, row2, column2) {\n    if (isUndefined(row)) {\n      return datamap.getAll();\n    }\n    return datamap.getRange(instance._createCellCoords(row, column), instance._createCellCoords(row2, column2), datamap.DESTINATION_RENDERER);\n  };\n\n  /**\n   * Returns a string value of the selected range. Each column is separated by tab, each row is separated by a new\n   * line character.\n   *\n   * @memberof Core#\n   * @function getCopyableText\n   * @param {number} startRow From visual row index.\n   * @param {number} startCol From visual column index.\n   * @param {number} endRow To visual row index.\n   * @param {number} endCol To visual column index.\n   * @returns {string}\n   */\n  this.getCopyableText = function (startRow, startCol, endRow, endCol) {\n    return datamap.getCopyableText(instance._createCellCoords(startRow, startCol), instance._createCellCoords(endRow, endCol));\n  };\n\n  /**\n   * Returns the data's copyable value at specified `row` and `column` index.\n   *\n   * @memberof Core#\n   * @function getCopyableData\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {string}\n   */\n  this.getCopyableData = function (row, column) {\n    return datamap.getCopyable(row, datamap.colToProp(column));\n  };\n\n  /**\n   * Returns schema provided by constructor settings. If it doesn't exist then it returns the schema based on the data\n   * structure in the first row.\n   *\n   * @memberof Core#\n   * @function getSchema\n   * @returns {object} Schema object.\n   */\n  this.getSchema = function () {\n    return datamap.getSchema();\n  };\n\n  /**\n   * Use it if you need to change configuration after initialization. The `settings` argument is an object containing the changed\n   * settings, declared the same way as in the initial settings object.\n   *\n   * __Note__, that although the `updateSettings` method doesn't overwrite the previously declared settings, it might reset\n   * the settings made post-initialization. (for example - ignore changes made using the columnResize feature).\n   *\n   * Since 8.0.0 passing `columns` or `data` inside `settings` objects will result in resetting states corresponding to rows and columns\n   * (for example, row/column sequence, column width, row height, frozen columns etc.).\n   *\n   * Since 12.0.0 passing `data` inside `settings` objects no longer results in resetting states corresponding to rows and columns\n   * (for example, row/column sequence, column width, row height, frozen columns etc.).\n   *\n   * @memberof Core#\n   * @function updateSettings\n   * @param {object} settings A settings object (see {@link Options}). Only provide the settings that are changed, not the whole settings object that was used for initialization.\n   * @param {boolean} [init=false] Internally used for in initialization mode.\n   * @example\n   * ```js\n   * hot.updateSettings({\n   *    contextMenu: true,\n   *    colHeaders: true,\n   *    fixedRowsTop: 2\n   * });\n   * ```\n   * @fires Hooks#afterCellMetaReset\n   * @fires Hooks#afterUpdateSettings\n   */\n  this.updateSettings = function (settings) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const dataUpdateFunction = (firstRun ? instance.loadData : instance.updateData).bind(this);\n    let columnsAsFunc = false;\n    let i;\n    let j;\n    if (isDefined(settings.rows)) {\n      throw new Error('The \"rows\" setting is no longer supported. Do you mean startRows, minRows or maxRows?');\n    }\n    if (isDefined(settings.cols)) {\n      throw new Error('The \"cols\" setting is no longer supported. Do you mean startCols, minCols or maxCols?');\n    }\n    if (isDefined(settings.ganttChart)) {\n      throw new Error('Since 8.0.0 the \"ganttChart\" setting is no longer supported.');\n    }\n\n    // eslint-disable-next-line no-restricted-syntax\n    for (i in settings) {\n      if (i === 'data') {\n        // Do nothing. loadData will be triggered later\n      } else if (i === 'language') {\n        setLanguage(settings.language);\n      } else if (i === 'className') {\n        setClassName('className', settings.className);\n      } else if (i === 'tableClassName' && instance.table) {\n        setClassName('tableClassName', settings.tableClassName);\n        instance.view._wt.wtOverlays.syncOverlayTableClassNames();\n      } else if (Hooks.getSingleton().isRegistered(i) || Hooks.getSingleton().isDeprecated(i)) {\n        if (isFunction(settings[i]) || Array.isArray(settings[i])) {\n          settings[i].initialHook = true;\n          instance.addHook(i, settings[i]);\n        }\n      } else if (!init && hasOwnProperty(settings, i)) {\n        // Update settings\n        globalMeta[i] = settings[i];\n      }\n    }\n\n    // Load data or create data map\n    if (settings.data === void 0 && tableMeta.data === void 0) {\n      dataUpdateFunction(null, 'updateSettings'); // data source created just now\n    } else if (settings.data !== void 0) {\n      dataUpdateFunction(settings.data, 'updateSettings'); // data source given as option\n    } else if (settings.columns !== void 0) {\n      datamap.createMap();\n\n      // The `column` property has changed - dataset may be expanded or narrowed down. The `loadData` do the same.\n      instance.initIndexMappers();\n    }\n    const clen = instance.countCols();\n    const columnSetting = tableMeta.columns;\n\n    // Init columns constructors configuration\n    if (columnSetting && isFunction(columnSetting)) {\n      columnsAsFunc = true;\n    }\n\n    // Clear cell meta cache\n    if (settings.cell !== void 0 || settings.cells !== void 0 || settings.columns !== void 0) {\n      metaManager.clearCache();\n    }\n    if (clen > 0) {\n      for (i = 0, j = 0; i < clen; i++) {\n        // Use settings provided by user\n        if (columnSetting) {\n          const column = columnsAsFunc ? columnSetting(i) : columnSetting[j];\n          if (column) {\n            metaManager.updateColumnMeta(j, column);\n          }\n        }\n        j += 1;\n      }\n    }\n    if (isDefined(settings.cell)) {\n      objectEach(settings.cell, cell => {\n        instance.setCellMetaObject(cell.row, cell.col, cell);\n      });\n    }\n    instance.runHooks('afterCellMetaReset');\n    let currentHeight = instance.rootElement.style.height;\n    if (currentHeight !== '') {\n      currentHeight = parseInt(instance.rootElement.style.height, 10);\n    }\n    let height = settings.height;\n    if (isFunction(height)) {\n      height = height();\n    }\n    if (init) {\n      const initialStyle = instance.rootElement.getAttribute('style');\n      if (initialStyle) {\n        instance.rootElement.setAttribute('data-initialstyle', instance.rootElement.getAttribute('style'));\n      }\n    }\n    if (height === null) {\n      const initialStyle = instance.rootElement.getAttribute('data-initialstyle');\n      if (initialStyle && (initialStyle.indexOf('height') > -1 || initialStyle.indexOf('overflow') > -1)) {\n        instance.rootElement.setAttribute('style', initialStyle);\n      } else {\n        instance.rootElement.style.height = '';\n        instance.rootElement.style.overflow = '';\n      }\n    } else if (height !== void 0) {\n      instance.rootElement.style.height = isNaN(height) ? `${height}` : `${height}px`;\n      instance.rootElement.style.overflow = 'hidden';\n    }\n    if (typeof settings.width !== 'undefined') {\n      let width = settings.width;\n      if (isFunction(width)) {\n        width = width();\n      }\n      instance.rootElement.style.width = isNaN(width) ? `${width}` : `${width}px`;\n    }\n    if (!init) {\n      if (instance.view) {\n        instance.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();\n        instance.view._wt.exportSettingsAsClassNames();\n      }\n      instance.runHooks('afterUpdateSettings', settings);\n    }\n    grid.adjustRowsAndCols();\n    if (instance.view && !firstRun) {\n      instance.forceFullRender = true; // used when data was changed\n      editorManager.lockEditor();\n      instance._refreshBorders(null);\n      instance.view._wt.wtOverlays.adjustElementsSize();\n      editorManager.unlockEditor();\n    }\n    if (!init && instance.view && (currentHeight === '' || height === '' || height === void 0) && currentHeight !== height) {\n      instance.view._wt.wtOverlays.updateMainScrollableElements();\n    }\n  };\n\n  /**\n   * Gets the value of the currently focused cell.\n   *\n   * For column headers and row headers, returns `null`.\n   *\n   * @memberof Core#\n   * @function getValue\n   * @returns {*} The value of the focused cell.\n   */\n  this.getValue = function () {\n    const sel = instance.getSelectedLast();\n    if (tableMeta.getValue) {\n      if (isFunction(tableMeta.getValue)) {\n        return tableMeta.getValue.call(instance);\n      } else if (sel) {\n        return instance.getData()[sel[0][0]][tableMeta.getValue];\n      }\n    } else if (sel) {\n      return instance.getDataAtCell(sel[0], sel[1]);\n    }\n  };\n\n  /**\n   * Returns the object settings.\n   *\n   * @memberof Core#\n   * @function getSettings\n   * @returns {TableMeta} Object containing the current table settings.\n   */\n  this.getSettings = function () {\n    return tableMeta;\n  };\n\n  /**\n   * Clears the data from the table (the table settings remain intact).\n   *\n   * @memberof Core#\n   * @function clear\n   */\n  this.clear = function () {\n    this.selectAll();\n    this.emptySelectedCells();\n  };\n\n  /**\n   * The `alter()` method lets you alter the grid's structure\n   * by adding or removing rows and columns at specified positions.\n   *\n   * ::: tip\n   * The `alter()` method works only when your [`data`](@/api/options.md#data)\n   * is an [array of arrays](@/guides/getting-started/binding-to-data.md#array-of-arrays).\n   * :::\n   *\n   * ```js\n   * // above row 10 (by visual index), insert 1 new row\n   * hot.alter('insert_row_above', 10);\n   * ```\n   *\n   *  | Action               | With `index` | Without `index` |\n   *  | -------------------- | ------------ | --------------- |\n   *  | `'insert_row_above'` | Inserts rows above the `index` row. | Inserts rows above the first row. |\n   *  | `'insert_row_below'` | Inserts rows below the `index` row. | Inserts rows below the last row. |\n   *  | `'remove_row'`       | Removes rows, starting from the `index` row. | Removes rows, starting from the last row. |\n   *  | `'insert_col_start'` | Inserts columns before the `index` column. | Inserts columns before the first column. |\n   *  | `'insert_col_end'`   | Inserts columns after the `index` column. | Inserts columns after the last column. |\n   *  | `'remove_col'`       | Removes columns, starting from the `index` column. | Removes columns, starting from the last column. |\n   *\n   * Additional information about `'insert_col_start'` and `'insert_col_end'`:\n   * - Their behavior depends on your [`layoutDirection`](@/api/options.md#layoutdirection).\n   * - If the provided `index` is higher than the actual number of columns, Handsontable doesn't generate\n   * the columns missing in between. Instead, the new columns are inserted next to the last column.\n   *\n   * @memberof Core#\n   * @function alter\n   * @param {string} action Available operations:\n   * <ul>\n   *    <li> `'insert_row_above'` </li>\n   *    <li> `'insert_row_below'` </li>\n   *    <li> `'remove_row'` </li> </li>\n   *    <li> `'insert_col_start'` </li>\n   *    <li> `'insert_col_end'` </li>\n   *    <li> `'remove_col'` </li>\n   * </ul>\n   * @param {number|number[]} [index] A visual index of the row/column before or after which the new row/column will be\n   *                                inserted or removed. Can also be an array of arrays, in format `[[index, amount],...]`.\n   * @param {number} [amount] The amount of rows or columns to be inserted or removed (default: `1`).\n   * @param {string} [source] Source indicator.\n   * @param {boolean} [keepEmptyRows] If set to `true`: prevents removing empty rows.\n   * @example\n   * ```js\n   * // above row 10 (by visual index), insert 1 new row\n   * hot.alter('insert_row_above', 10);\n   *\n   * // below row 10 (by visual index), insert 3 new rows\n   * hot.alter('insert_row_below', 10, 3);\n   *\n   * // in the LTR layout direction: to the left of column 10 (by visual index), insert 3 new columns\n   * // in the RTL layout direction: to the right of column 10 (by visual index), insert 3 new columns\n   * hot.alter('insert_col_start', 10, 3);\n   *\n   * // in the LTR layout direction: to the right of column 10 (by visual index), insert 1 new column\n   * // in the RTL layout direction: to the left of column 10 (by visual index), insert 1 new column\n   * hot.alter('insert_col_end', 10);\n   *\n   * // remove 2 rows, starting from row 10 (by visual index)\n   * hot.alter('remove_row', 10, 2);\n   *\n   * // remove 3 rows, starting from row 1 (by visual index)\n   * // remove 2 rows, starting from row 5 (by visual index)\n   * hot.alter('remove_row', [[1, 3], [5, 2]]);\n   * ```\n   */\n  this.alter = function (action, index, amount, source, keepEmptyRows) {\n    grid.alter(action, index, amount, source, keepEmptyRows);\n  };\n\n  /**\n   * Returns a TD element for the given `row` and `column` arguments, if it is rendered on screen.\n   * Returns `null` if the TD is not rendered on screen (probably because that part of the table is not visible).\n   *\n   * @memberof Core#\n   * @function getCell\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {boolean} [topmost=false] If set to `true`, it returns the TD element from the topmost overlay. For example,\n   * if the wanted cell is in the range of fixed rows, it will return a TD element from the `top` overlay.\n   * @returns {HTMLTableCellElement|null} The cell's TD element.\n   */\n  this.getCell = function (row, column) {\n    let topmost = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    let renderableColumnIndex = column; // Handling also column headers.\n    let renderableRowIndex = row; // Handling also row headers.\n\n    if (column >= 0) {\n      if (this.columnIndexMapper.isHidden(this.toPhysicalColumn(column))) {\n        return null;\n      }\n      renderableColumnIndex = this.columnIndexMapper.getRenderableFromVisualIndex(column);\n    }\n    if (row >= 0) {\n      if (this.rowIndexMapper.isHidden(this.toPhysicalRow(row))) {\n        return null;\n      }\n      renderableRowIndex = this.rowIndexMapper.getRenderableFromVisualIndex(row);\n    }\n    if (renderableRowIndex === null || renderableColumnIndex === null) {\n      return null;\n    }\n    return instance.view.getCellAtCoords(instance._createCellCoords(renderableRowIndex, renderableColumnIndex), topmost);\n  };\n\n  /**\n   * Returns the coordinates of the cell, provided as a HTML table cell element.\n   *\n   * @memberof Core#\n   * @function getCoords\n   * @param {HTMLTableCellElement} element The HTML Element representing the cell.\n   * @returns {CellCoords|null} Visual coordinates object.\n   * @example\n   * ```js\n   * hot.getCoords(hot.getCell(1, 1));\n   * // it returns CellCoords object instance with props row: 1 and col: 1.\n   * ```\n   */\n  this.getCoords = function (element) {\n    const renderableCoords = this.view._wt.wtTable.getCoords(element);\n    if (renderableCoords === null) {\n      return null;\n    }\n    const {\n      row: renderableRow,\n      col: renderableColumn\n    } = renderableCoords;\n    let visualRow = renderableRow;\n    let visualColumn = renderableColumn;\n    if (renderableRow >= 0) {\n      visualRow = this.rowIndexMapper.getVisualFromRenderableIndex(renderableRow);\n    }\n    if (renderableColumn >= 0) {\n      visualColumn = this.columnIndexMapper.getVisualFromRenderableIndex(renderableColumn);\n    }\n    return instance._createCellCoords(visualRow, visualColumn);\n  };\n\n  /**\n   * Returns the property name that corresponds with the given column index.\n   * If the data source is an array of arrays, it returns the columns index.\n   *\n   * @memberof Core#\n   * @function colToProp\n   * @param {number} column Visual column index.\n   * @returns {string|number} Column property or physical column index.\n   */\n  this.colToProp = function (column) {\n    return datamap.colToProp(column);\n  };\n\n  /**\n   * Returns column index that corresponds with the given property.\n   *\n   * @memberof Core#\n   * @function propToCol\n   * @param {string|number} prop Property name or physical column index.\n   * @returns {number} Visual column index.\n   */\n  this.propToCol = function (prop) {\n    return datamap.propToCol(prop);\n  };\n\n  /**\n   * Translate physical row index into visual.\n   *\n   * This method is useful when you want to retrieve visual row index which can be reordered, moved or trimmed\n   * based on a physical index.\n   *\n   * @memberof Core#\n   * @function toVisualRow\n   * @param {number} row Physical row index.\n   * @returns {number} Returns visual row index.\n   */\n  this.toVisualRow = row => this.rowIndexMapper.getVisualFromPhysicalIndex(row);\n\n  /**\n   * Translate physical column index into visual.\n   *\n   * This method is useful when you want to retrieve visual column index which can be reordered, moved or trimmed\n   * based on a physical index.\n   *\n   * @memberof Core#\n   * @function toVisualColumn\n   * @param {number} column Physical column index.\n   * @returns {number} Returns visual column index.\n   */\n  this.toVisualColumn = column => this.columnIndexMapper.getVisualFromPhysicalIndex(column);\n\n  /**\n   * Translate visual row index into physical.\n   *\n   * This method is useful when you want to retrieve physical row index based on a visual index which can be\n   * reordered, moved or trimmed.\n   *\n   * @memberof Core#\n   * @function toPhysicalRow\n   * @param {number} row Visual row index.\n   * @returns {number} Returns physical row index.\n   */\n  this.toPhysicalRow = row => this.rowIndexMapper.getPhysicalFromVisualIndex(row);\n\n  /**\n   * Translate visual column index into physical.\n   *\n   * This method is useful when you want to retrieve physical column index based on a visual index which can be\n   * reordered, moved or trimmed.\n   *\n   * @memberof Core#\n   * @function toPhysicalColumn\n   * @param {number} column Visual column index.\n   * @returns {number} Returns physical column index.\n   */\n  this.toPhysicalColumn = column => this.columnIndexMapper.getPhysicalFromVisualIndex(column);\n\n  /**\n   * @description\n   * Returns the cell value at `row`, `column`.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtCell\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {*} Data at cell.\n   */\n  this.getDataAtCell = function (row, column) {\n    return datamap.get(row, datamap.colToProp(column));\n  };\n\n  /**\n   * Returns value at visual `row` and `prop` indexes.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtRowProp\n   * @param {number} row Visual row index.\n   * @param {string} prop Property name.\n   * @returns {*} Cell value.\n   */\n  this.getDataAtRowProp = function (row, prop) {\n    return datamap.get(row, prop);\n  };\n\n  /**\n   * @description\n   * Returns array of column values from the data source.\n   *\n   * __Note__: If columns were reordered or sorted, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtCol\n   * @param {number} column Visual column index.\n   * @returns {Array} Array of cell values.\n   */\n  this.getDataAtCol = function (column) {\n    const columnData = [];\n    const dataByRows = datamap.getRange(instance._createCellCoords(0, column), instance._createCellCoords(tableMeta.data.length - 1, column), datamap.DESTINATION_RENDERER);\n    for (let i = 0; i < dataByRows.length; i += 1) {\n      for (let j = 0; j < dataByRows[i].length; j += 1) {\n        columnData.push(dataByRows[i][j]);\n      }\n    }\n    return columnData;\n  };\n\n  /**\n   * Given the object property name (e.g. `'first.name'` or `'0'`), returns an array of column's values from the table data.\n   * You can also provide a column index as the first argument.\n   *\n   * @memberof Core#\n   * @function getDataAtProp\n   * @param {string|number} prop Property name or physical column index.\n   * @returns {Array} Array of cell values.\n   */\n  // TODO: Getting data from `datamap` should work on visual indexes.\n  this.getDataAtProp = function (prop) {\n    const columnData = [];\n    const dataByRows = datamap.getRange(instance._createCellCoords(0, datamap.propToCol(prop)), instance._createCellCoords(tableMeta.data.length - 1, datamap.propToCol(prop)), datamap.DESTINATION_RENDERER);\n    for (let i = 0; i < dataByRows.length; i += 1) {\n      for (let j = 0; j < dataByRows[i].length; j += 1) {\n        columnData.push(dataByRows[i][j]);\n      }\n    }\n    return columnData;\n  };\n\n  /**\n   * Returns a clone of the source data object.\n   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a\n   * fragment of the table data.\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * __Note__: This method may return incorrect values for cells that contain\n   * [formulas](@/guides/formulas/formula-calculation.md). This is because `getSourceData()`\n   * operates on source data ([physical indexes](@/api/indexMapper.md)),\n   * whereas formulas operate on visual data (visual indexes).\n   *\n   * @memberof Core#\n   * @function getSourceData\n   * @param {number} [row] From physical row index.\n   * @param {number} [column] From physical column index (or visual index, if data type is an array of objects).\n   * @param {number} [row2] To physical row index.\n   * @param {number} [column2] To physical column index (or visual index, if data type is an array of objects).\n   * @returns {Array[]|object[]} The table data.\n   */\n  this.getSourceData = function (row, column, row2, column2) {\n    let data;\n    if (row === void 0) {\n      data = dataSource.getData();\n    } else {\n      data = dataSource.getByRange(instance._createCellCoords(row, column), instance._createCellCoords(row2, column2));\n    }\n    return data;\n  };\n\n  /**\n   * Returns the source data object as an arrays of arrays format even when source data was provided in another format.\n   * Optionally you can provide a cell range by using the `row`, `column`, `row2`, `column2` arguments, to get only a\n   * fragment of the table data.\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceDataArray\n   * @param {number} [row] From physical row index.\n   * @param {number} [column] From physical column index (or visual index, if data type is an array of objects).\n   * @param {number} [row2] To physical row index.\n   * @param {number} [column2] To physical column index (or visual index, if data type is an array of objects).\n   * @returns {Array} An array of arrays.\n   */\n  this.getSourceDataArray = function (row, column, row2, column2) {\n    let data;\n    if (row === void 0) {\n      data = dataSource.getData(true);\n    } else {\n      data = dataSource.getByRange(instance._createCellCoords(row, column), instance._createCellCoords(row2, column2), true);\n    }\n    return data;\n  };\n\n  /**\n   * Returns an array of column values from the data source.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtCol\n   * @param {number} column Visual column index.\n   * @returns {Array} Array of the column's cell values.\n   */\n  // TODO: Getting data from `sourceData` should work always on physical indexes.\n  this.getSourceDataAtCol = function (column) {\n    return dataSource.getAtColumn(column);\n  };\n\n  /* eslint-disable jsdoc/require-param */\n  /**\n   * Set the provided value in the source data set at the provided coordinates.\n   *\n   * @memberof Core#\n   * @function setSourceDataAtCell\n   * @param {number|Array} row Physical row index or array of changes in format `[[row, prop, value], ...]`.\n   * @param {number|string} column Physical column index / prop name.\n   * @param {*} value The value to be set at the provided coordinates.\n   * @param {string} [source] Source of the change as a string.\n   */\n  /* eslint-enable jsdoc/require-param */\n  this.setSourceDataAtCell = function (row, column, value, source) {\n    const input = setDataInputToArray(row, column, value);\n    const isThereAnySetSourceListener = this.hasHook('afterSetSourceDataAtCell');\n    const changesForHook = [];\n    if (isThereAnySetSourceListener) {\n      arrayEach(input, _ref8 => {\n        let [changeRow, changeProp, changeValue] = _ref8;\n        changesForHook.push([changeRow, changeProp, dataSource.getAtCell(changeRow, changeProp),\n        // The previous value.\n        changeValue]);\n      });\n    }\n    arrayEach(input, _ref9 => {\n      let [changeRow, changeProp, changeValue] = _ref9;\n      dataSource.setAtCell(changeRow, changeProp, changeValue);\n    });\n    if (isThereAnySetSourceListener) {\n      this.runHooks('afterSetSourceDataAtCell', changesForHook, source);\n    }\n    this.render();\n    const activeEditor = instance.getActiveEditor();\n    if (activeEditor && isDefined(activeEditor.refreshValue)) {\n      activeEditor.refreshValue();\n    }\n  };\n\n  /**\n   * Returns a single row of the data (array or object, depending on what data format you use).\n   *\n   * __Note__: This method does not participate in data transformation. If the visual data of the table is reordered,\n   * sorted or trimmed only physical indexes are correct.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtRow\n   * @param {number} row Physical row index.\n   * @returns {Array|object} Single row of data.\n   */\n  this.getSourceDataAtRow = function (row) {\n    return dataSource.getAtRow(row);\n  };\n\n  /**\n   * Returns a single value from the data source.\n   *\n   * @memberof Core#\n   * @function getSourceDataAtCell\n   * @param {number} row Physical row index.\n   * @param {number} column Visual column index.\n   * @returns {*} Cell data.\n   */\n  // TODO: Getting data from `sourceData` should work always on physical indexes.\n  this.getSourceDataAtCell = function (row, column) {\n    return dataSource.getAtCell(row, column);\n  };\n\n  /**\n   * @description\n   * Returns a single row of the data.\n   *\n   * __Note__: If rows were reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataAtRow\n   * @param {number} row Visual row index.\n   * @returns {Array} Array of row's cell data.\n   */\n  this.getDataAtRow = function (row) {\n    const data = datamap.getRange(instance._createCellCoords(row, 0), instance._createCellCoords(row, this.countCols() - 1), datamap.DESTINATION_RENDERER);\n    return data[0] || [];\n  };\n\n  /**\n   * @description\n   * Returns a data type defined in the Handsontable settings under the `type` key ({@link Options#type}).\n   * If there are cells with different types in the selected range, it returns `'mixed'`.\n   *\n   * __Note__: If data is reordered, sorted or trimmed, the currently visible order will be used.\n   *\n   * @memberof Core#\n   * @function getDataType\n   * @param {number} rowFrom From visual row index.\n   * @param {number} columnFrom From visual column index.\n   * @param {number} rowTo To visual row index.\n   * @param {number} columnTo To visual column index.\n   * @returns {string} Cell type (e.q: `'mixed'`, `'text'`, `'numeric'`, `'autocomplete'`).\n   */\n  this.getDataType = function (rowFrom, columnFrom, rowTo, columnTo) {\n    const coords = rowFrom === void 0 ? [0, 0, this.countRows(), this.countCols()] : [rowFrom, columnFrom, rowTo, columnTo];\n    const [rowStart, columnStart] = coords;\n    let [,, rowEnd, columnEnd] = coords;\n    let previousType = null;\n    let currentType = null;\n    if (rowEnd === void 0) {\n      rowEnd = rowStart;\n    }\n    if (columnEnd === void 0) {\n      columnEnd = columnStart;\n    }\n    let type = 'mixed';\n    rangeEach(Math.max(Math.min(rowStart, rowEnd), 0), Math.max(rowStart, rowEnd), row => {\n      let isTypeEqual = true;\n      rangeEach(Math.max(Math.min(columnStart, columnEnd), 0), Math.max(columnStart, columnEnd), column => {\n        const cellType = this.getCellMeta(row, column);\n        currentType = cellType.type;\n        if (previousType) {\n          isTypeEqual = previousType === currentType;\n        } else {\n          previousType = currentType;\n        }\n        return isTypeEqual;\n      });\n      type = isTypeEqual ? currentType : 'mixed';\n      return isTypeEqual;\n    });\n    return type;\n  };\n\n  /**\n   * Remove a property defined by the `key` argument from the cell meta object for the provided `row` and `column` coordinates.\n   *\n   * @memberof Core#\n   * @function removeCellMeta\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} key Property name.\n   * @fires Hooks#beforeRemoveCellMeta\n   * @fires Hooks#afterRemoveCellMeta\n   */\n  this.removeCellMeta = function (row, column, key) {\n    const [physicalRow, physicalColumn] = [this.toPhysicalRow(row), this.toPhysicalColumn(column)];\n    let cachedValue = metaManager.getCellMetaKeyValue(physicalRow, physicalColumn, key);\n    const hookResult = instance.runHooks('beforeRemoveCellMeta', row, column, key, cachedValue);\n    if (hookResult !== false) {\n      metaManager.removeCellMeta(physicalRow, physicalColumn, key);\n      instance.runHooks('afterRemoveCellMeta', row, column, key, cachedValue);\n    }\n    cachedValue = null;\n  };\n\n  /**\n   * Removes or adds one or more rows of the cell meta objects to the cell meta collections.\n   *\n   * @since 0.30.0\n   * @memberof Core#\n   * @function spliceCellsMeta\n   * @param {number} visualIndex A visual index that specifies at what position to add/remove items.\n   * @param {number} [deleteAmount=0] The number of items to be removed. If set to 0, no cell meta objects will be removed.\n   * @param {...object} [cellMetaRows] The new cell meta row objects to be added to the cell meta collection.\n   */\n  this.spliceCellsMeta = function (visualIndex) {\n    let deleteAmount = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    for (var _len7 = arguments.length, cellMetaRows = new Array(_len7 > 2 ? _len7 - 2 : 0), _key7 = 2; _key7 < _len7; _key7++) {\n      cellMetaRows[_key7 - 2] = arguments[_key7];\n    }\n    if (cellMetaRows.length > 0 && !Array.isArray(cellMetaRows[0])) {\n      throw new Error('The 3rd argument (cellMetaRows) has to be passed as an array of cell meta objects array.');\n    }\n    if (deleteAmount > 0) {\n      metaManager.removeRow(this.toPhysicalRow(visualIndex), deleteAmount);\n    }\n    if (cellMetaRows.length > 0) {\n      arrayEach(cellMetaRows.reverse(), cellMetaRow => {\n        metaManager.createRow(this.toPhysicalRow(visualIndex));\n        arrayEach(cellMetaRow, (cellMeta, columnIndex) => this.setCellMetaObject(visualIndex, columnIndex, cellMeta));\n      });\n    }\n    instance.render();\n  };\n\n  /**\n   * Set cell meta data object defined by `prop` to the corresponding params `row` and `column`.\n   *\n   * @memberof Core#\n   * @function setCellMetaObject\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {object} prop Meta object.\n   */\n  this.setCellMetaObject = function (row, column, prop) {\n    if (typeof prop === 'object') {\n      objectEach(prop, (value, key) => {\n        this.setCellMeta(row, column, key, value);\n      });\n    }\n  };\n\n  /**\n   * Sets a property defined by the `key` property to the meta object of a cell corresponding to params `row` and `column`.\n   *\n   * @memberof Core#\n   * @function setCellMeta\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} key Property name.\n   * @param {string} value Property value.\n   * @fires Hooks#beforeSetCellMeta\n   * @fires Hooks#afterSetCellMeta\n   */\n  this.setCellMeta = function (row, column, key, value) {\n    const allowSetCellMeta = instance.runHooks('beforeSetCellMeta', row, column, key, value);\n    if (allowSetCellMeta === false) {\n      return;\n    }\n    let physicalRow = row;\n    let physicalColumn = column;\n    if (row < this.countRows()) {\n      physicalRow = this.toPhysicalRow(row);\n    }\n    if (column < this.countCols()) {\n      physicalColumn = this.toPhysicalColumn(column);\n    }\n    metaManager.setCellMeta(physicalRow, physicalColumn, key, value);\n    instance.runHooks('afterSetCellMeta', row, column, key, value);\n  };\n\n  /**\n   * Get all the cells meta settings at least once generated in the table (in order of cell initialization).\n   *\n   * @memberof Core#\n   * @function getCellsMeta\n   * @returns {Array} Returns an array of ColumnSettings object instances.\n   */\n  this.getCellsMeta = function () {\n    return metaManager.getCellsMeta();\n  };\n\n  /**\n   * Returns the cell properties object for the given `row` and `column` coordinates.\n   *\n   * @memberof Core#\n   * @function getCellMeta\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {object} The cell properties object.\n   * @fires Hooks#beforeGetCellMeta\n   * @fires Hooks#afterGetCellMeta\n   */\n  this.getCellMeta = function (row, column) {\n    let physicalRow = this.toPhysicalRow(row);\n    let physicalColumn = this.toPhysicalColumn(column);\n    if (physicalRow === null) {\n      physicalRow = row;\n    }\n    if (physicalColumn === null) {\n      physicalColumn = column;\n    }\n    return metaManager.getCellMeta(physicalRow, physicalColumn, {\n      visualRow: row,\n      visualColumn: column\n    });\n  };\n\n  /**\n   * Returns an array of cell meta objects for specified physical row index.\n   *\n   * @memberof Core#\n   * @function getCellMetaAtRow\n   * @param {number} row Physical row index.\n   * @returns {Array}\n   */\n  this.getCellMetaAtRow = function (row) {\n    return metaManager.getCellsMetaAtRow(row);\n  };\n\n  /**\n   * Checks if your [data format](@/guides/getting-started/binding-to-data.md#compatible-data-types)\n   * and [configuration options](@/guides/getting-started/configuration-options.md)\n   * allow for changing the number of columns.\n   *\n   * Returns `false` when your data is an array of objects,\n   * or when you use the [`columns`](@/api/options.md#columns) option.\n   * Otherwise, returns `true`.\n   *\n   * @memberof Core#\n   * @function isColumnModificationAllowed\n   * @returns {boolean}\n   */\n  this.isColumnModificationAllowed = function () {\n    return !(instance.dataType === 'object' || tableMeta.columns);\n  };\n\n  /**\n   * Returns the cell renderer function by given `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function getCellRenderer\n   * @param {number|object} rowOrMeta Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {number} column Visual column index.\n   * @returns {Function} Returns the renderer function.\n   * @example\n   * ```js\n   * // Get cell renderer using `row` and `column` coordinates.\n   * hot.getCellRenderer(1, 1);\n   * // Get cell renderer using cell meta object.\n   * hot.getCellRenderer(hot.getCellMeta(1, 1));\n   * ```\n   */\n  this.getCellRenderer = function (rowOrMeta, column) {\n    const cellRenderer = typeof rowOrMeta === 'number' ? instance.getCellMeta(rowOrMeta, column).renderer : rowOrMeta.renderer;\n    if (typeof cellRenderer === 'string') {\n      return getRenderer(cellRenderer);\n    }\n    return isUndefined(cellRenderer) ? getRenderer('text') : cellRenderer;\n  };\n\n  /**\n   * Returns the cell editor class by the provided `row` and `column` arguments.\n   *\n   * @memberof Core#\n   * @function getCellEditor\n   * @param {number} rowOrMeta Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {number} column Visual column index.\n   * @returns {Function|boolean} Returns the editor class or `false` is cell editor is disabled.\n   * @example\n   * ```js\n   * // Get cell editor class using `row` and `column` coordinates.\n   * hot.getCellEditor(1, 1);\n   * // Get cell editor class using cell meta object.\n   * hot.getCellEditor(hot.getCellMeta(1, 1));\n   * ```\n   */\n  this.getCellEditor = function (rowOrMeta, column) {\n    const cellEditor = typeof rowOrMeta === 'number' ? instance.getCellMeta(rowOrMeta, column).editor : rowOrMeta.editor;\n    if (typeof cellEditor === 'string') {\n      return getEditor(cellEditor);\n    }\n    return isUndefined(cellEditor) ? getEditor('text') : cellEditor;\n  };\n\n  /**\n   * Returns the cell validator by `row` and `column`.\n   *\n   * @memberof Core#\n   * @function getCellValidator\n   * @param {number|object} rowOrMeta Visual row index or cell meta object (see {@link Core#getCellMeta}).\n   * @param {number} column Visual column index.\n   * @returns {Function|RegExp|undefined} The validator function.\n   * @example\n   * ```js\n   * // Get cell validator using `row` and `column` coordinates.\n   * hot.getCellValidator(1, 1);\n   * // Get cell validator using cell meta object.\n   * hot.getCellValidator(hot.getCellMeta(1, 1));\n   * ```\n   */\n  this.getCellValidator = function (rowOrMeta, column) {\n    const cellValidator = typeof rowOrMeta === 'number' ? instance.getCellMeta(rowOrMeta, column).validator : rowOrMeta.validator;\n    if (typeof cellValidator === 'string') {\n      return getValidator(cellValidator);\n    }\n    return cellValidator;\n  };\n\n  /**\n   * Validates every cell in the data set,\n   * using a [validator function](@/guides/cell-functions/cell-validator.md) configured for each cell.\n   *\n   * Doesn't validate cells that are currently [trimmed](@/guides/rows/row-trimming.md),\n   * [hidden](@/guides/rows/row-hiding.md), or [filtered](@/guides/columns/column-filter.md),\n   * as such cells are not included in the data set until you bring them back again.\n   *\n   * After the validation, the `callback` function is fired, with the `valid` argument set to:\n   * - `true` for valid cells\n   * - `false` for invalid cells\n   *\n   * @memberof Core#\n   * @function validateCells\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateCells((valid) => {\n   *   if (valid) {\n   *     // ... code for validated cells\n   *   }\n   * })\n   * ```\n   */\n  this.validateCells = function (callback) {\n    this._validateCells(callback);\n  };\n\n  /**\n   * Validates rows using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   *  would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateRows\n   * @param {Array} [rows] Array of validation target visual row indexes.\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateRows([3, 4, 5], (valid) => {\n   *   if (valid) {\n   *     // ... code for validated rows\n   *   }\n   * })\n   * ```\n   */\n  this.validateRows = function (rows, callback) {\n    if (!Array.isArray(rows)) {\n      throw new Error('validateRows parameter `rows` must be an array');\n    }\n    this._validateCells(callback, rows);\n  };\n\n  /**\n   * Validates columns using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it\n   *  would equal `true`.\n   *\n   * @memberof Core#\n   * @function validateColumns\n   * @param {Array} [columns] Array of validation target visual columns indexes.\n   * @param {Function} [callback] The callback function.\n   * @example\n   * ```js\n   * hot.validateColumns([3, 4, 5], (valid) => {\n   *   if (valid) {\n   *     // ... code for validated columns\n   *   }\n   * })\n   * ```\n   */\n  this.validateColumns = function (columns, callback) {\n    if (!Array.isArray(columns)) {\n      throw new Error('validateColumns parameter `columns` must be an array');\n    }\n    this._validateCells(callback, undefined, columns);\n  };\n\n  /**\n   * Validates all cells using their validator functions and calls callback when finished.\n   *\n   * If one of the cells is invalid, the callback will be fired with `'valid'` arguments as `false` - otherwise it would equal `true`.\n   *\n   * Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _validateCells\n   * @param {Function} [callback] The callback function.\n   * @param {Array} [rows] An array of validation target visual row indexes.\n   * @param {Array} [columns] An array of validation target visual column indexes.\n   */\n  this._validateCells = function (callback, rows, columns) {\n    const waitingForValidator = new ValidatorsQueue();\n    if (callback) {\n      waitingForValidator.onQueueEmpty = callback;\n    }\n    let i = instance.countRows() - 1;\n    while (i >= 0) {\n      if (rows !== undefined && rows.indexOf(i) === -1) {\n        i -= 1;\n        continue;\n      }\n      let j = instance.countCols() - 1;\n      while (j >= 0) {\n        if (columns !== undefined && columns.indexOf(j) === -1) {\n          j -= 1;\n          continue;\n        }\n        waitingForValidator.addValidatorToQueue();\n        instance.validateCell(instance.getDataAtCell(i, j), instance.getCellMeta(i, j), result => {\n          if (typeof result !== 'boolean') {\n            throw new Error('Validation error: result is not boolean');\n          }\n          if (result === false) {\n            waitingForValidator.valid = false;\n          }\n          waitingForValidator.removeValidatorFormQueue();\n        }, 'validateCells');\n        j -= 1;\n      }\n      i -= 1;\n    }\n    waitingForValidator.checkIfQueueIsEmpty();\n  };\n\n  /**\n   * Returns an array of row headers' values (if they are enabled). If param `row` was given, it returns the header of the given row as a string.\n   *\n   * @memberof Core#\n   * @function getRowHeader\n   * @param {number} [row] Visual row index.\n   * @fires Hooks#modifyRowHeader\n   * @returns {Array|string|number} Array of header values / single header value.\n   */\n  this.getRowHeader = function (row) {\n    let rowHeader = tableMeta.rowHeaders;\n    let physicalRow = row;\n    if (physicalRow !== void 0) {\n      physicalRow = instance.runHooks('modifyRowHeader', physicalRow);\n    }\n    if (physicalRow === void 0) {\n      rowHeader = [];\n      rangeEach(instance.countRows() - 1, i => {\n        rowHeader.push(instance.getRowHeader(i));\n      });\n    } else if (Array.isArray(rowHeader) && rowHeader[physicalRow] !== void 0) {\n      rowHeader = rowHeader[physicalRow];\n    } else if (isFunction(rowHeader)) {\n      rowHeader = rowHeader(physicalRow);\n    } else if (rowHeader && typeof rowHeader !== 'string' && typeof rowHeader !== 'number') {\n      rowHeader = physicalRow + 1;\n    }\n    return rowHeader;\n  };\n\n  /**\n   * Returns information about if this table is configured to display row headers.\n   *\n   * @memberof Core#\n   * @function hasRowHeaders\n   * @returns {boolean} `true` if the instance has the row headers enabled, `false` otherwise.\n   */\n  this.hasRowHeaders = function () {\n    return !!tableMeta.rowHeaders;\n  };\n\n  /**\n   * Returns information about if this table is configured to display column headers.\n   *\n   * @memberof Core#\n   * @function hasColHeaders\n   * @returns {boolean} `true` if the instance has the column headers enabled, `false` otherwise.\n   */\n  this.hasColHeaders = function () {\n    if (tableMeta.colHeaders !== void 0 && tableMeta.colHeaders !== null) {\n      // Polymer has empty value = null\n      return !!tableMeta.colHeaders;\n    }\n    for (let i = 0, ilen = instance.countCols(); i < ilen; i++) {\n      if (instance.getColHeader(i)) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  /**\n   * Gets the values of column headers (if column headers are [enabled](@/api/options.md#colheaders)).\n   *\n   * To get an array with the values of all\n   * [bottom-most](@/guides/cell-features/clipboard.md#copy-with-headers) column headers,\n   * call `getColHeader()` with no arguments.\n   *\n   * To get the value of the bottom-most header of a specific column, use the `column` parameter.\n   *\n   * To get the value of a [specific-level](@/guides/columns/column-groups.md) header\n   * of a specific column, use the `column` and `headerLevel` parameters.\n   *\n   * Read more:\n   * - [Guides: Column groups](@/guides/columns/column-groups.md)\n   * - [Options: `colHeaders`](@/api/options.md#colheaders)\n   * - [Guides: Copy with headers](@/guides/cell-features/clipboard.md#copy-with-headers)\n   *\n   * ```js\n   * // get the contents of all bottom-most column headers\n   * hot.getColHeader();\n   *\n   * // get the contents of the bottom-most header of a specific column\n   * hot.getColHeader(5);\n   *\n   * // get the contents of a specific column header at a specific level\n   * hot.getColHeader(5, -2);\n   * ```\n   *\n   * @memberof Core#\n   * @function getColHeader\n   * @param {number} [column] A visual column index.\n   * @param {number} [headerLevel=-1] (Since 12.3.0) Header level index. Accepts positive (0 to n)\n   *                                  and negative (-1 to -n) values. For positive values, 0 points to the\n   *                                  topmost header. For negative values, -1 points to the bottom-most\n   *                                  header (the header closest to the cells).\n   * @fires Hooks#modifyColHeader\n   * @fires Hooks#modifyColumnHeaderValue\n   * @returns {Array|string|number} Column header values.\n   */\n  this.getColHeader = function (column) {\n    let headerLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n    const columnIndex = instance.runHooks('modifyColHeader', column);\n    if (columnIndex === void 0) {\n      const out = [];\n      const ilen = instance.countCols();\n      for (let i = 0; i < ilen; i++) {\n        out.push(instance.getColHeader(i));\n      }\n      return out;\n    }\n    let result = tableMeta.colHeaders;\n    const translateVisualIndexToColumns = function (visualColumnIndex) {\n      const arr = [];\n      const columnsLen = instance.countCols();\n      let index = 0;\n      for (; index < columnsLen; index++) {\n        if (isFunction(tableMeta.columns) && tableMeta.columns(index)) {\n          arr.push(index);\n        }\n      }\n      return arr[visualColumnIndex];\n    };\n    const physicalColumn = instance.toPhysicalColumn(columnIndex);\n    const prop = translateVisualIndexToColumns(physicalColumn);\n    if (tableMeta.colHeaders === false) {\n      result = null;\n    } else if (tableMeta.columns && isFunction(tableMeta.columns) && tableMeta.columns(prop) && tableMeta.columns(prop).title) {\n      result = tableMeta.columns(prop).title;\n    } else if (tableMeta.columns && tableMeta.columns[physicalColumn] && tableMeta.columns[physicalColumn].title) {\n      result = tableMeta.columns[physicalColumn].title;\n    } else if (Array.isArray(tableMeta.colHeaders) && tableMeta.colHeaders[physicalColumn] !== void 0) {\n      result = tableMeta.colHeaders[physicalColumn];\n    } else if (isFunction(tableMeta.colHeaders)) {\n      result = tableMeta.colHeaders(physicalColumn);\n    } else if (tableMeta.colHeaders && typeof tableMeta.colHeaders !== 'string' && typeof tableMeta.colHeaders !== 'number') {\n      result = spreadsheetColumnLabel(columnIndex); // see #1458\n    }\n\n    result = instance.runHooks('modifyColumnHeaderValue', result, column, headerLevel);\n    return result;\n  };\n\n  /**\n   * Return column width from settings (no guessing). Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _getColWidthFromSettings\n   * @param {number} col Visual col index.\n   * @returns {number}\n   */\n  this._getColWidthFromSettings = function (col) {\n    let width;\n\n    // We currently don't support cell meta objects for headers (negative values)\n    if (col >= 0) {\n      const cellProperties = instance.getCellMeta(0, col);\n      width = cellProperties.width;\n    }\n    if (width === void 0 || width === tableMeta.width) {\n      width = tableMeta.colWidths;\n    }\n    if (width !== void 0 && width !== null) {\n      switch (typeof width) {\n        case 'object':\n          // array\n          width = width[col];\n          break;\n        case 'function':\n          width = width(col);\n          break;\n        default:\n          break;\n      }\n      if (typeof width === 'string') {\n        width = parseInt(width, 10);\n      }\n    }\n    return width;\n  };\n\n  /**\n   * Returns the width of the requested column.\n   *\n   * @memberof Core#\n   * @function getColWidth\n   * @param {number} column Visual column index.\n   * @returns {number} Column width.\n   * @fires Hooks#modifyColWidth\n   */\n  this.getColWidth = function (column) {\n    let width = instance._getColWidthFromSettings(column);\n    width = instance.runHooks('modifyColWidth', width, column);\n    if (width === void 0) {\n      width = ViewportColumnsCalculator.DEFAULT_WIDTH;\n    }\n    return width;\n  };\n\n  /**\n   * Return row height from settings (no guessing). Private use intended.\n   *\n   * @private\n   * @memberof Core#\n   * @function _getRowHeightFromSettings\n   * @param {number} row Visual row index.\n   * @returns {number}\n   */\n  this._getRowHeightFromSettings = function (row) {\n    // let cellProperties = instance.getCellMeta(row, 0);\n    // let height = cellProperties.height;\n    //\n    // if (height === void 0 || height === tableMeta.height) {\n    //  height = cellProperties.rowHeights;\n    // }\n    let height = tableMeta.rowHeights;\n    if (height !== void 0 && height !== null) {\n      switch (typeof height) {\n        case 'object':\n          // array\n          height = height[row];\n          break;\n        case 'function':\n          height = height(row);\n          break;\n        default:\n          break;\n      }\n      if (typeof height === 'string') {\n        height = parseInt(height, 10);\n      }\n    }\n    return height;\n  };\n\n  /**\n   * Returns a row's height, as recognized by Handsontable.\n   *\n   * Depending on your configuration, the method returns (in order of priority):\n   *   1. The row height set by the [`ManualRowResize`](@/api/manualRowResize.md) plugin\n   *     (if the plugin is enabled).\n   *   2. The row height set by the [`rowHeights`](@/api/options.md#rowheights) configuration option\n   *     (if the option is set).\n   *   3. The row height as measured in the DOM by the [`AutoRowSize`](@/api/autoRowSize.md) plugin\n   *     (if the plugin is enabled).\n   *   4. `undefined`, if neither [`ManualRowResize`](@/api/manualRowResize.md),\n   *     nor [`rowHeights`](@/api/options.md#rowheights),\n   *     nor [`AutoRowSize`](@/api/autoRowSize.md) is used.\n   *\n   * The height returned includes 1 px of the row's bottom border.\n   *\n   * Mind that this method is different from the\n   * [`getRowHeight()`](@/api/autoRowSize.md#getrowheight) method\n   * of the [`AutoRowSize`](@/api/autoRowSize.md) plugin.\n   *\n   * @memberof Core#\n   * @function getRowHeight\n   * @param {number} row A visual row index.\n   * @returns {number|undefined} The height of the specified row, in pixels.\n   * @fires Hooks#modifyRowHeight\n   */\n  this.getRowHeight = function (row) {\n    let height = instance._getRowHeightFromSettings(row);\n    height = instance.runHooks('modifyRowHeight', height, row);\n    return height;\n  };\n\n  /**\n   * Returns the total number of rows in the data source.\n   *\n   * @memberof Core#\n   * @function countSourceRows\n   * @returns {number} Total number of rows.\n   */\n  this.countSourceRows = function () {\n    return dataSource.countRows();\n  };\n\n  /**\n   * Returns the total number of columns in the data source.\n   *\n   * @memberof Core#\n   * @function countSourceCols\n   * @returns {number} Total number of columns.\n   */\n  this.countSourceCols = function () {\n    return dataSource.countFirstRowKeys();\n  };\n\n  /**\n   * Returns the total number of visual rows in the table.\n   *\n   * @memberof Core#\n   * @function countRows\n   * @returns {number} Total number of rows.\n   */\n  this.countRows = function () {\n    return datamap.getLength();\n  };\n\n  /**\n   * Returns the total number of visible columns in the table.\n   *\n   * @memberof Core#\n   * @function countCols\n   * @returns {number} Total number of columns.\n   */\n  this.countCols = function () {\n    const maxCols = tableMeta.maxCols;\n    const dataLen = this.columnIndexMapper.getNotTrimmedIndexesLength();\n    return Math.min(maxCols, dataLen);\n  };\n\n  /**\n   * Returns the number of rendered rows including rows that are partially or fully rendered\n   * outside the table viewport.\n   *\n   * @memberof Core#\n   * @function countRenderedRows\n   * @returns {number} Returns -1 if table is not visible.\n   */\n  this.countRenderedRows = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getRenderedRowsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered rows that are only visible in the table viewport.\n   * The rows that are partially visible are not counted.\n   *\n   * @memberof Core#\n   * @function countVisibleRows\n   * @returns {number} Number of visible rows or -1.\n   */\n  this.countVisibleRows = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getVisibleRowsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered rows including columns that are partially or fully rendered\n   * outside the table viewport.\n   *\n   * @memberof Core#\n   * @function countRenderedCols\n   * @returns {number} Returns -1 if table is not visible.\n   */\n  this.countRenderedCols = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getRenderedColumnsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered columns that are only visible in the table viewport.\n   * The columns that are partially visible are not counted.\n   *\n   * @memberof Core#\n   * @function countVisibleCols\n   * @returns {number} Number of visible columns or -1.\n   */\n  this.countVisibleCols = function () {\n    return instance.view._wt.drawn ? instance.view._wt.wtTable.getVisibleColumnsCount() : -1;\n  };\n\n  /**\n   * Returns the number of rendered row headers.\n   *\n   * @since 14.0.0\n   * @memberof Core#\n   * @function countRowHeaders\n   * @returns {number} Number of row headers.\n   */\n  this.countRowHeaders = function () {\n    return this.view.getRowHeadersCount();\n  };\n\n  /**\n   * Returns the number of rendered column headers.\n   *\n   * @since 14.0.0\n   * @memberof Core#\n   * @function countColHeaders\n   * @returns {number} Number of column headers.\n   */\n  this.countColHeaders = function () {\n    return this.view.getColumnHeadersCount();\n  };\n\n  /**\n   * Returns the number of empty rows. If the optional ending parameter is `true`, returns the\n   * number of empty rows at the bottom of the table.\n   *\n   * @memberof Core#\n   * @function countEmptyRows\n   * @param {boolean} [ending=false] If `true`, will only count empty rows at the end of the data source.\n   * @returns {number} Count empty rows.\n   */\n  this.countEmptyRows = function () {\n    let ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let emptyRows = 0;\n    rangeEachReverse(instance.countRows() - 1, visualIndex => {\n      if (instance.isEmptyRow(visualIndex)) {\n        emptyRows += 1;\n      } else if (ending === true) {\n        return false;\n      }\n    });\n    return emptyRows;\n  };\n\n  /**\n   * Returns the number of empty columns. If the optional ending parameter is `true`, returns the number of empty\n   * columns at right hand edge of the table.\n   *\n   * @memberof Core#\n   * @function countEmptyCols\n   * @param {boolean} [ending=false] If `true`, will only count empty columns at the end of the data source row.\n   * @returns {number} Count empty cols.\n   */\n  this.countEmptyCols = function () {\n    let ending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let emptyColumns = 0;\n    rangeEachReverse(instance.countCols() - 1, visualIndex => {\n      if (instance.isEmptyCol(visualIndex)) {\n        emptyColumns += 1;\n      } else if (ending === true) {\n        return false;\n      }\n    });\n    return emptyColumns;\n  };\n\n  /**\n   * Check if all cells in the row declared by the `row` argument are empty.\n   *\n   * @memberof Core#\n   * @function isEmptyRow\n   * @param {number} row Visual row index.\n   * @returns {boolean} `true` if the row at the given `row` is empty, `false` otherwise.\n   */\n  this.isEmptyRow = function (row) {\n    return tableMeta.isEmptyRow.call(instance, row);\n  };\n\n  /**\n   * Check if all cells in the the column declared by the `column` argument are empty.\n   *\n   * @memberof Core#\n   * @function isEmptyCol\n   * @param {number} column Column index.\n   * @returns {boolean} `true` if the column at the given `col` is empty, `false` otherwise.\n   */\n  this.isEmptyCol = function (column) {\n    return tableMeta.isEmptyCol.call(instance, column);\n  };\n\n  /**\n   * Select a single cell, or a single range of adjacent cells.\n   *\n   * To select a cell, pass its visual row and column indexes, for example: `selectCell(2, 4)`.\n   *\n   * To select a range, pass the visual indexes of the first and last cell in the range, for example: `selectCell(2, 4, 3, 5)`.\n   *\n   * If your columns have properties, you can pass those properties' values instead of column indexes, for example: `selectCell(2, 'first_name')`.\n   *\n   * By default, `selectCell()` also:\n   *  - Scrolls the viewport to the newly-selected cells.\n   *  - Switches the keyboard focus to Handsontable (by calling Handsontable's [`listen()`](#listen) method).\n   *\n   * @example\n   * ```js\n   * // select a single cell\n   * hot.selectCell(2, 4);\n   *\n   * // select a range of cells\n   * hot.selectCell(2, 4, 3, 5);\n   *\n   * // select a single cell, using a column property\n   * hot.selectCell(2, 'first_name');\n   *\n   * // select a range of cells, using column properties\n   * hot.selectCell(2, 'first_name', 3, 'last_name');\n   *\n   * // select a range of cells, without scrolling to them\n   * hot.selectCell(2, 4, 3, 5, false);\n   *\n   * // select a range of cells, without switching the keyboard focus to Handsontable\n   * hot.selectCell(2, 4, 3, 5, null, false);\n   * ```\n   *\n   * @memberof Core#\n   * @function selectCell\n   * @param {number} row A visual row index.\n   * @param {number|string} column A visual column index (`number`), or a column property's value (`string`).\n   * @param {number} [endRow] If selecting a range: the visual row index of the last cell in the range.\n   * @param {number|string} [endColumn] If selecting a range: the visual column index (or a column property's value) of the last cell in the range.\n   * @param {boolean} [scrollToCell=true] `true`: scroll the viewport to the newly-selected cells. `false`: keep the previous viewport.\n   * @param {boolean} [changeListener=true] `true`: switch the keyboard focus to Handsontable. `false`: keep the previous keyboard focus.\n   * @returns {boolean} `true`: the selection was successful, `false`: the selection failed.\n   */\n  this.selectCell = function (row, column, endRow, endColumn) {\n    let scrollToCell = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let changeListener = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    if (isUndefined(row) || isUndefined(column)) {\n      return false;\n    }\n    return this.selectCells([[row, column, endRow, endColumn]], scrollToCell, changeListener);\n  };\n\n  /**\n   * Select multiple cells or ranges of cells, adjacent or non-adjacent.\n   *\n   * You can pass one of the below:\n   * - An array of arrays (which matches the output of Handsontable's [`getSelected()`](#getselected) method).\n   * - An array of [`CellRange`](@/api/cellRange.md) objects (which matches the output of Handsontable's [`getSelectedRange()`](#getselectedrange) method).\n   *\n   * To select multiple cells, pass the visual row and column indexes of each cell, for example: `hot.selectCells([[1, 1], [5, 5]])`.\n   *\n   * To select multiple ranges, pass the visual indexes of the first and last cell in each range, for example: `hot.selectCells([[1, 1, 2, 2], [6, 2, 0, 2]])`.\n   *\n   * If your columns have properties, you can pass those properties' values instead of column indexes, for example: `hot.selectCells([[1, 'first_name'], [5, 'last_name']])`.\n   *\n   * By default, `selectCell()` also:\n   *  - Scrolls the viewport to the newly-selected cells.\n   *  - Switches the keyboard focus to Handsontable (by calling Handsontable's [`listen()`](#listen) method).\n   *\n   * @example\n   * ```js\n   * // select non-adjacent cells\n   * hot.selectCells([[1, 1], [5, 5], [10, 10]]);\n   *\n   * // select non-adjacent ranges of cells\n   * hot.selectCells([[1, 1, 2, 2], [10, 10, 20, 20]]);\n   *\n   * // select cells and ranges of cells\n   * hot.selectCells([[1, 1, 2, 2], [3, 3], [6, 2, 0, 2]]);\n   *\n   * // select cells, using column properties\n   * hot.selectCells([[1, 'id', 2, 'first_name'], [3, 'full_name'], [6, 'last_name', 0, 'first_name']]);\n   *\n   * // select multiple ranges, using an array of `CellRange` objects\n   * const selected = hot.getSelectedRange();\n   *\n   * selected[0].from.row = 0;\n   * selected[0].from.col = 0;\n   * selected[0].to.row = 5;\n   * selected[0].to.col = 5;\n   *\n   * selected[1].from.row = 10;\n   * selected[1].from.col = 10;\n   * selected[1].to.row = 20;\n   * selected[1].to.col = 20;\n   *\n   * hot.selectCells(selected);\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectCells\n   * @param {Array[]|CellRange[]} coords Visual coordinates,\n   * passed either as an array of arrays (`[[rowStart, columnStart, rowEnd, columnEnd], ...]`)\n   * or as an array of [`CellRange`](@/api/cellRange.md) objects.\n   * @param {boolean} [scrollToCell=true] `true`: scroll the viewport to the newly-selected cells. `false`: keep the previous viewport.\n   * @param {boolean} [changeListener=true] `true`: switch the keyboard focus to Handsontable. `false`: keep the previous keyboard focus.\n   * @returns {boolean} `true`: the selection was successful, `false`: the selection failed.\n   */\n  this.selectCells = function () {\n    let coords = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [[]];\n    let scrollToCell = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let changeListener = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (scrollToCell === false) {\n      preventScrollingToCell = true;\n    }\n    const wasSelected = selection.selectCells(coords);\n    if (wasSelected && changeListener) {\n      instance.listen();\n    }\n    preventScrollingToCell = false;\n    return wasSelected;\n  };\n\n  /**\n   * Select column specified by `startColumn` visual index, column property or a range of columns finishing at `endColumn`.\n   *\n   * @example\n   * ```js\n   * // Select column using visual index.\n   * hot.selectColumns(1);\n   * // Select column using column property.\n   * hot.selectColumns('id');\n   * // Select range of columns using visual indexes.\n   * hot.selectColumns(1, 4);\n   * // Select range of columns using visual indexes and mark the first header as highlighted.\n   * hot.selectColumns(1, 2, -1);\n   * // Select range of columns using visual indexes and mark the second cell as highlighted.\n   * hot.selectColumns(2, 1, 1);\n   * // Select range of columns using column properties.\n   * hot.selectColumns('id', 'last_name');\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectColumns\n   * @param {number} startColumn The visual column index from which the selection starts.\n   * @param {number} [endColumn=startColumn] The visual column index to which the selection finishes. If `endColumn`\n   *                                         is not defined the column defined by `startColumn` will be selected.\n   * @param {number} [focusPosition=0] The argument allows changing the cell/header focus position.\n   *                                   The value can take visual row index from -N to N, where negative values\n   *                                   point to the headers and positive values point to the cell range.\n   * @returns {boolean} `true` if selection was successful, `false` otherwise.\n   */\n  this.selectColumns = function (startColumn) {\n    let endColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startColumn;\n    let focusPosition = arguments.length > 2 ? arguments[2] : undefined;\n    return selection.selectColumns(startColumn, endColumn, focusPosition);\n  };\n\n  /**\n   * Select row specified by `startRow` visual index or a range of rows finishing at `endRow`.\n   *\n   * @example\n   * ```js\n   * // Select row using visual index.\n   * hot.selectRows(1);\n   * // select a range of rows, using visual indexes.\n   * hot.selectRows(1, 4);\n   * // select a range of rows, using visual indexes, and mark the header as highlighted.\n   * hot.selectRows(1, 2, -1);\n   * // Select range of rows using visual indexes and mark the second cell as highlighted.\n   * hot.selectRows(2, 1, 1);\n   * ```\n   *\n   * @memberof Core#\n   * @since 0.38.0\n   * @function selectRows\n   * @param {number} startRow The visual row index from which the selection starts.\n   * @param {number} [endRow=startRow] The visual row index to which the selection finishes. If `endRow`\n   *                                   is not defined the row defined by `startRow` will be selected.\n   * @param {number} [focusPosition=0] The argument allows changing the cell/header focus position.\n   *                                   The value can take visual column index from -N to N, where negative values\n   *                                   point to the headers and positive values point to the cell range.\n   * @returns {boolean} `true` if selection was successful, `false` otherwise.\n   */\n  this.selectRows = function (startRow) {\n    let endRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : startRow;\n    let focusPosition = arguments.length > 2 ? arguments[2] : undefined;\n    return selection.selectRows(startRow, endRow, focusPosition);\n  };\n\n  /**\n   * Deselects the current cell selection on the table.\n   *\n   * @memberof Core#\n   * @function deselectCell\n   */\n  this.deselectCell = function () {\n    selection.deselect();\n  };\n\n  /**\n   * Select the whole table.\n   *\n   * The previous selection is overwritten.\n   *\n   * ```js\n   * // select all cells in the table, including all headers and the corner cell\n   * hot.selectAll();\n   *\n   * // select all cells in the table, including row headers but excluding the corner cell\n   * hot.selectAll(true, false);\n   *\n   * // select all cells in the table, including all headers and the corner cell, but move the focus\n   * // highlight to position -2, -1\n   * hot.selectAll(-2, -1);\n   *\n   * // select all cells in the table, without headers\n   * hot.selectAll(false);\n   * ```\n   *\n   * @since 0.38.2\n   * @memberof Core#\n   * @function selectAll\n   * @param {boolean} [includeRowHeaders=false] `true` If the selection should include the row headers,\n   * `false` otherwise.\n   * @param {boolean} [includeColumnHeaders=false] `true` If the selection should include the column\n   * headers, `false` otherwise.\n   *\n   * @param {object} [options] Additional object with options.\n   * @param {{row: number, col: number} | boolean} [options.focusPosition] The argument allows changing the cell/header\n   * focus position. The value takes an object with a `row` and `col` properties from -N to N, where\n   * negative values point to the headers and positive values point to the cell range. If `false`, the focus\n   * position won't be changed.\n   * @param {boolean} [options.disableHeadersHighlight] If `true`, disables highlighting the headers even when\n   * the logical coordinates points on them.\n   */\n  this.selectAll = function () {\n    let includeRowHeaders = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let includeColumnHeaders = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : includeRowHeaders;\n    let options = arguments.length > 2 ? arguments[2] : undefined;\n    preventScrollingToCell = true;\n    selection.selectAll(includeRowHeaders, includeColumnHeaders, options);\n    preventScrollingToCell = false;\n  };\n  const getIndexToScroll = (indexMapper, visualIndex) => {\n    // Looking for a visual index on the right and then (when not found) on the left.\n    return indexMapper.getNearestNotHiddenIndex(visualIndex, 1, true);\n  };\n\n  /**\n   * Scroll viewport to coordinates specified by the `row` and/or `col` object properties.\n   *\n   * ```js\n   * // scroll the viewport to the visual row index (leave the horizontal scroll untouched)\n   * hot.scrollViewportTo({ row: 50 });\n   *\n   * // scroll the viewport to the passed coordinates so that the cell at 50, 50 will be snapped to\n   * // the bottom-end table's edge.\n   * hot.scrollViewportTo({\n   *   row: 50,\n   *   col: 50,\n   *   verticalSnap: 'bottom',\n   *   horizontalSnap: 'end',\n   * });\n   * ```\n   *\n   * @memberof Core#\n   * @function scrollViewportTo\n   * @param {object} options A dictionary containing the following parameters:\n   * @param {number} [options.row] Specifies the number of visual rows along the Y axis to scroll the viewport.\n   * @param {number} [options.col] Specifies the number of visual columns along the X axis to scroll the viewport.\n   * @param {'top' | 'bottom'} [options.verticalSnap] Determines to which edge of the table the viewport will be scrolled based on the passed coordinates.\n   * This option is a string which must take one of the following values:\n   * - `top`: The viewport will be scrolled to a row in such a way that it will be positioned on the top of the viewport;\n   * - `bottom`: The viewport will be scrolled to a row in such a way that it will be positioned on the bottom of the viewport;\n   * - If the property is not defined the vertical auto-snapping is enabled. Depending on where the viewport is scrolled from, a row will\n   * be positioned at the top or bottom of the viewport.\n   * @param {'start' | 'end'} [options.horizontalSnap] Determines to which edge of the table the viewport will be scrolled based on the passed coordinates.\n   * This option is a string which must take one of the following values:\n   * - `start`: The viewport will be scrolled to a column in such a way that it will be positioned on the start (left edge or right, if the layout direction is set to `rtl`) of the viewport;\n   * - `end`: The viewport will be scrolled to a column in such a way that it will be positioned on the end (right edge or left, if the layout direction is set to `rtl`) of the viewport;\n   * - If the property is not defined the horizontal auto-snapping is enabled. Depending on where the viewport is scrolled from, a column will\n   * be positioned at the start or end of the viewport.\n   * @param {boolean} [options.considerHiddenIndexes=true] If `true`, we handle visual indexes, otherwise we handle only indexes which\n   * may be rendered when they are in the viewport (we don't consider hidden indexes as they aren't rendered).\n   * @returns {boolean} `true` if viewport was scrolled, `false` otherwise.\n   */\n  this.scrollViewportTo = function () {\n    let {\n      row,\n      col,\n      verticalSnap,\n      horizontalSnap,\n      considerHiddenIndexes\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let snapToTop;\n    let snapToBottom;\n    let snapToInlineStart;\n    let snapToInlineEnd;\n    if (verticalSnap !== undefined) {\n      snapToTop = verticalSnap === 'top';\n      snapToBottom = !snapToTop;\n    }\n    if (horizontalSnap !== undefined) {\n      snapToInlineStart = horizontalSnap === 'start';\n      snapToInlineEnd = !snapToInlineStart;\n    }\n    let renderableRow = row;\n    let renderableColumn = col;\n    if (considerHiddenIndexes === undefined || considerHiddenIndexes) {\n      const isValidRowGrid = Number.isInteger(row) && row >= 0;\n      const isValidColumnGrid = Number.isInteger(col) && col >= 0;\n      const visualRowToScroll = isValidRowGrid ? getIndexToScroll(this.rowIndexMapper, row) : undefined;\n      const visualColumnToScroll = isValidColumnGrid ? getIndexToScroll(this.columnIndexMapper, col) : undefined;\n      if (visualRowToScroll === null || visualColumnToScroll === null) {\n        return false;\n      }\n      renderableRow = isValidRowGrid ? instance.rowIndexMapper.getRenderableFromVisualIndex(visualRowToScroll) : row;\n      renderableColumn = isValidColumnGrid ? instance.columnIndexMapper.getRenderableFromVisualIndex(visualColumnToScroll) : col;\n    }\n    const isRowInteger = Number.isInteger(renderableRow);\n    const isColumnInteger = Number.isInteger(renderableColumn);\n    if (isRowInteger && renderableRow >= 0 && isColumnInteger && renderableColumn >= 0) {\n      return instance.view.scrollViewport(instance._createCellCoords(renderableRow, renderableColumn), snapToTop, snapToInlineEnd, snapToBottom, snapToInlineStart);\n    }\n    if (isRowInteger && renderableRow >= 0 && (isColumnInteger && renderableColumn < 0 || !isColumnInteger)) {\n      return instance.view.scrollViewportVertically(renderableRow, snapToTop, snapToBottom);\n    }\n    if (isColumnInteger && renderableColumn >= 0 && (isRowInteger && renderableRow < 0 || !isRowInteger)) {\n      return instance.view.scrollViewportHorizontally(renderableColumn, snapToInlineEnd, snapToInlineStart);\n    }\n    return false;\n  };\n\n  /**\n   * Scrolls the viewport to coordinates specified by the currently focused cell.\n   *\n   * @since 14.0.0\n   * @memberof Core#\n   * @fires Hooks#afterScroll\n   * @function scrollToFocusedCell\n   * @param {Function} callback The callback function to call after the viewport is scrolled.\n   */\n  this.scrollToFocusedCell = function () {\n    let callback = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : () => {};\n    if (!this.selection.isSelected()) {\n      return;\n    }\n    this.addHookOnce('afterScroll', callback);\n    const {\n      highlight\n    } = this.getSelectedRangeLast();\n    const isScrolled = this.scrollViewportTo(highlight.toObject());\n    if (isScrolled) {\n      this.view.render();\n    } else {\n      this.removeHook('afterScroll', callback);\n      this._registerImmediate(() => callback());\n    }\n  };\n\n  /**\n   * Removes the table from the DOM and destroys the instance of the Handsontable.\n   *\n   * @memberof Core#\n   * @function destroy\n   * @fires Hooks#afterDestroy\n   */\n  this.destroy = function () {\n    instance._clearTimeouts();\n    instance._clearImmediates();\n    if (instance.view) {\n      // in case HT is destroyed before initialization has finished\n      instance.view.destroy();\n    }\n    if (dataSource) {\n      dataSource.destroy();\n    }\n    dataSource = null;\n    this.getShortcutManager().destroy();\n    metaManager.clearCache();\n    foreignHotInstances.delete(this.guid);\n    if (isRootInstance(instance)) {\n      const licenseInfo = this.rootDocument.querySelector('.hot-display-license-info');\n      if (licenseInfo) {\n        licenseInfo.parentNode.removeChild(licenseInfo);\n      }\n    }\n    empty(instance.rootElement);\n    eventManager.destroy();\n    if (editorManager) {\n      editorManager.destroy();\n    }\n\n    // The plugin's `destroy` method is called as a consequence and it should handle\n    // unregistration of plugin's maps. Some unregistered maps reset the cache.\n    instance.batchExecution(() => {\n      instance.rowIndexMapper.unregisterAll();\n      instance.columnIndexMapper.unregisterAll();\n      pluginsRegistry.getItems().forEach(_ref10 => {\n        let [, plugin] = _ref10;\n        plugin.destroy();\n      });\n      pluginsRegistry.clear();\n      instance.runHooks('afterDestroy');\n    }, true);\n    Hooks.getSingleton().destroy(instance);\n    objectEach(instance, (property, key, obj) => {\n      // replace instance methods with post mortem\n      if (isFunction(property)) {\n        obj[key] = postMortem(key);\n      } else if (key !== 'guid') {\n        // replace instance properties with null (restores memory)\n        // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests\n        obj[key] = null;\n      }\n    });\n    instance.isDestroyed = true;\n\n    // replace private properties with null (restores memory)\n    // it should not be necessary but this prevents a memory leak side effects that show itself in Jasmine tests\n    if (datamap) {\n      datamap.destroy();\n    }\n    datamap = null;\n    grid = null;\n    selection = null;\n    editorManager = null;\n    instance = null;\n  };\n\n  /**\n   * Replacement for all methods after the Handsontable was destroyed.\n   *\n   * @private\n   * @param {string} method The method name.\n   * @returns {Function}\n   */\n  function postMortem(method) {\n    return () => {\n      throw new Error(`The \"${method}\" method cannot be called because this Handsontable instance has been destroyed`);\n    };\n  }\n\n  /**\n   * Returns the active editor class instance.\n   *\n   * @memberof Core#\n   * @function getActiveEditor\n   * @returns {BaseEditor} The active editor instance.\n   */\n  this.getActiveEditor = function () {\n    return editorManager.getActiveEditor();\n  };\n\n  /**\n   * Returns plugin instance by provided its name.\n   *\n   * @memberof Core#\n   * @function getPlugin\n   * @param {string} pluginName The plugin name.\n   * @returns {BasePlugin|undefined} The plugin instance or undefined if there is no plugin.\n   */\n  this.getPlugin = function (pluginName) {\n    const unifiedPluginName = toUpperCaseFirst(pluginName);\n\n    // Workaround for the UndoRedo plugin which, currently doesn't follow the plugin architecture.\n    if (unifiedPluginName === 'UndoRedo') {\n      return this.undoRedo;\n    }\n    return pluginsRegistry.getItem(unifiedPluginName);\n  };\n\n  /**\n   * Returns name of the passed plugin.\n   *\n   * @private\n   * @memberof Core#\n   * @param {BasePlugin} plugin The plugin instance.\n   * @returns {string}\n   */\n  this.getPluginName = function (plugin) {\n    // Workaround for the UndoRedo plugin which, currently doesn't follow the plugin architecture.\n    if (plugin === this.undoRedo) {\n      return this.undoRedo.constructor.PLUGIN_KEY;\n    }\n    return pluginsRegistry.getId(plugin);\n  };\n\n  /**\n   * Returns the Handsontable instance.\n   *\n   * @memberof Core#\n   * @function getInstance\n   * @returns {Handsontable} The Handsontable instance.\n   */\n  this.getInstance = function () {\n    return instance;\n  };\n\n  /**\n   * Adds listener to the specified hook name (only for this Handsontable instance).\n   *\n   * @memberof Core#\n   * @function addHook\n   * @see Hooks#add\n   * @param {string} key Hook name (see {@link Hooks}).\n   * @param {Function|Array} callback Function or array of functions.\n   * @example\n   * ```js\n   * hot.addHook('beforeInit', myCallback);\n   * ```\n   */\n  this.addHook = function (key, callback) {\n    Hooks.getSingleton().add(key, callback, instance);\n  };\n\n  /**\n   * Check if for a specified hook name there are added listeners (only for this Handsontable instance). All available\n   * hooks you will find {@link Hooks}.\n   *\n   * @memberof Core#\n   * @function hasHook\n   * @see Hooks#has\n   * @param {string} key Hook name.\n   * @returns {boolean}\n   *\n   * @example\n   * ```js\n   * const hasBeforeInitListeners = hot.hasHook('beforeInit');\n   * ```\n   */\n  this.hasHook = function (key) {\n    return Hooks.getSingleton().has(key, instance) || Hooks.getSingleton().has(key);\n  };\n\n  /**\n   * Adds listener to specified hook name (only for this Handsontable instance). After the listener is triggered,\n   * it will be automatically removed.\n   *\n   * @memberof Core#\n   * @function addHookOnce\n   * @see Hooks#once\n   * @param {string} key Hook name (see {@link Hooks}).\n   * @param {Function|Array} callback Function or array of functions.\n   * @example\n   * ```js\n   * hot.addHookOnce('beforeInit', myCallback);\n   * ```\n   */\n  this.addHookOnce = function (key, callback) {\n    Hooks.getSingleton().once(key, callback, instance);\n  };\n\n  /**\n   * Removes the hook listener previously registered with {@link Core#addHook}.\n   *\n   * @memberof Core#\n   * @function removeHook\n   * @see Hooks#remove\n   * @param {string} key Hook name.\n   * @param {Function} callback Reference to the function which has been registered using {@link Core#addHook}.\n   *\n   * @example\n   * ```js\n   * hot.removeHook('beforeInit', myCallback);\n   * ```\n   */\n  this.removeHook = function (key, callback) {\n    Hooks.getSingleton().remove(key, callback, instance);\n  };\n\n  /**\n   * Run the callbacks for the hook provided in the `key` argument using the parameters given in the other arguments.\n   *\n   * @memberof Core#\n   * @function runHooks\n   * @see Hooks#run\n   * @param {string} key Hook name.\n   * @param {*} [p1] Argument passed to the callback.\n   * @param {*} [p2] Argument passed to the callback.\n   * @param {*} [p3] Argument passed to the callback.\n   * @param {*} [p4] Argument passed to the callback.\n   * @param {*} [p5] Argument passed to the callback.\n   * @param {*} [p6] Argument passed to the callback.\n   * @returns {*}\n   *\n   * @example\n   * ```js\n   * // Run built-in hook\n   * hot.runHooks('beforeInit');\n   * // Run custom hook\n   * hot.runHooks('customAction', 10, 'foo');\n   * ```\n   */\n  this.runHooks = function (key, p1, p2, p3, p4, p5, p6) {\n    return Hooks.getSingleton().run(instance, key, p1, p2, p3, p4, p5, p6);\n  };\n\n  /**\n   * Get language phrase for specified dictionary key.\n   *\n   * @memberof Core#\n   * @function getTranslatedPhrase\n   * @since 0.35.0\n   * @param {string} dictionaryKey Constant which is dictionary key.\n   * @param {*} extraArguments Arguments which will be handled by formatters.\n   * @returns {string}\n   */\n  this.getTranslatedPhrase = function (dictionaryKey, extraArguments) {\n    return getTranslatedPhrase(tableMeta.language, dictionaryKey, extraArguments);\n  };\n\n  /**\n   * Converts instance into outerHTML of HTMLTableElement.\n   *\n   * @memberof Core#\n   * @function toHTML\n   * @since 7.1.0\n   * @returns {string}\n   */\n  this.toHTML = () => instanceToHTML(this);\n\n  /**\n   * Converts instance into HTMLTableElement.\n   *\n   * @memberof Core#\n   * @function toTableElement\n   * @since 7.1.0\n   * @returns {HTMLTableElement}\n   */\n  this.toTableElement = () => {\n    const tempElement = this.rootDocument.createElement('div');\n    tempElement.insertAdjacentHTML('afterbegin', instanceToHTML(this));\n    return tempElement.firstElementChild;\n  };\n  this.timeouts = [];\n\n  /**\n   * Sets timeout. Purpose of this method is to clear all known timeouts when `destroy` method is called.\n   *\n   * @param {number|Function} handle Handler returned from setTimeout or function to execute (it will be automatically wraped\n   *                                 by setTimeout function).\n   * @param {number} [delay=0] If first argument is passed as a function this argument set delay of the execution of that function.\n   * @private\n   */\n  this._registerTimeout = function (handle) {\n    let delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    let handleFunc = handle;\n    if (typeof handleFunc === 'function') {\n      handleFunc = setTimeout(handleFunc, delay);\n    }\n    this.timeouts.push(handleFunc);\n  };\n\n  /**\n   * Clears all known timeouts.\n   *\n   * @private\n   */\n  this._clearTimeouts = function () {\n    arrayEach(this.timeouts, handler => {\n      clearTimeout(handler);\n    });\n  };\n  this.immediates = [];\n\n  /**\n   * Execute function execution to the next event loop cycle. Purpose of this method is to clear all known timeouts when `destroy` method is called.\n   *\n   * @param {Function} callback Function to be delayed in execution.\n   * @private\n   */\n  this._registerImmediate = function (callback) {\n    this.immediates.push(setImmediate(callback));\n  };\n\n  /**\n   * Clears all known timeouts.\n   *\n   * @private\n   */\n  this._clearImmediates = function () {\n    arrayEach(this.immediates, handler => {\n      clearImmediate(handler);\n    });\n  };\n\n  /**\n   * Refresh selection borders. This is temporary method relic after selection rewrite.\n   *\n   * @private\n   * @param {boolean} [revertOriginal=false] If `true`, the previous value will be restored. Otherwise, the edited value will be saved.\n   * @param {boolean} [prepareEditorIfNeeded=true] If `true` the editor under the selected cell will be prepared to open.\n   */\n  this._refreshBorders = function () {\n    let revertOriginal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let prepareEditorIfNeeded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    editorManager.destroyEditor(revertOriginal);\n    instance.view.render();\n    if (prepareEditorIfNeeded && selection.isSelected()) {\n      editorManager.prepareEditor();\n    }\n  };\n\n  /**\n   * Gets the instance of the EditorManager.\n   *\n   * @private\n   * @returns {EditorManager}\n   */\n  this._getEditorManager = function () {\n    return editorManager;\n  };\n\n  /**\n   * Check if currently it is RTL direction.\n   *\n   * @private\n   * @memberof Core#\n   * @function isRtl\n   * @returns {boolean} True if RTL.\n   */\n  this.isRtl = function () {\n    return instance.rootWindow.getComputedStyle(instance.rootElement).direction === 'rtl';\n  };\n\n  /**\n   * Check if currently it is LTR direction.\n   *\n   * @private\n   * @memberof Core#\n   * @function isLtr\n   * @returns {boolean} True if LTR.\n   */\n  this.isLtr = function () {\n    return !instance.isRtl();\n  };\n\n  /**\n   * Returns 1 for LTR; -1 for RTL. Useful for calculations.\n   *\n   * @private\n   * @memberof Core#\n   * @function getDirectionFactor\n   * @returns {number} Returns 1 for LTR; -1 for RTL.\n   */\n  this.getDirectionFactor = function () {\n    return instance.isLtr() ? 1 : -1;\n  };\n  const shortcutManager = createShortcutManager({\n    handleEvent() {\n      return instance.isListening();\n    },\n    beforeKeyDown: event => {\n      return this.runHooks('beforeKeyDown', event);\n    },\n    afterKeyDown: event => {\n      if (this.isDestroyed) {\n        // Handsontable could be destroyed after performing action (executing a callback).\n        return;\n      }\n      instance.runHooks('afterDocumentKeyDown', event);\n    },\n    ownerWindow: this.rootWindow\n  });\n  this.addHook('beforeOnCellMouseDown', event => {\n    // Releasing keys as some browser/system shortcuts break events sequence (thus the `keyup` event isn't triggered).\n    if (event.ctrlKey === false && event.metaKey === false) {\n      shortcutManager.releasePressedKeys();\n    }\n  });\n\n  /**\n   * Returns instance of a manager responsible for handling shortcuts stored in some contexts. It run actions after\n   * pressing key combination in active Handsontable instance.\n   *\n   * @memberof Core#\n   * @since 12.0.0\n   * @function getShortcutManager\n   * @returns {ShortcutManager} Instance of {@link ShortcutManager}\n   */\n  this.getShortcutManager = function () {\n    return shortcutManager;\n  };\n\n  /**\n   * Return the Focus Manager responsible for managing the browser's focus in the table.\n   *\n   * @memberof Core#\n   * @since 14.0.0\n   * @function getFocusManager\n   * @returns {FocusManager}\n   */\n  this.getFocusManager = function () {\n    return focusManager;\n  };\n  getPluginsNames().forEach(pluginName => {\n    const PluginClass = getPlugin(pluginName);\n    pluginsRegistry.addItem(pluginName, new PluginClass(this));\n  });\n  registerAllShortcutContexts(instance);\n  shortcutManager.setActiveContextName('grid');\n  Hooks.getSingleton().run(instance, 'construct');\n}","import \"core-js/modules/es.array.push.js\";\nimport { arrayEach } from \"./../helpers/array.mjs\";\nimport { defineGetter, objectEach } from \"./../helpers/object.mjs\";\nconst MIXIN_NAME = 'hooksRefRegisterer';\n\n/**\n * Mixin object to extend objects functionality for auto registering hooks in an Handsontable instance.\n *\n * @type {object}\n */\nconst hooksRefRegisterer = {\n  /**\n   * Internal hooks storage.\n   */\n  _hooksStorage: Object.create(null),\n  /**\n   * Add hook to the collection.\n   *\n   * @param {string} key The hook name.\n   * @param {Function} callback The hook callback.\n   * @returns {object}\n   */\n  addHook(key, callback) {\n    if (!this._hooksStorage[key]) {\n      this._hooksStorage[key] = [];\n    }\n    this.hot.addHook(key, callback);\n    this._hooksStorage[key].push(callback);\n    return this;\n  },\n  /**\n   * Remove all hooks listeners by hook name.\n   *\n   * @param {string} key The hook name.\n   */\n  removeHooksByKey(key) {\n    arrayEach(this._hooksStorage[key] || [], callback => {\n      this.hot.removeHook(key, callback);\n    });\n  },\n  /**\n   * Clear all added hooks.\n   */\n  clearHooks() {\n    objectEach(this._hooksStorage, (callbacks, name) => this.removeHooksByKey(name));\n    this._hooksStorage = {};\n  }\n};\ndefineGetter(hooksRefRegisterer, 'MIXIN_NAME', MIXIN_NAME, {\n  writable: false,\n  enumerable: false\n});\nexport default hooksRefRegisterer;","import \"core-js/modules/es.error.cause.js\";\nimport { isDefined, stringify } from \"../../helpers/mixed.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { SHORTCUTS_GROUP_NAVIGATION } from \"../../editorManager.mjs\";\nimport hooksRefRegisterer from \"../../mixins/hooksRefRegisterer.mjs\";\nimport { getScrollbarWidth, offset, hasVerticalScrollbar, hasHorizontalScrollbar, outerWidth, outerHeight, getComputedStyle } from \"../../helpers/dom/element.mjs\";\nexport const EDITOR_TYPE = 'base';\nexport const EDITOR_STATE = Object.freeze({\n  VIRGIN: 'STATE_VIRGIN',\n  // before editing\n  EDITING: 'STATE_EDITING',\n  WAITING: 'STATE_WAITING',\n  // waiting for async validation\n  FINISHED: 'STATE_FINISHED'\n});\nexport const SHORTCUTS_GROUP_EDITOR = 'baseEditor';\n\n/**\n * @class BaseEditor\n */\nexport class BaseEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * @param {Handsontable} instance A reference to the source instance of the Handsontable.\n   */\n  constructor(instance) {\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = instance;\n    /**\n     * A reference to the source instance of the Handsontable.\n     *\n     * @deprecated\n     *\n     * @type {Handsontable}\n     */\n    this.instance = instance;\n    /**\n     * Editor's state.\n     *\n     * @type {string}\n     */\n    this.state = EDITOR_STATE.VIRGIN;\n    /**\n     * Flag to store information about editor's opening status.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n    this._opened = false;\n    /**\n     * Defines the editor's editing mode. When false, then an editor works in fast editing mode.\n     *\n     * @private\n     *\n     * @type {boolean}\n     */\n    this._fullEditMode = false;\n    /**\n     * Callback to call after closing editor.\n     *\n     * @type {Function}\n     */\n    this._closeCallback = null;\n    /**\n     * Currently rendered cell's TD element.\n     *\n     * @type {HTMLTableCellElement}\n     */\n    this.TD = null;\n    /**\n     * Visual row index.\n     *\n     * @type {number}\n     */\n    this.row = null;\n    /**\n     * Visual column index.\n     *\n     * @type {number}\n     */\n    this.col = null;\n    /**\n     * Column property name or a column index, if datasource is an array of arrays.\n     *\n     * @type {number|string}\n     */\n    this.prop = null;\n    /**\n     * Original cell's value.\n     *\n     * @type {*}\n     */\n    this.originalValue = null;\n    /**\n     * Object containing the cell's properties.\n     *\n     * @type {object}\n     */\n    this.cellProperties = null;\n    this.init();\n  }\n\n  /**\n   * Fires callback after closing editor.\n   *\n   * @private\n   * @param {boolean} result The editor value.\n   */\n  _fireCallbacks(result) {\n    if (this._closeCallback) {\n      this._closeCallback(result);\n      this._closeCallback = null;\n    }\n  }\n\n  /**\n   * Initializes an editor's intance.\n   */\n  init() {}\n\n  /**\n   * Required method to get current value from editable element.\n   */\n  getValue() {\n    throw Error('Editor getValue() method unimplemented');\n  }\n\n  /**\n   * Required method to set new value into editable element.\n   */\n  setValue() {\n    throw Error('Editor setValue() method unimplemented');\n  }\n\n  /**\n   * Required method to open editor.\n   */\n  open() {\n    throw Error('Editor open() method unimplemented');\n  }\n\n  /**\n   * Required method to close editor.\n   */\n  close() {\n    throw Error('Editor close() method unimplemented');\n  }\n\n  /**\n   * Prepares editor's meta data.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    this.TD = td;\n    this.row = row;\n    this.col = col;\n    this.prop = prop;\n    this.originalValue = value;\n    this.cellProperties = cellProperties;\n    this.state = EDITOR_STATE.VIRGIN;\n  }\n\n  /**\n   * Fallback method to provide extendable editors in ES5.\n   *\n   * @returns {Function}\n   */\n  extend() {\n    return class Editor extends this.constructor {};\n  }\n\n  /**\n   * Saves value from editor into data storage.\n   *\n   * @param {*} value The editor value.\n   * @param {boolean} ctrlDown If `true`, applies value to each cell in the last selected range.\n   */\n  saveValue(value, ctrlDown) {\n    let visualRowFrom;\n    let visualColumnFrom;\n    let visualRowTo;\n    let visualColumnTo;\n\n    // if ctrl+enter and multiple cells selected, behave like Excel (finish editing and apply to all cells)\n    if (ctrlDown) {\n      const selectedLast = this.hot.getSelectedLast();\n      visualRowFrom = Math.max(Math.min(selectedLast[0], selectedLast[2]), 0); // Math.max eliminate headers coords.\n      visualColumnFrom = Math.max(Math.min(selectedLast[1], selectedLast[3]), 0); // Math.max eliminate headers coords.\n      visualRowTo = Math.max(selectedLast[0], selectedLast[2]);\n      visualColumnTo = Math.max(selectedLast[1], selectedLast[3]);\n    } else {\n      [visualRowFrom, visualColumnFrom, visualRowTo, visualColumnTo] = [this.row, this.col, null, null];\n    }\n    const modifiedCellCoords = this.hot.runHooks('modifyGetCellCoords', visualRowFrom, visualColumnFrom);\n    if (Array.isArray(modifiedCellCoords)) {\n      [visualRowFrom, visualColumnFrom] = modifiedCellCoords;\n    }\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    const contextConfig = {\n      runOnlyIf: () => isDefined(this.hot.getSelected()),\n      group: SHORTCUTS_GROUP_EDITOR\n    };\n    if (this.isInFullEditMode()) {\n      editorContext.addShortcuts([{\n        keys: [['ArrowUp']],\n        callback: () => {\n          this.hot.selection.transformStart(-1, 0);\n        }\n      }, {\n        keys: [['ArrowDown']],\n        callback: () => {\n          this.hot.selection.transformStart(1, 0);\n        }\n      }, {\n        keys: [['ArrowLeft']],\n        callback: () => {\n          this.hot.selection.transformStart(0, -1 * this.hot.getDirectionFactor());\n        }\n      }, {\n        keys: [['ArrowRight']],\n        callback: () => {\n          this.hot.selection.transformStart(0, this.hot.getDirectionFactor());\n        }\n      }], contextConfig);\n    }\n\n    // Saving values using the modified coordinates.\n    this.hot.populateFromArray(visualRowFrom, visualColumnFrom, value, visualRowTo, visualColumnTo, 'edit');\n  }\n\n  /**\n   * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n   *\n   * @param {*} newInitialValue The initial editor value.\n   * @param {Event} event The keyboard event object.\n   */\n  beginEditing(newInitialValue, event) {\n    if (this.state !== EDITOR_STATE.VIRGIN) {\n      return;\n    }\n    const hotInstance = this.hot;\n    // We have to convert visual indexes into renderable indexes\n    // due to hidden columns don't participate in the rendering process\n    const renderableRowIndex = hotInstance.rowIndexMapper.getRenderableFromVisualIndex(this.row);\n    const renderableColumnIndex = hotInstance.columnIndexMapper.getRenderableFromVisualIndex(this.col);\n    hotInstance.view.scrollViewport(hotInstance._createCellCoords(renderableRowIndex, renderableColumnIndex));\n    this.state = EDITOR_STATE.EDITING;\n\n    // Set the editor value only in the full edit mode. In other mode the focusable element has to be empty,\n    // otherwise IME (editor for Asia users) doesn't work.\n    if (this.isInFullEditMode()) {\n      const stringifiedInitialValue = typeof newInitialValue === 'string' ? newInitialValue : stringify(this.originalValue);\n      this.setValue(stringifiedInitialValue);\n    }\n    this.open(event);\n    this._opened = true;\n    this.focus();\n\n    // only rerender the selections (FillHandle should disappear when beginEditing is triggered)\n    hotInstance.view.render();\n    hotInstance.runHooks('afterBeginEditing', this.row, this.col);\n  }\n\n  /**\n   * Finishes editing and start saving or restoring process for editing cell or last selected range.\n   *\n   * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n   * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n   * @param {Function} callback The callback function, fired after editor closing.\n   */\n  finishEditing(restoreOriginalValue, ctrlDown, callback) {\n    let val;\n    if (callback) {\n      const previousCloseCallback = this._closeCallback;\n      this._closeCallback = result => {\n        if (previousCloseCallback) {\n          previousCloseCallback(result);\n        }\n        callback(result);\n        this.hot.view.render();\n      };\n    }\n    if (this.isWaiting()) {\n      return;\n    }\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP_EDITOR);\n    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP_NAVIGATION);\n    if (this.state === EDITOR_STATE.VIRGIN) {\n      this.hot._registerTimeout(() => {\n        this._fireCallbacks(true);\n      });\n      return;\n    }\n    if (this.state === EDITOR_STATE.EDITING) {\n      if (restoreOriginalValue) {\n        this.cancelChanges();\n        this.hot.view.render();\n        return;\n      }\n      const value = this.getValue();\n      if (this.cellProperties.trimWhitespace) {\n        // We trim only string values\n        val = [[typeof value === 'string' ? String.prototype.trim.call(value || '') : value]];\n      } else {\n        val = [[value]];\n      }\n      this.state = EDITOR_STATE.WAITING;\n      this.saveValue(val, ctrlDown);\n      if (this.hot.getCellValidator(this.cellProperties)) {\n        this.hot.addHookOnce('postAfterValidate', result => {\n          this.state = EDITOR_STATE.FINISHED;\n          this.discardEditor(result);\n        });\n      } else {\n        this.state = EDITOR_STATE.FINISHED;\n        this.discardEditor(true);\n      }\n    }\n  }\n\n  /**\n   * Finishes editing without singout saving value.\n   */\n  cancelChanges() {\n    this.state = EDITOR_STATE.FINISHED;\n    this.discardEditor();\n  }\n\n  /**\n   * Verifies result of validation or closes editor if user's cancelled changes.\n   *\n   * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,\n   *                                   then an editor won't be closed until validation is passed.\n   */\n  discardEditor(result) {\n    if (this.state !== EDITOR_STATE.FINISHED) {\n      return;\n    }\n\n    // validator was defined and failed\n    if (result === false && this.cellProperties.allowInvalid !== true) {\n      this.hot.selectCell(this.row, this.col);\n      this.focus();\n      this.state = EDITOR_STATE.EDITING;\n      this._fireCallbacks(false);\n    } else {\n      this.close();\n      this._opened = false;\n      this._fullEditMode = false;\n      this.state = EDITOR_STATE.VIRGIN;\n      this._fireCallbacks(true);\n      const shortcutManager = this.hot.getShortcutManager();\n      shortcutManager.setActiveContextName('grid');\n    }\n  }\n\n  /**\n   * Switch editor into full edit mode. In this state navigation keys don't close editor. This mode is activated\n   * automatically after hit ENTER or F2 key on the cell or while editing cell press F2 key.\n   */\n  enableFullEditMode() {\n    this._fullEditMode = true;\n  }\n\n  /**\n   * Checks if editor is in full edit mode.\n   *\n   * @returns {boolean}\n   */\n  isInFullEditMode() {\n    return this._fullEditMode;\n  }\n\n  /**\n   * Returns information whether the editor is open.\n   *\n   * @returns {boolean}\n   */\n  isOpened() {\n    return this._opened;\n  }\n\n  /**\n   * Returns information whether the editor is waiting, eg.: for async validation.\n   *\n   * @returns {boolean}\n   */\n  isWaiting() {\n    return this.state === EDITOR_STATE.WAITING;\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * Gets the object that provides information about the edited cell size and its position\n   * relative to the table viewport.\n   *\n   * The rectangle has six integer properties:\n   *  - `top` The top position relative to the table viewport\n   *  - `start` The left (or right in RTL) position relative to the table viewport\n   *  - `width` The cell's current width;\n   *  - `maxWidth` The maximum cell's width after which the editor goes out of the table viewport\n   *  - `height` The cell's current height;\n   *  - `maxHeight` The maximum cell's height after which the editor goes out of the table viewport\n   *\n   * @returns {{top: number, start: number, width: number, maxWidth: number, height: number, maxHeight: number} | undefined}\n   */\n  getEditedCellRect() {\n    var _wtOverlays$getParent;\n    const TD = this.getEditedCell();\n\n    // TD is outside of the viewport.\n    if (!TD) {\n      return;\n    }\n    const {\n      wtOverlays,\n      wtViewport\n    } = this.hot.view._wt;\n    const rootWindow = this.hot.rootWindow;\n    const currentOffset = offset(TD);\n    const cellWidth = outerWidth(TD);\n    const containerOffset = offset(this.hot.rootElement);\n    const containerWidth = outerWidth(this.hot.rootElement);\n    const scrollableContainerTop = wtOverlays.topOverlay.holder;\n    const scrollableContainerLeft = wtOverlays.inlineStartOverlay.holder;\n    const containerScrollTop = scrollableContainerTop !== rootWindow ? scrollableContainerTop.scrollTop : 0;\n    const containerScrollLeft = scrollableContainerLeft !== rootWindow ? scrollableContainerLeft.scrollLeft : 0;\n    const gridMostRightPos = rootWindow.innerWidth - containerOffset.left - containerWidth;\n    const {\n      wtTable: overlayTable\n    } = (_wtOverlays$getParent = wtOverlays.getParentOverlay(TD)) !== null && _wtOverlays$getParent !== void 0 ? _wtOverlays$getParent : this.hot.view._wt;\n    const overlayName = overlayTable.name;\n    const scrollTop = ['master', 'inline_start'].includes(overlayName) ? containerScrollTop : 0;\n    const scrollLeft = ['master', 'top', 'bottom'].includes(overlayName) ? containerScrollLeft : 0;\n\n    // If colHeaders is disabled, cells in the first row have border-top\n    const editTopModifier = currentOffset.top === containerOffset.top ? 0 : 1;\n    let topPos = currentOffset.top - containerOffset.top - editTopModifier - scrollTop;\n    let inlineStartPos = 0;\n    if (this.hot.isRtl()) {\n      inlineStartPos = rootWindow.innerWidth - currentOffset.left - cellWidth - gridMostRightPos - 1 + scrollLeft;\n    } else {\n      inlineStartPos = currentOffset.left - containerOffset.left - 1 - scrollLeft;\n    }\n\n    // When the scrollable element is Window object then the editor position needs to be compensated\n    // by the overlays' position (position relative to the table viewport). In other cases, the overlay's\n    // position always returns 0.\n    if (['top', 'top_inline_start_corner'].includes(overlayName)) {\n      topPos += wtOverlays.topOverlay.getOverlayOffset();\n    }\n    if (['inline_start', 'top_inline_start_corner'].includes(overlayName)) {\n      inlineStartPos += Math.abs(wtOverlays.inlineStartOverlay.getOverlayOffset());\n    }\n    const hasColumnHeaders = this.hot.hasColHeaders();\n    const renderableRow = this.hot.rowIndexMapper.getRenderableFromVisualIndex(this.row);\n    const renderableColumn = this.hot.columnIndexMapper.getRenderableFromVisualIndex(this.col);\n    const nrOfRenderableRowIndexes = this.hot.rowIndexMapper.getRenderableIndexesLength();\n    const firstRowIndexOfTheBottomOverlay = nrOfRenderableRowIndexes - this.hot.view._wt.getSetting('fixedRowsBottom');\n    if (hasColumnHeaders && renderableRow <= 0 || renderableRow === firstRowIndexOfTheBottomOverlay) {\n      topPos += 1;\n    }\n    if (renderableColumn <= 0) {\n      inlineStartPos += 1;\n    }\n    const firstRowOffset = wtViewport.rowsRenderCalculator.startPosition;\n    const firstColumnOffset = wtViewport.columnsRenderCalculator.startPosition;\n    const horizontalScrollPosition = Math.abs(wtOverlays.inlineStartOverlay.getScrollPosition());\n    const verticalScrollPosition = wtOverlays.topOverlay.getScrollPosition();\n    const scrollbarWidth = getScrollbarWidth(this.hot.rootDocument);\n    let cellTopOffset = TD.offsetTop;\n    if (['inline_start', 'master'].includes(overlayName)) {\n      cellTopOffset += firstRowOffset - verticalScrollPosition;\n    }\n    if (['bottom', 'bottom_inline_start_corner'].includes(overlayName)) {\n      const {\n        wtViewport: bottomWtViewport,\n        wtTable: bottomWtTable\n      } = wtOverlays.bottomOverlay.clone;\n      cellTopOffset += bottomWtViewport.getWorkspaceHeight() - bottomWtTable.getHeight() - scrollbarWidth;\n    }\n    let cellStartOffset = TD.offsetLeft;\n    if (this.hot.isRtl()) {\n      if (cellStartOffset >= 0) {\n        cellStartOffset = overlayTable.getWidth() - TD.offsetLeft;\n      } else {\n        // The `offsetLeft` returns negative values when the parent offset element has position relative\n        // (it happens when on the cell the selection is applied - the `area` CSS class).\n        // When it happens the `offsetLeft` value is calculated from the right edge of the parent element.\n        cellStartOffset = Math.abs(cellStartOffset);\n      }\n      cellStartOffset += firstColumnOffset - horizontalScrollPosition - cellWidth;\n    } else if (['top', 'master', 'bottom'].includes(overlayName)) {\n      cellStartOffset += firstColumnOffset - horizontalScrollPosition;\n    }\n    const cellComputedStyle = getComputedStyle(this.TD, this.hot.rootWindow);\n    const borderPhysicalWidthProp = this.hot.isRtl() ? 'borderRightWidth' : 'borderLeftWidth';\n    const inlineStartBorderCompensation = parseInt(cellComputedStyle[borderPhysicalWidthProp], 10) > 0 ? 0 : 1;\n    const topBorderCompensation = parseInt(cellComputedStyle.borderTopWidth, 10) > 0 ? 0 : 1;\n    const width = outerWidth(TD) + inlineStartBorderCompensation;\n    const height = outerHeight(TD) + topBorderCompensation;\n    const actualVerticalScrollbarWidth = hasVerticalScrollbar(scrollableContainerTop) ? scrollbarWidth : 0;\n    const actualHorizontalScrollbarWidth = hasHorizontalScrollbar(scrollableContainerLeft) ? scrollbarWidth : 0;\n    const maxWidth = this.hot.view.maximumVisibleElementWidth(cellStartOffset) - actualVerticalScrollbarWidth + inlineStartBorderCompensation;\n    const maxHeight = Math.max(this.hot.view.maximumVisibleElementHeight(cellTopOffset) - actualHorizontalScrollbarWidth + topBorderCompensation, 23);\n    return {\n      top: topPos,\n      start: inlineStartPos,\n      height,\n      maxHeight,\n      width,\n      maxWidth\n    };\n  }\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n\n  /**\n   * Gets className of the edited cell if exist.\n   *\n   * @returns {string}\n   */\n  getEditedCellsLayerClass() {\n    const editorSection = this.checkEditorSection();\n    switch (editorSection) {\n      case 'inline-start':\n        return 'ht_clone_left ht_clone_inline_start';\n      case 'bottom':\n        return 'ht_clone_bottom';\n      case 'bottom-inline-start-corner':\n        return 'ht_clone_bottom_left_corner ht_clone_bottom_inline_start_corner';\n      case 'top':\n        return 'ht_clone_top';\n      case 'top-inline-start-corner':\n        return 'ht_clone_top_left_corner ht_clone_top_inline_start_corner';\n      default:\n        return 'ht_clone_master';\n    }\n  }\n\n  /**\n   * Gets HTMLTableCellElement of the edited cell if exist.\n   *\n   * @returns {HTMLTableCellElement|null}\n   */\n  getEditedCell() {\n    return this.hot.getCell(this.row, this.col, true);\n  }\n\n  /**\n   * Returns name of the overlay, where editor is placed.\n   *\n   * @private\n   * @returns {string}\n   */\n  checkEditorSection() {\n    const totalRows = this.hot.countRows();\n    let section = '';\n    if (this.row < this.hot.getSettings().fixedRowsTop) {\n      if (this.col < this.hot.getSettings().fixedColumnsStart) {\n        section = 'top-inline-start-corner';\n      } else {\n        section = 'top';\n      }\n    } else if (this.hot.getSettings().fixedRowsBottom && this.row >= totalRows - this.hot.getSettings().fixedRowsBottom) {\n      if (this.col < this.hot.getSettings().fixedColumnsStart) {\n        section = 'bottom-inline-start-corner';\n      } else {\n        section = 'bottom';\n      }\n    } else if (this.col < this.hot.getSettings().fixedColumnsStart) {\n      section = 'inline-start';\n    }\n    return section;\n  }\n}\nmixin(BaseEditor, hooksRefRegisterer);","/**\n * autoResize - resizes a DOM element to the width and height of another DOM element\n *\n * Copyright 2014, Marcin Warpechowski\n * Licensed under the MIT license\n */\n\nexport function autoResize() {\n  var defaults = {\n      minHeight: 200,\n      maxHeight: 300,\n      minWidth: 100,\n      maxWidth: 300\n    },\n    el,\n    body = document.body,\n    text = document.createTextNode(''),\n    span = document.createElement('SPAN'),\n    observe = function (element, event, handler) {\n      element.addEventListener(event, handler, false);\n    },\n    unObserve = function (element, event, handler) {\n      element.removeEventListener(event, handler, false);\n    },\n    resize = function (newChar) {\n      var width, scrollHeight;\n      if (!newChar) {\n        newChar = \"\";\n      } else if (!/^[a-zA-Z \\.,\\\\\\/\\|0-9]$/.test(newChar)) {\n        newChar = \".\";\n      }\n      if (text.textContent !== void 0) {\n        text.textContent = el.value + newChar;\n      } else {\n        text.data = el.value + newChar; //IE8\n      }\n      // Won't expand the element size for displaying body as for example, `grid`, `inline-grid` or `flex` with \n      // `flex-direction` set as `column`.\n      span.style.position = 'absolute';\n      span.style.fontSize = getComputedStyle(el).fontSize;\n      span.style.fontFamily = getComputedStyle(el).fontFamily;\n      span.style.whiteSpace = \"pre\";\n      body.appendChild(span);\n      width = span.clientWidth + 2;\n      body.removeChild(span);\n      el.style.height = defaults.minHeight + 'px';\n      if (defaults.minWidth > width) {\n        el.style.width = defaults.minWidth + 'px';\n      } else if (width > defaults.maxWidth) {\n        el.style.width = defaults.maxWidth + 'px';\n      } else {\n        el.style.width = width + 'px';\n      }\n      scrollHeight = el.scrollHeight ? el.scrollHeight - 1 : 0;\n      if (defaults.minHeight > scrollHeight) {\n        el.style.height = defaults.minHeight + 'px';\n      } else if (defaults.maxHeight < scrollHeight) {\n        el.style.height = defaults.maxHeight + 'px';\n        el.style.overflowY = 'visible';\n      } else {\n        el.style.height = scrollHeight + 'px';\n      }\n    },\n    delayedResize = function () {\n      window.setTimeout(resize, 0);\n    },\n    extendDefaults = function (config) {\n      if (config && config.minHeight) {\n        if (config.minHeight == 'inherit') {\n          defaults.minHeight = el.clientHeight;\n        } else {\n          var minHeight = parseInt(config.minHeight);\n          if (!isNaN(minHeight)) {\n            defaults.minHeight = minHeight;\n          }\n        }\n      }\n      if (config && config.maxHeight) {\n        if (config.maxHeight == 'inherit') {\n          defaults.maxHeight = el.clientHeight;\n        } else {\n          var maxHeight = parseInt(config.maxHeight);\n          if (!isNaN(maxHeight)) {\n            defaults.maxHeight = maxHeight;\n          }\n        }\n      }\n      if (config && config.minWidth) {\n        if (config.minWidth == 'inherit') {\n          defaults.minWidth = el.clientWidth;\n        } else {\n          var minWidth = parseInt(config.minWidth);\n          if (!isNaN(minWidth)) {\n            defaults.minWidth = minWidth;\n          }\n        }\n      }\n      if (config && config.maxWidth) {\n        if (config.maxWidth == 'inherit') {\n          defaults.maxWidth = el.clientWidth;\n        } else {\n          var maxWidth = parseInt(config.maxWidth);\n          if (!isNaN(maxWidth)) {\n            defaults.maxWidth = maxWidth;\n          }\n        }\n      }\n      if (!span.firstChild) {\n        span.className = \"autoResize\";\n        span.style.display = 'inline-block';\n        span.appendChild(text);\n      }\n    },\n    init = function (el_, config, doObserve) {\n      el = el_;\n      extendDefaults(config);\n      if (el.nodeName == 'TEXTAREA') {\n        el.style.resize = 'none';\n        el.style.overflowY = '';\n        el.style.height = defaults.minHeight + 'px';\n        el.style.minWidth = defaults.minWidth + 'px';\n        el.style.maxWidth = defaults.maxWidth + 'px';\n        el.style.overflowY = 'hidden';\n      }\n      if (doObserve) {\n        observe(el, 'change', resize);\n        observe(el, 'cut', delayedResize);\n        observe(el, 'paste', delayedResize);\n        observe(el, 'drop', delayedResize);\n        observe(el, 'keydown', delayedResize);\n        observe(el, 'focus', resize);\n        observe(el, 'compositionstart', delayedResize);\n        observe(el, 'compositionupdate', delayedResize);\n        observe(el, 'compositionend', delayedResize);\n      }\n      resize();\n    };\n  function getComputedStyle(element) {\n    return element.currentStyle || document.defaultView.getComputedStyle(element);\n  }\n  return {\n    init: function (el_, config, doObserve) {\n      init(el_, config, doObserve);\n    },\n    unObserve: function () {\n      unObserve(el, 'change', resize);\n      unObserve(el, 'cut', delayedResize);\n      unObserve(el, 'paste', delayedResize);\n      unObserve(el, 'drop', delayedResize);\n      unObserve(el, 'keydown', delayedResize);\n      unObserve(el, 'focus', resize);\n      unObserve(el, 'compositionstart', delayedResize);\n      unObserve(el, 'compositionupdate', delayedResize);\n      unObserve(el, 'compositionend', delayedResize);\n    },\n    resize: resize\n  };\n}","import { getCaretPosition, setCaretPosition } from \"../../helpers/dom/element.mjs\";\n/**\n * Updates the textarea caret position depends on the action executed on that element.\n *\n * The following actions are supported:\n *  - 'home': Move the caret to the beginning of the current line;\n *  - 'end': Move the caret to the end of the current line.\n *\n * @param {'home'|'end'} actionName The action to perform that modifies the caret behavior.\n * @param {HTMLTextAreaElement} textareaElement The textarea element where the action is supposed to happen.\n */\nexport function updateCaretPosition(actionName, textareaElement) {\n  const caretPosition = getCaretPosition(textareaElement);\n  const textLines = textareaElement.value.split('\\n');\n  let newCaretPosition = caretPosition;\n  let lineStartIndex = 0;\n  for (let i = 0; i < textLines.length; i++) {\n    const textLine = textLines[i];\n    if (i !== 0) {\n      lineStartIndex += textLines[i - 1].length + 1;\n    }\n    const lineEndIndex = lineStartIndex + textLine.length;\n    if (actionName === 'home') {\n      newCaretPosition = lineStartIndex;\n    } else if (actionName === 'end') {\n      newCaretPosition = lineEndIndex;\n    }\n    if (caretPosition <= lineEndIndex) {\n      break;\n    }\n  }\n  setCaretPosition(textareaElement, newCaretPosition);\n}","import { BaseEditor, EDITOR_STATE } from \"../baseEditor/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { isEdge, isIOS } from \"../../helpers/browser.mjs\";\nimport { addClass, getComputedStyle, isThisHotChild, setCaretPosition, hasClass, removeClass, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { KEY_CODES } from \"../../helpers/unicode.mjs\";\nimport { autoResize } from \"../../3rdparty/autoResize/index.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nimport { SHORTCUTS_GROUP_NAVIGATION } from \"../../editorManager.mjs\";\nimport { SHORTCUTS_GROUP_EDITOR } from \"../baseEditor/baseEditor.mjs\";\nimport { updateCaretPosition } from \"./caretPositioner.mjs\";\nimport { A11Y_HIDDEN, A11Y_TABINDEX } from \"../../helpers/a11y.mjs\";\nconst EDITOR_VISIBLE_CLASS_NAME = 'ht_editor_visible';\nconst EDITOR_HIDDEN_CLASS_NAME = 'ht_editor_hidden';\nconst SHORTCUTS_GROUP = 'textEditor';\nexport const EDITOR_TYPE = 'text';\n\n/**\n * @private\n * @class TextEditor\n */\nexport class TextEditor extends BaseEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * @param {Core} instance The Handsontable instance.\n   */\n  constructor(instance) {\n    super(instance);\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n    this.eventManager = new EventManager(this);\n    /**\n     * Autoresize instance. Automagically resizes editor after changes.\n     *\n     * @private\n     * @type {autoResize}\n     */\n    this.autoResize = autoResize();\n    /**\n     * An TEXTAREA element.\n     *\n     * @private\n     * @type {HTMLTextAreaElement}\n     */\n    this.TEXTAREA = void 0;\n    /**\n     * Style declaration object of the TEXTAREA element.\n     *\n     * @private\n     * @type {CSSStyleDeclaration}\n     */\n    this.textareaStyle = void 0;\n    /**\n     * Parent element of the TEXTAREA.\n     *\n     * @private\n     * @type {HTMLDivElement}\n     */\n    this.TEXTAREA_PARENT = void 0;\n    /**\n     * Style declaration object of the TEXTAREA_PARENT element.\n     *\n     * @private\n     * @type {CSSStyleDeclaration}\n     */\n    this.textareaParentStyle = void 0;\n    /**\n     * Z-index class style for the editor.\n     *\n     * @private\n     * @type {string}\n     */\n    this.layerClass = void 0;\n    this.createElements();\n    this.bindEvents();\n    this.hot.addHookOnce('afterDestroy', () => this.destroy());\n  }\n\n  /**\n   * Gets current value from editable element.\n   *\n   * @returns {number}\n   */\n  getValue() {\n    return this.TEXTAREA.value;\n  }\n\n  /**\n   * Sets new value into editable element.\n   *\n   * @param {*} newValue The editor value.\n   */\n  setValue(newValue) {\n    this.TEXTAREA.value = newValue;\n  }\n\n  /**\n   * Opens the editor and adjust its size.\n   */\n  open() {\n    this.refreshDimensions(); // need it instantly, to prevent https://github.com/handsontable/handsontable/issues/348\n    this.showEditableElement();\n    const shortcutManager = this.hot.getShortcutManager();\n    shortcutManager.setActiveContextName('editor');\n    this.addHook('afterDocumentKeyDown', event => this.onAfterDocumentKeyDown(event));\n    this.registerShortcuts();\n  }\n\n  /**\n   * Closes the editor.\n   */\n  close() {\n    this.autoResize.unObserve();\n    if (isThisHotChild(this.hot.rootDocument.activeElement, this.hot.rootElement)) {\n      this.hot.listen(); // don't refocus the table if user focused some cell outside of HT on purpose\n    }\n\n    this.hideEditableElement();\n    this.unregisterShortcuts();\n    this.removeHooksByKey('afterDocumentKeyDown');\n  }\n\n  /**\n   * Prepares editor's meta data.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    const previousState = this.state;\n    super.prepare(row, col, prop, td, value, cellProperties);\n    if (!cellProperties.readOnly) {\n      this.refreshDimensions(true);\n      const {\n        allowInvalid\n      } = cellProperties;\n      if (allowInvalid) {\n        // Remove an empty space from textarea (added by copyPaste plugin to make copy/paste\n        // functionality work with IME)\n        this.TEXTAREA.value = '';\n      }\n      if (previousState !== EDITOR_STATE.FINISHED) {\n        this.hideEditableElement();\n      }\n    }\n  }\n\n  /**\n   * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n   *\n   * @param {*} newInitialValue The editor initial value.\n   * @param {Event} event The keyboard event object.\n   */\n  beginEditing(newInitialValue, event) {\n    if (this.state !== EDITOR_STATE.VIRGIN) {\n      return;\n    }\n    this.TEXTAREA.value = ''; // Remove an empty space from textarea (added by copyPaste plugin to make copy/paste functionality work with IME).\n    super.beginEditing(newInitialValue, event);\n  }\n\n  /**\n   * Sets focus state on the select element.\n   */\n  focus() {\n    // For IME editor textarea element must be focused using \".select\" method.\n    // Using \".focus\" browser automatically scroll into the focused element which\n    // is undesired effect.\n    this.TEXTAREA.select();\n    setCaretPosition(this.TEXTAREA, this.TEXTAREA.value.length);\n  }\n\n  /**\n   * Creates an editor's elements and adds necessary CSS classnames.\n   */\n  createElements() {\n    const {\n      rootDocument\n    } = this.hot;\n    this.TEXTAREA = rootDocument.createElement('TEXTAREA');\n\n    // Makes the element recognizable by Hot as its own\n    // component's element.\n    setAttribute(this.TEXTAREA, [['data-hot-input', ''], A11Y_TABINDEX(-1)]);\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_HIDDEN()]);\n    }\n    addClass(this.TEXTAREA, 'handsontableInput');\n    this.textareaStyle = this.TEXTAREA.style;\n    this.textareaStyle.width = 0;\n    this.textareaStyle.height = 0;\n    this.textareaStyle.overflowY = 'visible';\n    this.TEXTAREA_PARENT = rootDocument.createElement('DIV');\n    addClass(this.TEXTAREA_PARENT, 'handsontableInputHolder');\n    if (hasClass(this.TEXTAREA_PARENT, this.layerClass)) {\n      removeClass(this.TEXTAREA_PARENT, this.layerClass);\n    }\n    addClass(this.TEXTAREA_PARENT, EDITOR_HIDDEN_CLASS_NAME);\n    this.textareaParentStyle = this.TEXTAREA_PARENT.style;\n    this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);\n    this.hot.rootElement.appendChild(this.TEXTAREA_PARENT);\n  }\n\n  /**\n   * Moves an editable element out of the viewport, but element must be able to hold focus for IME support.\n   *\n   * @private\n   */\n  hideEditableElement() {\n    if (isEdge()) {\n      this.textareaStyle.textIndent = '-99999px';\n    }\n    this.textareaStyle.overflowY = 'visible';\n    this.textareaParentStyle.opacity = '0';\n    this.textareaParentStyle.height = '1px';\n    removeClass(this.TEXTAREA_PARENT, this.layerClass);\n    addClass(this.TEXTAREA_PARENT, EDITOR_HIDDEN_CLASS_NAME);\n  }\n\n  /**\n   * Resets an editable element position.\n   *\n   * @private\n   */\n  showEditableElement() {\n    this.textareaParentStyle.height = '';\n    this.textareaParentStyle.overflow = '';\n    this.textareaParentStyle.position = '';\n    this.textareaParentStyle[this.hot.isRtl() ? 'left' : 'right'] = 'auto';\n    this.textareaParentStyle.opacity = '1';\n    this.textareaStyle.textIndent = '';\n    this.textareaStyle.overflowY = 'hidden';\n    const childNodes = this.TEXTAREA_PARENT.childNodes;\n    let hasClassHandsontableEditor = false;\n    rangeEach(childNodes.length - 1, index => {\n      const childNode = childNodes[index];\n      if (hasClass(childNode, 'handsontableEditor')) {\n        hasClassHandsontableEditor = true;\n        return false;\n      }\n    });\n    if (hasClass(this.TEXTAREA_PARENT, EDITOR_HIDDEN_CLASS_NAME)) {\n      removeClass(this.TEXTAREA_PARENT, EDITOR_HIDDEN_CLASS_NAME);\n    }\n    if (hasClassHandsontableEditor) {\n      this.layerClass = EDITOR_VISIBLE_CLASS_NAME;\n      addClass(this.TEXTAREA_PARENT, this.layerClass);\n    } else {\n      this.layerClass = this.getEditedCellsLayerClass();\n      addClass(this.TEXTAREA_PARENT, this.layerClass);\n    }\n  }\n\n  /**\n   * Refreshes editor's value using source data.\n   *\n   * @private\n   */\n  refreshValue() {\n    const physicalRow = this.hot.toPhysicalRow(this.row);\n    const sourceData = this.hot.getSourceDataAtCell(physicalRow, this.col);\n    this.originalValue = sourceData;\n    this.setValue(sourceData);\n    this.refreshDimensions();\n  }\n\n  /**\n   * Refreshes editor's size and position.\n   *\n   * @private\n   * @param {boolean} force Indicates if the refreshing editor dimensions should be triggered.\n   */\n  refreshDimensions() {\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (this.state !== EDITOR_STATE.EDITING && !force) {\n      return;\n    }\n    this.TD = this.getEditedCell();\n\n    // TD is outside of the viewport.\n    if (!this.TD) {\n      if (!force) {\n        this.close(); // TODO shouldn't it be this.finishEditing() ?\n      }\n\n      return;\n    }\n    const {\n      top,\n      start,\n      width,\n      maxWidth,\n      height,\n      maxHeight\n    } = this.getEditedCellRect();\n    this.textareaParentStyle.top = `${top}px`;\n    this.textareaParentStyle[this.hot.isRtl() ? 'right' : 'left'] = `${start}px`;\n    this.showEditableElement();\n    const cellComputedStyle = getComputedStyle(this.TD, this.hot.rootWindow);\n    this.TEXTAREA.style.fontSize = cellComputedStyle.fontSize;\n    this.TEXTAREA.style.fontFamily = cellComputedStyle.fontFamily;\n    this.TEXTAREA.style.backgroundColor = this.TD.style.backgroundColor;\n    const textareaComputedStyle = getComputedStyle(this.TEXTAREA);\n    const horizontalPadding = parseInt(textareaComputedStyle.paddingLeft, 10) + parseInt(textareaComputedStyle.paddingRight, 10);\n    const verticalPadding = parseInt(textareaComputedStyle.paddingTop, 10) + parseInt(textareaComputedStyle.paddingBottom, 10);\n    const finalWidth = width - horizontalPadding;\n    const finalHeight = height - verticalPadding;\n    const finalMaxWidth = maxWidth - horizontalPadding;\n    const finalMaxHeight = maxHeight - verticalPadding;\n    this.autoResize.init(this.TEXTAREA, {\n      minWidth: Math.min(finalWidth, finalMaxWidth),\n      minHeight: Math.min(finalHeight, finalMaxHeight),\n      // TEXTAREA should never be wider than visible part of the viewport (should not cover the scrollbar)\n      maxWidth: finalMaxWidth,\n      maxHeight: finalMaxHeight\n    }, true);\n  }\n\n  /**\n   * Binds events and hooks.\n   *\n   * @private\n   */\n  bindEvents() {\n    if (isIOS()) {\n      // on iOS after click \"Done\" the edit isn't hidden by default, so we need to handle it manually.\n      this.eventManager.addEventListener(this.TEXTAREA, 'focusout', () => this.finishEditing(false));\n    }\n    this.addHook('afterScrollHorizontally', () => this.refreshDimensions());\n    this.addHook('afterScrollVertically', () => this.refreshDimensions());\n    this.addHook('afterColumnResize', () => {\n      this.refreshDimensions();\n      if (this.state === EDITOR_STATE.EDITING) {\n        this.focus();\n      }\n    });\n    this.addHook('afterRowResize', () => {\n      this.refreshDimensions();\n      if (this.state === EDITOR_STATE.EDITING) {\n        this.focus();\n      }\n    });\n  }\n\n  /**\n   * Ugly hack for autocompleteEditor.\n   *\n   * @private\n   */\n  allowKeyEventPropagation() {}\n\n  /**\n   * Destroys the internal event manager and clears attached hooks.\n   *\n   * @private\n   */\n  destroy() {\n    this.eventManager.destroy();\n    this.clearHooks();\n  }\n\n  /**\n   * Register shortcuts responsible for handling editor.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    const contextConfig = {\n      runOnlyIf: () => isDefined(this.hot.getSelected()),\n      group: SHORTCUTS_GROUP\n    };\n    const insertNewLine = () => {\n      this.hot.rootDocument.execCommand('insertText', false, '\\n');\n    };\n    editorContext.addShortcuts([{\n      keys: [['Tab']],\n      // TODO: Duplicated part of code (callback to shortcut).\n      callback: event => {\n        const tableMeta = this.hot.getSettings();\n        const tabMoves = typeof tableMeta.tabMoves === 'function' ? tableMeta.tabMoves(event) : tableMeta.tabMoves;\n        this.hot.selection.transformStart(tabMoves.row, tabMoves.col, true);\n      }\n    }, {\n      keys: [['Shift', 'Tab']],\n      // TODO: Duplicated part of code (callback to shortcut).\n      callback: event => {\n        const tableMeta = this.hot.getSettings();\n        const tabMoves = typeof tableMeta.tabMoves === 'function' ? tableMeta.tabMoves(event) : tableMeta.tabMoves;\n        this.hot.selection.transformStart(-tabMoves.row, -tabMoves.col);\n      }\n    }, {\n      keys: [['Control', 'Enter']],\n      callback: () => {\n        insertNewLine();\n        return false; // Will block closing editor.\n      },\n\n      runOnlyIf: event => !this.hot.selection.isMultiple() &&\n      // We trigger a data population for multiple selection.\n      // catch CTRL but not right ALT (which in some systems triggers ALT+CTRL)\n      !event.altKey\n    }, {\n      keys: [['Meta', 'Enter']],\n      callback: () => {\n        insertNewLine();\n        return false; // Will block closing editor.\n      },\n\n      runOnlyIf: () => !this.hot.selection.isMultiple() // We trigger a data population for multiple selection.\n    }, {\n      keys: [['Alt', 'Enter']],\n      callback: () => {\n        insertNewLine();\n        return false; // Will block closing editor.\n      }\n    }, {\n      // TODO: Duplicated part of code (callback to shortcut)\n      keys: [['PageUp']],\n      callback: () => {\n        this.hot.selection.transformStart(-this.hot.countVisibleRows(), 0);\n      }\n    }, {\n      // TODO: Duplicated part of code (callback to shortcut)\n      keys: [['PageDown']],\n      callback: () => {\n        this.hot.selection.transformStart(this.hot.countVisibleRows(), 0);\n      }\n    }, {\n      keys: [['Home']],\n      callback: (event, _ref) => {\n        let [keyName] = _ref;\n        updateCaretPosition(keyName, this.TEXTAREA);\n      }\n    }, {\n      keys: [['End']],\n      callback: (event, _ref2) => {\n        let [keyName] = _ref2;\n        updateCaretPosition(keyName, this.TEXTAREA);\n      }\n    }, {\n      keys: [['Control/Meta', 'Z']],\n      preventDefault: false,\n      callback: () => {\n        this.hot._registerTimeout(() => {\n          this.autoResize.resize();\n        }, 10);\n      }\n    }, {\n      keys: [['Control/Meta', 'Shift', 'Z']],\n      preventDefault: false,\n      callback: () => {\n        this.hot._registerTimeout(() => {\n          this.autoResize.resize();\n        }, 10);\n      }\n    }], contextConfig);\n  }\n\n  /**\n   * Unregister shortcuts responsible for handling editor.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP_NAVIGATION);\n    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP);\n    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP_EDITOR);\n  }\n\n  /**\n   * OnAfterDocumentKeyDown callback.\n   *\n   * @private\n   * @param {KeyboardEvent} event The keyboard event object.\n   */\n  onAfterDocumentKeyDown(event) {\n    const arrowKeyCodes = [KEY_CODES.ARROW_UP, KEY_CODES.ARROW_RIGHT, KEY_CODES.ARROW_DOWN, KEY_CODES.ARROW_LEFT];\n    if (arrowKeyCodes.indexOf(event.keyCode) === -1) {\n      this.autoResize.resize(String.fromCharCode(event.keyCode));\n    }\n  }\n}","import \"core-js/modules/es.array.push.js\";\n/**\n * Adds appropriate CSS class to table cell, based on cellProperties.\n */\nimport { addClass, removeAttribute, removeClass, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { A11Y_INVALID, A11Y_READONLY } from \"../../helpers/a11y.mjs\";\nexport const RENDERER_TYPE = 'base';\n\n/**\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function baseRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  const ariaEnabled = cellProperties.ariaTags;\n  const classesToAdd = [];\n  const classesToRemove = [];\n  const attributesToRemove = [];\n  const attributesToAdd = [];\n  if (cellProperties.className) {\n    addClass(TD, cellProperties.className);\n  }\n  if (cellProperties.readOnly) {\n    classesToAdd.push(cellProperties.readOnlyCellClassName);\n    if (ariaEnabled) {\n      attributesToAdd.push(A11Y_READONLY());\n    }\n  } else if (ariaEnabled) {\n    attributesToRemove.push(A11Y_READONLY()[0]);\n  }\n  if (cellProperties.valid === false && cellProperties.invalidCellClassName) {\n    classesToAdd.push(cellProperties.invalidCellClassName);\n    if (ariaEnabled) {\n      attributesToAdd.push(A11Y_INVALID());\n    }\n  } else {\n    classesToRemove.push(cellProperties.invalidCellClassName);\n    if (ariaEnabled) {\n      attributesToRemove.push(A11Y_INVALID()[0]);\n    }\n  }\n  if (cellProperties.wordWrap === false && cellProperties.noWordWrapClassName) {\n    classesToAdd.push(cellProperties.noWordWrapClassName);\n  }\n  if (!value && cellProperties.placeholder) {\n    classesToAdd.push(cellProperties.placeholderCellClassName);\n  }\n  removeClass(TD, classesToRemove);\n  addClass(TD, classesToAdd);\n  removeAttribute(TD, attributesToRemove);\n  setAttribute(TD, attributesToAdd);\n}\nbaseRenderer.RENDERER_TYPE = RENDERER_TYPE;","import { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport { empty, fastInnerText } from \"../../helpers/dom/element.mjs\";\nimport { stringify } from \"../../helpers/mixed.mjs\";\nexport const RENDERER_TYPE = 'text';\n\n/**\n * Default text renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function textRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  let escaped = value;\n  if (!escaped && cellProperties.placeholder) {\n    escaped = cellProperties.placeholder;\n  }\n  escaped = stringify(escaped);\n  if (cellProperties.trimWhitespace) {\n    escaped = escaped.trim();\n  }\n  if (cellProperties.rendererTemplate) {\n    empty(TD);\n    const TEMPLATE = instance.rootDocument.createElement('TEMPLATE');\n    TEMPLATE.setAttribute('bind', '{{}}');\n    TEMPLATE.innerHTML = cellProperties.rendererTemplate;\n    HTMLTemplateElement.decorate(TEMPLATE);\n    TEMPLATE.model = instance.getSourceDataAtRow(row);\n    TD.appendChild(TEMPLATE);\n  } else {\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n    fastInnerText(TD, escaped);\n  }\n}\ntextRenderer.RENDERER_TYPE = RENDERER_TYPE;","import { TextEditor } from \"../../editors/textEditor/index.mjs\";\nimport { textRenderer } from \"../../renderers/textRenderer/index.mjs\";\nexport const CELL_TYPE = 'text';\nexport const TextCellType = {\n  CELL_TYPE,\n  editor: TextEditor,\n  renderer: textRenderer\n};","import Core from \"./core.mjs\";\nimport { rootInstanceSymbol } from \"./utils/rootInstance.mjs\";\nimport { metaSchemaFactory } from \"./dataMap/index.mjs\";\nimport Hooks from \"./pluginHooks.mjs\"; // FIXME: Bug in eslint-plugin-import: https://github.com/benmosher/eslint-plugin-import/issues/1883\n/* eslint-disable import/named */\nimport { dictionaryKeys, getTranslatedPhrase, registerLanguageDictionary, getLanguagesDictionaries, getLanguageDictionary } from \"./i18n/registry.mjs\";\n/* eslint-enable import/named */\nimport { registerCellType } from \"./cellTypes/registry.mjs\";\nimport { TextCellType } from \"./cellTypes/textType/index.mjs\";\nimport { BaseEditor } from \"./editors/baseEditor/index.mjs\";\nimport { CellCoords, CellRange } from \"./3rdparty/walkontable/src/index.mjs\"; // register default mandatory cell type for the Base package\nregisterCellType(TextCellType);\n\n// export the `BaseEditor` class to the Handsontable global namespace\nHandsontable.editors = {\n  BaseEditor\n};\n\n/**\n * @param {HTMLElement} rootElement The element to which the Handsontable instance is injected.\n * @param {object} userSettings The user defined options.\n * @returns {Core}\n */\nfunction Handsontable(rootElement, userSettings) {\n  const instance = new Core(rootElement, userSettings || {}, rootInstanceSymbol);\n  instance.init();\n  return instance;\n}\nHandsontable.Core = function (rootElement) {\n  let userSettings = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Core(rootElement, userSettings, rootInstanceSymbol);\n};\nHandsontable.DefaultSettings = metaSchemaFactory();\nHandsontable.hooks = Hooks.getSingleton();\nHandsontable.CellCoords = CellCoords;\nHandsontable.CellRange = CellRange;\nHandsontable.packageName = 'handsontable';\nHandsontable.buildDate = \"24/10/2023 10:51:05\";\nHandsontable.version = \"13.1.0\";\nHandsontable.languages = {\n  dictionaryKeys,\n  getLanguageDictionary,\n  getLanguagesDictionaries,\n  registerLanguageDictionary,\n  getTranslatedPhrase\n};\nexport { CellCoords, CellRange };\nexport default Handsontable;","import Handsontable from 'handsontable/base';\nimport Vue from 'vue';\n\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty$1(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _typeof$1(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof$1 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof$1(o);\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _defineProperty$1(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nvar unassignedPropSymbol = Symbol('unassigned');\nvar bulkComponentContainer = null;\n/**\r\n * Message for the warning thrown if the Handsontable instance has been destroyed.\r\n */\nvar HOT_DESTROYED_WARNING = 'The Handsontable instance bound to this component was destroyed and cannot be' + ' used properly.';\n/**\r\n * Private method to ensure the table is not calling `updateSettings` after editing cells.\r\n * @private\r\n */\nfunction preventInternalEditWatch(component) {\n  if (component.hotInstance) {\n    component.hotInstance.addHook('beforeChange', function () {\n      component.__internalEdit = true;\n    });\n    component.hotInstance.addHook('beforeCreateRow', function () {\n      component.__internalEdit = true;\n    });\n    component.hotInstance.addHook('beforeCreateCol', function () {\n      component.__internalEdit = true;\n    });\n    component.hotInstance.addHook('beforeRemoveRow', function () {\n      component.__internalEdit = true;\n    });\n    component.hotInstance.addHook('beforeRemoveCol', function () {\n      component.__internalEdit = true;\n    });\n  }\n}\n/**\r\n * Generate an object containing all the available Handsontable properties and plugin hooks.\r\n *\r\n * @param {String} source Source for the factory (either 'HotTable' or 'HotColumn').\r\n * @returns {Object}\r\n */\nfunction propFactory(source) {\n  var registeredHooks = Handsontable.hooks.getRegistered();\n  var propSchema = {};\n  Object.assign(propSchema, Handsontable.DefaultSettings);\n  for (var prop in propSchema) {\n    propSchema[prop] = {\n      \"default\": unassignedPropSymbol\n    };\n  }\n  for (var i = 0; i < registeredHooks.length; i++) {\n    propSchema[registeredHooks[i]] = {\n      \"default\": unassignedPropSymbol\n    };\n  }\n  propSchema.settings = {\n    \"default\": unassignedPropSymbol\n  };\n  if (source === 'HotTable') {\n    propSchema.id = {\n      type: String,\n      \"default\": 'hot-' + Math.random().toString(36).substring(5)\n    };\n    propSchema.wrapperRendererCacheSize = {\n      type: Number,\n      \"default\": 3000\n    };\n  }\n  return propSchema;\n}\n/**\r\n * Filter out all of the unassigned props, and return only the one passed to the component.\r\n *\r\n * @param {Object} props Object containing all the possible props.\r\n * @returns {Object} Object containing only used props.\r\n */\nfunction filterPassedProps(props) {\n  var filteredProps = {};\n  var columnSettingsProp = props['settings'];\n  if (columnSettingsProp !== unassignedPropSymbol) {\n    for (var propName in columnSettingsProp) {\n      if (columnSettingsProp.hasOwnProperty(propName) && columnSettingsProp[propName] !== unassignedPropSymbol) {\n        filteredProps[propName] = columnSettingsProp[propName];\n      }\n    }\n  }\n  for (var _propName in props) {\n    if (props.hasOwnProperty(_propName) && _propName !== 'settings' && props[_propName] !== unassignedPropSymbol) {\n      filteredProps[_propName] = props[_propName];\n    }\n  }\n  return filteredProps;\n}\n/**\r\n * Prepare the settings object to be used as the settings for Handsontable, based on the props provided to the component.\r\n *\r\n * @param {HotTableProps} props The props passed to the component.\r\n * @param {Handsontable.GridSettings} currentSettings The current Handsontable settings.\r\n * @returns {Handsontable.GridSettings} An object containing the properties, ready to be used within Handsontable.\r\n */\nfunction prepareSettings(props, currentSettings) {\n  var assignedProps = filterPassedProps(props);\n  var hotSettingsInProps = props.settings ? props.settings : assignedProps;\n  var additionalHotSettingsInProps = props.settings ? assignedProps : null;\n  var newSettings = {};\n  for (var key in hotSettingsInProps) {\n    if (hotSettingsInProps.hasOwnProperty(key) && hotSettingsInProps[key] !== void 0 && (currentSettings && key !== 'data' ? !simpleEqual(currentSettings[key], hotSettingsInProps[key]) : true)) {\n      newSettings[key] = hotSettingsInProps[key];\n    }\n  }\n  for (var _key in additionalHotSettingsInProps) {\n    if (additionalHotSettingsInProps.hasOwnProperty(_key) && _key !== 'id' && _key !== 'settings' && _key !== 'wrapperRendererCacheSize' && additionalHotSettingsInProps[_key] !== void 0 && (currentSettings && _key !== 'data' ? !simpleEqual(currentSettings[_key], additionalHotSettingsInProps[_key]) : true)) {\n      newSettings[_key] = additionalHotSettingsInProps[_key];\n    }\n  }\n  return newSettings;\n}\n/**\r\n * Get the VNode element with the provided type attribute from the component slots.\r\n *\r\n * @param {Array} componentSlots Array of slots from a component.\r\n * @param {String} type Type of the child component. Either `hot-renderer` or `hot-editor`.\r\n * @returns {Object|null} The VNode of the child component (or `null` when nothing's found).\r\n */\nfunction findVNodeByType(componentSlots, type) {\n  var componentVNode = null;\n  componentSlots.every(function (slot, index) {\n    if (slot.data && slot.data.attrs && slot.data.attrs[type] !== void 0) {\n      componentVNode = slot;\n      return false;\n    }\n    return true;\n  });\n  return componentVNode;\n}\n/**\r\n * Get all `hot-column` component instances from the provided children array.\r\n *\r\n * @param {Array} children Array of children from a component.\r\n * @returns {Array} Array of `hot-column` instances.\r\n */\nfunction getHotColumnComponents(children) {\n  return children.filter(function (child) {\n    return child.$options.name === 'HotColumn';\n  });\n}\n/**\r\n * Create an instance of the Vue Component based on the provided VNode.\r\n *\r\n * @param {Object} vNode VNode element to be turned into a component instance.\r\n * @param {Object} parent Instance of the component to be marked as a parent of the newly created instance.\r\n * @param {Object} props Props to be passed to the new instance.\r\n * @param {Object} data Data to be passed to the new instance.\r\n */\nfunction createVueComponent(vNode, parent, props, data) {\n  var ownerDocument = parent.$el ? parent.$el.ownerDocument : document;\n  var settings = {\n    propsData: props,\n    parent: parent,\n    data: data\n  };\n  if (!bulkComponentContainer) {\n    bulkComponentContainer = ownerDocument.createElement('DIV');\n    bulkComponentContainer.id = 'vueHotComponents';\n    ownerDocument.body.appendChild(bulkComponentContainer);\n  }\n  var componentContainer = ownerDocument.createElement('DIV');\n  bulkComponentContainer.appendChild(componentContainer);\n  return new vNode.componentOptions.Ctor(settings).$mount(componentContainer);\n}\n/**\r\n * Compare two objects using `JSON.stringify`.\r\n * *Note: * As it's using the stringify function to compare objects, the property order in both objects is\r\n * important. It will return `false` for the same objects, if they're defined in a different order.\r\n *\r\n * @param {object} objectA First object to compare.\r\n * @param {object} objectB Second object to compare.\r\n * @returns {boolean} `true` if they're the same, `false` otherwise.\r\n */\nfunction simpleEqual(objectA, objectB) {\n  return JSON.stringify(objectA) === JSON.stringify(objectB);\n}\n\nvar version=\"13.1.0\";\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, module) {\n\treturn module = { exports: {} }, fn(module, module.exports), module.exports;\n}\n\nvar lru = createCommonjsModule(function (module, exports) {\n  /**\n   * A doubly linked list-based Least Recently Used (LRU) cache. Will keep most\n   * recently used items while discarding least recently used items when its limit\n   * is reached.\n   *\n   * Licensed under MIT. Copyright (c) 2010 Rasmus Andersson <http://hunch.se/>\n   * See README.md for details.\n   *\n   * Illustration of the design:\n   *\n   *       entry             entry             entry             entry\n   *       ______            ______            ______            ______\n   *      | head |.newer => |      |.newer => |      |.newer => | tail |\n   *      |  A   |          |  B   |          |  C   |          |  D   |\n   *      |______| <= older.|______| <= older.|______| <= older.|______|\n   *\n   *  removed  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  <--  added\n   */\n  (function (g, f) {\n    var e = exports ;\n    f(e);\n  })(commonjsGlobal, function (exports) {\n    var NEWER = Symbol('newer');\n    var OLDER = Symbol('older');\n    function LRUMap(limit, entries) {\n      if (typeof limit !== 'number') {\n        // called as (entries)\n        entries = limit;\n        limit = 0;\n      }\n      this.size = 0;\n      this.limit = limit;\n      this.oldest = this.newest = undefined;\n      this._keymap = new Map();\n      if (entries) {\n        this.assign(entries);\n        if (limit < 1) {\n          this.limit = this.size;\n        }\n      }\n    }\n    exports.LRUMap = LRUMap;\n    function Entry(key, value) {\n      this.key = key;\n      this.value = value;\n      this[NEWER] = undefined;\n      this[OLDER] = undefined;\n    }\n    LRUMap.prototype._markEntryAsUsed = function (entry) {\n      if (entry === this.newest) {\n        // Already the most recenlty used entry, so no need to update the list\n        return;\n      }\n      // HEAD--------------TAIL\n      //   <.older   .newer>\n      //  <--- add direction --\n      //   A  B  C  <D>  E\n      if (entry[NEWER]) {\n        if (entry === this.oldest) {\n          this.oldest = entry[NEWER];\n        }\n        entry[NEWER][OLDER] = entry[OLDER]; // C <-- E.\n      }\n\n      if (entry[OLDER]) {\n        entry[OLDER][NEWER] = entry[NEWER]; // C. --> E\n      }\n\n      entry[NEWER] = undefined; // D --x\n      entry[OLDER] = this.newest; // D. --> E\n      if (this.newest) {\n        this.newest[NEWER] = entry; // E. <-- D\n      }\n\n      this.newest = entry;\n    };\n    LRUMap.prototype.assign = function (entries) {\n      var entry,\n        limit = this.limit || Number.MAX_VALUE;\n      this._keymap.clear();\n      var it = entries[Symbol.iterator]();\n      for (var itv = it.next(); !itv.done; itv = it.next()) {\n        var e = new Entry(itv.value[0], itv.value[1]);\n        this._keymap.set(e.key, e);\n        if (!entry) {\n          this.oldest = e;\n        } else {\n          entry[NEWER] = e;\n          e[OLDER] = entry;\n        }\n        entry = e;\n        if (limit-- == 0) {\n          throw new Error('overflow');\n        }\n      }\n      this.newest = entry;\n      this.size = this._keymap.size;\n    };\n    LRUMap.prototype.get = function (key) {\n      // First, find our cache entry\n      var entry = this._keymap.get(key);\n      if (!entry) return; // Not cached. Sorry.\n      // As <key> was found in the cache, register it as being requested recently\n      this._markEntryAsUsed(entry);\n      return entry.value;\n    };\n    LRUMap.prototype.set = function (key, value) {\n      var entry = this._keymap.get(key);\n      if (entry) {\n        // update existing\n        entry.value = value;\n        this._markEntryAsUsed(entry);\n        return this;\n      }\n\n      // new entry\n      this._keymap.set(key, entry = new Entry(key, value));\n      if (this.newest) {\n        // link previous tail to the new tail (entry)\n        this.newest[NEWER] = entry;\n        entry[OLDER] = this.newest;\n      } else {\n        // we're first in -- yay\n        this.oldest = entry;\n      }\n\n      // add new entry to the end of the linked list -- it's now the freshest entry.\n      this.newest = entry;\n      ++this.size;\n      if (this.size > this.limit) {\n        // we hit the limit -- remove the head\n        this.shift();\n      }\n      return this;\n    };\n    LRUMap.prototype.shift = function () {\n      // todo: handle special case when limit == 1\n      var entry = this.oldest;\n      if (entry) {\n        if (this.oldest[NEWER]) {\n          // advance the list\n          this.oldest = this.oldest[NEWER];\n          this.oldest[OLDER] = undefined;\n        } else {\n          // the cache is exhausted\n          this.oldest = undefined;\n          this.newest = undefined;\n        }\n        // Remove last strong reference to <entry> and remove links from the purged\n        // entry being returned:\n        entry[NEWER] = entry[OLDER] = undefined;\n        this._keymap[\"delete\"](entry.key);\n        --this.size;\n        return [entry.key, entry.value];\n      }\n    };\n\n    // ----------------------------------------------------------------------------\n    // Following code is optional and can be removed without breaking the core\n    // functionality.\n    LRUMap.prototype.has = function (key) {\n      return this._keymap.has(key);\n    };\n  });\n});\nvar lru_1 = lru.LRUMap;\n\nvar HotTable = {\n  name: 'HotTable',\n  props: propFactory('HotTable'),\n  watch: {\n    mergedHotSettings: function mergedHotSettings(value) {\n      if (!this.hotInstance || value === void 0) {\n        return;\n      }\n      if (value.data) {\n        if (this.hotInstance.isColumnModificationAllowed() || !this.hotInstance.isColumnModificationAllowed() && this.hotInstance.countSourceCols() === this.miscCache.currentSourceColumns) {\n          // If the dataset dimensions change, update the index mappers.\n          this.matchHotMappersSize();\n          // Data is automatically synchronized by reference.\n          delete value.data;\n        }\n      }\n      // If there are another options changed, update the HOT settings, render the table otherwise.\n      if (Object.keys(value).length) {\n        this.hotInstance.updateSettings(value);\n      } else {\n        this.hotInstance.render();\n      }\n      this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n    }\n  },\n  data: function data() {\n    var thisComponent = this;\n    var rendererCache = new lru_1(this.wrapperRendererCacheSize);\n    // Make the LRU cache destroy each removed component\n    rendererCache.shift = function () {\n      var entry = lru_1.prototype.shift.call(this);\n      entry[1].component.$destroy();\n      return entry;\n    };\n    return {\n      __internalEdit: false,\n      miscCache: {\n        currentSourceColumns: null\n      },\n      __hotInstance: null,\n      columnSettings: null,\n      rendererCache: rendererCache,\n      editorCache: new Map(),\n      get hotInstance() {\n        if (!thisComponent.__hotInstance || thisComponent.__hotInstance && !thisComponent.__hotInstance.isDestroyed) {\n          // Will return the Handsontable instance or `null` if it's not yet been created.\n          return thisComponent.__hotInstance;\n        } else {\n          console.warn(HOT_DESTROYED_WARNING);\n          return null;\n        }\n      },\n      set hotInstance(hotInstance) {\n        thisComponent.__hotInstance = hotInstance;\n      }\n    };\n  },\n  computed: {\n    mergedHotSettings: function mergedHotSettings() {\n      return prepareSettings(this.$props, this.hotInstance ? this.hotInstance.getSettings() : void 0);\n    }\n  },\n  methods: {\n    /**\r\n     * Initialize Handsontable.\r\n     */\n    hotInit: function hotInit() {\n      var globalRendererVNode = this.getGlobalRendererVNode();\n      var globalEditorVNode = this.getGlobalEditorVNode();\n      var newSettings = prepareSettings(this.$props);\n      newSettings.columns = this.columnSettings ? this.columnSettings : newSettings.columns;\n      if (globalEditorVNode) {\n        newSettings.editor = this.getEditorClass(globalEditorVNode, this);\n        globalEditorVNode.child.$destroy();\n      }\n      if (globalRendererVNode) {\n        newSettings.renderer = this.getRendererWrapper(globalRendererVNode, this);\n        globalRendererVNode.child.$destroy();\n      }\n      this.hotInstance = new Handsontable.Core(this.$el, newSettings);\n      this.hotInstance.init();\n      preventInternalEditWatch(this);\n      this.miscCache.currentSourceColumns = this.hotInstance.countSourceCols();\n    },\n    matchHotMappersSize: function matchHotMappersSize() {\n      var _this = this;\n      if (!this.hotInstance) {\n        return;\n      }\n      var data = this.hotInstance.getSourceData();\n      var rowsToRemove = [];\n      var columnsToRemove = [];\n      var indexMapperRowCount = this.hotInstance.rowIndexMapper.getNumberOfIndexes();\n      var isColumnModificationAllowed = this.hotInstance.isColumnModificationAllowed();\n      var indexMapperColumnCount = 0;\n      if (data && data.length !== indexMapperRowCount) {\n        if (data.length < indexMapperRowCount) {\n          for (var r = data.length; r < indexMapperRowCount; r++) {\n            rowsToRemove.push(r);\n          }\n        }\n      }\n      if (isColumnModificationAllowed) {\n        var _data$;\n        indexMapperColumnCount = this.hotInstance.columnIndexMapper.getNumberOfIndexes();\n        if (data && data[0] && ((_data$ = data[0]) === null || _data$ === void 0 ? void 0 : _data$.length) !== indexMapperColumnCount) {\n          if (data[0].length < indexMapperColumnCount) {\n            for (var c = data[0].length; c < indexMapperColumnCount; c++) {\n              columnsToRemove.push(c);\n            }\n          }\n        }\n      }\n      this.hotInstance.batch(function () {\n        if (rowsToRemove.length > 0) {\n          _this.hotInstance.rowIndexMapper.removeIndexes(rowsToRemove);\n        } else {\n          _this.hotInstance.rowIndexMapper.insertIndexes(indexMapperRowCount - 1, data.length - indexMapperRowCount);\n        }\n        if (isColumnModificationAllowed && data.length !== 0) {\n          if (columnsToRemove.length > 0) {\n            _this.hotInstance.columnIndexMapper.removeIndexes(columnsToRemove);\n          } else {\n            _this.hotInstance.columnIndexMapper.insertIndexes(indexMapperColumnCount - 1, data[0].length - indexMapperColumnCount);\n          }\n        }\n      });\n    },\n    getGlobalRendererVNode: function getGlobalRendererVNode() {\n      var hotTableSlots = this.$slots[\"default\"] || [];\n      return findVNodeByType(hotTableSlots, 'hot-renderer');\n    },\n    getGlobalEditorVNode: function getGlobalEditorVNode() {\n      var hotTableSlots = this.$slots[\"default\"] || [];\n      return findVNodeByType(hotTableSlots, 'hot-editor');\n    },\n    /**\r\n     * Get settings for the columns provided in the `hot-column` components.\r\n     */\n    getColumnSettings: function getColumnSettings() {\n      var hotColumns = getHotColumnComponents(this.$children);\n      var usesRendererComponent = false;\n      var columnSettings = hotColumns.map(function (elem) {\n        if (elem.usesRendererComponent) {\n          usesRendererComponent = true;\n        }\n        return _objectSpread2({}, elem.columnSettings);\n      });\n      if (usesRendererComponent && this.settings && (this.settings.autoColumnSize !== false || this.settings.autoRowSize) && (this.autoColumnSize !== false || this.autoRowSize)) {\n        console.warn('Your `hot-table` configuration includes both `hot-column` and `autoRowSize`/`autoColumnSize`, which are not compatible with each other ' + 'in this version of `@handsontable/vue`. Disable `autoRowSize` and `autoColumnSize` to prevent row and column misalignment.');\n      }\n      return columnSettings.length ? columnSettings : void 0;\n    },\n    /**\r\n     * Create the wrapper function for the provided renderer child component.\r\n     *\r\n     * @param {Object} vNode VNode of the renderer child component.\r\n     * @param {Boolean} containerComponent Instance of the component, which will be treated as a parent for the newly created renderer component.\r\n     * @returns {Function} The wrapper function used as the renderer.\r\n     */\n    getRendererWrapper: function getRendererWrapper(vNode, containerComponent) {\n      var $vm = this;\n      return function (instance, TD, row, col, prop, value, cellProperties) {\n        // Prevent caching and rendering of the GhostTable table cells\n        if (TD && !TD.getAttribute('ghost-table')) {\n          var rendererCache = $vm.rendererCache;\n          var rendererArgs = {\n            hotInstance: instance,\n            TD: TD,\n            row: row,\n            col: col,\n            prop: prop,\n            value: value,\n            cellProperties: cellProperties,\n            isRenderer: true\n          };\n          if (rendererCache && !rendererCache.has(\"\".concat(row, \"-\").concat(col))) {\n            var mountedComponent = createVueComponent(vNode, containerComponent, vNode.componentOptions.propsData, rendererArgs);\n            rendererCache.set(\"\".concat(row, \"-\").concat(col), {\n              component: mountedComponent,\n              lastUsedTD: null\n            });\n          }\n          var cachedEntry = rendererCache.get(\"\".concat(row, \"-\").concat(col));\n          var cachedComponent = cachedEntry.component;\n          var cachedTD = cachedEntry.lastUsedTD;\n          Object.assign(cachedComponent.$data, rendererArgs);\n          if (!cachedComponent.$el.parentElement || cachedTD !== TD) {\n            // Clear the previous contents of a TD\n            while (TD.firstChild) {\n              TD.removeChild(TD.firstChild);\n            }\n            TD.appendChild(cachedComponent.$el);\n            cachedEntry.lastUsedTD = TD;\n          }\n        }\n        return TD;\n      };\n    },\n    /**\r\n     * Create a fresh class to be used as an editor, based on the editor component provided.\r\n     *\r\n     * @param {Object} vNode VNode for the editor child component.\r\n     * @param {Boolean} containerComponent Instance of the component, which will be treated as a parent for the newly created editor component.\r\n     * @returns {Class} The class used as an editor in Handsontable.\r\n     */\n    getEditorClass: function getEditorClass(vNode, containerComponent) {\n      var componentKey = vNode.key ? vNode.key.toString() : null;\n      var componentName = vNode.componentOptions.Ctor.options.name;\n      var componentCacheKey = componentKey ? \"\".concat(componentName, \":\").concat(componentKey) : componentName;\n      var editorCache = this.editorCache;\n      var mountedComponent = null;\n      if (!editorCache.has(componentCacheKey)) {\n        mountedComponent = createVueComponent(vNode, containerComponent, vNode.componentOptions.propsData, {\n          isEditor: true\n        });\n        editorCache.set(componentCacheKey, mountedComponent);\n      } else {\n        mountedComponent = editorCache.get(componentCacheKey);\n      }\n      return mountedComponent.$data.hotCustomEditorClass;\n    }\n  },\n  mounted: function mounted() {\n    this.columnSettings = this.getColumnSettings();\n    return this.hotInit();\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.hotInstance) {\n      this.hotInstance.destroy();\n    }\n  },\n  version: version\n};\n\nfunction normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\r\n    if (typeof shadowMode !== 'boolean') {\r\n        createInjectorSSR = createInjector;\r\n        createInjector = shadowMode;\r\n        shadowMode = false;\r\n    }\r\n    // Vue.extend constructor export interop.\r\n    const options = typeof script === 'function' ? script.options : script;\r\n    // render functions\r\n    if (template && template.render) {\r\n        options.render = template.render;\r\n        options.staticRenderFns = template.staticRenderFns;\r\n        options._compiled = true;\r\n        // functional template\r\n        if (isFunctionalTemplate) {\r\n            options.functional = true;\r\n        }\r\n    }\r\n    // scopedId\r\n    if (scopeId) {\r\n        options._scopeId = scopeId;\r\n    }\r\n    let hook;\r\n    if (moduleIdentifier) {\r\n        // server build\r\n        hook = function (context) {\r\n            // 2.3 injection\r\n            context =\r\n                context || // cached call\r\n                    (this.$vnode && this.$vnode.ssrContext) || // stateful\r\n                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional\r\n            // 2.2 with runInNewContext: true\r\n            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\r\n                context = __VUE_SSR_CONTEXT__;\r\n            }\r\n            // inject component styles\r\n            if (style) {\r\n                style.call(this, createInjectorSSR(context));\r\n            }\r\n            // register component module identifier for async chunk inference\r\n            if (context && context._registeredComponents) {\r\n                context._registeredComponents.add(moduleIdentifier);\r\n            }\r\n        };\r\n        // used by ssr in case component is cached and beforeCreate\r\n        // never gets called\r\n        options._ssrRegister = hook;\r\n    }\r\n    else if (style) {\r\n        hook = shadowMode\r\n            ? function (context) {\r\n                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));\r\n            }\r\n            : function (context) {\r\n                style.call(this, createInjector(context));\r\n            };\r\n    }\r\n    if (hook) {\r\n        if (options.functional) {\r\n            // register for functional component in vue file\r\n            const originalRender = options.render;\r\n            options.render = function renderWithStyleInjection(h, context) {\r\n                hook.call(context);\r\n                return originalRender(h, context);\r\n            };\r\n        }\r\n        else {\r\n            // inject component registration as beforeCreate hook\r\n            const existing = options.beforeCreate;\r\n            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\r\n        }\r\n    }\r\n    return script;\r\n}\n\n/* script */\nvar __vue_script__$2 = HotTable;\n\n/* template */\nvar __vue_render__ = function __vue_render__() {\n  var _vm = this;\n  var _h = _vm.$createElement;\n  var _c = _vm._self._c || _h;\n  return _c('div', {\n    attrs: {\n      \"id\": _vm.id\n    }\n  }, [_vm._t(\"default\")], 2);\n};\nvar __vue_staticRenderFns__ = [];\n\n/* style */\nvar __vue_inject_styles__$2 = undefined;\n/* scoped */\nvar __vue_scope_id__$2 = undefined;\n/* module identifier */\nvar __vue_module_identifier__$2 = undefined;\n/* functional template */\nvar __vue_is_functional_template__$2 = false;\n/* style inject */\n\n/* style inject SSR */\n\n/* style inject shadow dom */\n\nvar __vue_component__$2 = /*#__PURE__*/normalizeComponent({\n  render: __vue_render__,\n  staticRenderFns: __vue_staticRenderFns__\n}, __vue_inject_styles__$2, __vue_script__$2, __vue_scope_id__$2, __vue_is_functional_template__$2, __vue_module_identifier__$2, false, undefined, undefined, undefined);\n\nvar HotColumn = {\n  name: 'HotColumn',\n  props: propFactory('HotColumn'),\n  methods: {\n    /**\r\n     * Create the column settings based on the data provided to the `hot-column` component and it's child components.\r\n     */\n    createColumnSettings: function createColumnSettings() {\n      var hotColumnSlots = this.$slots[\"default\"] || [];\n      var rendererVNode = findVNodeByType(hotColumnSlots, 'hot-renderer');\n      var editorVNode = findVNodeByType(hotColumnSlots, 'hot-editor');\n      var assignedProps = filterPassedProps(this.$props);\n      if (rendererVNode && this.usesRendererComponent === void 0) {\n        this.usesRendererComponent = true;\n      }\n      this.columnSettings = _objectSpread2({}, assignedProps);\n      if (rendererVNode !== null) {\n        this.columnSettings.renderer = this.$parent.getRendererWrapper(rendererVNode, this);\n      } else if (assignedProps.renderer) {\n        this.columnSettings.renderer = assignedProps.renderer;\n      }\n      if (editorVNode !== null) {\n        this.columnSettings.editor = this.$parent.getEditorClass(editorVNode, this);\n      } else if (assignedProps.editor) {\n        this.columnSettings.editor = assignedProps.editor;\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.createColumnSettings();\n  },\n  render: function render() {\n    return null;\n  }\n};\n\n/* script */\nvar __vue_script__$1 = HotColumn;\n\n/* template */\n\n/* style */\nvar __vue_inject_styles__$1 = undefined;\n/* scoped */\nvar __vue_scope_id__$1 = undefined;\n/* module identifier */\nvar __vue_module_identifier__$1 = undefined;\n/* functional template */\nvar __vue_is_functional_template__$1 = undefined;\n/* style inject */\n\n/* style inject SSR */\n\n/* style inject shadow dom */\n\nvar __vue_component__$1 = /*#__PURE__*/normalizeComponent({}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, false, undefined, undefined, undefined);\n\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n\r\nfunction __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof$1(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof$1(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof$1(obj);\n    };\n  }\n  return _typeof(obj);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n    return arr2;\n  }\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\n// The rational behind the verbose Reflect-feature check below is the fact that there are polyfills\n// which add an implementation for Reflect.defineMetadata but not for Reflect.getOwnMetadataKeys.\n// Without this check consumers will encounter hard to track down runtime errors.\nfunction reflectionIsSupported() {\n  return typeof Reflect !== 'undefined' && Reflect.defineMetadata && Reflect.getOwnMetadataKeys;\n}\nfunction copyReflectionMetadata(to, from) {\n  forwardMetadata(to, from);\n  Object.getOwnPropertyNames(from.prototype).forEach(function (key) {\n    forwardMetadata(to.prototype, from.prototype, key);\n  });\n  Object.getOwnPropertyNames(from).forEach(function (key) {\n    forwardMetadata(to, from, key);\n  });\n}\nfunction forwardMetadata(to, from, propertyKey) {\n  var metaKeys = propertyKey ? Reflect.getOwnMetadataKeys(from, propertyKey) : Reflect.getOwnMetadataKeys(from);\n  metaKeys.forEach(function (metaKey) {\n    var metadata = propertyKey ? Reflect.getOwnMetadata(metaKey, from, propertyKey) : Reflect.getOwnMetadata(metaKey, from);\n    if (propertyKey) {\n      Reflect.defineMetadata(metaKey, metadata, to, propertyKey);\n    } else {\n      Reflect.defineMetadata(metaKey, metadata, to);\n    }\n  });\n}\nvar fakeArray = {\n  __proto__: []\n};\nvar hasProto = fakeArray instanceof Array;\nfunction isPrimitive(value) {\n  var type = _typeof(value);\n  return value == null || type !== 'object' && type !== 'function';\n}\nfunction collectDataFromConstructor(vm, Component) {\n  // override _init to prevent to init as Vue instance\n  var originalInit = Component.prototype._init;\n  Component.prototype._init = function () {\n    var _this = this;\n\n    // proxy to actual vm\n    var keys = Object.getOwnPropertyNames(vm); // 2.2.0 compat (props are no longer exposed as self properties)\n\n    if (vm.$options.props) {\n      for (var key in vm.$options.props) {\n        if (!vm.hasOwnProperty(key)) {\n          keys.push(key);\n        }\n      }\n    }\n    keys.forEach(function (key) {\n      Object.defineProperty(_this, key, {\n        get: function get() {\n          return vm[key];\n        },\n        set: function set(value) {\n          vm[key] = value;\n        },\n        configurable: true\n      });\n    });\n  }; // should be acquired class property values\n\n  var data = new Component(); // restore original _init to avoid memory leak (#209)\n\n  Component.prototype._init = originalInit; // create plain data object\n\n  var plainData = {};\n  Object.keys(data).forEach(function (key) {\n    if (data[key] !== undefined) {\n      plainData[key] = data[key];\n    }\n  });\n  return plainData;\n}\nvar $internalHooks = ['data', 'beforeCreate', 'created', 'beforeMount', 'mounted', 'beforeDestroy', 'destroyed', 'beforeUpdate', 'updated', 'activated', 'deactivated', 'render', 'errorCaptured', 'serverPrefetch' // 2.6\n];\n\nfunction componentFactory(Component) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.name = options.name || Component._componentTag || Component.name; // prototype props.\n\n  var proto = Component.prototype;\n  Object.getOwnPropertyNames(proto).forEach(function (key) {\n    if (key === 'constructor') {\n      return;\n    } // hooks\n\n    if ($internalHooks.indexOf(key) > -1) {\n      options[key] = proto[key];\n      return;\n    }\n    var descriptor = Object.getOwnPropertyDescriptor(proto, key);\n    if (descriptor.value !== void 0) {\n      // methods\n      if (typeof descriptor.value === 'function') {\n        (options.methods || (options.methods = {}))[key] = descriptor.value;\n      } else {\n        // typescript decorated data\n        (options.mixins || (options.mixins = [])).push({\n          data: function data() {\n            return _defineProperty({}, key, descriptor.value);\n          }\n        });\n      }\n    } else if (descriptor.get || descriptor.set) {\n      // computed properties\n      (options.computed || (options.computed = {}))[key] = {\n        get: descriptor.get,\n        set: descriptor.set\n      };\n    }\n  });\n  (options.mixins || (options.mixins = [])).push({\n    data: function data() {\n      return collectDataFromConstructor(this, Component);\n    }\n  }); // decorate options\n\n  var decorators = Component.__decorators__;\n  if (decorators) {\n    decorators.forEach(function (fn) {\n      return fn(options);\n    });\n    delete Component.__decorators__;\n  } // find super\n\n  var superProto = Object.getPrototypeOf(Component.prototype);\n  var Super = superProto instanceof Vue ? superProto.constructor : Vue;\n  var Extended = Super.extend(options);\n  forwardStaticMembers(Extended, Component, Super);\n  if (reflectionIsSupported()) {\n    copyReflectionMetadata(Extended, Component);\n  }\n  return Extended;\n}\nvar shouldIgnore = {\n  prototype: true,\n  arguments: true,\n  callee: true,\n  caller: true\n};\nfunction forwardStaticMembers(Extended, Original, Super) {\n  // We have to use getOwnPropertyNames since Babel registers methods as non-enumerable\n  Object.getOwnPropertyNames(Original).forEach(function (key) {\n    // Skip the properties that should not be overwritten\n    if (shouldIgnore[key]) {\n      return;\n    } // Some browsers does not allow reconfigure built-in properties\n\n    var extendedDescriptor = Object.getOwnPropertyDescriptor(Extended, key);\n    if (extendedDescriptor && !extendedDescriptor.configurable) {\n      return;\n    }\n    var descriptor = Object.getOwnPropertyDescriptor(Original, key); // If the user agent does not support `__proto__` or its family (IE <= 10),\n    // the sub class properties may be inherited properties from the super class in TypeScript.\n    // We need to exclude such properties to prevent to overwrite\n    // the component options object which stored on the extended constructor (See #192).\n    // If the value is a referenced value (object or function),\n    // we can check equality of them and exclude it if they have the same reference.\n    // If it is a primitive value, it will be forwarded for safety.\n\n    if (!hasProto) {\n      // Only `cid` is explicitly exluded from property forwarding\n      // because we cannot detect whether it is a inherited property or not\n      // on the no `__proto__` environment even though the property is reserved.\n      if (key === 'cid') {\n        return;\n      }\n      var superDescriptor = Object.getOwnPropertyDescriptor(Super, key);\n      if (!isPrimitive(descriptor.value) && superDescriptor && superDescriptor.value === descriptor.value) {\n        return;\n      }\n    } // Warn if the users manually declare reserved properties\n    Object.defineProperty(Extended, key, descriptor);\n  });\n}\nfunction Component(options) {\n  if (typeof options === 'function') {\n    return componentFactory(options);\n  }\n  return function (Component) {\n    return componentFactory(Component, options);\n  };\n}\nComponent.registerHooks = function registerHooks(keys) {\n  $internalHooks.push.apply($internalHooks, _toConsumableArray(keys));\n};\n\nvar BaseEditorComponent = /*#__PURE__*/function (_Vue) {\n  _inherits(BaseEditorComponent, _Vue);\n  var _super = _createSuper(BaseEditorComponent);\n  function BaseEditorComponent() {\n    var _this2;\n    _classCallCheck(this, BaseEditorComponent);\n    _this2 = _super.apply(this, arguments);\n    _this2.name = 'BaseEditorComponent';\n    _this2.instance = null;\n    _this2.row = null;\n    _this2.col = null;\n    _this2.prop = null;\n    _this2.TD = null;\n    _this2.originalValue = null;\n    _this2.cellProperties = null;\n    _this2.state = null;\n    _this2.hot = null;\n    return _this2;\n  }\n  _createClass(BaseEditorComponent, [{\n    key: \"mounted\",\n    value: function mounted() {\n      var _this = this;\n      this.$data.hotCustomEditorClass = function () {\n        var customEditorClass = /*#__PURE__*/function (_Handsontable$editors) {\n          _inherits(CustomEditor, _Handsontable$editors);\n          var _super2 = _createSuper(CustomEditor);\n          function CustomEditor(hotInstance) {\n            var _this3;\n            _classCallCheck(this, CustomEditor);\n            _this3 = _super2.call(this, hotInstance);\n            _this.$data.hotCustomEditorInstance = _assertThisInitialized(_this3);\n            return _this3;\n          }\n          _createClass(CustomEditor, [{\n            key: \"focus\",\n            value: function focus() {}\n          }, {\n            key: \"getValue\",\n            value: function getValue() {}\n          }, {\n            key: \"setValue\",\n            value: function setValue() {}\n          }, {\n            key: \"open\",\n            value: function open() {}\n          }, {\n            key: \"close\",\n            value: function close() {}\n          }]);\n          return CustomEditor;\n        }(Handsontable.editors.BaseEditor);\n        // Fill with the rest of the BaseEditorComponent methods\n        Object.getOwnPropertyNames(Handsontable.editors.BaseEditor.prototype).forEach(function (propName) {\n          if (propName === 'constructor') {\n            return;\n          }\n          customEditorClass.prototype[propName] = function () {\n            var _this$propName;\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n            return (_this$propName = _this[propName]).call.apply(_this$propName, [this].concat(args));\n          };\n        });\n        return customEditorClass;\n      }();\n    }\n    // BaseEditorComponent methods:\n  }, {\n    key: \"_fireCallbacks\",\n    value: function _fireCallbacks() {\n      var _Handsontable$editors2;\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      (_Handsontable$editors2 = Handsontable.editors.BaseEditor.prototype._fireCallbacks).call.apply(_Handsontable$editors2, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"beginEditing\",\n    value: function beginEditing() {\n      var _Handsontable$editors3;\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      return (_Handsontable$editors3 = Handsontable.editors.BaseEditor.prototype.beginEditing).call.apply(_Handsontable$editors3, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"cancelChanges\",\n    value: function cancelChanges() {\n      var _Handsontable$editors4;\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return (_Handsontable$editors4 = Handsontable.editors.BaseEditor.prototype.cancelChanges).call.apply(_Handsontable$editors4, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"checkEditorSection\",\n    value: function checkEditorSection() {\n      var _Handsontable$editors5;\n      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n        args[_key5] = arguments[_key5];\n      }\n      return (_Handsontable$editors5 = Handsontable.editors.BaseEditor.prototype.checkEditorSection).call.apply(_Handsontable$editors5, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var _Handsontable$editors6;\n      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        args[_key6] = arguments[_key6];\n      }\n      return (_Handsontable$editors6 = Handsontable.editors.BaseEditor.prototype.close).call.apply(_Handsontable$editors6, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"discardEditor\",\n    value: function discardEditor() {\n      var _Handsontable$editors7;\n      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        args[_key7] = arguments[_key7];\n      }\n      return (_Handsontable$editors7 = Handsontable.editors.BaseEditor.prototype.discardEditor).call.apply(_Handsontable$editors7, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"enableFullEditMode\",\n    value: function enableFullEditMode() {\n      var _Handsontable$editors8;\n      for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        args[_key8] = arguments[_key8];\n      }\n      return (_Handsontable$editors8 = Handsontable.editors.BaseEditor.prototype.enableFullEditMode).call.apply(_Handsontable$editors8, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"extend\",\n    value: function extend() {\n      var _Handsontable$editors9;\n      for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        args[_key9] = arguments[_key9];\n      }\n      return (_Handsontable$editors9 = Handsontable.editors.BaseEditor.prototype.extend).call.apply(_Handsontable$editors9, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"finishEditing\",\n    value: function finishEditing() {\n      var _Handsontable$editors10;\n      for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n        args[_key10] = arguments[_key10];\n      }\n      return (_Handsontable$editors10 = Handsontable.editors.BaseEditor.prototype.finishEditing).call.apply(_Handsontable$editors10, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"focus\",\n    value: function focus() {\n      var _Handsontable$editors11;\n      for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n        args[_key11] = arguments[_key11];\n      }\n      return (_Handsontable$editors11 = Handsontable.editors.BaseEditor.prototype.focus).call.apply(_Handsontable$editors11, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      var _Handsontable$editors12;\n      for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n        args[_key12] = arguments[_key12];\n      }\n      return (_Handsontable$editors12 = Handsontable.editors.BaseEditor.prototype.getValue).call.apply(_Handsontable$editors12, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _Handsontable$editors13;\n      for (var _len13 = arguments.length, args = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n        args[_key13] = arguments[_key13];\n      }\n      return (_Handsontable$editors13 = Handsontable.editors.BaseEditor.prototype.init).call.apply(_Handsontable$editors13, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"isInFullEditMode\",\n    value: function isInFullEditMode() {\n      var _Handsontable$editors14;\n      for (var _len14 = arguments.length, args = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n        args[_key14] = arguments[_key14];\n      }\n      return (_Handsontable$editors14 = Handsontable.editors.BaseEditor.prototype.isInFullEditMode).call.apply(_Handsontable$editors14, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"isOpened\",\n    value: function isOpened() {\n      var _Handsontable$editors15;\n      for (var _len15 = arguments.length, args = new Array(_len15), _key15 = 0; _key15 < _len15; _key15++) {\n        args[_key15] = arguments[_key15];\n      }\n      return (_Handsontable$editors15 = Handsontable.editors.BaseEditor.prototype.isOpened).call.apply(_Handsontable$editors15, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"isWaiting\",\n    value: function isWaiting() {\n      var _Handsontable$editors16;\n      for (var _len16 = arguments.length, args = new Array(_len16), _key16 = 0; _key16 < _len16; _key16++) {\n        args[_key16] = arguments[_key16];\n      }\n      return (_Handsontable$editors16 = Handsontable.editors.BaseEditor.prototype.isWaiting).call.apply(_Handsontable$editors16, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _Handsontable$editors17;\n      for (var _len17 = arguments.length, args = new Array(_len17), _key17 = 0; _key17 < _len17; _key17++) {\n        args[_key17] = arguments[_key17];\n      }\n      return (_Handsontable$editors17 = Handsontable.editors.BaseEditor.prototype.open).call.apply(_Handsontable$editors17, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"prepare\",\n    value: function prepare(row, col, prop, TD, originalValue, cellProperties) {\n      this.$data.hotInstance = cellProperties.instance;\n      this.$data.row = row;\n      this.$data.col = col;\n      this.$data.prop = prop;\n      this.$data.TD = TD;\n      this.$data.originalValue = originalValue;\n      this.$data.cellProperties = cellProperties;\n      return Handsontable.editors.BaseEditor.prototype.prepare.call(this.$data.hotCustomEditorInstance, row, col, prop, TD, originalValue, cellProperties);\n    }\n  }, {\n    key: \"saveValue\",\n    value: function saveValue() {\n      var _Handsontable$editors18;\n      for (var _len18 = arguments.length, args = new Array(_len18), _key18 = 0; _key18 < _len18; _key18++) {\n        args[_key18] = arguments[_key18];\n      }\n      return (_Handsontable$editors18 = Handsontable.editors.BaseEditor.prototype.saveValue).call.apply(_Handsontable$editors18, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue() {\n      var _Handsontable$editors19;\n      for (var _len19 = arguments.length, args = new Array(_len19), _key19 = 0; _key19 < _len19; _key19++) {\n        args[_key19] = arguments[_key19];\n      }\n      return (_Handsontable$editors19 = Handsontable.editors.BaseEditor.prototype.setValue).call.apply(_Handsontable$editors19, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"addHook\",\n    value: function addHook() {\n      var _Handsontable$editors20;\n      for (var _len20 = arguments.length, args = new Array(_len20), _key20 = 0; _key20 < _len20; _key20++) {\n        args[_key20] = arguments[_key20];\n      }\n      return (_Handsontable$editors20 = Handsontable.editors.BaseEditor.prototype.addHook).call.apply(_Handsontable$editors20, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"removeHooksByKey\",\n    value: function removeHooksByKey() {\n      var _Handsontable$editors21;\n      for (var _len21 = arguments.length, args = new Array(_len21), _key21 = 0; _key21 < _len21; _key21++) {\n        args[_key21] = arguments[_key21];\n      }\n      return (_Handsontable$editors21 = Handsontable.editors.BaseEditor.prototype.removeHooksByKey).call.apply(_Handsontable$editors21, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"clearHooks\",\n    value: function clearHooks() {\n      var _Handsontable$editors22;\n      for (var _len22 = arguments.length, args = new Array(_len22), _key22 = 0; _key22 < _len22; _key22++) {\n        args[_key22] = arguments[_key22];\n      }\n      return (_Handsontable$editors22 = Handsontable.editors.BaseEditor.prototype.clearHooks).call.apply(_Handsontable$editors22, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"getEditedCell\",\n    value: function getEditedCell() {\n      var _Handsontable$editors23;\n      for (var _len23 = arguments.length, args = new Array(_len23), _key23 = 0; _key23 < _len23; _key23++) {\n        args[_key23] = arguments[_key23];\n      }\n      return (_Handsontable$editors23 = Handsontable.editors.BaseEditor.prototype.getEditedCell).call.apply(_Handsontable$editors23, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"getEditedCellRect\",\n    value: function getEditedCellRect() {\n      var _Handsontable$editors24;\n      for (var _len24 = arguments.length, args = new Array(_len24), _key24 = 0; _key24 < _len24; _key24++) {\n        args[_key24] = arguments[_key24];\n      }\n      return (_Handsontable$editors24 = Handsontable.editors.BaseEditor.prototype.getEditedCellRect).call.apply(_Handsontable$editors24, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"getEditedCellsZIndex\",\n    value: function getEditedCellsZIndex() {\n      var _Handsontable$editors25;\n      for (var _len25 = arguments.length, args = new Array(_len25), _key25 = 0; _key25 < _len25; _key25++) {\n        args[_key25] = arguments[_key25];\n      }\n      return (_Handsontable$editors25 = Handsontable.editors.BaseEditor.prototype.getEditedCellsZIndex).call.apply(_Handsontable$editors25, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }, {\n    key: \"getEditedCellsLayerClass\",\n    value: function getEditedCellsLayerClass() {\n      var _Handsontable$editors26;\n      for (var _len26 = arguments.length, args = new Array(_len26), _key26 = 0; _key26 < _len26; _key26++) {\n        args[_key26] = arguments[_key26];\n      }\n      return (_Handsontable$editors26 = Handsontable.editors.BaseEditor.prototype.getEditedCellsLayerClass).call.apply(_Handsontable$editors26, [this.$data.hotCustomEditorInstance].concat(args));\n    }\n  }]);\n  return BaseEditorComponent;\n}(Vue);\nBaseEditorComponent = __decorate([Component({})], BaseEditorComponent);\nvar script = BaseEditorComponent;\n\n/* script */\nvar __vue_script__ = script;\n\n/* template */\n\n/* style */\nvar __vue_inject_styles__ = undefined;\n/* scoped */\nvar __vue_scope_id__ = undefined;\n/* module identifier */\nvar __vue_module_identifier__ = undefined;\n/* functional template */\nvar __vue_is_functional_template__ = undefined;\n/* style inject */\n\n/* style inject SSR */\n\n/* style inject shadow dom */\n\nvar __vue_component__ = /*#__PURE__*/normalizeComponent({}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, false, undefined, undefined, undefined);\n\nexport { __vue_component__ as BaseEditorComponent, __vue_component__$1 as HotColumn, __vue_component__$2 as HotTable, __vue_component__$2 as default };\n","const data = [\n  [\n    false,\n    \"Tagcat\",\n    \"United Kingdom\",\n    \"Classic Vest\",\n    \"11/10/2020\",\n    \"01-2331942\",\n    true,\n    \"172\",\n    2,\n    2\n  ],\n  [\n    true,\n    \"Zoomzone\",\n    \"Indonesia\",\n    \"Cycling Cap\",\n    \"03/05/2020\",\n    \"88-2768633\",\n    true,\n    \"188\",\n    6,\n    2\n  ],\n  [\n    true,\n    \"Meeveo\",\n    \"United States\",\n    \"Full-Finger Gloves\",\n    \"27/03/2020\",\n    \"51-6775945\",\n    true,\n    \"162\",\n    1,\n    3\n  ],\n  [\n    false,\n    \"Buzzdog\",\n    \"Philippines\",\n    \"HL Mountain Frame\",\n    \"29/08/2020\",\n    \"44-4028109\",\n    true,\n    \"133\",\n    7,\n    1\n  ],\n  [\n    true,\n    \"Katz\",\n    \"India\",\n    \"Half-Finger Gloves\",\n    \"02/10/2020\",\n    \"08-2758492\",\n    true,\n    \"87\",\n    1,\n    3\n  ],\n  [\n    false,\n    \"Jaxbean\",\n    \"China\",\n    \"HL Road Frame\",\n    \"28/09/2020\",\n    \"84-3557705\",\n    false,\n    \"26\",\n    8,\n    1\n  ],\n  [\n    false,\n    \"Wikido\",\n    \"Brazil\",\n    \"HL Touring Frame\",\n    \"24/06/2020\",\n    \"20-9397637\",\n    false,\n    \"110\",\n    4,\n    1\n  ],\n  [\n    false,\n    \"Browsedrive\",\n    \"United States\",\n    \"LL Mountain Frame\",\n    \"13/03/2020\",\n    \"36-0079556\",\n    true,\n    \"50\",\n    4,\n    4\n  ],\n  [\n    false,\n    \"Twinder\",\n    \"United Kingdom\",\n    \"LL Road Frame\",\n    \"06/04/2020\",\n    \"41-1489542\",\n    false,\n    \"160\",\n    6,\n    1\n  ],\n  [\n    false,\n    \"Jetwire\",\n    \"China\",\n    \"LL Touring Frame\",\n    \"01/02/2020\",\n    \"37-1531629\",\n    true,\n    \"30\",\n    8,\n    5\n  ],\n  [\n    false,\n    \"Chatterpoint\",\n    \"China\",\n    \"Long-Sleeve Logo Jersey\",\n    \"14/07/2020\",\n    \"25-5083429\",\n    true,\n    \"39\",\n    7,\n    2\n  ],\n  [\n    false,\n    \"Twinder\",\n    \"Egypt\",\n    \"Men's Bib-Shorts\",\n    \"31/08/2020\",\n    \"04-4281278\",\n    false,\n    \"96\",\n    6,\n    1\n  ],\n  [\n    false,\n    \"Midel\",\n    \"United States\",\n    \"Men's Sports Shorts\",\n    \"27/06/2020\",\n    \"55-1711908\",\n    true,\n    \"108\",\n    10,\n    3\n  ],\n  [\n    false,\n    \"Yodo\",\n    \"India\",\n    \"ML Mountain Frame\",\n    \"16/03/2020\",\n    \"58-8360815\",\n    false,\n    \"46\",\n    1,\n    1\n  ],\n  [\n    false,\n    \"Camido\",\n    \"Russia\",\n    \"ML Mountain Frame-W\",\n    \"13/09/2020\",\n    \"10-3786104\",\n    true,\n    \"97\",\n    8,\n    3\n  ],\n  [\n    false,\n    \"Eire\",\n    \"Thailand\",\n    \"ML Road Frame\",\n    \"10/04/2020\",\n    \"45-1186054\",\n    true,\n    \"161\",\n    1,\n    4\n  ],\n  [\n    false,\n    \"Vinte\",\n    \"United Kingdom\",\n    \"ML Road Frame-W\",\n    \"22/01/2020\",\n    \"62-6202742\",\n    true,\n    \"58\",\n    4,\n    3\n  ],\n  [\n    false,\n    \"Twitterlist\",\n    \"China\",\n    \"Mountain Bike Socks\",\n    \"09/11/2020\",\n    \"88-9646223\",\n    true,\n    \"92\",\n    8,\n    3\n  ],\n  [\n    false,\n    \"Eidel\",\n    \"Bangladesh\",\n    \"Mountain-100\",\n    \"19/09/2020\",\n    \"45-5588112\",\n    true,\n    \"5\",\n    6,\n    5\n  ],\n  [\n    false,\n    \"Trunyx\",\n    \"Nigeria\",\n    \"Mountain-200\",\n    \"09/03/2020\",\n    \"66-6271819\",\n    true,\n    \"158\",\n    4,\n    1\n  ],\n  [\n    false,\n    \"Katz\",\n    \"Turkey\",\n    \"Mountain-300\",\n    \"05/03/2020\",\n    \"38-9245023\",\n    false,\n    \"121\",\n    5,\n    4\n  ],\n  [\n    false,\n    \"Kaymbo\",\n    \"United States\",\n    \"Mountain-400-W\",\n    \"24/12/2020\",\n    \"44-5916927\",\n    false,\n    \"61\",\n    5,\n    4\n  ],\n  [\n    false,\n    \"Ozu\",\n    \"Pakistan\",\n    \"Mountain-500\",\n    \"13/06/2020\",\n    \"31-5449914\",\n    true,\n    \"155\",\n    2,\n    2\n  ],\n  [\n    false,\n    \"Rhynyx\",\n    \"India\",\n    \"Racing Socks\",\n    \"05/12/2020\",\n    \"19-9413869\",\n    true,\n    \"162\",\n    2,\n    4\n  ],\n  [\n    false,\n    \"Flashset\",\n    \"Iran\",\n    \"Road-150\",\n    \"14/12/2020\",\n    \"25-9807605\",\n    false,\n    \"46\",\n    7,\n    1\n  ],\n  [\n    false,\n    \"Yata\",\n    \"Congo (Kinshasa)\",\n    \"Road-250\",\n    \"12/06/2020\",\n    \"74-4291983\",\n    true,\n    \"47\",\n    4,\n    4\n  ],\n  [\n    false,\n    \"Brainlounge\",\n    \"Vietnam\",\n    \"Road-350-W\",\n    \"10/03/2020\",\n    \"83-0980643\",\n    true,\n    \"104\",\n    2,\n    3\n  ],\n  [\n    false,\n    \"Babblestorm\",\n    \"United States\",\n    \"Road-450\",\n    \"10/10/2020\",\n    \"19-2878430\",\n    true,\n    \"101\",\n    6,\n    4\n  ],\n  [\n    false,\n    \"Youspan\",\n    \"Brazil\",\n    \"Road-550-W\",\n    \"16/12/2020\",\n    \"19-1838230\",\n    true,\n    \"150\",\n    10,\n    3\n  ],\n  [\n    false,\n    \"Nlounge\",\n    \"China\",\n    \"Road-650\",\n    \"31/10/2020\",\n    \"32-2267938\",\n    true,\n    \"42\",\n    4,\n    2\n  ],\n  [\n    false,\n    \"Twinte\",\n    \"India\",\n    \"Road-750\",\n    \"17/08/2020\",\n    \"79-2821972\",\n    true,\n    \"144\",\n    9,\n    3\n  ],\n  [\n    false,\n    \"Oyonder\",\n    \"United Kingdom\",\n    \"Short-Sleeve Classic Jersey\",\n    \"04/12/2020\",\n    \"46-6597557\",\n    true,\n    \"195\",\n    4,\n    1\n  ],\n  [\n    false,\n    \"Gigabox\",\n    \"Pakistan\",\n    \"Sport-100\",\n    \"03/02/2020\",\n    \"15-1793960\",\n    true,\n    \"199\",\n    4,\n    4\n  ],\n  [\n    false,\n    \"Livetube\",\n    \"France\",\n    \"Touring-1000\",\n    \"16/05/2020\",\n    \"86-0811003\",\n    true,\n    \"110\",\n    4,\n    5\n  ],\n  [\n    false,\n    \"Voomm\",\n    \"United Kingdom\",\n    \"Touring-2000\",\n    \"15/07/2020\",\n    \"95-3068680\",\n    true,\n    \"51\",\n    4,\n    4\n  ],\n  [\n    false,\n    \"Voonyx\",\n    \"China\",\n    \"Touring-3000\",\n    \"27/11/2020\",\n    \"35-3085360\",\n    false,\n    \"69\",\n    2,\n    5\n  ],\n  [\n    false,\n    \"Zoombeat\",\n    \"United States\",\n    \"Women's Mountain Shorts\",\n    \"03/11/2020\",\n    \"56-8673088\",\n    false,\n    \"53\",\n    2,\n    3\n  ],\n  [\n    false,\n    \"Roomm\",\n    \"China\",\n    \"Women's Tights\",\n    \"16/03/2020\",\n    \"76-0085918\",\n    true,\n    \"168\",\n    1,\n    1\n  ],\n  [\n    false,\n    \"Leenti\",\n    \"China\",\n    \"Mountain-400\",\n    \"16/05/2020\",\n    \"03-0893276\",\n    false,\n    \"58\",\n    1,\n    4\n  ],\n  [\n    false,\n    \"Jetpulse\",\n    \"United States\",\n    \"Road-550\",\n    \"08/02/2020\",\n    \"79-9013306\",\n    true,\n    \"152\",\n    9,\n    3\n  ],\n  [\n    false,\n    \"Katz\",\n    \"Peru\",\n    \"Road-350\",\n    \"15/02/2020\",\n    \"55-7799920\",\n    true,\n    \"66\",\n    4,\n    2\n  ],\n  [\n    false,\n    \"Cogidoo\",\n    \"India\",\n    \"LL Mountain Front Wheel\",\n    \"04/06/2020\",\n    \"07-0881122\",\n    false,\n    \"112\",\n    9,\n    2\n  ],\n  [\n    false,\n    \"Divavu\",\n    \"Colombia\",\n    \"Touring Rear Wheel\",\n    \"24/02/2020\",\n    \"58-6157387\",\n    true,\n    \"50\",\n    10,\n    4\n  ],\n  [\n    false,\n    \"Mydeo\",\n    \"China\",\n    \"Touring Front Wheel\",\n    \"07/12/2020\",\n    \"12-2810010\",\n    false,\n    \"31\",\n    3,\n    5\n  ],\n  [\n    false,\n    \"Browsebug\",\n    \"Japan\",\n    \"ML Mountain Front Wheel\",\n    \"14/01/2020\",\n    \"64-9249984\",\n    true,\n    \"132\",\n    5,\n    5\n  ],\n  [\n    false,\n    \"Layo\",\n    \"China\",\n    \"HL Mountain Front Wheel\",\n    \"24/04/2020\",\n    \"45-0739652\",\n    true,\n    \"45\",\n    1,\n    5\n  ],\n  [\n    false,\n    \"Snaptags\",\n    \"United Kingdom\",\n    \"LL Touring Handlebars\",\n    \"06/08/2020\",\n    \"09-5712761\",\n    true,\n    \"197\",\n    4,\n    2\n  ],\n  [\n    false,\n    \"Cogilith\",\n    \"China\",\n    \"HL Touring Handlebars\",\n    \"31/05/2020\",\n    \"01-7345008\",\n    true,\n    \"190\",\n    4,\n    3\n  ],\n  [\n    false,\n    \"Reallinks\",\n    \"United Kingdom\",\n    \"LL Road Front Wheel\",\n    \"14/05/2020\",\n    \"62-1065350\",\n    true,\n    \"184\",\n    3,\n    4\n  ],\n  [\n    false,\n    \"Quaxo\",\n    \"United States\",\n    \"ML Road Front Wheel\",\n    \"23/03/2020\",\n    \"44-7241323\",\n    true,\n    \"169\",\n    3,\n    4\n  ],\n  [\n    false,\n    \"Devify\",\n    \"China\",\n    \"HL Road Front Wheel\",\n    \"12/12/2020\",\n    \"52-0295699\",\n    false,\n    \"152\",\n    4,\n    4\n  ],\n  [\n    false,\n    \"Youopia\",\n    \"Angola\",\n    \"LL Mountain Handlebars\",\n    \"01/04/2020\",\n    \"52-2650922\",\n    false,\n    \"182\",\n    6,\n    4\n  ],\n  [\n    false,\n    \"Ainyx\",\n    \"China\",\n    \"Touring Pedal\",\n    \"27/02/2020\",\n    \"48-3618525\",\n    true,\n    \"141\",\n    6,\n    1\n  ],\n  [\n    false,\n    \"Browsetype\",\n    \"Malaysia\",\n    \"ML Mountain Handlebars\",\n    \"28/04/2020\",\n    \"51-8893923\",\n    true,\n    \"169\",\n    7,\n    1\n  ],\n  [\n    false,\n    \"Muxo\",\n    \"China\",\n    \"HL Mountain Handlebars\",\n    \"22/08/2020\",\n    \"68-5911361\",\n    false,\n    \"39\",\n    7,\n    1\n  ],\n  [\n    false,\n    \"Bubbletube\",\n    \"China\",\n    \"LL Road Handlebars\",\n    \"04/10/2020\",\n    \"41-5880042\",\n    true,\n    \"71\",\n    8,\n    3\n  ],\n  [\n    false,\n    \"Fadeo\",\n    \"Vietnam\",\n    \"ML Road Handlebars\",\n    \"23/04/2020\",\n    \"90-5913983\",\n    true,\n    \"148\",\n    10,\n    3\n  ],\n  [\n    false,\n    \"Yadel\",\n    \"United Kingdom\",\n    \"HL Road Handlebars\",\n    \"18/04/2020\",\n    \"92-0960699\",\n    true,\n    \"116\",\n    8,\n    1\n  ],\n  [\n    false,\n    \"Blognation\",\n    \"China\",\n    \"LL Headset\",\n    \"10/01/2020\",\n    \"06-9493898\",\n    true,\n    \"96\",\n    10,\n    1\n  ],\n  [\n    false,\n    \"Devpoint\",\n    \"China\",\n    \"ML Headset\",\n    \"25/12/2020\",\n    \"69-5878565\",\n    true,\n    \"35\",\n    4,\n    2\n  ],\n  [\n    false,\n    \"Aibox\",\n    \"United Kingdom\",\n    \"HL Headset\",\n    \"18/03/2020\",\n    \"13-1133017\",\n    true,\n    \"16\",\n    8,\n    2\n  ],\n  [\n    false,\n    \"Brightdog\",\n    \"China\",\n    \"LL Mountain Pedal\",\n    \"11/09/2020\",\n    \"39-6530433\",\n    true,\n    \"194\",\n    2,\n    5\n  ],\n  [\n    false,\n    \"Gabcube\",\n    \"Nigeria\",\n    \"ML Mountain Pedal\",\n    \"22/04/2020\",\n    \"96-6860388\",\n    true,\n    \"24\",\n    1,\n    3\n  ],\n  [\n    false,\n    \"Muxo\",\n    \"China\",\n    \"HL Mountain Pedal\",\n    \"05/06/2020\",\n    \"30-0356137\",\n    true,\n    \"170\",\n    4,\n    4\n  ],\n  [\n    false,\n    \"Tambee\",\n    \"China\",\n    \"ML Touring Seat/Saddle\",\n    \"22/02/2020\",\n    \"93-9058255\",\n    true,\n    \"184\",\n    9,\n    5\n  ],\n  [\n    false,\n    \"Cogilith\",\n    \"India\",\n    \"LL Touring Seat/Saddle\",\n    \"06/04/2020\",\n    \"82-9268909\",\n    false,\n    \"153\",\n    10,\n    4\n  ],\n  [\n    false,\n    \"Dynabox\",\n    \"Hong Kong\",\n    \"HL Touring Seat/Saddle\",\n    \"10/01/2020\",\n    \"20-6913815\",\n    false,\n    \"88\",\n    10,\n    1\n  ],\n  [\n    false,\n    \"Shuffledrive\",\n    \"Sudan\",\n    \"LL Road Pedal\",\n    \"16/09/2020\",\n    \"08-8238817\",\n    true,\n    \"57\",\n    9,\n    2\n  ],\n  [\n    false,\n    \"Fivechat\",\n    \"China\",\n    \"ML Road Pedal\",\n    \"26/08/2020\",\n    \"44-7370350\",\n    false,\n    \"62\",\n    4,\n    1\n  ],\n  [\n    false,\n    \"Meembee\",\n    \"United States\",\n    \"HL Road Pedal\",\n    \"27/12/2020\",\n    \"01-3525949\",\n    true,\n    \"123\",\n    2,\n    4\n  ],\n  [\n    false,\n    \"Dynazzy\",\n    \"United Kingdom\",\n    \"LL Mountain Seat/Saddle 1\",\n    \"15/12/2020\",\n    \"04-2414623\",\n    true,\n    \"77\",\n    10,\n    5\n  ],\n  [\n    false,\n    \"Eare\",\n    \"China\",\n    \"ML Mountain Seat/Saddle 1\",\n    \"04/04/2020\",\n    \"15-1917509\",\n    false,\n    \"199\",\n    9,\n    4\n  ],\n  [\n    false,\n    \"Yozio\",\n    \"China\",\n    \"HL Mountain Seat/Saddle 1\",\n    \"15/03/2020\",\n    \"06-2526845\",\n    true,\n    \"149\",\n    8,\n    2\n  ],\n  [\n    false,\n    \"Quinu\",\n    \"Xi'an\",\n    \"425-777-7829\",\n    \"22/02/2020\",\n    \"83-1713558\",\n    false,\n    \"191\",\n    9,\n    5\n  ],\n  [\n    false,\n    \"Jazzy\",\n    \"United Kingdom\",\n    \"ML Road Seat/Saddle 1\",\n    \"07/08/2020\",\n    \"00-8892524\",\n    true,\n    \"150\",\n    10,\n    2\n  ],\n  [\n    false,\n    \"Thoughtsphere\",\n    \"China\",\n    \"HL Road Seat/Saddle 1\",\n    \"28/11/2020\",\n    \"39-5538991\",\n    true,\n    \"130\",\n    7,\n    3\n  ],\n  [\n    false,\n    \"Leenti\",\n    \"China\",\n    \"ML Road Rear Wheel\",\n    \"29/12/2020\",\n    \"06-9002973\",\n    true,\n    \"179\",\n    1,\n    2\n  ],\n  [\n    false,\n    \"Quaxo\",\n    \"United Kingdom\",\n    \"HL Road Rear Wheel\",\n    \"06/09/2020\",\n    \"73-6104901\",\n    true,\n    \"98\",\n    5,\n    3\n  ],\n  [\n    false,\n    \"Tanoodle\",\n    \"Chile\",\n    \"LL Mountain Seat/Saddle 2\",\n    \"24/05/2020\",\n    \"68-7384479\",\n    true,\n    \"175\",\n    2,\n    3\n  ],\n  [\n    false,\n    \"Feednation\",\n    \"China\",\n    \"ML Mountain Seat/Saddle 2\",\n    \"21/11/2020\",\n    \"26-7757763\",\n    true,\n    \"11\",\n    1,\n    3\n  ],\n  [\n    false,\n    \"Kayveo\",\n    \"China\",\n    \"HL Mountain Seat/Saddle 2\",\n    \"21/06/2020\",\n    \"07-4873562\",\n    false,\n    \"184\",\n    7,\n    4\n  ],\n  [\n    false,\n    \"Meevee\",\n    \"Saudi Arabia\",\n    \"LL Road Seat/Saddle 1\",\n    \"16/11/2020\",\n    \"46-5819554\",\n    false,\n    \"27\",\n    9,\n    3\n  ],\n  [\n    false,\n    \"Twitterworks\",\n    \"China\",\n    \"ML Road Seat/Saddle 2\",\n    \"19/04/2020\",\n    \"01-2666826\",\n    true,\n    \"186\",\n    3,\n    2\n  ],\n  [\n    false,\n    \"Wikizz\",\n    \"Tanzania\",\n    \"HL Road Seat/Saddle 2\",\n    \"08/03/2020\",\n    \"54-7090503\",\n    true,\n    \"20\",\n    3,\n    3\n  ],\n  [\n    false,\n    \"Yoveo\",\n    \"United States\",\n    \"LL Mountain Tire\",\n    \"14/10/2020\",\n    \"78-7658520\",\n    false,\n    \"153\",\n    2,\n    1\n  ],\n  [\n    false,\n    \"Yakidoo\",\n    \"China\",\n    \"ML Mountain Tire\",\n    \"12/10/2020\",\n    \"23-9926318\",\n    true,\n    \"161\",\n    8,\n    5\n  ],\n  [\n    false,\n    \"Oyope\",\n    \"China\",\n    \"HL Mountain Tire\",\n    \"20/09/2020\",\n    \"20-0179517\",\n    true,\n    \"98\",\n    10,\n    5\n  ],\n  [\n    false,\n    \"Skipstorm\",\n    \"United States\",\n    \"LL Road Tire\",\n    \"01/10/2020\",\n    \"02-9543343\",\n    true,\n    \"30\",\n    7,\n    3\n  ],\n  [\n    false,\n    \"Minyx\",\n    \"United States\",\n    \"ML Road Tire\",\n    \"07/07/2020\",\n    \"98-3938169\",\n    true,\n    \"73\",\n    10,\n    2\n  ],\n  [\n    false,\n    \"Miboo\",\n    \"China\",\n    \"HL Road Tire\",\n    \"25/07/2020\",\n    \"68-5197934\",\n    true,\n    \"158\",\n    9,\n    1\n  ],\n  [\n    false,\n    \"Realfire\",\n    \"United States\",\n    \"Touring Tire\",\n    \"27/08/2020\",\n    \"39-8260460\",\n    true,\n    \"122\",\n    5,\n    2\n  ],\n  [\n    false,\n    \"Shufflester\",\n    \"China\",\n    \"Mountain Tire Tube\",\n    \"08/06/2020\",\n    \"45-9776170\",\n    true,\n    \"33\",\n    2,\n    4\n  ],\n  [\n    false,\n    \"Ntag\",\n    \"China\",\n    \"Road Tire Tube\",\n    \"06/12/2020\",\n    \"45-0858451\",\n    true,\n    \"107\",\n    6,\n    2\n  ],\n  [\n    false,\n    \"Jabberbean\",\n    \"United States\",\n    \"Touring Tire Tube\",\n    \"26/04/2020\",\n    \"15-4247305\",\n    true,\n    \"15\",\n    1,\n    2\n  ],\n  [\n    false,\n    \"Thoughtblab\",\n    \"China\",\n    \"LL Bottom Bracket\",\n    \"21/05/2020\",\n    \"15-8534931\",\n    true,\n    \"168\",\n    5,\n    2\n  ],\n  [\n    false,\n    \"Jabbertype\",\n    \"China\",\n    \"Classic Vest\",\n    \"25/07/2020\",\n    \"23-1251557\",\n    true,\n    \"135\",\n    4,\n    2\n  ],\n  [\n    false,\n    \"Buzzshare\",\n    \"United Kingdom\",\n    \"Cycling Cap\",\n    \"07/07/2020\",\n    \"86-5920601\",\n    true,\n    \"11\",\n    1,\n    4\n  ],\n  [\n    false,\n    \"Roodel\",\n    \"United States\",\n    \"Full-Finger Gloves\",\n    \"13/01/2020\",\n    \"48-1055459\",\n    true,\n    \"41\",\n    6,\n    4\n  ],\n  [\n    false,\n    \"Zoovu\",\n    \"China\",\n    \"Half-Finger Gloves\",\n    \"03/06/2020\",\n    \"12-7842022\",\n    true,\n    \"144\",\n    6,\n    1\n  ],\n  [\n    false,\n    \"Photofeed\",\n    \"China\",\n    \"HL Mountain Frame\",\n    \"14/07/2020\",\n    \"94-5088099\",\n    true,\n    \"106\",\n    1,\n    4\n  ]\n];\n\nexport const SELECTED_CLASS = \"selected\";\nexport const ODD_ROW_CLASS = \"odd\";\n\nexport function getData() {\n  return data;\n}\n","import { TextEditor } from \"../textEditor/index.mjs\";\nimport { setAttribute, setCaretPosition } from \"../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../helpers/dom/event.mjs\";\nimport { extend } from \"../../helpers/object.mjs\";\nimport { SHORTCUTS_GROUP_NAVIGATION } from \"../../editorManager.mjs\";\nimport { A11Y_EXPANDED } from \"../../helpers/a11y.mjs\";\nconst SHORTCUTS_GROUP = 'handsontableEditor';\nexport const EDITOR_TYPE = 'handsontable';\n\n/**\n * @private\n * @class HandsontableEditor\n */\nexport class HandsontableEditor extends TextEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * Opens the editor and adjust its size.\n   */\n  open() {\n    super.open();\n    if (this.htEditor) {\n      this.htEditor.destroy();\n    }\n    if (this.htContainer.style.display === 'none') {\n      this.htContainer.style.display = '';\n    }\n\n    // Constructs and initializes a new Handsontable instance\n    this.htEditor = new this.hot.constructor(this.htContainer, this.htOptions);\n    this.htEditor.init();\n    this.htEditor.rootElement.style.display = '';\n    if (this.cellProperties.strict) {\n      this.htEditor.selectCell(0, 0);\n    } else {\n      this.htEditor.deselectCell();\n    }\n    setCaretPosition(this.TEXTAREA, 0, this.TEXTAREA.value.length);\n    this.refreshDimensions();\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TD, [A11Y_EXPANDED('true')]);\n    }\n  }\n\n  /**\n   * Closes the editor.\n   */\n  close() {\n    if (this.htEditor) {\n      this.htEditor.rootElement.style.display = 'none';\n    }\n    this.removeHooksByKey('beforeKeyDown');\n    super.close();\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TD, [A11Y_EXPANDED('false')]);\n    }\n  }\n\n  /**\n   * Prepares editor's meta data and configuration of the internal Handsontable's instance.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    const parent = this;\n    const options = {\n      startRows: 0,\n      startCols: 0,\n      minRows: 0,\n      minCols: 0,\n      className: 'listbox',\n      copyPaste: false,\n      autoColumnSize: false,\n      autoRowSize: false,\n      readOnly: true,\n      fillHandle: false,\n      autoWrapCol: false,\n      autoWrapRow: false,\n      ariaTags: false,\n      afterOnCellMouseDown(_, coords) {\n        const sourceValue = this.getSourceData(coords.row, coords.col);\n\n        // if the value is undefined then it means we don't want to set the value\n        if (sourceValue !== void 0) {\n          parent.setValue(sourceValue);\n        }\n        parent.instance.destroyEditor();\n      },\n      preventWheel: true,\n      layoutDirection: this.hot.isRtl() ? 'rtl' : 'ltr'\n    };\n    if (this.cellProperties.handsontable) {\n      extend(options, cellProperties.handsontable);\n    }\n    this.htOptions = options;\n  }\n\n  /**\n   * Begins editing on a highlighted cell and hides fillHandle corner if was present.\n   *\n   * @param {*} newInitialValue The editor initial value.\n   * @param {*} event The keyboard event object.\n   */\n  beginEditing(newInitialValue, event) {\n    const onBeginEditing = this.hot.getSettings().onBeginEditing;\n    if (onBeginEditing && onBeginEditing() === false) {\n      return;\n    }\n    super.beginEditing(newInitialValue, event);\n  }\n\n  /**\n   * Creates an editor's elements and adds necessary CSS classnames.\n   */\n  createElements() {\n    super.createElements();\n    const DIV = this.hot.rootDocument.createElement('DIV');\n    DIV.className = 'handsontableEditor';\n    this.TEXTAREA_PARENT.appendChild(DIV);\n    this.htContainer = DIV;\n    this.assignHooks();\n  }\n\n  /**\n   * Finishes editing and start saving or restoring process for editing cell or last selected range.\n   *\n   * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n   * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n   * @param {Function} callback The callback function, fired after editor closing.\n   */\n  finishEditing(restoreOriginalValue, ctrlDown, callback) {\n    if (this.htEditor && this.htEditor.isListening()) {\n      // if focus is still in the HOT editor\n      this.hot.listen(); // return the focus to the parent HOT instance\n    }\n\n    if (this.htEditor && this.htEditor.getSelectedLast()) {\n      const value = this.htEditor.getValue();\n      if (value !== void 0) {\n        // if the value is undefined then it means we don't want to set the value\n        this.setValue(value);\n      }\n    }\n    super.finishEditing(restoreOriginalValue, ctrlDown, callback);\n  }\n\n  /**\n   * Assigns afterDestroy callback to prevent memory leaks.\n   *\n   * @private\n   */\n  assignHooks() {\n    this.hot.addHook('afterDestroy', () => {\n      if (this.htEditor) {\n        this.htEditor.destroy();\n      }\n    });\n  }\n\n  /**\n   * Register shortcuts responsible for handling editor.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    super.registerShortcuts();\n    const contextConfig = {\n      group: SHORTCUTS_GROUP,\n      relativeToGroup: SHORTCUTS_GROUP_NAVIGATION,\n      position: 'before'\n    };\n    const action = (rowToSelect, event) => {\n      const innerHOT = this.htEditor;\n      if (rowToSelect !== void 0) {\n        if (rowToSelect < 0 || innerHOT.flipped && rowToSelect > innerHOT.countRows() - 1) {\n          innerHOT.deselectCell();\n        } else {\n          innerHOT.selectCell(rowToSelect, 0);\n        }\n        if (innerHOT.getData().length) {\n          event.preventDefault();\n          stopImmediatePropagation(event);\n          this.hot.listen();\n          this.TEXTAREA.focus();\n          return false;\n        }\n      }\n    };\n    editorContext.addShortcuts([{\n      keys: [['ArrowUp']],\n      callback: event => {\n        const innerHOT = this.htEditor;\n        let rowToSelect;\n        let selectedRow;\n        if (!innerHOT.getSelectedLast() && innerHOT.flipped) {\n          rowToSelect = innerHOT.countRows() - 1;\n        } else if (innerHOT.getSelectedLast()) {\n          if (innerHOT.flipped) {\n            selectedRow = innerHOT.getSelectedLast()[0];\n            rowToSelect = Math.max(0, selectedRow - 1);\n          } else {\n            selectedRow = innerHOT.getSelectedLast()[0];\n            rowToSelect = selectedRow - 1;\n          }\n        }\n        return action(rowToSelect, event);\n      },\n      preventDefault: false // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.\n    }, {\n      keys: [['ArrowDown']],\n      callback: event => {\n        const innerHOT = this.htEditor;\n        let rowToSelect;\n        let selectedRow;\n        if (!innerHOT.getSelectedLast() && !innerHOT.flipped) {\n          rowToSelect = 0;\n        } else if (innerHOT.getSelectedLast()) {\n          if (innerHOT.flipped) {\n            rowToSelect = innerHOT.getSelectedLast()[0] + 1;\n          } else if (!innerHOT.flipped) {\n            const lastRow = innerHOT.countRows() - 1;\n            selectedRow = innerHOT.getSelectedLast()[0];\n            rowToSelect = Math.min(lastRow, selectedRow + 1);\n          }\n        }\n        return action(rowToSelect, event);\n      },\n      preventDefault: false // Doesn't block default behaviour (navigation) for a `textArea` HTMLElement.\n    }], contextConfig);\n  }\n\n  /**\n   * Unregister shortcuts responsible for handling editor.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    super.unregisterShortcuts();\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { HandsontableEditor } from \"../handsontableEditor/index.mjs\";\nimport { arrayMap, pivot } from \"../../helpers/array.mjs\";\nimport { addClass, getCaretPosition, getScrollbarWidth, getSelectionEndPosition, getTrimmingContainer, offset, outerHeight, outerWidth, setAttribute, setCaretPosition } from \"../../helpers/dom/element.mjs\";\nimport { isDefined, stringify } from \"../../helpers/mixed.mjs\";\nimport { stripTags } from \"../../helpers/string.mjs\";\nimport { KEY_CODES, isPrintableChar } from \"../../helpers/unicode.mjs\";\nimport { textRenderer } from \"../../renderers/textRenderer/index.mjs\";\nimport { A11Y_ACTIVEDESCENDANT, A11Y_AUTOCOMPLETE, A11Y_COMBOBOX, A11Y_CONTROLS, A11Y_EXPANDED, A11Y_HASPOPUP, A11Y_LISTBOX, A11Y_LIVE, A11Y_OPTION, A11Y_POSINSET, A11Y_PRESENTATION, A11Y_RELEVANT, A11Y_SELECTED, A11Y_SETSIZE, A11Y_TEXT } from \"../../helpers/a11y.mjs\";\nconst privatePool = new WeakMap();\nexport const EDITOR_TYPE = 'autocomplete';\n\n/**\n * @private\n * @class AutocompleteEditor\n */\nexport class AutocompleteEditor extends HandsontableEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n  constructor(instance) {\n    super(instance);\n    /**\n     * Query string to turn available values over.\n     *\n     * @type {string}\n     */\n    /**\n     * Filters and sorts by relevance.\n     *\n     * @param {*} value The selected value.\n     * @param {string[]} choices The list of available choices.\n     * @param {boolean} caseSensitive Indicates if it's sorted by case.\n     * @returns {number[]} Array of indexes in original choices array.\n     */\n    _defineProperty(this, \"sortByRelevance\", function (value, choices, caseSensitive) {\n      const choicesRelevance = [];\n      const result = [];\n      const valueLength = value.length;\n      let choicesCount = choices.length;\n      let charsLeft;\n      let currentItem;\n      let i;\n      let valueIndex;\n      if (valueLength === 0) {\n        for (i = 0; i < choicesCount; i++) {\n          result.push(i);\n        }\n        return result;\n      }\n      for (i = 0; i < choicesCount; i++) {\n        currentItem = stripTags(stringify(choices[i]));\n        if (caseSensitive) {\n          valueIndex = currentItem.indexOf(value);\n        } else {\n          const locale = this.cellProperties.locale;\n          valueIndex = currentItem.toLocaleLowerCase(locale).indexOf(value.toLocaleLowerCase(locale));\n        }\n        if (valueIndex !== -1) {\n          charsLeft = currentItem.length - valueIndex - valueLength;\n          choicesRelevance.push({\n            baseIndex: i,\n            index: valueIndex,\n            charsLeft,\n            value: currentItem\n          });\n        }\n      }\n      choicesRelevance.sort((a, b) => {\n        if (b.index === -1) {\n          return -1;\n        }\n        if (a.index === -1) {\n          return 1;\n        }\n        if (a.index < b.index) {\n          return -1;\n        } else if (b.index < a.index) {\n          return 1;\n        } else if (a.index === b.index) {\n          if (a.charsLeft < b.charsLeft) {\n            return -1;\n          } else if (a.charsLeft > b.charsLeft) {\n            return 1;\n          }\n        }\n        return 0;\n      });\n      for (i = 0, choicesCount = choicesRelevance.length; i < choicesCount; i++) {\n        result.push(choicesRelevance[i].baseIndex);\n      }\n      return result;\n    });\n    this.query = null;\n    /**\n     * Contains stripped choices.\n     *\n     * @type {string[]}\n     */\n    this.strippedChoices = [];\n    /**\n     * Contains raw choices.\n     *\n     * @type {Array}\n     */\n    this.rawChoices = [];\n    privatePool.set(this, {\n      skipOne: false,\n      isMacOS: this.hot.rootWindow.navigator.platform.indexOf('Mac') > -1,\n      idPrefix: instance.guid.slice(0, 9)\n    });\n  }\n\n  /**\n   * Gets current value from editable element.\n   *\n   * @returns {string}\n   */\n  getValue() {\n    const selectedValue = this.rawChoices.find(value => {\n      const strippedValue = this.stripValueIfNeeded(value);\n      return strippedValue === this.TEXTAREA.value;\n    });\n    if (isDefined(selectedValue)) {\n      return selectedValue;\n    }\n    return this.TEXTAREA.value;\n  }\n\n  /**\n   * Creates an editor's elements and adds necessary CSS classnames.\n   */\n  createElements() {\n    super.createElements();\n    addClass(this.htContainer, 'autocompleteEditor');\n    addClass(this.htContainer, this.hot.rootWindow.navigator.platform.indexOf('Mac') === -1 ? '' : 'htMacScroll');\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_TEXT(), A11Y_COMBOBOX(), A11Y_HASPOPUP('listbox'), A11Y_AUTOCOMPLETE()]);\n    }\n  }\n\n  /**\n   * Prepares editor's metadata and configuration of the internal Handsontable's instance.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    const priv = privatePool.get(this);\n    super.prepare(row, col, prop, td, value, cellProperties);\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_EXPANDED('false'), A11Y_CONTROLS(`${priv.idPrefix}-listbox-${row}-${col}`)]);\n    }\n  }\n\n  /**\n   * Opens the editor and adjust its size and internal Handsontable's instance.\n   */\n  open() {\n    const priv = privatePool.get(this);\n    super.open();\n    const trimDropdown = this.cellProperties.trimDropdown === void 0 ? true : this.cellProperties.trimDropdown;\n    const rootInstanceAriaTagsEnabled = this.hot.getSettings().ariaTags;\n    const sourceArray = Array.isArray(this.cellProperties.source) ? this.cellProperties.source : null;\n    const sourceSize = sourceArray === null || sourceArray === void 0 ? void 0 : sourceArray.length;\n    const {\n      row: rowIndex,\n      col: colIndex\n    } = this;\n    this.showEditableElement();\n    this.focus();\n    let scrollbarWidth = getScrollbarWidth();\n    if (scrollbarWidth === 0 && priv.isMacOS) {\n      scrollbarWidth += 15; // default scroll bar width if scroll bars are visible only when scrolling\n    }\n\n    this.addHook('beforeKeyDown', event => this.onBeforeKeyDown(event));\n    this.htEditor.updateSettings({\n      colWidths: trimDropdown ? [outerWidth(this.TEXTAREA) - 2] : void 0,\n      width: trimDropdown ? outerWidth(this.TEXTAREA) + scrollbarWidth : void 0,\n      autoColumnSize: true,\n      renderer: (instance, TD, row, col, prop, value, cellProperties) => {\n        textRenderer(instance, TD, row, col, prop, value, cellProperties);\n        const {\n          filteringCaseSensitive,\n          allowHtml,\n          locale\n        } = this.cellProperties;\n        const query = this.query;\n        let cellValue = stringify(value);\n        let indexOfMatch;\n        let match;\n        if (cellValue && !allowHtml) {\n          indexOfMatch = filteringCaseSensitive === true ? cellValue.indexOf(query) : cellValue.toLocaleLowerCase(locale).indexOf(query.toLocaleLowerCase(locale));\n          if (indexOfMatch !== -1) {\n            match = cellValue.substr(indexOfMatch, query.length);\n            cellValue = cellValue.replace(match, `<strong>${match}</strong>`);\n          }\n        }\n        if (rootInstanceAriaTagsEnabled) {\n          setAttribute(TD, [A11Y_OPTION(),\n          // Add `setsize` and `posinset` only if the source is an array.\n          ...(sourceArray ? [A11Y_SETSIZE(sourceSize)] : []), ...(sourceArray ? [A11Y_POSINSET(sourceArray.indexOf(value) + 1)] : []), ['id', `${this.htEditor.rootElement.id}_${row}-${col}`]]);\n        }\n        TD.innerHTML = cellValue;\n      },\n      afterSelection: (startRow, startCol) => {\n        if (rootInstanceAriaTagsEnabled) {\n          const TD = this.htEditor.getCell(startRow, startCol, true);\n          setAttribute(TD, [A11Y_SELECTED()]);\n          setAttribute(this.TEXTAREA, ...A11Y_ACTIVEDESCENDANT(TD.id));\n        }\n      }\n    });\n    if (rootInstanceAriaTagsEnabled) {\n      // Add `role=presentation` to the main table to prevent the readers from treating the option list as a table.\n      setAttribute(this.htEditor.view._wt.wtOverlays.wtTable.TABLE, ...A11Y_PRESENTATION());\n      setAttribute(this.htEditor.rootElement, [A11Y_LISTBOX(), A11Y_LIVE('polite'), A11Y_RELEVANT('text'), ['id', `${priv.idPrefix}-listbox-${rowIndex}-${colIndex}`]]);\n      setAttribute(this.TEXTAREA, ...A11Y_EXPANDED('true'));\n    }\n    if (priv.skipOne) {\n      priv.skipOne = false;\n    }\n    this.hot._registerTimeout(() => {\n      this.queryChoices(this.TEXTAREA.value);\n    });\n  }\n\n  /**\n   * Closes the editor.\n   */\n  close() {\n    this.removeHooksByKey('beforeKeyDown');\n    super.close();\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TEXTAREA, [A11Y_EXPANDED('false')]);\n    }\n  }\n\n  /**\n   * Verifies result of validation or closes editor if user's cancelled changes.\n   *\n   * @param {boolean|undefined} result If `false` and the cell using allowInvalid option,\n   *                                   then an editor won't be closed until validation is passed.\n   */\n  discardEditor(result) {\n    super.discardEditor(result);\n    this.hot.view.render();\n  }\n\n  /**\n   * Prepares choices list based on applied argument.\n   *\n   * @private\n   * @param {string} query The query.\n   */\n  queryChoices(query) {\n    const source = this.cellProperties.source;\n    this.query = query;\n    if (typeof source === 'function') {\n      source.call(this.cellProperties, query, choices => {\n        this.rawChoices = choices;\n        this.updateChoicesList(this.stripValuesIfNeeded(choices));\n      });\n    } else if (Array.isArray(source)) {\n      this.rawChoices = source;\n      this.updateChoicesList(this.stripValuesIfNeeded(source));\n    } else {\n      this.updateChoicesList([]);\n    }\n  }\n\n  /**\n   * Updates list of the possible completions to choose.\n   *\n   * @private\n   * @param {Array} choicesList The choices list to process.\n   */\n  updateChoicesList(choicesList) {\n    const pos = getCaretPosition(this.TEXTAREA);\n    const endPos = getSelectionEndPosition(this.TEXTAREA);\n    const sortByRelevanceSetting = this.cellProperties.sortByRelevance;\n    const filterSetting = this.cellProperties.filter;\n    let orderByRelevance = null;\n    let highlightIndex = null;\n    let choices = choicesList;\n    if (sortByRelevanceSetting) {\n      orderByRelevance = this.sortByRelevance(this.stripValueIfNeeded(this.getValue()), choices, this.cellProperties.filteringCaseSensitive);\n    }\n    const orderByRelevanceLength = Array.isArray(orderByRelevance) ? orderByRelevance.length : 0;\n    if (filterSetting === false) {\n      if (orderByRelevanceLength) {\n        highlightIndex = orderByRelevance[0];\n      }\n    } else {\n      const sorted = [];\n      for (let i = 0, choicesCount = choices.length; i < choicesCount; i++) {\n        if (sortByRelevanceSetting && orderByRelevanceLength <= i) {\n          break;\n        }\n        if (orderByRelevanceLength) {\n          sorted.push(choices[orderByRelevance[i]]);\n        } else {\n          sorted.push(choices[i]);\n        }\n      }\n      highlightIndex = 0;\n      choices = sorted;\n    }\n    this.strippedChoices = choices;\n    this.htEditor.loadData(pivot([choices]));\n    if (choices.length === 0) {\n      this.htEditor.rootElement.style.display = 'none';\n    } else {\n      this.htEditor.rootElement.style.display = '';\n      this.updateDropdownHeight();\n      this.flipDropdownIfNeeded();\n      if (this.cellProperties.strict === true) {\n        this.highlightBestMatchingChoice(highlightIndex);\n      }\n    }\n    this.hot.listen();\n    setCaretPosition(this.TEXTAREA, pos, pos === endPos ? void 0 : endPos);\n  }\n\n  /**\n   * Checks where is enough place to open editor.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  flipDropdownIfNeeded() {\n    const trimmingContainer = getTrimmingContainer(this.hot.view._wt.wtTable.TABLE);\n    const isWindowAsScrollableElement = trimmingContainer === this.hot.rootWindow;\n    const preventOverflow = this.cellProperties.preventOverflow;\n    if (isWindowAsScrollableElement || !isWindowAsScrollableElement && (preventOverflow || preventOverflow === 'horizontal')) {\n      return false;\n    }\n    const textareaOffset = offset(this.TEXTAREA);\n    const textareaHeight = outerHeight(this.TEXTAREA);\n    const dropdownHeight = this.getDropdownHeight();\n    const trimmingContainerScrollTop = trimmingContainer.scrollTop;\n    const headersHeight = outerHeight(this.hot.view._wt.wtTable.THEAD);\n    const containerOffset = offset(trimmingContainer);\n    const spaceAbove = textareaOffset.top - containerOffset.top - headersHeight + trimmingContainerScrollTop;\n    const spaceBelow = trimmingContainer.scrollHeight - spaceAbove - headersHeight - textareaHeight;\n    const flipNeeded = dropdownHeight > spaceBelow && spaceAbove > spaceBelow;\n    if (flipNeeded) {\n      this.flipDropdown(dropdownHeight);\n    } else {\n      this.unflipDropdown();\n    }\n    this.limitDropdownIfNeeded(flipNeeded ? spaceAbove : spaceBelow, dropdownHeight);\n    return flipNeeded;\n  }\n\n  /**\n   * Checks if the internal table should generate scrollbar or could be rendered without it.\n   *\n   * @private\n   * @param {number} spaceAvailable The free space as height defined in px available for dropdown list.\n   * @param {number} dropdownHeight The dropdown height.\n   */\n  limitDropdownIfNeeded(spaceAvailable, dropdownHeight) {\n    if (dropdownHeight > spaceAvailable) {\n      let tempHeight = 0;\n      let i = 0;\n      let lastRowHeight = 0;\n      let height = null;\n      do {\n        lastRowHeight = this.htEditor.getRowHeight(i) || this.htEditor.view._wt.getSetting('defaultRowHeight');\n        tempHeight += lastRowHeight;\n        i += 1;\n      } while (tempHeight < spaceAvailable);\n      height = tempHeight - lastRowHeight;\n      if (this.htEditor.flipped) {\n        this.htEditor.rootElement.style.top = `${parseInt(this.htEditor.rootElement.style.top, 10) + dropdownHeight - height}px`; // eslint-disable-line max-len\n      }\n\n      this.setDropdownHeight(tempHeight - lastRowHeight);\n    }\n  }\n\n  /**\n   * Configures editor to open it at the top.\n   *\n   * @private\n   * @param {number} dropdownHeight The dropdown height.\n   */\n  flipDropdown(dropdownHeight) {\n    const dropdownStyle = this.htEditor.rootElement.style;\n    dropdownStyle.position = 'absolute';\n    dropdownStyle.top = `${-dropdownHeight}px`;\n    this.htEditor.flipped = true;\n  }\n\n  /**\n   * Configures editor to open it at the bottom.\n   *\n   * @private\n   */\n  unflipDropdown() {\n    const dropdownStyle = this.htEditor.rootElement.style;\n    dropdownStyle.position = 'absolute';\n    dropdownStyle.top = '';\n    this.htEditor.flipped = void 0;\n  }\n\n  /**\n   * Updates width and height of the internal Handsontable's instance.\n   *\n   * @private\n   */\n  updateDropdownHeight() {\n    const currentDropdownWidth = this.htEditor.getColWidth(0) + getScrollbarWidth(this.hot.rootDocument) + 2;\n    const trimDropdown = this.cellProperties.trimDropdown;\n    this.htEditor.updateSettings({\n      height: this.getDropdownHeight(),\n      width: trimDropdown ? void 0 : currentDropdownWidth\n    });\n    this.htEditor.view._wt.wtTable.alignOverlaysWithTrimmingContainer();\n  }\n\n  /**\n   * Sets new height of the internal Handsontable's instance.\n   *\n   * @private\n   * @param {number} height The new dropdown height.\n   */\n  setDropdownHeight(height) {\n    this.htEditor.updateSettings({\n      height\n    });\n  }\n\n  /**\n   * Creates new selection on specified row index, or deselects selected cells.\n   *\n   * @private\n   * @param {number|undefined} index The visual row index.\n   */\n  highlightBestMatchingChoice(index) {\n    if (typeof index === 'number') {\n      this.htEditor.selectCell(index, 0, void 0, void 0, void 0, false);\n    } else {\n      this.htEditor.deselectCell();\n    }\n  }\n\n  /**\n   * Calculates and return the internal Handsontable's height.\n   *\n   * @private\n   * @returns {number}\n   */\n  getDropdownHeight() {\n    const firstRowHeight = this.htEditor.getRowHeight(0) || 23;\n    const visibleRows = this.cellProperties.visibleRows;\n    return this.strippedChoices.length >= visibleRows ? visibleRows * firstRowHeight : this.strippedChoices.length * firstRowHeight + 8; // eslint-disable-line max-len\n  }\n\n  /**\n   * Sanitizes value from potential dangerous tags.\n   *\n   * @private\n   * @param {string} value The value to sanitize.\n   * @returns {string}\n   */\n  stripValueIfNeeded(value) {\n    return this.stripValuesIfNeeded([value])[0];\n  }\n\n  /**\n   * Sanitizes an array of the values from potential dangerous tags.\n   *\n   * @private\n   * @param {string[]} values The value to sanitize.\n   * @returns {string[]}\n   */\n  stripValuesIfNeeded(values) {\n    const {\n      allowHtml\n    } = this.cellProperties;\n    const stringifiedValues = arrayMap(values, value => stringify(value));\n    const strippedValues = arrayMap(stringifiedValues, value => allowHtml ? value : stripTags(value));\n    return strippedValues;\n  }\n\n  /**\n   * Captures use of arrow down and up to control their behaviour.\n   *\n   * @private\n   * @param {number} keyCode The keyboard keycode.\n   * @returns {boolean}\n   */\n  allowKeyEventPropagation(keyCode) {\n    const selectedRange = this.htEditor.getSelectedRangeLast();\n    const selected = {\n      row: selectedRange ? selectedRange.from.row : -1\n    };\n    let allowed = false;\n    if (keyCode === KEY_CODES.ARROW_DOWN && selected.row > 0 && selected.row < this.htEditor.countRows() - 1) {\n      allowed = true;\n    }\n    if (keyCode === KEY_CODES.ARROW_UP && selected.row > -1) {\n      allowed = true;\n    }\n    return allowed;\n  }\n\n  /**\n   * OnBeforeKeyDown callback.\n   *\n   * @private\n   * @param {KeyboardEvent} event The keyboard event object.\n   */\n  onBeforeKeyDown(event) {\n    const priv = privatePool.get(this);\n    priv.skipOne = false;\n    if (isPrintableChar(event.keyCode) || event.keyCode === KEY_CODES.BACKSPACE || event.keyCode === KEY_CODES.DELETE || event.keyCode === KEY_CODES.INSERT) {\n      // for Windows 10 + FF86 there is need to add delay to make sure that the value taken from\n      // the textarea is the freshest value. Otherwise the list of choices does not update correctly (see #7570).\n      // On the more modern version of the FF (~ >=91) it seems that the issue is not present or it is\n      // more difficult to induce.\n      let timeOffset = 10;\n\n      // on ctl+c / cmd+c don't update suggestion list\n      if (event.keyCode === KEY_CODES.C && (event.ctrlKey || event.metaKey)) {\n        return;\n      }\n      if (!this.isOpened()) {\n        timeOffset += 10;\n      }\n      if (this.htEditor) {\n        this.hot._registerTimeout(() => {\n          this.queryChoices(this.TEXTAREA.value);\n          priv.skipOne = true;\n        }, timeOffset);\n      }\n    }\n  }\n}","import { BaseEditor } from \"../baseEditor/index.mjs\";\nimport { hasClass } from \"../../helpers/dom/element.mjs\";\nexport const EDITOR_TYPE = 'checkbox';\n\n/**\n * @private\n * @class CheckboxEditor\n */\nexport class CheckboxEditor extends BaseEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n  beginEditing(initialValue, event) {\n    // Just some events connected with checkbox editor are delegated here. Some `keydown` events like `enter` and `space` key press\n    // are handled inside `checkboxRenderer`. Some events come here from `editorManager`. Below `if` statement was created by author\n    // for purpose of handling only `doubleclick` event which may be done on a cell with checkbox.\n\n    if (event && event.type === 'mouseup') {\n      const checkbox = this.TD.querySelector('input[type=\"checkbox\"]');\n      if (!hasClass(checkbox, 'htBadValue')) {\n        checkbox.click();\n      }\n    }\n  }\n  finishEditing() {}\n  init() {}\n  open() {}\n  close() {}\n  getValue() {}\n  setValue() {}\n  focus() {}\n}","import \"core-js/modules/es.error.cause.js\";\nimport moment from 'moment';\nimport Pikaday from 'pikaday';\nimport { TextEditor } from \"../textEditor/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { addClass, hasClass, outerHeight, outerWidth, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { A11Y_EXPANDED } from \"../../helpers/a11y.mjs\";\nimport { deepExtend } from \"../../helpers/object.mjs\";\nimport { isFunctionKey } from \"../../helpers/unicode.mjs\";\nexport const EDITOR_TYPE = 'date';\nconst SHORTCUTS_GROUP_EDITOR = 'dateEditor';\n\n/**\n * @private\n * @class DateEditor\n */\nexport class DateEditor extends TextEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * @param {Core} hotInstance Handsontable instance.\n   * @private\n   */\n  constructor(hotInstance) {\n    super(hotInstance);\n\n    // TODO: Move this option to general settings\n    this.defaultDateFormat = 'DD/MM/YYYY';\n    this.isCellEdited = false;\n    this.parentDestroyed = false;\n    this.$datePicker = null;\n  }\n  init() {\n    if (typeof moment !== 'function') {\n      throw new Error('You need to include moment.js to your project.');\n    }\n    if (typeof Pikaday !== 'function') {\n      throw new Error('You need to include Pikaday to your project.');\n    }\n    super.init();\n    this.hot.addHook('afterDestroy', () => {\n      this.parentDestroyed = true;\n      this.destroyElements();\n    });\n  }\n\n  /**\n   * Create data picker instance.\n   */\n  createElements() {\n    super.createElements();\n    this.datePicker = this.hot.rootDocument.createElement('DIV');\n    this.datePickerStyle = this.datePicker.style;\n    this.datePickerStyle.position = 'absolute';\n    this.datePickerStyle.top = 0;\n    this.datePickerStyle.left = 0;\n    this.datePickerStyle.zIndex = 9999;\n    this.datePicker.setAttribute('dir', this.hot.isRtl() ? 'rtl' : 'ltr');\n    addClass(this.datePicker, 'htDatepickerHolder');\n    this.hot.rootDocument.body.appendChild(this.datePicker);\n    const eventManager = new EventManager(this);\n\n    /**\n     * Prevent recognizing clicking on datepicker as clicking outside of table.\n     */\n    eventManager.addEventListener(this.datePicker, 'mousedown', event => {\n      if (hasClass(event.target, 'pika-day')) {\n        this.hideDatepicker();\n      }\n      event.stopPropagation();\n    });\n\n    /**\n     * Prevent caret movement in the TEXTAREA when navigating over the date picker.\n     */\n    eventManager.addEventListener(this.TEXTAREA, 'keydown', event => {\n      if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.code)) {\n        event.preventDefault();\n      }\n    });\n  }\n\n  /**\n   * Destroy data picker instance.\n   */\n  destroyElements() {\n    const datePickerParentElement = this.datePicker.parentNode;\n    if (this.$datePicker) {\n      this.$datePicker.destroy();\n    }\n    if (datePickerParentElement) {\n      datePickerParentElement.removeChild(this.datePicker);\n    }\n  }\n\n  /**\n   * Prepare editor to appear.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n  }\n\n  /**\n   * Open editor.\n   *\n   * @param {Event} [event=null] The event object.\n   */\n  open() {\n    let event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    super.open();\n    this.showDatepicker(event);\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.TD, [A11Y_EXPANDED('true')]);\n    }\n    editorContext.addShortcut({\n      keys: [['Enter']],\n      callback: keyboardEvent => {\n        // Extra Pikaday's `onchange` listener captures events and performing extra `setDate` method call which causes\n        // flickering quite often.\n        keyboardEvent.stopPropagation();\n      },\n      group: SHORTCUTS_GROUP_EDITOR\n    });\n  }\n\n  /**\n   * Close editor.\n   */\n  close() {\n    var _this$$datePicker;\n    this._opened = false;\n\n    // If the date picker was never initialized (e.g. during autofill), there's nothing to destroy.\n    if ((_this$$datePicker = this.$datePicker) !== null && _this$$datePicker !== void 0 && _this$$datePicker.destroy) {\n      this.$datePicker.destroy();\n    }\n    this.hot._registerTimeout(() => {\n      this.hot._refreshBorders();\n    });\n    if (this.TD && this.hot.getSettings().ariaTags) {\n      setAttribute(this.TD, [A11Y_EXPANDED('false')]);\n    }\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP_EDITOR);\n    super.close();\n  }\n\n  /**\n   * Finishes editing and start saving or restoring process for editing cell or last selected range.\n   *\n   * @param {boolean} restoreOriginalValue If true, then closes editor without saving value from the editor into a cell.\n   * @param {boolean} ctrlDown If true, then saveValue will save editor's value to each cell in the last selected range.\n   */\n  finishEditing() {\n    let restoreOriginalValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let ctrlDown = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (restoreOriginalValue) {\n      // pressed ESC, restore original value\n      const value = this.originalValue;\n      if (value !== void 0) {\n        this.setValue(value);\n      }\n    }\n    super.finishEditing(restoreOriginalValue, ctrlDown);\n  }\n\n  /**\n   * Show data picker.\n   *\n   * @param {Event} event The event object.\n   */\n  showDatepicker(event) {\n    const offset = this.TD.getBoundingClientRect();\n    const dateFormat = this.cellProperties.dateFormat || this.defaultDateFormat;\n    const isMouseDown = this.hot.view.isMouseDown();\n    const isMeta = event ? isFunctionKey(event.keyCode) : false;\n    let dateStr;\n    this.datePicker.style.display = 'block';\n    this.$datePicker = new Pikaday(this.getDatePickerConfig());\n    this.$datePicker._onInputFocus = function () {};\n    this.datePickerStyle.top = `${this.hot.rootWindow.pageYOffset + offset.top + outerHeight(this.TD)}px`;\n    let pickerLeftPosition = this.hot.rootWindow.pageXOffset;\n    if (this.hot.isRtl()) {\n      pickerLeftPosition = offset.right - outerWidth(this.datePicker);\n    } else {\n      pickerLeftPosition = offset.left;\n    }\n    this.datePickerStyle.left = `${pickerLeftPosition}px`;\n    if (this.originalValue) {\n      dateStr = this.originalValue;\n      if (moment(dateStr, dateFormat, true).isValid()) {\n        this.$datePicker.setMoment(moment(dateStr, dateFormat), true);\n      }\n\n      // workaround for date/time cells - pikaday resets the cell value to 12:00 AM by default, this will overwrite the value.\n      if (this.getValue() !== this.originalValue) {\n        this.setValue(this.originalValue);\n      }\n      if (!isMeta && !isMouseDown) {\n        this.setValue('');\n      }\n    } else if (this.cellProperties.defaultDate) {\n      dateStr = this.cellProperties.defaultDate;\n      if (moment(dateStr, dateFormat, true).isValid()) {\n        this.$datePicker.setMoment(moment(dateStr, dateFormat), true);\n      }\n      if (!isMeta && !isMouseDown) {\n        this.setValue('');\n      }\n    } else {\n      // if a default date is not defined, set a soft-default-date: display the current day and month in the\n      // datepicker, but don't fill the editor input\n      this.$datePicker.gotoToday();\n    }\n  }\n\n  /**\n   * Hide data picker.\n   */\n  hideDatepicker() {\n    this.datePickerStyle.display = 'none';\n    this.$datePicker.hide();\n  }\n\n  /**\n   * Get date picker options.\n   *\n   * @returns {object}\n   */\n  getDatePickerConfig() {\n    const htInput = this.TEXTAREA;\n    const options = {};\n    if (this.cellProperties && this.cellProperties.datePickerConfig) {\n      deepExtend(options, this.cellProperties.datePickerConfig);\n    }\n    const origOnSelect = options.onSelect;\n    const origOnClose = options.onClose;\n    options.field = htInput;\n    options.trigger = htInput;\n    options.container = this.datePicker;\n    options.bound = false;\n    options.format = options.format || this.defaultDateFormat;\n    options.reposition = options.reposition || false;\n    // Set the RTL to `false`. Due to the https://github.com/Pikaday/Pikaday/issues/647 bug, the layout direction\n    // of the date picker is controlled by juggling the \"dir\" attribute of the root date picker element.\n    // See line @64 of this file.\n    options.isRTL = false;\n    options.onSelect = value => {\n      let dateStr = value;\n      if (!isNaN(dateStr.getTime())) {\n        dateStr = moment(dateStr).format(this.cellProperties.dateFormat || this.defaultDateFormat);\n      }\n      this.setValue(dateStr);\n      if (origOnSelect) {\n        origOnSelect();\n      }\n    };\n    options.onClose = () => {\n      if (!this.parentDestroyed) {\n        this.finishEditing(false);\n      }\n      if (origOnClose) {\n        origOnClose();\n      }\n    };\n    return options;\n  }\n}","import { AutocompleteEditor } from \"../autocompleteEditor/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nexport const EDITOR_TYPE = 'dropdown';\n\n/**\n * @private\n * @class DropdownEditor\n */\nexport class DropdownEditor extends AutocompleteEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    this.cellProperties.filter = false;\n    this.cellProperties.strict = true;\n  }\n}\nHooks.getSingleton().add('beforeValidate', function (value, row, col) {\n  const cellMeta = this.getCellMeta(row, this.propToCol(col));\n  if (cellMeta.editor === DropdownEditor) {\n    if (cellMeta.strict === void 0) {\n      cellMeta.filter = false;\n      cellMeta.strict = true;\n    }\n  }\n});","import { TextEditor } from \"../textEditor/index.mjs\";\nexport const EDITOR_TYPE = 'numeric';\n\n/**\n * @private\n * @class NumericEditor\n */\nexport class NumericEditor extends TextEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n}","import { TextEditor } from \"../textEditor/index.mjs\";\nimport { empty } from \"../../helpers/dom/element.mjs\";\nexport const EDITOR_TYPE = 'password';\n\n/**\n * @private\n * @class PasswordEditor\n */\nexport class PasswordEditor extends TextEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n  createElements() {\n    super.createElements();\n    this.TEXTAREA = this.hot.rootDocument.createElement('input');\n    this.TEXTAREA.setAttribute('type', 'password');\n    this.TEXTAREA.setAttribute('data-hot-input', ''); // Makes the element recognizable by Hot as its own component's element.\n    this.TEXTAREA.className = 'handsontableInput';\n    this.textareaStyle = this.TEXTAREA.style;\n    this.textareaStyle.width = 0;\n    this.textareaStyle.height = 0;\n    empty(this.TEXTAREA_PARENT);\n    this.TEXTAREA_PARENT.appendChild(this.TEXTAREA);\n  }\n}","import { BaseEditor, EDITOR_STATE } from \"../baseEditor/index.mjs\";\nimport { addClass, empty, fastInnerHTML, hasClass, removeClass } from \"../../helpers/dom/element.mjs\";\nimport { objectEach } from \"../../helpers/object.mjs\";\nconst EDITOR_VISIBLE_CLASS_NAME = 'ht_editor_visible';\nconst SHORTCUTS_GROUP = 'selectEditor';\nexport const EDITOR_TYPE = 'select';\n\n/**\n * @private\n * @class SelectEditor\n */\nexport class SelectEditor extends BaseEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * Initializes editor instance, DOM Element and mount hooks.\n   */\n  init() {\n    this.select = this.hot.rootDocument.createElement('SELECT');\n    addClass(this.select, 'htSelectEditor');\n    this.select.style.display = 'none';\n    this.hot.rootElement.appendChild(this.select);\n    this.registerHooks();\n  }\n\n  /**\n   * Returns select's value.\n   *\n   * @returns {*}\n   */\n  getValue() {\n    return this.select.value;\n  }\n\n  /**\n   * Sets value in the select element.\n   *\n   * @param {*} value A new select's value.\n   */\n  setValue(value) {\n    this.select.value = value;\n  }\n\n  /**\n   * Opens the editor and adjust its size.\n   */\n  open() {\n    this._opened = true;\n    this.refreshDimensions();\n    this.select.style.display = '';\n    const shortcutManager = this.hot.getShortcutManager();\n    shortcutManager.setActiveContextName('editor');\n    this.registerShortcuts();\n  }\n\n  /**\n   * Closes the editor.\n   */\n  close() {\n    this._opened = false;\n    this.select.style.display = 'none';\n    if (hasClass(this.select, EDITOR_VISIBLE_CLASS_NAME)) {\n      removeClass(this.select, EDITOR_VISIBLE_CLASS_NAME);\n    }\n    this.unregisterShortcuts();\n    this.clearHooks();\n  }\n\n  /**\n   * Sets focus state on the select element.\n   */\n  focus() {\n    this.select.focus();\n  }\n\n  /**\n   * Binds hooks to refresh editor's size after scrolling of the viewport or resizing of columns/rows.\n   *\n   * @private\n   */\n  registerHooks() {\n    this.addHook('afterScrollHorizontally', () => this.refreshDimensions());\n    this.addHook('afterScrollVertically', () => this.refreshDimensions());\n    this.addHook('afterColumnResize', () => this.refreshDimensions());\n    this.addHook('afterRowResize', () => this.refreshDimensions());\n  }\n\n  /**\n   * Prepares editor's meta data and a list of available options.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    const selectOptions = this.cellProperties.selectOptions;\n    let options;\n    if (typeof selectOptions === 'function') {\n      options = this.prepareOptions(selectOptions(this.row, this.col, this.prop));\n    } else {\n      options = this.prepareOptions(selectOptions);\n    }\n    empty(this.select);\n    objectEach(options, (optionValue, key) => {\n      const optionElement = this.hot.rootDocument.createElement('OPTION');\n      optionElement.value = key;\n      fastInnerHTML(optionElement, optionValue);\n      this.select.appendChild(optionElement);\n    });\n  }\n\n  /**\n   * Creates consistent list of available options.\n   *\n   * @private\n   * @param {Array|object} optionsToPrepare The list of the values to render in the select eleemnt.\n   * @returns {object}\n   */\n  prepareOptions(optionsToPrepare) {\n    let preparedOptions = {};\n    if (Array.isArray(optionsToPrepare)) {\n      for (let i = 0, len = optionsToPrepare.length; i < len; i++) {\n        preparedOptions[optionsToPrepare[i]] = optionsToPrepare[i];\n      }\n    } else if (typeof optionsToPrepare === 'object') {\n      preparedOptions = optionsToPrepare;\n    }\n    return preparedOptions;\n  }\n\n  /**\n   * Refreshes editor's value using source data.\n   *\n   * @private\n   */\n  refreshValue() {\n    const sourceData = this.hot.getSourceDataAtCell(this.row, this.prop);\n    this.originalValue = sourceData;\n    this.setValue(sourceData);\n    this.refreshDimensions();\n  }\n\n  /**\n   * Refreshes editor's size and position.\n   *\n   * @private\n   */\n  refreshDimensions() {\n    if (this.state !== EDITOR_STATE.EDITING) {\n      return;\n    }\n    this.TD = this.getEditedCell();\n\n    // TD is outside of the viewport.\n    if (!this.TD) {\n      this.close();\n      return;\n    }\n    const {\n      top,\n      start,\n      width,\n      height\n    } = this.getEditedCellRect();\n    const selectStyle = this.select.style;\n    selectStyle.height = `${height}px`;\n    selectStyle.width = `${width}px`;\n    selectStyle.top = `${top}px`;\n    selectStyle[this.hot.isRtl() ? 'right' : 'left'] = `${start}px`;\n    selectStyle.margin = '0px';\n    addClass(this.select, EDITOR_VISIBLE_CLASS_NAME);\n  }\n\n  /**\n   * Register shortcuts responsible for handling editor.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    const contextConfig = {\n      group: SHORTCUTS_GROUP\n    };\n\n    // Actions from fast edit works.\n    if (this.isInFullEditMode() === false) {\n      return;\n    }\n    editorContext.addShortcuts([{\n      keys: [['ArrowUp']],\n      callback: () => {\n        const previousOptionIndex = this.select.selectedIndex - 1;\n        if (previousOptionIndex >= 0) {\n          this.select[previousOptionIndex].selected = true;\n        }\n      }\n    }, {\n      keys: [['ArrowDown']],\n      callback: () => {\n        const nextOptionIndex = this.select.selectedIndex + 1;\n        if (nextOptionIndex <= this.select.length - 1) {\n          this.select[nextOptionIndex].selected = true;\n        }\n      }\n    }], contextConfig);\n  }\n\n  /**\n   * Unregister shortcuts responsible for handling editor.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    const shortcutManager = this.hot.getShortcutManager();\n    const editorContext = shortcutManager.getContext('editor');\n    editorContext.removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n}","import { TextEditor } from \"../textEditor/index.mjs\";\nexport const EDITOR_TYPE = 'time';\n\n/**\n * @private\n * @class TimeEditor\n */\nexport class TimeEditor extends TextEditor {\n  static get EDITOR_TYPE() {\n    return EDITOR_TYPE;\n  }\n\n  /**\n   * Prepares editor's meta data.\n   *\n   * @param {number} row The visual row index.\n   * @param {number} col The visual column index.\n   * @param {number|string} prop The column property (passed when datasource is an array of objects).\n   * @param {HTMLTableCellElement} td The rendered cell element.\n   * @param {*} value The rendered value.\n   * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n   */\n  prepare(row, col, prop, td, value, cellProperties) {\n    super.prepare(row, col, prop, td, value, cellProperties);\n    this.TEXTAREA.dir = 'ltr';\n  }\n}","import { AutocompleteEditor, EDITOR_TYPE as AUTOCOMPLETE_EDITOR } from \"./autocompleteEditor/index.mjs\";\nimport { BaseEditor, EDITOR_TYPE as BASE_EDITOR } from \"./baseEditor/index.mjs\";\nimport { CheckboxEditor, EDITOR_TYPE as CHECKBOX_EDITOR } from \"./checkboxEditor/index.mjs\";\nimport { DateEditor, EDITOR_TYPE as DATE_EDITOR } from \"./dateEditor/index.mjs\";\nimport { DropdownEditor, EDITOR_TYPE as DROPDOWN_EDITOR } from \"./dropdownEditor/index.mjs\";\nimport { HandsontableEditor, EDITOR_TYPE as HANDSONTABLE_EDITOR } from \"./handsontableEditor/index.mjs\";\nimport { NumericEditor, EDITOR_TYPE as NUMERIC_EDITOR } from \"./numericEditor/index.mjs\";\nimport { PasswordEditor, EDITOR_TYPE as PASSWORD_EDITOR } from \"./passwordEditor/index.mjs\";\nimport { SelectEditor, EDITOR_TYPE as SELECT_EDITOR } from \"./selectEditor/index.mjs\";\nimport { TextEditor, EDITOR_TYPE as TEXT_EDITOR } from \"./textEditor/index.mjs\";\nimport { TimeEditor, EDITOR_TYPE as TIME_EDITOR } from \"./timeEditor/index.mjs\";\nimport { registerEditor } from \"./registry.mjs\";\n/**\n * Registers all available editors.\n */\nexport function registerAllEditors() {\n  registerEditor(BaseEditor);\n  registerEditor(AutocompleteEditor);\n  registerEditor(CheckboxEditor);\n  registerEditor(DateEditor);\n  registerEditor(DropdownEditor);\n  registerEditor(HandsontableEditor);\n  registerEditor(NumericEditor);\n  registerEditor(PasswordEditor);\n  registerEditor(SelectEditor);\n  registerEditor(TextEditor);\n  registerEditor(TimeEditor);\n}\nexport { AutocompleteEditor, AUTOCOMPLETE_EDITOR, BaseEditor, BASE_EDITOR, CheckboxEditor, CHECKBOX_EDITOR, DateEditor, DATE_EDITOR, DropdownEditor, DROPDOWN_EDITOR, HandsontableEditor, HANDSONTABLE_EDITOR, NumericEditor, NUMERIC_EDITOR, PasswordEditor, PASSWORD_EDITOR, SelectEditor, SELECT_EDITOR, TextEditor, TEXT_EDITOR, TimeEditor, TIME_EDITOR };\nexport { RegisteredEditor, _getEditorInstance, getEditor, getEditorInstance, getRegisteredEditorNames, getRegisteredEditors, hasEditor, registerEditor } from \"./registry.mjs\";","import { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport { fastInnerHTML } from \"../../helpers/dom/element.mjs\";\nexport const RENDERER_TYPE = 'html';\n\n/**\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function htmlRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  fastInnerHTML(TD, value === null || value === void 0 ? '' : value, false);\n}\nhtmlRenderer.RENDERER_TYPE = RENDERER_TYPE;","import { htmlRenderer } from \"../htmlRenderer/index.mjs\";\nimport { textRenderer } from \"../textRenderer/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { addClass, hasClass } from \"../../helpers/dom/element.mjs\";\nimport { A11Y_HASPOPUP, A11Y_HIDDEN } from \"../../helpers/a11y.mjs\";\nexport const RENDERER_TYPE = 'autocomplete';\n\n/**\n * Autocomplete renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function autocompleteRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  const {\n    rootDocument\n  } = instance;\n  const rendererFunc = cellProperties.allowHtml ? htmlRenderer : textRenderer;\n  const ARROW = rootDocument.createElement('DIV');\n  const isAriaEnabled = instance.getSettings().ariaTags;\n  ARROW.className = 'htAutocompleteArrow';\n  if (isAriaEnabled) {\n    ARROW.setAttribute(...A11Y_HIDDEN());\n  }\n  ARROW.appendChild(rootDocument.createTextNode(String.fromCharCode(9660)));\n  rendererFunc.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  if (!TD.firstChild) {\n    // http://jsperf.com/empty-node-if-needed\n    // otherwise empty fields appear borderless in demo/renderers.html (IE)\n    TD.appendChild(rootDocument.createTextNode(String.fromCharCode(160))); // workaround for https://github.com/handsontable/handsontable/issues/1946\n    // this is faster than innerHTML. See: https://github.com/handsontable/handsontable/wiki/JavaScript-&-DOM-performance-tips\n  }\n\n  TD.insertBefore(ARROW, TD.firstChild);\n  addClass(TD, 'htAutocomplete');\n  if (isAriaEnabled) {\n    TD.setAttribute(...A11Y_HASPOPUP('listbox'));\n  }\n  if (!instance.acArrowListener) {\n    const eventManager = new EventManager(instance);\n\n    // not very elegant but easy and fast\n    instance.acArrowListener = function (event) {\n      if (hasClass(event.target, 'htAutocompleteArrow')) {\n        instance.view._wt.getSetting('onCellDblClick', null, instance._createCellCoords(row, col), TD);\n      }\n    };\n    eventManager.addEventListener(instance.rootElement, 'mousedown', instance.acArrowListener);\n\n    // We need to unbind the listener after the table has been destroyed\n    instance.addHookOnce('afterDestroy', () => {\n      eventManager.destroy();\n    });\n  }\n}\nautocompleteRenderer.RENDERER_TYPE = RENDERER_TYPE;","import \"core-js/modules/es.array.push.js\";\nimport { baseRenderer } from \"../baseRenderer/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { empty, addClass, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { isEmpty, stringify } from \"../../helpers/mixed.mjs\";\nimport { EDITOR_EDIT_GROUP as SHORTCUTS_GROUP_EDITOR } from \"../../shortcutContexts/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { A11Y_CHECKBOX, A11Y_CHECKED, A11Y_LABEL } from \"../../helpers/a11y.mjs\";\nimport { CHECKBOX_CHECKED, CHECKBOX_UNCHECKED } from \"../../i18n/constants.mjs\";\nconst isListeningKeyDownEvent = new WeakMap();\nconst isCheckboxListenerAdded = new WeakMap();\nconst BAD_VALUE_CLASS = 'htBadValue';\nconst ATTR_ROW = 'data-row';\nconst ATTR_COLUMN = 'data-col';\nconst SHORTCUTS_GROUP = 'checkboxRenderer';\nexport const RENDERER_TYPE = 'checkbox';\nHooks.getSingleton().add('modifyAutoColumnSizeSeed', function (bundleSeed, cellMeta, cellValue) {\n  const {\n    label,\n    type,\n    row,\n    column,\n    prop\n  } = cellMeta;\n  if (type !== RENDERER_TYPE) {\n    return;\n  }\n  if (label) {\n    const {\n      value: labelValue,\n      property: labelProperty\n    } = label;\n    let labelText = cellValue;\n    if (labelValue) {\n      labelText = typeof labelValue === 'function' ? labelValue(row, column, prop, cellValue) : labelValue;\n    } else if (labelProperty) {\n      const labelData = this.getDataAtRowProp(row, labelProperty);\n      labelText = labelData !== null ? labelData : cellValue;\n    }\n    bundleSeed = labelText;\n  }\n  return bundleSeed;\n});\n/**\n * Checkbox renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function checkboxRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  const {\n    rootDocument\n  } = instance;\n  const ariaEnabled = instance.getSettings().ariaTags;\n  baseRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  registerEvents(instance);\n  let input = createInput(rootDocument);\n  const labelOptions = cellProperties.label;\n  let badValue = false;\n  if (typeof cellProperties.checkedTemplate === 'undefined') {\n    cellProperties.checkedTemplate = true;\n  }\n  if (typeof cellProperties.uncheckedTemplate === 'undefined') {\n    cellProperties.uncheckedTemplate = false;\n  }\n  empty(TD); // TODO identify under what circumstances this line can be removed\n\n  if (value === cellProperties.checkedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.checkedTemplate).toLocaleLowerCase(cellProperties.locale)) {\n    input.checked = true;\n  } else if (value === cellProperties.uncheckedTemplate || stringify(value).toLocaleLowerCase(cellProperties.locale) === stringify(cellProperties.uncheckedTemplate).toLocaleLowerCase(cellProperties.locale)) {\n    input.checked = false;\n  } else if (isEmpty(value)) {\n    // default value\n    addClass(input, 'noValue');\n  } else {\n    input.style.display = 'none';\n    addClass(input, BAD_VALUE_CLASS);\n    badValue = true;\n  }\n  setAttribute(input, [[ATTR_ROW, row], [ATTR_COLUMN, col]]);\n  if (ariaEnabled) {\n    setAttribute(input, [A11Y_LABEL(input.checked ? instance.getTranslatedPhrase(CHECKBOX_CHECKED) : instance.getTranslatedPhrase(CHECKBOX_UNCHECKED)), A11Y_CHECKED(input.checked), A11Y_CHECKBOX()]);\n  }\n  if (!badValue && labelOptions) {\n    let labelText = '';\n    if (labelOptions.value) {\n      labelText = typeof labelOptions.value === 'function' ? labelOptions.value.call(this, row, col, prop, value) : labelOptions.value;\n    } else if (labelOptions.property) {\n      const labelValue = instance.getDataAtRowProp(row, labelOptions.property);\n      labelText = labelValue !== null ? labelValue : '';\n    }\n    const label = createLabel(rootDocument, labelText, labelOptions.separated !== true);\n    if (labelOptions.position === 'before') {\n      if (labelOptions.separated) {\n        TD.appendChild(label);\n        TD.appendChild(input);\n      } else {\n        label.appendChild(input);\n        input = label;\n      }\n    } else if (!labelOptions.position || labelOptions.position === 'after') {\n      if (labelOptions.separated) {\n        TD.appendChild(input);\n        TD.appendChild(label);\n      } else {\n        label.insertBefore(input, label.firstChild);\n        input = label;\n      }\n    }\n  }\n  if (!labelOptions || labelOptions && !labelOptions.separated) {\n    TD.appendChild(input);\n  }\n  if (badValue) {\n    TD.appendChild(rootDocument.createTextNode('#bad-value#'));\n  }\n  if (!isListeningKeyDownEvent.has(instance)) {\n    isListeningKeyDownEvent.set(instance, true);\n    registerShortcuts();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling checkbox state.\n   *\n   * @private\n   */\n  function registerShortcuts() {\n    const shortcutManager = instance.getShortcutManager();\n    const gridContext = shortcutManager.getContext('grid');\n    const config = {\n      group: SHORTCUTS_GROUP\n    };\n    gridContext.addShortcuts([{\n      keys: [['space']],\n      callback: () => {\n        changeSelectedCheckboxesState();\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      }\n    }, {\n      keys: [['enter']],\n      callback: () => {\n        changeSelectedCheckboxesState();\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      },\n\n      runOnlyIf: () => instance.getSettings().enterBeginsEditing\n    }, {\n      keys: [['delete'], ['backspace']],\n      callback: () => {\n        changeSelectedCheckboxesState(true);\n        return !areSelectedCheckboxCells(); // False blocks next action associated with the keyboard shortcut.\n      },\n\n      relativeToGroup: SHORTCUTS_GROUP_EDITOR,\n      position: 'before'\n    }], config);\n  }\n\n  /**\n   * Change checkbox checked property.\n   *\n   * @private\n   * @param {boolean} [uncheckCheckbox=false] The new \"checked\" state for the checkbox elements.\n   */\n  function changeSelectedCheckboxesState() {\n    let uncheckCheckbox = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const selRange = instance.getSelectedRange();\n    if (!selRange) {\n      return;\n    }\n    for (let key = 0; key < selRange.length; key++) {\n      const {\n        row: startRow,\n        col: startColumn\n      } = selRange[key].getTopStartCorner();\n      const {\n        row: endRow,\n        col: endColumn\n      } = selRange[key].getBottomEndCorner();\n      const changes = [];\n      for (let visualRow = startRow; visualRow <= endRow; visualRow += 1) {\n        for (let visualColumn = startColumn; visualColumn <= endColumn; visualColumn += 1) {\n          const cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n          if (cachedCellProperties.type !== 'checkbox') {\n            return;\n          }\n\n          /* eslint-disable no-continue */\n          if (cachedCellProperties.readOnly === true) {\n            continue;\n          }\n          if (typeof cachedCellProperties.checkedTemplate === 'undefined') {\n            cachedCellProperties.checkedTemplate = true;\n          }\n          if (typeof cachedCellProperties.uncheckedTemplate === 'undefined') {\n            cachedCellProperties.uncheckedTemplate = false;\n          }\n          const dataAtCell = instance.getDataAtCell(visualRow, visualColumn);\n          if (uncheckCheckbox === false) {\n            if ([cachedCellProperties.checkedTemplate, cachedCellProperties.checkedTemplate.toString()].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n            } else if ([cachedCellProperties.uncheckedTemplate, cachedCellProperties.uncheckedTemplate.toString(), null, void 0].includes(dataAtCell)) {\n              // eslint-disable-line max-len\n              changes.push([visualRow, visualColumn, cachedCellProperties.checkedTemplate]);\n            }\n          } else {\n            changes.push([visualRow, visualColumn, cachedCellProperties.uncheckedTemplate]);\n          }\n        }\n      }\n      if (changes.length > 0) {\n        instance.setDataAtCell(changes);\n      }\n    }\n  }\n\n  /**\n   * Check whether all selected cells are with checkbox type.\n   *\n   * @returns {boolean}\n   * @private\n   */\n  function areSelectedCheckboxCells() {\n    const selRange = instance.getSelectedRange();\n    if (!selRange) {\n      return;\n    }\n    for (let key = 0; key < selRange.length; key++) {\n      const topLeft = selRange[key].getTopStartCorner();\n      const bottomRight = selRange[key].getBottomEndCorner();\n      for (let visualRow = topLeft.row; visualRow <= bottomRight.row; visualRow++) {\n        for (let visualColumn = topLeft.col; visualColumn <= bottomRight.col; visualColumn++) {\n          const cachedCellProperties = instance.getCellMeta(visualRow, visualColumn);\n          if (cachedCellProperties.type !== 'checkbox') {\n            return false;\n          }\n          const cell = instance.getCell(visualRow, visualColumn);\n          if (cell === null || cell === void 0) {\n            return true;\n          } else {\n            const checkboxes = cell.querySelectorAll('input[type=checkbox]');\n            if (checkboxes.length > 0 && !cachedCellProperties.readOnly) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n}\ncheckboxRenderer.RENDERER_TYPE = RENDERER_TYPE;\n\n/**\n * Register checkbox listeners.\n *\n * @param {Core} instance The Handsontable instance.\n * @returns {EventManager}\n */\nfunction registerEvents(instance) {\n  let eventManager = isCheckboxListenerAdded.get(instance);\n  if (!eventManager) {\n    const {\n      rootElement\n    } = instance;\n    eventManager = new EventManager(instance);\n    eventManager.addEventListener(rootElement, 'click', event => onClick(event, instance));\n    eventManager.addEventListener(rootElement, 'mouseup', event => onMouseUp(event, instance));\n    eventManager.addEventListener(rootElement, 'change', event => onChange(event, instance));\n    isCheckboxListenerAdded.set(instance, eventManager);\n  }\n  return eventManager;\n}\n\n/**\n * Create input element.\n *\n * @param {Document} rootDocument The document owner.\n * @returns {Node}\n */\nfunction createInput(rootDocument) {\n  const input = rootDocument.createElement('input');\n  input.className = 'htCheckboxRendererInput';\n  input.type = 'checkbox';\n  input.setAttribute('autocomplete', 'off');\n  input.setAttribute('tabindex', '-1');\n  return input.cloneNode(false);\n}\n\n/**\n * Create label element.\n *\n * @param {Document} rootDocument The document owner.\n * @param {string} text The label text.\n * @param {boolean} fullWidth Determines whether label should have full width.\n * @returns {Node}\n */\nfunction createLabel(rootDocument, text, fullWidth) {\n  const label = rootDocument.createElement('label');\n  label.className = `htCheckboxRendererLabel ${fullWidth ? 'fullWidth' : ''}`;\n  label.appendChild(rootDocument.createTextNode(text));\n  return label.cloneNode(true);\n}\n\n/**\n * `mouseup` callback.\n *\n * @private\n * @param {Event} event `mouseup` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onMouseUp(event, instance) {\n  const {\n    target\n  } = event;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  setTimeout(instance.listen, 10);\n}\n\n/**\n * `click` callback.\n *\n * @private\n * @param {MouseEvent} event `click` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onClick(event, instance) {\n  const {\n    target\n  } = event;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  const row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  const col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  const cellProperties = instance.getCellMeta(row, col);\n  if (cellProperties.readOnly) {\n    event.preventDefault();\n  }\n}\n\n/**\n * `change` callback.\n *\n * @param {Event} event `change` event.\n * @param {Core} instance The Handsontable instance.\n */\nfunction onChange(event, instance) {\n  const {\n    target\n  } = event;\n  if (!isCheckboxInput(target)) {\n    return;\n  }\n  if (!target.hasAttribute(ATTR_ROW) || !target.hasAttribute(ATTR_COLUMN)) {\n    return;\n  }\n  const row = parseInt(target.getAttribute(ATTR_ROW), 10);\n  const col = parseInt(target.getAttribute(ATTR_COLUMN), 10);\n  const cellProperties = instance.getCellMeta(row, col);\n  if (!cellProperties.readOnly) {\n    let newCheckboxValue = null;\n    if (event.target.checked) {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? true : cellProperties.checkedTemplate;\n    } else {\n      newCheckboxValue = cellProperties.uncheckedTemplate === void 0 ? false : cellProperties.uncheckedTemplate;\n    }\n    instance.setDataAtCell(row, col, newCheckboxValue);\n  }\n}\n\n/**\n * Check if the provided element is the checkbox input.\n *\n * @private\n * @param {HTMLElement} element The element in question.\n * @returns {boolean}\n */\nfunction isCheckboxInput(element) {\n  return element.tagName === 'INPUT' && element.getAttribute('type') === 'checkbox';\n}","import \"core-js/modules/es.array.push.js\";\nimport numbro from 'numbro';\nimport { textRenderer } from \"../textRenderer/index.mjs\";\nimport { isNumeric } from \"../../helpers/number.mjs\";\nexport const RENDERER_TYPE = 'numeric';\n\n/**\n * Numeric cell renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function numericRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  let newValue = value;\n  if (isNumeric(newValue)) {\n    const numericFormat = cellProperties.numericFormat;\n    const cellCulture = numericFormat && numericFormat.culture || '-';\n    const cellFormatPattern = numericFormat && numericFormat.pattern;\n    const className = cellProperties.className || '';\n    const classArr = className.length ? className.split(' ') : [];\n    if (typeof cellCulture !== 'undefined' && !numbro.languages()[cellCulture]) {\n      const shortTag = cellCulture.replace('-', '');\n      const langData = numbro.allLanguages ? numbro.allLanguages[cellCulture] : numbro[shortTag];\n      if (langData) {\n        numbro.registerLanguage(langData);\n      }\n    }\n    numbro.setLanguage(cellCulture);\n    newValue = numbro(newValue).format(cellFormatPattern || '0');\n    if (classArr.indexOf('htLeft') < 0 && classArr.indexOf('htCenter') < 0 && classArr.indexOf('htRight') < 0 && classArr.indexOf('htJustify') < 0) {\n      classArr.push('htRight');\n    }\n    if (classArr.indexOf('htNumeric') < 0) {\n      classArr.push('htNumeric');\n    }\n    cellProperties.className = classArr.join(' ');\n    TD.dir = 'ltr';\n  }\n  textRenderer(instance, TD, row, col, prop, newValue, cellProperties);\n}\nnumericRenderer.RENDERER_TYPE = RENDERER_TYPE;","import { textRenderer } from \"../textRenderer/index.mjs\";\nimport { fastInnerHTML } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nexport const RENDERER_TYPE = 'password';\n\n/**\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function passwordRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  textRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  const hashLength = cellProperties.hashLength || TD.innerHTML.length;\n  const hashSymbol = cellProperties.hashSymbol || '*';\n  let hash = '';\n  rangeEach(hashLength - 1, () => {\n    hash += hashSymbol;\n  });\n  fastInnerHTML(TD, hash);\n}\npasswordRenderer.RENDERER_TYPE = RENDERER_TYPE;","import { textRenderer } from \"../textRenderer/index.mjs\";\nexport const RENDERER_TYPE = 'time';\n\n/**\n * Default time renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function timeRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  textRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  TD.dir = 'ltr';\n}\ntimeRenderer.RENDERER_TYPE = RENDERER_TYPE;","import { autocompleteRenderer, RENDERER_TYPE as AUTOCOMPLETE_RENDERER } from \"./autocompleteRenderer/index.mjs\";\nimport { baseRenderer, RENDERER_TYPE as BASE_RENDERER } from \"./baseRenderer/index.mjs\";\nimport { checkboxRenderer, RENDERER_TYPE as CHECKBOX_RENDERER } from \"./checkboxRenderer/index.mjs\";\nimport { htmlRenderer, RENDERER_TYPE as HTML_RENDERER } from \"./htmlRenderer/index.mjs\";\nimport { numericRenderer, RENDERER_TYPE as NUMERIC_RENDERER } from \"./numericRenderer/index.mjs\";\nimport { passwordRenderer, RENDERER_TYPE as PASSWORD_RENDERER } from \"./passwordRenderer/index.mjs\";\nimport { textRenderer, RENDERER_TYPE as TEXT_RENDERER } from \"./textRenderer/index.mjs\";\nimport { timeRenderer, RENDERER_TYPE as TIME_RENDERER } from \"./timeRenderer/index.mjs\";\nimport { registerRenderer } from \"./registry.mjs\";\n/**\n * Registers all available renderers.\n */\nexport function registerAllRenderers() {\n  registerRenderer(autocompleteRenderer);\n  registerRenderer(baseRenderer);\n  registerRenderer(checkboxRenderer);\n  registerRenderer(htmlRenderer);\n  registerRenderer(numericRenderer);\n  registerRenderer(passwordRenderer);\n  registerRenderer(textRenderer);\n  registerRenderer(timeRenderer);\n}\nexport { autocompleteRenderer, AUTOCOMPLETE_RENDERER, baseRenderer, BASE_RENDERER, checkboxRenderer, CHECKBOX_RENDERER, htmlRenderer, HTML_RENDERER, numericRenderer, NUMERIC_RENDERER, passwordRenderer, PASSWORD_RENDERER, textRenderer, TEXT_RENDERER, timeRenderer, TIME_RENDERER };\nexport { getRegisteredRendererNames, getRegisteredRenderers, getRenderer, hasRenderer, registerRenderer } from \"./registry.mjs\";","export const VALIDATOR_TYPE = 'autocomplete';\n\n/**\n * The Autocomplete cell validator.\n *\n * @private\n * @param {*} value Value of edited cell.\n * @param {Function} callback Callback called with validation result.\n */\nexport function autocompleteValidator(value, callback) {\n  let valueToValidate = value;\n  if (valueToValidate === null || valueToValidate === void 0) {\n    valueToValidate = '';\n  }\n  if (this.allowEmpty && valueToValidate === '') {\n    callback(true);\n    return;\n  }\n  if (this.strict && this.source) {\n    if (typeof this.source === 'function') {\n      this.source(valueToValidate, process(valueToValidate, callback));\n    } else {\n      process(valueToValidate, callback)(this.source);\n    }\n  } else {\n    callback(true);\n  }\n}\nautocompleteValidator.VALIDATOR_TYPE = VALIDATOR_TYPE;\n\n/**\n * Function responsible for validation of autocomplete value.\n *\n * @param {*} value Value of edited cell.\n * @param {Function} callback Callback called with validation result.\n * @returns {Function}\n */\nfunction process(value, callback) {\n  const originalVal = value;\n  return function (source) {\n    let found = false;\n    for (let s = 0, slen = source.length; s < slen; s++) {\n      if (originalVal === source[s]) {\n        found = true; // perfect match\n        break;\n      }\n    }\n    callback(found);\n  };\n}","/**\n * Get normalized Date object for the ISO formatted date strings.\n * Natively, the date object parsed from a ISO 8601 string will be offsetted by the timezone difference, which may result in returning a wrong date.\n * See: Github issue #3338.\n *\n * @param {string} dateString String representing the date.\n * @returns {Date} The proper Date object.\n */\nexport function getNormalizedDate(dateString) {\n  const nativeDate = new Date(dateString);\n\n  // NaN if dateString is not in ISO format\n  if (!isNaN(new Date(`${dateString}T00:00`).getDate())) {\n    // Compensate timezone offset\n    return new Date(nativeDate.getTime() + nativeDate.getTimezoneOffset() * 60000);\n  }\n  return nativeDate;\n}","import moment from 'moment';\nimport { getEditorInstance } from \"../../editors/registry.mjs\";\nimport { EDITOR_TYPE as DATE_EDITOR_TYPE } from \"../../editors/dateEditor/index.mjs\";\nimport { getNormalizedDate } from \"../../helpers/date.mjs\";\nexport const VALIDATOR_TYPE = 'date';\n\n/**\n * The Date cell validator.\n *\n * @private\n * @param {*} value Value of edited cell.\n * @param {Function} callback Callback called with validation result.\n */\nexport function dateValidator(value, callback) {\n  const dateEditor = getEditorInstance(DATE_EDITOR_TYPE, this.instance);\n  let valueToValidate = value;\n  let valid = true;\n  if (valueToValidate === null || valueToValidate === void 0) {\n    valueToValidate = '';\n  }\n  let isValidFormat = moment(valueToValidate, this.dateFormat || dateEditor.defaultDateFormat, true).isValid();\n  let isValidDate = moment(new Date(valueToValidate)).isValid() || isValidFormat;\n  if (this.allowEmpty && valueToValidate === '') {\n    isValidDate = true;\n    isValidFormat = true;\n  }\n  if (!isValidDate) {\n    valid = false;\n  }\n  if (!isValidDate && isValidFormat) {\n    valid = true;\n  }\n  if (isValidDate && !isValidFormat) {\n    if (this.correctFormat === true) {\n      // if format correction is enabled\n      const correctedValue = correctFormat(valueToValidate, this.dateFormat);\n      const row = this.instance.toVisualRow(this.row);\n      const column = this.instance.toVisualColumn(this.col);\n      this.instance.setDataAtCell(row, column, correctedValue, 'dateValidator');\n      valid = true;\n    } else {\n      valid = false;\n    }\n  }\n  callback(valid);\n}\ndateValidator.VALIDATOR_TYPE = VALIDATOR_TYPE;\n\n/**\n * Format the given string using moment.js' format feature.\n *\n * @param {string} value The value to format.\n * @param {string} dateFormat The date pattern to format to.\n * @returns {string}\n */\nexport function correctFormat(value, dateFormat) {\n  const dateFromDate = moment(getNormalizedDate(value));\n  const dateFromMoment = moment(value, dateFormat);\n  const isAlphanumeric = value.search(/[A-z]/g) > -1;\n  let date;\n  if (dateFromDate.isValid() && dateFromDate.format('x') === dateFromMoment.format('x') || !dateFromMoment.isValid() || isAlphanumeric) {\n    date = dateFromDate;\n  } else {\n    date = dateFromMoment;\n  }\n  return date.format(dateFormat);\n}","import { isNumeric } from \"../../helpers/number.mjs\";\nexport const VALIDATOR_TYPE = 'numeric';\n\n/**\n * The Numeric cell validator.\n *\n * @private\n * @param {*} value Value of edited cell.\n * @param {Function} callback Callback called with validation result.\n */\nexport function numericValidator(value, callback) {\n  let valueToValidate = value;\n  if (valueToValidate === null || valueToValidate === void 0) {\n    valueToValidate = '';\n  }\n  if (this.allowEmpty && valueToValidate === '') {\n    callback(true);\n  } else if (valueToValidate === '') {\n    callback(false);\n  } else {\n    callback(isNumeric(value));\n  }\n}\nnumericValidator.VALIDATOR_TYPE = VALIDATOR_TYPE;","import moment from 'moment';\n\n// Formats which are correctly parsed to time (supported by momentjs)\nconst STRICT_FORMATS = ['YYYY-MM-DDTHH:mm:ss.SSSZ', 'X',\n// Unix timestamp\n'x' // Unix ms timestamp\n];\n\nexport const VALIDATOR_TYPE = 'time';\n\n/**\n * The Time cell validator.\n *\n * @private\n * @param {*} value Value of edited cell.\n * @param {Function} callback Callback called with validation result.\n */\nexport function timeValidator(value, callback) {\n  const timeFormat = this.timeFormat || 'h:mm:ss a';\n  let valid = true;\n  let valueToValidate = value;\n  if (valueToValidate === null) {\n    valueToValidate = '';\n  }\n  valueToValidate = /^\\d{3,}$/.test(valueToValidate) ? parseInt(valueToValidate, 10) : valueToValidate;\n  const twoDigitValue = /^\\d{1,2}$/.test(valueToValidate);\n  if (twoDigitValue) {\n    valueToValidate += ':00';\n  }\n  const date = moment(valueToValidate, STRICT_FORMATS, true).isValid() ? moment(valueToValidate) : moment(valueToValidate, timeFormat);\n  let isValidTime = date.isValid();\n\n  // is it in the specified format\n  let isValidFormat = moment(valueToValidate, timeFormat, true).isValid() && !twoDigitValue;\n  if (this.allowEmpty && valueToValidate === '') {\n    isValidTime = true;\n    isValidFormat = true;\n  }\n  if (!isValidTime) {\n    valid = false;\n  }\n  if (!isValidTime && isValidFormat) {\n    valid = true;\n  }\n  if (isValidTime && !isValidFormat) {\n    if (this.correctFormat === true) {\n      // if format correction is enabled\n      const correctedValue = date.format(timeFormat);\n      const row = this.instance.toVisualRow(this.row);\n      const column = this.instance.toVisualColumn(this.col);\n      this.instance.setDataAtCell(row, column, correctedValue, 'timeValidator');\n      valid = true;\n    } else {\n      valid = false;\n    }\n  }\n  callback(valid);\n}\ntimeValidator.VALIDATOR_TYPE = VALIDATOR_TYPE;","import { autocompleteValidator, VALIDATOR_TYPE as AUTOCOMPLETE_VALIDATOR } from \"./autocompleteValidator/index.mjs\";\nimport { dateValidator, VALIDATOR_TYPE as DATE_VALIDATOR } from \"./dateValidator/index.mjs\";\nimport { numericValidator, VALIDATOR_TYPE as NUMERIC_VALIDATOR } from \"./numericValidator/index.mjs\";\nimport { timeValidator, VALIDATOR_TYPE as TIME_VALIDATOR } from \"./timeValidator/index.mjs\";\nimport { registerValidator } from \"./registry.mjs\";\n/**\n * Registers all available validators.\n */\nexport function registerAllValidators() {\n  registerValidator(autocompleteValidator);\n  registerValidator(dateValidator);\n  registerValidator(numericValidator);\n  registerValidator(timeValidator);\n}\nexport { autocompleteValidator, AUTOCOMPLETE_VALIDATOR, dateValidator, DATE_VALIDATOR, numericValidator, NUMERIC_VALIDATOR, timeValidator, TIME_VALIDATOR };\nexport { getRegisteredValidatorNames, getRegisteredValidators, getValidator, hasValidator, registerValidator } from \"./registry.mjs\";","import { AutocompleteEditor } from \"../../editors/autocompleteEditor/index.mjs\";\nimport { autocompleteRenderer } from \"../../renderers/autocompleteRenderer/index.mjs\";\nimport { autocompleteValidator } from \"../../validators/autocompleteValidator/index.mjs\";\nexport const CELL_TYPE = 'autocomplete';\nexport const AutocompleteCellType = {\n  CELL_TYPE,\n  editor: AutocompleteEditor,\n  renderer: autocompleteRenderer,\n  validator: autocompleteValidator\n};","import { CheckboxEditor } from \"../../editors/checkboxEditor/index.mjs\";\nimport { checkboxRenderer } from \"../../renderers/checkboxRenderer/index.mjs\";\nexport const CELL_TYPE = 'checkbox';\nexport const CheckboxCellType = {\n  CELL_TYPE,\n  editor: CheckboxEditor,\n  renderer: checkboxRenderer\n};","import { autocompleteRenderer } from \"../autocompleteRenderer/index.mjs\";\nimport { A11Y_EXPANDED, A11Y_HASPOPUP } from \"../../helpers/a11y.mjs\";\nimport { setAttribute } from \"../../helpers/dom/element.mjs\";\nexport const RENDERER_TYPE = 'date';\n\n/**\n * Handsontable renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function dateRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  autocompleteRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  if (instance.getSettings().ariaTags) {\n    setAttribute(TD, [A11Y_HASPOPUP('dialog'), A11Y_EXPANDED('false')]);\n  }\n}\ndateRenderer.RENDERER_TYPE = RENDERER_TYPE;","import { DateEditor } from \"../../editors/dateEditor/index.mjs\";\nimport { dateRenderer } from \"../../renderers/dateRenderer/index.mjs\";\nimport { dateValidator } from \"../../validators/dateValidator/index.mjs\";\nexport const CELL_TYPE = 'date';\nexport const DateCellType = {\n  CELL_TYPE,\n  editor: DateEditor,\n  // displays small gray arrow on right side of the cell\n  renderer: dateRenderer,\n  validator: dateValidator\n};","import { DropdownEditor } from \"../../editors/dropdownEditor/index.mjs\";\nimport { autocompleteRenderer } from \"../../renderers/autocompleteRenderer/index.mjs\";\nimport { autocompleteValidator } from \"../../validators/autocompleteValidator/index.mjs\";\nexport const CELL_TYPE = 'dropdown';\nexport const DropdownCellType = {\n  CELL_TYPE,\n  editor: DropdownEditor,\n  // displays small gray arrow on right side of the cell\n  renderer: autocompleteRenderer,\n  validator: autocompleteValidator\n};","import { autocompleteRenderer } from \"../autocompleteRenderer/index.mjs\";\nimport { A11Y_EXPANDED, A11Y_HASPOPUP } from \"../../helpers/a11y.mjs\";\nimport { setAttribute } from \"../../helpers/dom/element.mjs\";\nexport const RENDERER_TYPE = 'handsontable';\n\n/**\n * Handsontable renderer.\n *\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function handsontableRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  autocompleteRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  if (instance.getSettings().ariaTags) {\n    setAttribute(TD, [A11Y_HASPOPUP('true'), A11Y_EXPANDED('false')]);\n  }\n}\nhandsontableRenderer.RENDERER_TYPE = RENDERER_TYPE;","import { HandsontableEditor } from \"../../editors/handsontableEditor/index.mjs\";\nimport { handsontableRenderer } from \"../../renderers/handsontableRenderer/index.mjs\";\nexport const CELL_TYPE = 'handsontable';\nexport const HandsontableCellType = {\n  CELL_TYPE,\n  editor: HandsontableEditor,\n  // displays small gray arrow on right side of the cell\n  renderer: handsontableRenderer\n};","import { NumericEditor } from \"../../editors/numericEditor/index.mjs\";\nimport { numericRenderer } from \"../../renderers/numericRenderer/index.mjs\";\nimport { numericValidator } from \"../../validators/numericValidator/index.mjs\";\nexport const CELL_TYPE = 'numeric';\nexport const NumericCellType = {\n  CELL_TYPE,\n  editor: NumericEditor,\n  renderer: numericRenderer,\n  validator: numericValidator,\n  dataType: 'number'\n};","import { PasswordEditor } from \"../../editors/passwordEditor/index.mjs\";\nimport { passwordRenderer } from \"../../renderers/passwordRenderer/index.mjs\";\nexport const CELL_TYPE = 'password';\nexport const PasswordCellType = {\n  CELL_TYPE,\n  editor: PasswordEditor,\n  renderer: passwordRenderer,\n  copyable: false\n};","import { textRenderer } from \"../textRenderer/index.mjs\";\nimport { A11Y_HASPOPUP } from \"../../helpers/a11y.mjs\";\nimport { setAttribute } from \"../../helpers/dom/element.mjs\";\nexport const RENDERER_TYPE = 'select';\n\n/**\n * @private\n * @param {Core} instance The Handsontable instance.\n * @param {HTMLTableCellElement} TD The rendered cell element.\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {number|string} prop The column property (passed when datasource is an array of objects).\n * @param {*} value The rendered value.\n * @param {object} cellProperties The cell meta object ({@see Core#getCellMeta}).\n */\nexport function selectRenderer(instance, TD, row, col, prop, value, cellProperties) {\n  textRenderer.apply(this, [instance, TD, row, col, prop, value, cellProperties]);\n  if (instance.getSettings().ariaTags) {\n    setAttribute(TD, ...A11Y_HASPOPUP('listbox'));\n  }\n}\nselectRenderer.RENDERER_TYPE = RENDERER_TYPE;","import { SelectEditor } from \"../../editors/selectEditor/index.mjs\";\nimport { selectRenderer } from \"../../renderers/selectRenderer/index.mjs\";\nexport const CELL_TYPE = 'select';\nexport const SelectCellType = {\n  CELL_TYPE,\n  editor: SelectEditor,\n  renderer: selectRenderer\n};","import { TimeEditor } from \"../../editors/timeEditor/index.mjs\";\nimport { timeRenderer } from \"../../renderers/timeRenderer/index.mjs\";\nimport { timeValidator } from \"../../validators/timeValidator/index.mjs\";\nexport const CELL_TYPE = 'time';\nexport const TimeCellType = {\n  CELL_TYPE,\n  editor: TimeEditor,\n  renderer: timeRenderer,\n  validator: timeValidator\n};","import { AutocompleteCellType, CELL_TYPE as AUTOCOMPLETE_TYPE } from \"./autocompleteType/index.mjs\";\nimport { CheckboxCellType, CELL_TYPE as CHECKBOX_TYPE } from \"./checkboxType/index.mjs\";\nimport { DateCellType, CELL_TYPE as DATE_TYPE } from \"./dateType/index.mjs\";\nimport { DropdownCellType, CELL_TYPE as DROPDOWN_TYPE } from \"./dropdownType/index.mjs\";\nimport { HandsontableCellType, CELL_TYPE as HANDSONTABLE_TYPE } from \"./handsontableType/index.mjs\";\nimport { NumericCellType, CELL_TYPE as NUMERIC_TYPE } from \"./numericType/index.mjs\";\nimport { PasswordCellType, CELL_TYPE as PASSWORD_TYPE } from \"./passwordType/index.mjs\";\nimport { SelectCellType, CELL_TYPE as SELECT_TYPE } from \"./selectType/index.mjs\";\nimport { TextCellType, CELL_TYPE as TEXT_TYPE } from \"./textType/index.mjs\";\nimport { TimeCellType, CELL_TYPE as TIME_TYPE } from \"./timeType/index.mjs\";\nimport { registerCellType } from \"./registry.mjs\";\n/**\n * Registers all available cell types.\n */\nexport function registerAllCellTypes() {\n  registerCellType(AutocompleteCellType);\n  registerCellType(CheckboxCellType);\n  registerCellType(DateCellType);\n  registerCellType(DropdownCellType);\n  registerCellType(HandsontableCellType);\n  registerCellType(NumericCellType);\n  registerCellType(PasswordCellType);\n  registerCellType(SelectCellType);\n  registerCellType(TextCellType);\n  registerCellType(TimeCellType);\n}\nexport { AutocompleteCellType, AUTOCOMPLETE_TYPE, CheckboxCellType, CHECKBOX_TYPE, DateCellType, DATE_TYPE, DropdownCellType, DROPDOWN_TYPE, HandsontableCellType, HANDSONTABLE_TYPE, NumericCellType, NUMERIC_TYPE, PasswordCellType, PASSWORD_TYPE, SelectCellType, SELECT_TYPE, TextCellType, TEXT_TYPE, TimeCellType, TIME_TYPE };\nexport { getCellType, getRegisteredCellTypeNames, getRegisteredCellTypes, hasCellType, registerCellType } from \"./registry.mjs\";","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nimport { defineGetter, objectEach } from \"../../helpers/object.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { getPluginsNames, hasPlugin } from \"../registry.mjs\";\nimport { hasCellType } from \"../../cellTypes/registry.mjs\";\nimport { hasEditor } from \"../../editors/registry.mjs\";\nimport { hasRenderer } from \"../../renderers/registry.mjs\";\nimport { hasValidator } from \"../../validators/registry.mjs\";\nconst DEPS_TYPE_CHECKERS = new Map([['plugin', hasPlugin], ['cell-type', hasCellType], ['editor', hasEditor], ['renderer', hasRenderer], ['validator', hasValidator]]);\nexport const PLUGIN_KEY = 'base';\nconst privatePool = new WeakMap();\nconst missingDependeciesMsgs = [];\nlet initializedPlugins = null;\n\n/**\n * @util\n * @property {Core} hot Handsontable instance.\n */\nvar _isRelevantToSettings = /*#__PURE__*/new WeakSet();\nexport class BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n\n  /**\n   * The `SETTING_KEYS` getter defines the keys that, when present in the config object, trigger the plugin update\n   * after the `updateSettings` calls.\n   * - When it returns `true`, the plugin updates after all `updateSettings` calls, regardless of the contents of the\n   * config object.\n   * - When it returns `false`, the plugin never updates on `updateSettings` calls.\n   *\n   * @returns {string[] | boolean}\n   */\n  static get SETTING_KEYS() {\n    return [this.PLUGIN_KEY];\n  }\n\n  /**\n   * @param {object} hotInstance Handsontable instance.\n   */\n  constructor(hotInstance) {\n    /**\n     * Check if any of the keys defined in `SETTING_KEYS` configuration of the plugin is present in the provided\n     * config object, or if the `SETTING_KEYS` configuration states that the plugin is relevant to the config object\n     * regardless of its contents.\n     *\n     * @private\n     * @param {Handsontable.DefaultSettings} settings The config object passed to `updateSettings`.\n     * @returns {boolean}\n     */\n    _classPrivateMethodInitSpec(this, _isRelevantToSettings);\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    defineGetter(this, 'hot', hotInstance, {\n      writable: false\n    });\n    privatePool.set(this, {\n      hooks: {}\n    });\n    initializedPlugins = null;\n    this.pluginName = null;\n    this.pluginsInitializedCallbacks = [];\n    this.isPluginsReady = false;\n    this.enabled = false;\n    this.initialized = false;\n    this.hot.addHook('afterPluginsInitialized', () => this.onAfterPluginsInitialized());\n    this.hot.addHook('afterUpdateSettings', newSettings => this.onUpdateSettings(newSettings));\n    this.hot.addHook('beforeInit', () => this.init());\n  }\n  init() {\n    this.pluginName = this.hot.getPluginName(this);\n    const pluginDeps = this.constructor.PLUGIN_DEPS;\n    const dependecies = Array.isArray(pluginDeps) ? pluginDeps : [];\n    if (dependecies.length > 0) {\n      const missingDependencies = [];\n      dependecies.forEach(dependency => {\n        const [type, moduleName] = dependency.split(':');\n        if (!DEPS_TYPE_CHECKERS.has(type)) {\n          throw new Error(`Unknown plugin dependency type \"${type}\" was found.`);\n        }\n        if (!DEPS_TYPE_CHECKERS.get(type)(moduleName)) {\n          missingDependencies.push(` - ${moduleName} (${type})`);\n        }\n      });\n      if (missingDependencies.length > 0) {\n        const errorMsg = [`The ${this.pluginName} plugin requires the following modules:\\n`, `${missingDependencies.join('\\n')}\\n`].join('');\n        missingDependeciesMsgs.push(errorMsg);\n      }\n    }\n    if (!initializedPlugins) {\n      initializedPlugins = getPluginsNames();\n    }\n\n    // Workaround for the UndoRedo plugin which, currently doesn't follow the plugin architecture.\n    // Without this line the `callOnPluginsReady` callback won't be triggered after all plugin\n    // initialization.\n    if (initializedPlugins.indexOf('UndoRedo') >= 0) {\n      initializedPlugins.splice(initializedPlugins.indexOf('UndoRedo'), 1);\n    }\n    if (initializedPlugins.indexOf(this.pluginName) >= 0) {\n      initializedPlugins.splice(initializedPlugins.indexOf(this.pluginName), 1);\n    }\n    this.hot.addHookOnce('afterPluginsInitialized', () => {\n      if (this.isEnabled && this.isEnabled()) {\n        this.enablePlugin();\n      }\n    });\n    const isAllPluginsAreInitialized = initializedPlugins.length === 0;\n    if (isAllPluginsAreInitialized) {\n      if (missingDependeciesMsgs.length > 0) {\n        const errorMsg = [`${missingDependeciesMsgs.join('\\n')}\\n`, 'You have to import and register them manually.'].join('');\n        throw new Error(errorMsg);\n      }\n      this.hot.runHooks('afterPluginsInitialized');\n    }\n    this.initialized = true;\n  }\n\n  /**\n   * Enable plugin for this Handsontable instance.\n   */\n  enablePlugin() {\n    this.enabled = true;\n  }\n\n  /**\n   * Disable plugin for this Handsontable instance.\n   */\n  disablePlugin() {\n    if (this.eventManager) {\n      this.eventManager.clear();\n    }\n    this.clearHooks();\n    this.enabled = false;\n  }\n\n  /**\n   * Add listener to plugin hooks system.\n   *\n   * @param {string} name The hook name.\n   * @param {Function} callback The listener function to add.\n   */\n  addHook(name, callback) {\n    privatePool.get(this).hooks[name] = privatePool.get(this).hooks[name] || [];\n    const hooks = privatePool.get(this).hooks[name];\n    this.hot.addHook(name, callback);\n    hooks.push(callback);\n    privatePool.get(this).hooks[name] = hooks;\n  }\n\n  /**\n   * Remove all hooks listeners by hook name.\n   *\n   * @param {string} name The hook name.\n   */\n  removeHooks(name) {\n    arrayEach(privatePool.get(this).hooks[name] || [], callback => {\n      this.hot.removeHook(name, callback);\n    });\n  }\n\n  /**\n   * Clear all hooks.\n   */\n  clearHooks() {\n    const hooks = privatePool.get(this).hooks;\n    objectEach(hooks, (callbacks, name) => this.removeHooks(name));\n    hooks.length = 0;\n  }\n\n  /**\n   * Register function which will be immediately called after all plugins initialized.\n   *\n   * @param {Function} callback The listener function to call.\n   */\n  callOnPluginsReady(callback) {\n    if (this.isPluginsReady) {\n      callback();\n    } else {\n      this.pluginsInitializedCallbacks.push(callback);\n    }\n  }\n  /**\n   * On after plugins initialized listener.\n   *\n   * @private\n   */\n  onAfterPluginsInitialized() {\n    arrayEach(this.pluginsInitializedCallbacks, callback => callback());\n    this.pluginsInitializedCallbacks.length = 0;\n    this.isPluginsReady = true;\n  }\n\n  /**\n   * On update settings listener.\n   *\n   * @private\n   * @param {object} newSettings New set of settings passed to the `updateSettings` method.\n   */\n  onUpdateSettings(newSettings) {\n    const relevantToSettings = _classPrivateMethodGet(this, _isRelevantToSettings, _isRelevantToSettings2).call(this, newSettings);\n    if (this.isEnabled) {\n      if (this.enabled && !this.isEnabled()) {\n        this.disablePlugin();\n      }\n      if (!this.enabled && this.isEnabled()) {\n        this.enablePlugin();\n      }\n      if (this.enabled && this.isEnabled() && relevantToSettings) {\n        this.updatePlugin(newSettings);\n      }\n    }\n  }\n\n  /**\n   * Updates the plugin to use the latest options you have specified.\n   *\n   * @private\n   */\n  updatePlugin() {}\n\n  /**\n   * Destroy plugin.\n   */\n  destroy() {\n    if (this.eventManager) {\n      this.eventManager.destroy();\n    }\n    this.clearHooks();\n    objectEach(this, (value, property) => {\n      if (property !== 'hot') {\n        this[property] = null;\n      }\n    });\n    delete this.t;\n    delete this.hot;\n  }\n}\nfunction _isRelevantToSettings2(settings) {\n  if (!settings) {\n    return false;\n  }\n  const settingKeys = this.constructor.SETTING_KEYS;\n\n  // If SETTING_KEYS is declared as `true` -> update the plugin regardless of the settings declared in\n  // `updateSettings`.\n  // If SETTING_KEYS is declared as `false` -> DON'T update the plugin regardless of the settings declared in\n  // `updateSettings`.\n  if (typeof settingKeys === 'boolean') {\n    return settingKeys;\n  }\n  for (let i = 0; i < settingKeys.length; i++) {\n    if (settings[settingKeys[i]] !== void 0) {\n      return true;\n    }\n  }\n  return false;\n}","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { addClass, outerHeight } from \"./../helpers/dom/element.mjs\";\nimport { arrayEach } from \"./../helpers/array.mjs\";\n/**\n * @class GhostTable\n */\nclass GhostTable {\n  constructor(hotInstance) {\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    _defineProperty(this, \"hot\", null);\n    /**\n     * Container element where every table will be injected.\n     *\n     * @type {HTMLElement|null}\n     */\n    _defineProperty(this, \"container\", null);\n    /**\n     * Flag which determine is table was injected to DOM.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"injected\", false);\n    /**\n     * Added rows collection.\n     *\n     * @type {Array}\n     */\n    _defineProperty(this, \"rows\", []);\n    /**\n     * Added columns collection.\n     *\n     * @type {Array}\n     */\n    _defineProperty(this, \"columns\", []);\n    /**\n     * Samples prepared for calculations.\n     *\n     * @type {Map}\n     * @default {null}\n     */\n    _defineProperty(this, \"samples\", null);\n    /**\n     * Ghost table settings.\n     *\n     * @type {object}\n     * @default {Object}\n     */\n    _defineProperty(this, \"settings\", {\n      useHeaders: true\n    });\n    this.hot = hotInstance;\n  }\n\n  /**\n   * Add row.\n   *\n   * @param {number} row Row index.\n   * @param {Map} samples Samples Map object.\n   */\n  addRow(row, samples) {\n    if (this.columns.length) {\n      throw new Error('Doesn\\'t support multi-dimensional table');\n    }\n    if (!this.rows.length) {\n      this.container = this.createContainer(this.hot.rootElement.className);\n    }\n    const rowObject = {\n      row\n    };\n    this.rows.push(rowObject);\n    this.samples = samples;\n    this.table = this.createTable(this.hot.table.className);\n    this.table.colGroup.appendChild(this.createColGroupsCol(row));\n    this.table.tr.appendChild(this.createRow(row));\n    this.container.container.appendChild(this.table.fragment);\n    rowObject.table = this.table.table;\n  }\n\n  /**\n   * Add a row consisting of the column headers.\n   *\n   * @param {Map} samples A map with sampled table values.\n   */\n  addColumnHeadersRow(samples) {\n    const colHeader = this.hot.getColHeader(0);\n    if (colHeader !== null && colHeader !== void 0) {\n      const rowObject = {\n        row: -1\n      };\n      this.rows.push(rowObject);\n      this.container = this.createContainer(this.hot.rootElement.className);\n      this.samples = samples;\n      this.table = this.createTable(this.hot.table.className);\n      this.table.colGroup.appendChild(this.createColGroupsCol());\n      this.appendColumnHeadersRow();\n      this.container.container.appendChild(this.table.fragment);\n      rowObject.table = this.table.table;\n    }\n  }\n\n  /**\n   * Add column.\n   *\n   * @param {number} column Column index.\n   * @param {Map} samples A map with sampled table values.\n   */\n  addColumn(column, samples) {\n    if (this.rows.length) {\n      throw new Error('Doesn\\'t support multi-dimensional table');\n    }\n    if (!this.columns.length) {\n      this.container = this.createContainer(this.hot.rootElement.className);\n    }\n    const columnObject = {\n      col: column\n    };\n    this.columns.push(columnObject);\n    this.samples = samples;\n    this.table = this.createTable(this.hot.table.className);\n    if (this.getSetting('useHeaders') && this.hot.getColHeader(column) !== null) {\n      // Please keep in mind that the renderable column index equal to the visual columns index for the GhostTable.\n      // We render all columns.\n      this.hot.view.appendColHeader(column, this.table.th);\n    }\n    this.table.tBody.appendChild(this.createCol(column));\n    this.container.container.appendChild(this.table.fragment);\n    columnObject.table = this.table.table;\n  }\n\n  /**\n   * Get calculated heights.\n   *\n   * @param {Function} callback Callback which will be fired for each calculated row.\n   */\n  getHeights(callback) {\n    if (!this.injected) {\n      this.injectTable();\n    }\n    arrayEach(this.rows, row => {\n      // -1 <- reduce border-top from table\n      callback(row.row, outerHeight(row.table) - 1);\n    });\n  }\n\n  /**\n   * Get calculated widths.\n   *\n   * @param {Function} callback Callback which will be fired for each calculated column.\n   */\n  getWidths(callback) {\n    if (!this.injected) {\n      this.injectTable();\n    }\n    arrayEach(this.columns, column => {\n      // The GhostTable class is responsible for calculating the columns' width based on the\n      // contents rendered in the cells. In some cases, when the column's width calculated by\n      // the browser is a decimal point with a fractional component. For example, 35.32px.\n      // The usage of the `.offsetWidth` (or our helper `outerWidth`) is incorrect.\n      // The `outerWidth` in the mentioned example (35.32px) would return 35 pixels that\n      // would cause the text to not fit in the cell, thus increasing the row height.\n      // That's why the `getBoundingClientRect` method is used. The method returns the number\n      // that is rounded up to make sure that there will be a space for the cell's content.\n      const {\n        width\n      } = column.table.getBoundingClientRect();\n      callback(column.col, Math.ceil(width));\n    });\n  }\n\n  /**\n   * Set the Ghost Table settings to the provided object.\n   *\n   * @param {object} settings New Ghost Table Settings.\n   */\n  setSettings(settings) {\n    this.settings = settings;\n  }\n\n  /**\n   * Set a single setting of the Ghost Table.\n   *\n   * @param {string} name Setting name.\n   * @param {*} value Setting value.\n   */\n  setSetting(name, value) {\n    if (!this.settings) {\n      this.settings = {};\n    }\n    this.settings[name] = value;\n  }\n\n  /**\n   * Get the Ghost Table settings.\n   *\n   * @returns {object|null}\n   */\n  getSettings() {\n    return this.settings;\n  }\n\n  /**\n   * Get a single Ghost Table setting.\n   *\n   * @param {string} name The setting name to get.\n   * @returns {boolean|null}\n   */\n  getSetting(name) {\n    if (this.settings) {\n      return this.settings[name];\n    }\n    return null;\n  }\n\n  /**\n   * Create colgroup col elements.\n   *\n   * @param {number} row Visual row index.\n   * @returns {DocumentFragment}\n   */\n  createColGroupsCol(row) {\n    const fragment = this.hot.rootDocument.createDocumentFragment();\n    if (this.hot.hasRowHeaders()) {\n      fragment.appendChild(this.createColElement(-1, -1));\n    }\n    this.samples.forEach(sample => {\n      arrayEach(sample.strings, string => {\n        fragment.appendChild(this.createColElement(string.col, row));\n      });\n    });\n    return fragment;\n  }\n\n  /**\n   * Create table row element.\n   *\n   * @param {number} row Row index.\n   * @returns {DocumentFragment} Returns created table row elements.\n   */\n  createRow(row) {\n    const {\n      rootDocument\n    } = this.hot;\n    const fragment = rootDocument.createDocumentFragment();\n    const th = rootDocument.createElement('th');\n    if (this.hot.hasRowHeaders()) {\n      this.hot.view.appendRowHeader(row, th);\n      fragment.appendChild(th);\n    }\n    this.samples.forEach(sample => {\n      arrayEach(sample.strings, string => {\n        const column = string.col;\n        const cellProperties = this.hot.getCellMeta(row, column);\n        cellProperties.col = column;\n        cellProperties.row = row;\n        const renderer = this.hot.getCellRenderer(cellProperties);\n        const td = rootDocument.createElement('td');\n\n        // Indicate that this element is created and supported by GhostTable. It can be useful to\n        // exclude rendering performance costly logic or exclude logic which doesn't work within a hidden table.\n        td.setAttribute('ghost-table', 1);\n        renderer(this.hot, td, row, column, this.hot.colToProp(column), string.value, cellProperties);\n        fragment.appendChild(td);\n      });\n    });\n    return fragment;\n  }\n\n  /**\n   * Creates DOM elements for headers and appends them to the THEAD element of the table.\n   */\n  appendColumnHeadersRow() {\n    const {\n      rootDocument\n    } = this.hot;\n    const domFragment = rootDocument.createDocumentFragment();\n    const columnHeaders = [];\n    if (this.hot.hasRowHeaders()) {\n      const th = rootDocument.createElement('th');\n      columnHeaders.push([-1, th]);\n      domFragment.appendChild(th);\n    }\n    this.samples.forEach(sample => {\n      arrayEach(sample.strings, string => {\n        const column = string.col;\n        const th = rootDocument.createElement('th');\n        columnHeaders.push([column, th]);\n        domFragment.appendChild(th);\n      });\n    });\n\n    // Appending DOM elements for headers\n    this.table.tHead.appendChild(domFragment);\n    arrayEach(columnHeaders, columnHeader => {\n      const [column, th] = columnHeader;\n\n      // Using source method for filling a header with value.\n      this.hot.view.appendColHeader(column, th);\n    });\n  }\n\n  /**\n   * Create table column elements.\n   *\n   * @param {number} column Column index.\n   * @returns {DocumentFragment} Returns created column table column elements.\n   */\n  createCol(column) {\n    const {\n      rootDocument\n    } = this.hot;\n    const fragment = rootDocument.createDocumentFragment();\n    this.samples.forEach(sample => {\n      arrayEach(sample.strings, string => {\n        const row = string.row;\n        const cellProperties = this.hot.getCellMeta(row, column);\n        cellProperties.col = column;\n        cellProperties.row = row;\n        const renderer = this.hot.getCellRenderer(cellProperties);\n        const td = rootDocument.createElement('td');\n        const tr = rootDocument.createElement('tr');\n\n        // Indicate that this element is created and supported by GhostTable. It can be useful to\n        // exclude rendering performance costly logic or exclude logic which doesn't work within a hidden table.\n        td.setAttribute('ghost-table', 1);\n        renderer(this.hot, td, row, column, this.hot.colToProp(column), string.value, cellProperties);\n        tr.appendChild(td);\n        fragment.appendChild(tr);\n      });\n    });\n    return fragment;\n  }\n\n  /**\n   * Remove table from document and reset internal state.\n   */\n  clean() {\n    this.rows.length = 0;\n    this.rows[-1] = void 0;\n    this.columns.length = 0;\n    if (this.samples) {\n      this.samples.clear();\n    }\n    this.samples = null;\n    this.removeTable();\n  }\n\n  /**\n   * Inject generated table into document.\n   *\n   * @param {HTMLElement} [parent=null] The element to which the ghost table is injected.\n   */\n  injectTable() {\n    let parent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    if (!this.injected) {\n      (parent || this.hot.rootElement).appendChild(this.container.fragment);\n      this.injected = true;\n    }\n  }\n\n  /**\n   * Remove table from document.\n   */\n  removeTable() {\n    if (this.injected && this.container.container.parentNode) {\n      this.container.container.parentNode.removeChild(this.container.container);\n      this.container = null;\n      this.injected = false;\n    }\n  }\n\n  /**\n   * Create col element.\n   *\n   * @param {number} column Visual column index.\n   * @param {number} row Visual row index.\n   * @returns {HTMLElement}\n   */\n  createColElement(column, row) {\n    const col = this.hot.rootDocument.createElement('col');\n    let colspan = 0;\n    if (row >= 0 && column >= 0) {\n      colspan = this.hot.getCellMeta(row, column).colspan;\n    }\n    let width = this.hot.view._wt.wtTable.getStretchedColumnWidth(column);\n    if (colspan > 1) {\n      for (let nextColumn = column + 1; nextColumn < column + colspan; nextColumn++) {\n        width += this.hot.view._wt.wtTable.getStretchedColumnWidth(nextColumn);\n      }\n    }\n    col.style.width = `${width}px`;\n    return col;\n  }\n\n  /**\n   * Create table element.\n   *\n   * @param {string} className The CSS classes to add.\n   * @returns {object}\n   */\n  createTable() {\n    let className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    const {\n      rootDocument\n    } = this.hot;\n    const fragment = rootDocument.createDocumentFragment();\n    const table = rootDocument.createElement('table');\n    const tHead = rootDocument.createElement('thead');\n    const tBody = rootDocument.createElement('tbody');\n    const colGroup = rootDocument.createElement('colgroup');\n    const tr = rootDocument.createElement('tr');\n    const th = rootDocument.createElement('th');\n    if (this.isVertical()) {\n      table.appendChild(colGroup);\n    }\n    if (this.isHorizontal()) {\n      tr.appendChild(th);\n      tHead.appendChild(tr);\n      table.style.tableLayout = 'auto';\n      table.style.width = 'auto';\n    }\n    table.appendChild(tHead);\n    if (this.isVertical()) {\n      tBody.appendChild(tr);\n    }\n    table.appendChild(tBody);\n    addClass(table, className);\n    fragment.appendChild(table);\n    return {\n      fragment,\n      table,\n      tHead,\n      tBody,\n      colGroup,\n      tr,\n      th\n    };\n  }\n\n  /**\n   * Create container for tables.\n   *\n   * @param {string} className The CSS classes to add.\n   * @returns {object}\n   */\n  createContainer() {\n    let className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    const {\n      rootDocument\n    } = this.hot;\n    const fragment = rootDocument.createDocumentFragment();\n    const container = rootDocument.createElement('div');\n    const containerClassName = `htGhostTable htAutoSize ${className.trim()}`;\n    addClass(container, containerClassName);\n    fragment.appendChild(container);\n    return {\n      fragment,\n      container\n    };\n  }\n\n  /**\n   * Checks if table is raised vertically (checking rows).\n   *\n   * @returns {boolean}\n   */\n  isVertical() {\n    return !!(this.rows.length && !this.columns.length);\n  }\n\n  /**\n   * Checks if table is raised horizontally (checking columns).\n   *\n   * @returns {boolean}\n   */\n  isHorizontal() {\n    return !!(this.columns.length && !this.rows.length);\n  }\n}\nexport default GhostTable;","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { isObject } from \"./../helpers/object.mjs\";\nimport { rangeEach } from \"./../helpers/number.mjs\";\nimport { stringify } from \"./../helpers/mixed.mjs\";\n/**\n * @class SamplesGenerator\n */\nclass SamplesGenerator {\n  /**\n   * Number of samples to take of each value length.\n   *\n   * @type {number}\n   */\n  static get SAMPLE_COUNT() {\n    return 3;\n  }\n  /**\n   * Samples prepared for calculations.\n   *\n   * @type {Map}\n   * @default {null}\n   */\n\n  constructor(dataFactory) {\n    _defineProperty(this, \"samples\", null);\n    /**\n     * Function which give the data to collect samples.\n     *\n     * @type {Function}\n     */\n    _defineProperty(this, \"dataFactory\", null);\n    /**\n     * Custom number of samples to take of each value length.\n     *\n     * @type {number}\n     * @default {null}\n     */\n    _defineProperty(this, \"customSampleCount\", null);\n    /**\n     * `true` if duplicate samples collection should be allowed, `false` otherwise.\n     *\n     * @type {boolean}\n     * @default {false}\n     */\n    _defineProperty(this, \"allowDuplicates\", false);\n    this.dataFactory = dataFactory;\n  }\n\n  /**\n   * Get the sample count for this instance.\n   *\n   * @returns {number}\n   */\n  getSampleCount() {\n    if (this.customSampleCount) {\n      return this.customSampleCount;\n    }\n    return SamplesGenerator.SAMPLE_COUNT;\n  }\n\n  /**\n   * Set the sample count.\n   *\n   * @param {number} sampleCount Number of samples to be collected.\n   */\n  setSampleCount(sampleCount) {\n    this.customSampleCount = sampleCount;\n  }\n\n  /**\n   * Set if the generator should accept duplicate values.\n   *\n   * @param {boolean} allowDuplicates `true` to allow duplicate values.\n   */\n  setAllowDuplicates(allowDuplicates) {\n    this.allowDuplicates = allowDuplicates;\n  }\n\n  /**\n   * Generate samples for row. You can control which area should be sampled by passing `rowRange` object and `colRange` object.\n   *\n   * @param {object|number} rowRange The rows range to generate the samples.\n   * @param {object} colRange The column range to generate the samples.\n   * @returns {object}\n   */\n  generateRowSamples(rowRange, colRange) {\n    return this.generateSamples('row', colRange, rowRange);\n  }\n\n  /**\n   * Generate samples for column. You can control which area should be sampled by passing `colRange` object and `rowRange` object.\n   *\n   * @param {object} colRange Column index.\n   * @param {object} rowRange Column index.\n   * @returns {object}\n   */\n  generateColumnSamples(colRange, rowRange) {\n    return this.generateSamples('col', rowRange, colRange);\n  }\n\n  /**\n   * Generate collection of samples.\n   *\n   * @param {string} type Type to generate. Can be `col` or `row`.\n   * @param {object} range The range to generate the samples.\n   * @param {object|number} specifierRange The range to generate the samples.\n   * @returns {Map}\n   */\n  generateSamples(type, range, specifierRange) {\n    const samples = new Map();\n    const {\n      from,\n      to\n    } = typeof specifierRange === 'number' ? {\n      from: specifierRange,\n      to: specifierRange\n    } : specifierRange;\n    rangeEach(from, to, index => {\n      const sample = this.generateSample(type, range, index);\n      samples.set(index, sample);\n    });\n    return samples;\n  }\n\n  /**\n   * Generate sample for specified type (`row` or `col`).\n   *\n   * @param {string} type Samples type `row` or `col`.\n   * @param {object} range The range to generate the samples.\n   * @param {number} specifierValue The range to generate the samples.\n   * @returns {Map}\n   */\n  generateSample(type, range, specifierValue) {\n    if (type !== 'row' && type !== 'col') {\n      throw new Error('Unsupported sample type');\n    }\n    const samples = new Map();\n    const computedKey = type === 'row' ? 'col' : 'row';\n    const sampledValues = [];\n    rangeEach(range.from, range.to, index => {\n      const data = type === 'row' ? this.dataFactory(specifierValue, index) : this.dataFactory(index, specifierValue);\n      if (data === false) {\n        return;\n      }\n      const {\n        value,\n        bundleSeed\n      } = data;\n      const hasCustomBundleSeed = typeof bundleSeed === 'string' && bundleSeed.length > 0;\n      let seed;\n      if (hasCustomBundleSeed) {\n        seed = bundleSeed;\n      } else if (isObject(value)) {\n        seed = `${Object.keys(value).length}`;\n      } else if (Array.isArray(value)) {\n        seed = `${value.length}`;\n      } else {\n        seed = `${stringify(value).length}`;\n      }\n      if (!samples.has(seed)) {\n        samples.set(seed, {\n          needed: this.getSampleCount(),\n          strings: []\n        });\n      }\n      const sample = samples.get(seed);\n      if (sample.needed) {\n        const duplicate = sampledValues.indexOf(value) > -1;\n        if (!duplicate || this.allowDuplicates || hasCustomBundleSeed) {\n          sample.strings.push({\n            value,\n            [computedKey]: index\n          });\n          sampledValues.push(value);\n          sample.needed -= 1;\n        }\n      }\n    });\n    return samples;\n  }\n}\nexport default SamplesGenerator;","import \"core-js/modules/es.array.push.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach, arrayFilter, arrayReduce, arrayMap } from \"../../helpers/array.mjs\";\nimport { cancelAnimationFrame, requestAnimationFrame } from \"../../helpers/feature.mjs\";\nimport GhostTable from \"../../utils/ghostTable.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { isObject, hasOwnProperty } from \"../../helpers/object.mjs\";\nimport { valueAccordingPercent, rangeEach } from \"../../helpers/number.mjs\";\nimport SamplesGenerator from \"../../utils/samplesGenerator.mjs\";\nimport { isPercentValue } from \"../../helpers/string.mjs\";\nimport { ViewportColumnsCalculator } from \"../../3rdparty/walkontable/src/index.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nHooks.getSingleton().register('modifyAutoColumnSizeSeed');\nexport const PLUGIN_KEY = 'autoColumnSize';\nexport const PLUGIN_PRIORITY = 10;\nconst privatePool = new WeakMap();\nconst COLUMN_SIZE_MAP_NAME = 'autoColumnSize';\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @plugin AutoColumnSize\n * @class AutoColumnSize\n *\n * @description\n * This plugin allows to set column widths based on their widest cells.\n *\n * By default, the plugin is declared as `undefined`, which makes it enabled (same as if it was declared as `true`).\n * Enabling this plugin may decrease the overall table performance, as it needs to calculate the widths of all cells to\n * resize the columns accordingly.\n * If you experience problems with the performance, try turning this feature off and declaring the column widths manually.\n *\n * Column width calculations are divided into sync and async part. Each of this parts has their own advantages and\n * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous\n * operations don't block the browser UI.\n *\n * To configure the sync/async distribution, you can pass an absolute value (number of columns) or a percentage value to a config object:\n *\n * ```js\n * // as a number (300 columns in sync, rest async)\n * autoColumnSize: {syncLimit: 300},\n *\n * // as a string (percent)\n * autoColumnSize: {syncLimit: '40%'},\n * ```\n *\n * The plugin uses {@link GhostTable} and {@link SamplesGenerator} for calculations.\n * First, {@link SamplesGenerator} prepares samples of data with its coordinates.\n * Next {@link GhostTable} uses coordinates to get cells' renderers and append all to the DOM through DocumentFragment.\n *\n * Sampling accepts additional options:\n * - *samplingRatio* - Defines how many samples for the same length will be used to calculate. Default is `3`.\n *\n * ```js\n *   autoColumnSize: {\n *     samplingRatio: 10,\n *   }\n * ```\n *\n * - *allowSampleDuplicates* - Defines if duplicated values might be used in sampling. Default is `false`.\n *\n * ```js\n *   autoColumnSize: {\n *     allowSampleDuplicates: true,\n *   }\n * ```\n *\n * To configure this plugin see {@link Options#autoColumnSize}.\n *\n * @example\n *\n * ::: only-for javascript\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   data: getData(),\n *   autoColumnSize: true\n * });\n * // Access to plugin instance:\n * const plugin = hot.getPlugin('autoColumnSize');\n *\n * plugin.getColumnWidth(4);\n *\n * if (plugin.isEnabled()) {\n *   // code...\n * }\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * // First, let's contruct Handsontable\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n *   autoColumnSize={true}\n * />\n *\n * ...\n *\n * // Access to plugin instance:\n * const hot = hotRef.current.hotInstance;\n * const plugin = hot.getPlugin('autoColumnSize');\n *\n * plugin.getColumnWidth(4);\n *\n * if (plugin.isEnabled()) {\n *   // code...\n * }\n * ```\n * :::\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\nexport class AutoColumnSize extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get SETTING_KEYS() {\n    return true;\n  }\n  static get CALCULATION_STEP() {\n    return 50;\n  }\n  static get SYNC_CALCULATION_LIMIT() {\n    return 50;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    privatePool.set(this, {\n      /**\n       * Cached column header names. It is used to diff current column headers with previous state and detect which\n       * columns width should be updated.\n       *\n       * @private\n       * @type {Array}\n       */\n      cachedColumnHeaders: []\n    });\n    /**\n     * Instance of {@link GhostTable} for rows and columns size calculations.\n     *\n     * @private\n     * @type {GhostTable}\n     */\n    this.ghostTable = new GhostTable(this.hot);\n    /**\n     * Instance of {@link SamplesGenerator} for generating samples necessary for columns width calculations.\n     *\n     * @private\n     * @type {SamplesGenerator}\n     * @fires Hooks#modifyAutoColumnSizeSeed\n     */\n    this.samplesGenerator = new SamplesGenerator((row, column) => {\n      const cellMeta = this.hot.getCellMeta(row, column);\n      let cellValue = '';\n      if (!cellMeta.spanned) {\n        cellValue = this.hot.getDataAtCell(row, column);\n      }\n      let bundleSeed = '';\n      if (this.hot.hasHook('modifyAutoColumnSizeSeed')) {\n        bundleSeed = this.hot.runHooks('modifyAutoColumnSizeSeed', bundleSeed, cellMeta, cellValue);\n      }\n      return {\n        value: cellValue,\n        bundleSeed\n      };\n    });\n    /**\n     * `true` only if the first calculation was performed.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.firstCalculation = true;\n    /**\n     * `true` if the size calculation is in progress.\n     *\n     * @type {boolean}\n     */\n    this.inProgress = false;\n    /**\n     * Number of already measured columns (we already know their sizes).\n     *\n     * @type {number}\n     */\n    this.measuredColumns = 0;\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical column indexes.\n     *\n     * @private\n     * @type {PhysicalIndexToValueMap}\n     */\n    this.columnWidthsMap = new IndexToValueMap();\n    this.hot.columnIndexMapper.registerMap(COLUMN_SIZE_MAP_NAME, this.columnWidthsMap);\n\n    // Leave the listener active to allow auto-sizing the columns when the plugin is disabled.\n    // This is necessary for width recalculation for resize handler doubleclick (ManualColumnResize).\n    this.addHook('beforeColumnResize', (size, column, isDblClick) => this.onBeforeColumnResize(size, column, isDblClick));\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link #enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this.hot.getSettings()[PLUGIN_KEY] !== false && !this.hot.getSettings().colWidths;\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const setting = this.hot.getSettings()[PLUGIN_KEY];\n    if (setting && setting.useHeaders !== null && setting.useHeaders !== void 0) {\n      this.ghostTable.setSetting('useHeaders', setting.useHeaders);\n    }\n    this.setSamplingOptions();\n    this.addHook('afterLoadData', function () {\n      return _this.onAfterLoadData(...arguments);\n    });\n    this.addHook('beforeChangeRender', changes => this.onBeforeChange(changes));\n    this.addHook('afterFormulasValuesUpdate', changes => this.onAfterFormulasValuesUpdate(changes));\n    this.addHook('beforeViewRender', force => this.onBeforeViewRender(force));\n    this.addHook('modifyColWidth', (width, col) => this.getColumnWidth(col, width));\n    this.addHook('afterInit', () => this.onAfterInit());\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state. This method is executed when {@link Core#updateSettings} is invoked.\n   */\n  updatePlugin() {\n    const changedColumns = this.findColumnsWhereHeaderWasChanged();\n    if (changedColumns.length) {\n      this.clearCache(changedColumns);\n      this.calculateVisibleColumnsWidth();\n    }\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    super.disablePlugin();\n\n    // Leave the listener active to allow auto-sizing the columns when the plugin is disabled.\n    // This is necessary for width recalculation for resize handler doubleclick (ManualColumnResize).\n    this.addHook('beforeColumnResize', (size, column, isDblClick) => this.onBeforeColumnResize(size, column, isDblClick));\n  }\n\n  /**\n   * Calculates visible columns width.\n   */\n  calculateVisibleColumnsWidth() {\n    const rowsCount = this.hot.countRows();\n\n    // Keep last column widths unchanged for situation when all rows was deleted or trimmed (pro #6)\n    if (!rowsCount) {\n      return;\n    }\n    const force = this.hot.renderCall;\n    const firstVisibleColumn = this.getFirstVisibleColumn();\n    const lastVisibleColumn = this.getLastVisibleColumn();\n    if (firstVisibleColumn === -1 || lastVisibleColumn === -1) {\n      return;\n    }\n    this.calculateColumnsWidth({\n      from: firstVisibleColumn,\n      to: lastVisibleColumn\n    }, void 0, force);\n  }\n\n  /**\n   * Calculates a columns width.\n   *\n   * @param {number|object} colRange Visual column index or an object with `from` and `to` visual indexes as a range.\n   * @param {number|object} rowRange Visual row index or an object with `from` and `to` visual indexes as a range.\n   * @param {boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.\n   */\n  calculateColumnsWidth() {\n    let colRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      from: 0,\n      to: this.hot.countCols() - 1\n    };\n    let rowRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      from: 0,\n      to: this.hot.countRows() - 1\n    };\n    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // eslint-disable-line max-len\n    const columnsRange = typeof colRange === 'number' ? {\n      from: colRange,\n      to: colRange\n    } : colRange;\n    const rowsRange = typeof rowRange === 'number' ? {\n      from: rowRange,\n      to: rowRange\n    } : rowRange;\n    rangeEach(columnsRange.from, columnsRange.to, visualColumn => {\n      let physicalColumn = this.hot.toPhysicalColumn(visualColumn);\n      if (physicalColumn === null) {\n        physicalColumn = visualColumn;\n      }\n      if (force || this.columnWidthsMap.getValueAtIndex(physicalColumn) === null && !this.hot._getColWidthFromSettings(physicalColumn)) {\n        const samples = this.samplesGenerator.generateColumnSamples(visualColumn, rowsRange);\n        arrayEach(samples, _ref => {\n          let [column, sample] = _ref;\n          return this.ghostTable.addColumn(column, sample);\n        });\n      }\n    });\n    if (this.ghostTable.columns.length) {\n      this.hot.batchExecution(() => {\n        this.ghostTable.getWidths((visualColumn, width) => {\n          const physicalColumn = this.hot.toPhysicalColumn(visualColumn);\n          this.columnWidthsMap.setValueAtIndex(physicalColumn, width);\n        });\n      }, true);\n      this.measuredColumns = columnsRange.to + 1;\n      this.ghostTable.clean();\n    }\n  }\n\n  /**\n   * Calculates all columns width. The calculated column will be cached in the {@link AutoColumnSize#widths} property.\n   * To retrieve width for specified column use {@link AutoColumnSize#getColumnWidth} method.\n   *\n   * @param {object|number} rowRange Row index or an object with `from` and `to` properties which define row range.\n   */\n  calculateAllColumnsWidth() {\n    let rowRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      from: 0,\n      to: this.hot.countRows() - 1\n    };\n    let current = 0;\n    const length = this.hot.countCols() - 1;\n    let timer = null;\n    this.inProgress = true;\n    const loop = () => {\n      // When hot was destroyed after calculating finished cancel frame\n      if (!this.hot) {\n        cancelAnimationFrame(timer);\n        this.inProgress = false;\n        return;\n      }\n      this.calculateColumnsWidth({\n        from: current,\n        to: Math.min(current + AutoColumnSize.CALCULATION_STEP, length)\n      }, rowRange);\n      current = current + AutoColumnSize.CALCULATION_STEP + 1;\n      if (current < length) {\n        timer = requestAnimationFrame(loop);\n      } else {\n        cancelAnimationFrame(timer);\n        this.inProgress = false;\n\n        // @TODO Should call once per render cycle, currently fired separately in different plugins\n        this.hot.view.adjustElementsSize();\n      }\n    };\n    const syncLimit = this.getSyncCalculationLimit();\n\n    // sync\n    if (this.firstCalculation && syncLimit >= 0) {\n      this.calculateColumnsWidth({\n        from: 0,\n        to: syncLimit\n      }, rowRange);\n      this.firstCalculation = false;\n      current = syncLimit + 1;\n    }\n    // async\n    if (current < length) {\n      loop();\n    } else {\n      this.inProgress = false;\n    }\n  }\n\n  /**\n   * Sets the sampling options.\n   *\n   * @private\n   */\n  setSamplingOptions() {\n    const setting = this.hot.getSettings()[PLUGIN_KEY];\n    const samplingRatio = setting && hasOwnProperty(setting, 'samplingRatio') ? setting.samplingRatio : void 0;\n    const allowSampleDuplicates = setting && hasOwnProperty(setting, 'allowSampleDuplicates') ? setting.allowSampleDuplicates : void 0;\n    if (samplingRatio && !isNaN(samplingRatio)) {\n      this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));\n    }\n    if (allowSampleDuplicates) {\n      this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);\n    }\n  }\n\n  /**\n   * Recalculates all columns width (overwrite cache values).\n   */\n  recalculateAllColumnsWidth() {\n    if (this.hot.view && this.hot.view._wt.wtTable.isVisible()) {\n      this.clearCache();\n      this.calculateAllColumnsWidth();\n    }\n  }\n\n  /**\n   * Gets value which tells how many columns should be calculated synchronously (rest of the columns will be calculated\n   * asynchronously). The limit is calculated based on `syncLimit` set to `autoColumnSize` option (see {@link Options#autoColumnSize}).\n   *\n   * @returns {number}\n   */\n  getSyncCalculationLimit() {\n    const settings = this.hot.getSettings()[PLUGIN_KEY];\n    /* eslint-disable no-bitwise */\n    let limit = AutoColumnSize.SYNC_CALCULATION_LIMIT;\n    const colsLimit = this.hot.countCols() - 1;\n    if (isObject(settings)) {\n      limit = settings.syncLimit;\n      if (isPercentValue(limit)) {\n        limit = valueAccordingPercent(colsLimit, limit);\n      } else {\n        // Force to Number\n        limit >>= 0;\n      }\n    }\n    return Math.min(limit, colsLimit);\n  }\n\n  /**\n   * Gets the calculated column width.\n   *\n   * @param {number} column Visual column index.\n   * @param {number} [defaultWidth] Default column width. It will be picked up if no calculated width found.\n   * @param {boolean} [keepMinimum=true] If `true` then returned value won't be smaller then 50 (default column width).\n   * @returns {number}\n   */\n  getColumnWidth(column) {\n    let defaultWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n    let keepMinimum = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let width = defaultWidth;\n    if (width === void 0) {\n      width = this.columnWidthsMap.getValueAtIndex(this.hot.toPhysicalColumn(column));\n      if (keepMinimum && typeof width === 'number') {\n        width = Math.max(width, ViewportColumnsCalculator.DEFAULT_WIDTH);\n      }\n    }\n    return width;\n  }\n\n  /**\n   * Gets the first visible column.\n   *\n   * @returns {number} Returns visual column index, -1 if table is not rendered or if there are no columns to base the the calculations on.\n   */\n  getFirstVisibleColumn() {\n    const wot = this.hot.view._wt;\n    if (wot.wtViewport.columnsVisibleCalculator) {\n      // Fist fully visible column is stored as renderable index.\n      const firstFullyVisibleColumn = wot.wtTable.getFirstVisibleColumn();\n      if (firstFullyVisibleColumn !== -1) {\n        return this.hot.columnIndexMapper.getVisualFromRenderableIndex(firstFullyVisibleColumn);\n      }\n    }\n    if (wot.wtViewport.columnsRenderCalculator) {\n      const firstRenderedColumn = wot.wtTable.getFirstRenderedColumn();\n\n      // There are no rendered column.\n      if (firstRenderedColumn !== -1) {\n        return this.hot.columnIndexMapper.getVisualFromRenderableIndex(firstRenderedColumn);\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Gets the last visible column.\n   *\n   * @returns {number} Returns visual column index or -1 if table is not rendered.\n   */\n  getLastVisibleColumn() {\n    const wot = this.hot.view._wt;\n    if (wot.wtViewport.columnsVisibleCalculator) {\n      // Last fully visible column is stored as renderable index.\n      const lastFullyVisibleColumn = wot.wtTable.getLastVisibleColumn();\n      if (lastFullyVisibleColumn !== -1) {\n        return this.hot.columnIndexMapper.getVisualFromRenderableIndex(lastFullyVisibleColumn);\n      }\n    }\n    if (wot.wtViewport.columnsRenderCalculator) {\n      // Last fully visible column is stored as renderable index.\n      const lastRenderedColumn = wot.wtTable.getLastRenderedColumn();\n\n      // There are no rendered columns.\n      if (lastRenderedColumn !== -1) {\n        return this.hot.columnIndexMapper.getVisualFromRenderableIndex(lastRenderedColumn);\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Collects all columns which titles has been changed in comparison to the previous state.\n   *\n   * @private\n   * @returns {Array} It returns an array of physical column indexes.\n   */\n  findColumnsWhereHeaderWasChanged() {\n    const columnHeaders = this.hot.getColHeader();\n    const {\n      cachedColumnHeaders\n    } = privatePool.get(this);\n    const changedColumns = arrayReduce(columnHeaders, (acc, columnTitle, physicalColumn) => {\n      const cachedColumnsLength = cachedColumnHeaders.length;\n      if (cachedColumnsLength - 1 < physicalColumn || cachedColumnHeaders[physicalColumn] !== columnTitle) {\n        acc.push(physicalColumn);\n      }\n      if (cachedColumnsLength - 1 < physicalColumn) {\n        cachedColumnHeaders.push(columnTitle);\n      } else {\n        cachedColumnHeaders[physicalColumn] = columnTitle;\n      }\n      return acc;\n    }, []);\n    return changedColumns;\n  }\n\n  /**\n   * Clears cache of calculated column widths. If you want to clear only selected columns pass an array with their indexes.\n   * Otherwise whole cache will be cleared.\n   *\n   * @param {number[]} [columns] List of physical column indexes to clear.\n   */\n  clearCache() {\n    let columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (columns.length) {\n      this.hot.batchExecution(() => {\n        arrayEach(columns, physicalIndex => {\n          this.columnWidthsMap.setValueAtIndex(physicalIndex, null);\n        });\n      }, true);\n    } else {\n      this.columnWidthsMap.clear();\n    }\n  }\n\n  /**\n   * Checks if all widths were calculated. If not then return `true` (need recalculate).\n   *\n   * @returns {boolean}\n   */\n  isNeedRecalculate() {\n    return !!arrayFilter(this.columnWidthsMap.getValues().slice(0, this.measuredColumns), item => item === null).length;\n  }\n\n  /**\n   * On before view render listener.\n   *\n   * @private\n   */\n  onBeforeViewRender() {\n    this.calculateVisibleColumnsWidth();\n    if (this.isNeedRecalculate() && !this.inProgress) {\n      this.calculateAllColumnsWidth();\n    }\n  }\n\n  /**\n   * On after load data listener.\n   *\n   * @private\n   */\n  onAfterLoadData() {\n    if (this.hot.view) {\n      this.recalculateAllColumnsWidth();\n    } else {\n      // first load - initialization\n      setTimeout(() => {\n        if (this.hot) {\n          this.recalculateAllColumnsWidth();\n        }\n      }, 0);\n    }\n  }\n\n  /**\n   * On before change listener.\n   *\n   * @private\n   * @param {Array} changes An array of modified data.\n   */\n  onBeforeChange(changes) {\n    const changedColumns = arrayMap(changes, _ref2 => {\n      let [, columnProperty] = _ref2;\n      return this.hot.toPhysicalColumn(this.hot.propToCol(columnProperty));\n    });\n    this.clearCache(Array.from(new Set(changedColumns)));\n  }\n\n  /**\n   * On before column resize listener.\n   *\n   * @private\n   * @param {number} size Calculated new column width.\n   * @param {number} column Visual index of the resized column.\n   * @param {boolean} isDblClick  Flag that determines whether there was a double-click.\n   * @returns {number}\n   */\n  onBeforeColumnResize(size, column, isDblClick) {\n    let newSize = size;\n    if (isDblClick) {\n      this.calculateColumnsWidth(column, void 0, true);\n      newSize = this.getColumnWidth(column, void 0, false);\n    }\n    return newSize;\n  }\n\n  /**\n   * On after Handsontable init fill plugin with all necessary values.\n   *\n   * @private\n   */\n  onAfterInit() {\n    privatePool.get(this).cachedColumnHeaders = this.hot.getColHeader();\n  }\n\n  /**\n   * After formulas values updated listener.\n   *\n   * @private\n   * @param {Array} changes An array of modified data.\n   */\n  onAfterFormulasValuesUpdate(changes) {\n    const filteredChanges = arrayFilter(changes, change => {\n      var _change$address;\n      return isDefined((_change$address = change.address) === null || _change$address === void 0 ? void 0 : _change$address.col);\n    });\n    const changedColumns = arrayMap(filteredChanges, change => change.address.col);\n    this.clearCache(Array.from(new Set(changedColumns)));\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    this.ghostTable.clean();\n    super.destroy();\n  }\n}","import { isObject } from \"../../helpers/object.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nexport const DIRECTIONS = {\n  horizontal: 'horizontal',\n  vertical: 'vertical'\n};\n\n/**\n * Get direction between positions and cords of selections difference (drag area).\n *\n * @param {Array} startSelection The coordinates where the selection starts.\n * @param {Array} endSelection The coordinates where the selection ends.\n * @param {Function} cellCoordsFactory The function factory for CellCoords objects.\n * @returns {{direction: string, start: CellCoords, end: CellCoords}}\n */\nexport function getDragDirectionAndRange(startSelection, endSelection, cellCoordsFactory) {\n  let startOfDragCoords;\n  let endOfDragCoords;\n  let directionOfDrag;\n  if (endSelection[0] === startSelection[0] && endSelection[1] < startSelection[1]) {\n    directionOfDrag = 'left';\n    startOfDragCoords = cellCoordsFactory(endSelection[0], endSelection[1]);\n    endOfDragCoords = cellCoordsFactory(endSelection[2], startSelection[1] - 1);\n  } else if (endSelection[2] === startSelection[2] && endSelection[0] === startSelection[0] && endSelection[3] > startSelection[3]) {\n    directionOfDrag = 'right';\n    startOfDragCoords = cellCoordsFactory(endSelection[0], startSelection[3] + 1);\n    endOfDragCoords = cellCoordsFactory(endSelection[2], endSelection[3]);\n  } else if (endSelection[0] < startSelection[0] && endSelection[1] === startSelection[1]) {\n    directionOfDrag = 'up';\n    startOfDragCoords = cellCoordsFactory(endSelection[0], endSelection[1]);\n    endOfDragCoords = cellCoordsFactory(startSelection[0] - 1, endSelection[3]);\n  } else if (endSelection[2] > startSelection[2] && endSelection[1] === startSelection[1]) {\n    directionOfDrag = 'down';\n    startOfDragCoords = cellCoordsFactory(startSelection[2] + 1, endSelection[1]);\n    endOfDragCoords = cellCoordsFactory(endSelection[2], endSelection[3]);\n  }\n  if (startOfDragCoords) {\n    startOfDragCoords.normalize();\n  }\n  if (endOfDragCoords) {\n    endOfDragCoords.normalize();\n  }\n  return {\n    directionOfDrag,\n    startOfDragCoords,\n    endOfDragCoords\n  };\n}\n\n/**\n * Get mapped FillHandle setting containing information about\n * allowed FillHandle directions and if allowed is automatic insertion of rows on drag.\n *\n * @param {boolean|object} fillHandle Property of Handsontable settings.\n * @returns {{directions: Array, autoInsertRow: boolean}} Object allowing access to information\n * about FillHandle in more useful way.\n */\nexport function getMappedFillHandleSetting(fillHandle) {\n  const mappedSettings = {};\n  if (fillHandle === true) {\n    mappedSettings.directions = Object.keys(DIRECTIONS);\n    mappedSettings.autoInsertRow = true;\n  } else if (isObject(fillHandle)) {\n    if (isDefined(fillHandle.autoInsertRow)) {\n      // autoInsertRow for horizontal direction will be always false\n\n      if (fillHandle.direction === DIRECTIONS.horizontal) {\n        mappedSettings.autoInsertRow = false;\n      } else {\n        mappedSettings.autoInsertRow = fillHandle.autoInsertRow;\n      }\n    } else {\n      mappedSettings.autoInsertRow = false;\n    }\n    if (isDefined(fillHandle.direction)) {\n      mappedSettings.directions = [fillHandle.direction];\n    } else {\n      mappedSettings.directions = Object.keys(DIRECTIONS);\n    }\n  } else if (typeof fillHandle === 'string') {\n    mappedSettings.directions = [fillHandle];\n    mappedSettings.autoInsertRow = true;\n  } else {\n    mappedSettings.directions = [];\n    mappedSettings.autoInsertRow = false;\n  }\n  return mappedSettings;\n}","import \"core-js/modules/es.array.push.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { offset, outerHeight, outerWidth } from \"../../helpers/dom/element.mjs\";\nimport { arrayEach, arrayMap } from \"../../helpers/array.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { getDragDirectionAndRange, DIRECTIONS, getMappedFillHandleSetting } from \"./utils.mjs\";\nHooks.getSingleton().register('modifyAutofillRange');\nHooks.getSingleton().register('beforeAutofill');\nHooks.getSingleton().register('afterAutofill');\nexport const PLUGIN_KEY = 'autofill';\nexport const PLUGIN_PRIORITY = 20;\nconst SETTING_KEYS = ['fillHandle'];\nconst INSERT_ROW_ALTER_ACTION_NAME = 'insert_row_below';\nconst INTERVAL_FOR_ADDING_ROW = 200;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * This plugin provides \"drag-down\" and \"copy-down\" functionalities, both operated using the small square in the right\n * bottom of the cell selection.\n *\n * \"Drag-down\" expands the value of the selected cells to the neighbouring cells when you drag the small\n * square in the corner.\n *\n * \"Copy-down\" copies the value of the selection to all empty cells below when you double click the small square.\n *\n * @class Autofill\n * @plugin Autofill\n */\n\nexport class Autofill extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get SETTING_KEYS() {\n    return [PLUGIN_KEY, ...SETTING_KEYS];\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Event manager instance.\n     *\n     * @private\n     * @type {EventManager}\n     */\n    this.eventManager = new EventManager(this);\n    /**\n     * Specifies if adding new row started.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.addingStarted = false;\n    /**\n     * Specifies if there was mouse down on the cell corner.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.mouseDownOnCellCorner = false;\n    /**\n     * Specifies if mouse was dragged outside Handsontable.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.mouseDragOutside = false;\n    /**\n     * Specifies how many cell levels were dragged using the handle.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.handleDraggedCells = 0;\n    /**\n     * Specifies allowed directions of drag (`'horizontal'` or '`vertical`').\n     *\n     * @private\n     * @type {string[]}\n     */\n    this.directions = [];\n    /**\n     * Specifies if can insert new rows if needed.\n     *\n     * @type {boolean}\n     */\n    this.autoInsertRow = false;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this.hot.getSettings().fillHandle;\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    this.mapSettings();\n    this.registerEvents();\n    this.addHook('afterOnCellCornerMouseDown', event => this.onAfterCellCornerMouseDown(event));\n    this.addHook('afterOnCellCornerDblClick', event => this.onCellCornerDblClick(event));\n    this.addHook('beforeOnCellMouseOver', (_, coords) => this.onBeforeCellMouseOver(coords));\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - `autofill`\n   *  - [`fillHandle`](@/api/options.md#fillhandle)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.clearMappedSettings();\n    super.disablePlugin();\n  }\n\n  /**\n   * Gets selection data.\n   *\n   * @private\n   * @returns {object[]} Ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.\n   */\n  getSelectionData() {\n    const selection = this.hot.getSelectedRangeLast();\n    const {\n      row: startRow,\n      col: startCol\n    } = selection.getTopStartCorner();\n    const {\n      row: endRow,\n      col: endCol\n    } = selection.getBottomEndCorner();\n    const copyableRanges = this.hot.runHooks('modifyCopyableRange', [{\n      startRow,\n      startCol,\n      endRow,\n      endCol\n    }]);\n    const copyableRows = [];\n    const copyableColumns = [];\n    const data = [];\n    arrayEach(copyableRanges, range => {\n      for (let visualRow = range.startRow; visualRow <= range.endRow; visualRow += 1) {\n        if (copyableRows.indexOf(visualRow) === -1) {\n          copyableRows.push(visualRow);\n        }\n      }\n      for (let visualColumn = range.startCol; visualColumn <= range.endCol; visualColumn += 1) {\n        if (copyableColumns.indexOf(visualColumn) === -1) {\n          copyableColumns.push(visualColumn);\n        }\n      }\n    });\n    arrayEach(copyableRows, row => {\n      const rowSet = [];\n      arrayEach(copyableColumns, column => {\n        rowSet.push(this.hot.getCopyableData(row, column));\n      });\n      data.push(rowSet);\n    });\n    return data;\n  }\n\n  /**\n   * Try to apply fill values to the area in fill border, omitting the selection border.\n   *\n   * @private\n   * @returns {boolean} Reports if fill was applied.\n   *\n   * @fires Hooks#modifyAutofillRange\n   * @fires Hooks#beforeAutofill\n   * @fires Hooks#afterAutofill\n   */\n  fillIn() {\n    if (this.hot.selection.highlight.getFill().isEmpty()) {\n      return false;\n    }\n\n    // Fill area may starts or ends with invisible cell. There won't be any information about it as highlighted\n    // selection store just renderable indexes (It's part of Walkontable). I extrapolate where the start or/and\n    // the end is.\n    const [fillStartRow, fillStartColumn, fillEndRow, fillEndColumn] = this.hot.selection.highlight.getFill().getVisualCorners();\n    const selectionRangeLast = this.hot.getSelectedRangeLast();\n    const topStartCorner = selectionRangeLast.getTopStartCorner();\n    const bottomEndCorner = selectionRangeLast.getBottomEndCorner();\n    this.resetSelectionOfDraggedArea();\n    const cornersOfSelectedCells = [topStartCorner.row, topStartCorner.col, bottomEndCorner.row, bottomEndCorner.col];\n    const cornersOfSelectionAndDragAreas = this.hot.runHooks('modifyAutofillRange', [Math.min(topStartCorner.row, fillStartRow), Math.min(topStartCorner.col, fillStartColumn), Math.max(bottomEndCorner.row, fillEndRow), Math.max(bottomEndCorner.col, fillEndColumn)], cornersOfSelectedCells);\n    const {\n      directionOfDrag,\n      startOfDragCoords,\n      endOfDragCoords\n    } = getDragDirectionAndRange(cornersOfSelectedCells, cornersOfSelectionAndDragAreas, (row, column) => this.hot._createCellCoords(row, column));\n    if (startOfDragCoords && startOfDragCoords.row > -1 && startOfDragCoords.col > -1) {\n      const selectionData = this.getSelectionData();\n      const sourceRange = selectionRangeLast.clone();\n      const targetRange = this.hot._createCellRange(startOfDragCoords, startOfDragCoords, endOfDragCoords);\n      const beforeAutofillHookResult = this.hot.runHooks('beforeAutofill', selectionData, sourceRange, targetRange, directionOfDrag);\n      if (beforeAutofillHookResult === false) {\n        this.hot.selection.highlight.getFill().clear();\n        this.hot.render();\n        return false;\n      }\n      let fillData = beforeAutofillHookResult;\n      const res = beforeAutofillHookResult;\n      if (['up', 'left'].indexOf(directionOfDrag) > -1 && !(res.length === 1 && res[0].length === 0)) {\n        fillData = [];\n        if (directionOfDrag === 'up') {\n          const dragLength = endOfDragCoords.row - startOfDragCoords.row + 1;\n          const fillOffset = dragLength % res.length;\n          for (let i = 0; i < dragLength; i++) {\n            fillData.push(res[(i + (res.length - fillOffset)) % res.length]);\n          }\n        } else {\n          const dragLength = endOfDragCoords.col - startOfDragCoords.col + 1;\n          const fillOffset = dragLength % res[0].length;\n          for (let i = 0; i < res.length; i++) {\n            fillData.push([]);\n            for (let j = 0; j < dragLength; j++) {\n              fillData[i].push(res[i][(j + (res[i].length - fillOffset)) % res[i].length]);\n            }\n          }\n        }\n      }\n      this.hot.populateFromArray(startOfDragCoords.row, startOfDragCoords.col, fillData, endOfDragCoords.row, endOfDragCoords.col, `${this.pluginName}.fill`, null);\n      this.setSelection(cornersOfSelectionAndDragAreas);\n      this.hot.runHooks('afterAutofill', fillData, sourceRange, targetRange, directionOfDrag);\n      this.hot.render();\n    } else {\n      // reset to avoid some range bug\n      this.hot._refreshBorders();\n    }\n    return true;\n  }\n\n  /**\n   * Reduces the selection area if the handle was dragged outside of the table or on headers.\n   *\n   * @private\n   * @param {CellCoords} coords Indexes of selection corners.\n   * @returns {CellCoords}\n   */\n  reduceSelectionAreaIfNeeded(coords) {\n    if (coords.row < 0) {\n      coords.row = 0;\n    }\n    if (coords.col < 0) {\n      coords.col = 0;\n    }\n    return coords;\n  }\n\n  /**\n   * Gets the coordinates of the drag & drop borders.\n   *\n   * @private\n   * @param {CellCoords} coordsOfSelection `CellCoords` coord object.\n   * @returns {CellCoords}\n   */\n  getCoordsOfDragAndDropBorders(coordsOfSelection) {\n    const currentSelection = this.hot.getSelectedRangeLast();\n    const bottomRightCorner = currentSelection.getBottomEndCorner();\n    let coords = coordsOfSelection;\n    if (this.directions.includes(DIRECTIONS.vertical) && this.directions.includes(DIRECTIONS.horizontal)) {\n      const topStartCorner = currentSelection.getTopStartCorner();\n      if (bottomRightCorner.col <= coordsOfSelection.col || topStartCorner.col >= coordsOfSelection.col) {\n        coords = this.hot._createCellCoords(bottomRightCorner.row, coordsOfSelection.col);\n      }\n      if (bottomRightCorner.row < coordsOfSelection.row || topStartCorner.row > coordsOfSelection.row) {\n        coords = this.hot._createCellCoords(coordsOfSelection.row, bottomRightCorner.col);\n      }\n    } else if (this.directions.includes(DIRECTIONS.vertical)) {\n      coords = this.hot._createCellCoords(coordsOfSelection.row, bottomRightCorner.col);\n    } else if (this.directions.includes(DIRECTIONS.horizontal)) {\n      coords = this.hot._createCellCoords(bottomRightCorner.row, coordsOfSelection.col);\n    } else {\n      // wrong direction\n      return;\n    }\n    return this.reduceSelectionAreaIfNeeded(coords);\n  }\n\n  /**\n   * Show the fill border.\n   *\n   * @private\n   * @param {CellCoords} coordsOfSelection `CellCoords` coord object.\n   */\n  showBorder(coordsOfSelection) {\n    const coordsOfDragAndDropBorders = this.getCoordsOfDragAndDropBorders(coordsOfSelection);\n    if (coordsOfDragAndDropBorders) {\n      this.redrawBorders(coordsOfDragAndDropBorders);\n    }\n  }\n\n  /**\n   * Add new row.\n   *\n   * @private\n   */\n  addRow() {\n    this.hot._registerTimeout(() => {\n      this.hot.alter(INSERT_ROW_ALTER_ACTION_NAME, void 0, 1, `${this.pluginName}.fill`);\n      this.addingStarted = false;\n    }, INTERVAL_FOR_ADDING_ROW);\n  }\n\n  /**\n   * Add new rows if they are needed to continue auto-filling values.\n   *\n   * @private\n   */\n  addNewRowIfNeeded() {\n    if (!this.hot.selection.highlight.getFill().isEmpty() && this.addingStarted === false && this.autoInsertRow) {\n      const cornersOfSelectedCells = this.hot.getSelectedLast();\n      const cornersOfSelectedDragArea = this.hot.selection.highlight.getFill().getVisualCorners();\n      const nrOfTableRows = this.hot.countRows();\n      if (cornersOfSelectedCells[2] < nrOfTableRows - 1 && cornersOfSelectedDragArea[2] === nrOfTableRows - 1) {\n        this.addingStarted = true;\n        this.addRow();\n      }\n    }\n  }\n\n  /**\n   * Get index of last adjacent filled in row.\n   *\n   * @private\n   * @param {Array} cornersOfSelectedCells Indexes of selection corners.\n   * @returns {number} Gives number greater than or equal to zero when selection adjacent can be applied.\n   *                   Or -1 when selection adjacent can't be applied.\n   */\n  getIndexOfLastAdjacentFilledInRow(cornersOfSelectedCells) {\n    const data = this.hot.getData();\n    const nrOfTableRows = this.hot.countRows();\n    let lastFilledInRowIndex;\n    for (let rowIndex = cornersOfSelectedCells[2] + 1; rowIndex < nrOfTableRows; rowIndex++) {\n      for (let columnIndex = cornersOfSelectedCells[1]; columnIndex <= cornersOfSelectedCells[3]; columnIndex++) {\n        const dataInCell = data[rowIndex][columnIndex];\n        if (dataInCell) {\n          return -1;\n        }\n      }\n      const dataInNextLeftCell = data[rowIndex][cornersOfSelectedCells[1] - 1];\n      const dataInNextRightCell = data[rowIndex][cornersOfSelectedCells[3] + 1];\n      if (!!dataInNextLeftCell || !!dataInNextRightCell) {\n        lastFilledInRowIndex = rowIndex;\n      }\n    }\n    return lastFilledInRowIndex;\n  }\n\n  /**\n   * Adds a selection from the start area to the specific row index.\n   *\n   * @private\n   * @param {Array} selectStartArea Selection area from which we start to create more comprehensive selection.\n   * @param {number} rowIndex The row index into the selection will be added.\n   */\n  addSelectionFromStartAreaToSpecificRowIndex(selectStartArea, rowIndex) {\n    this.hot.selection.highlight.getFill().clear().add(this.hot._createCellCoords(selectStartArea[0], selectStartArea[1])).add(this.hot._createCellCoords(rowIndex, selectStartArea[3])).commit();\n  }\n\n  /**\n   * Sets selection based on passed corners.\n   *\n   * @private\n   * @param {Array} cornersOfArea An array witch defines selection.\n   */\n  setSelection(cornersOfArea) {\n    this.hot.selectCell(...arrayMap(cornersOfArea, index => Math.max(index, 0)), false, false);\n  }\n\n  /**\n   * Try to select cells down to the last row in the left column and then returns if selection was applied.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  selectAdjacent() {\n    const cornersOfSelectedCells = this.hot.getSelectedLast();\n    const lastFilledInRowIndex = this.getIndexOfLastAdjacentFilledInRow(cornersOfSelectedCells);\n    if (lastFilledInRowIndex === -1 || lastFilledInRowIndex === void 0) {\n      return false;\n    }\n    this.addSelectionFromStartAreaToSpecificRowIndex(cornersOfSelectedCells, lastFilledInRowIndex);\n    return true;\n  }\n\n  /**\n   * Resets selection of dragged area.\n   *\n   * @private\n   */\n  resetSelectionOfDraggedArea() {\n    this.handleDraggedCells = 0;\n    this.hot.selection.highlight.getFill().clear();\n  }\n\n  /**\n   * Redraws borders.\n   *\n   * @private\n   * @param {CellCoords} coords `CellCoords` coord object.\n   */\n  redrawBorders(coords) {\n    this.hot.selection.highlight.getFill().clear().add(this.hot.getSelectedRangeLast().from).add(this.hot.getSelectedRangeLast().to).add(coords).commit();\n    this.hot.view.render();\n  }\n\n  /**\n   * Get if mouse was dragged outside.\n   *\n   * @private\n   * @param {MouseEvent} event `mousemove` event properties.\n   * @returns {boolean}\n   */\n  getIfMouseWasDraggedOutside(event) {\n    const {\n      documentElement\n    } = this.hot.rootDocument;\n    const tableBottom = offset(this.hot.table).top - (this.hot.rootWindow.pageYOffset || documentElement.scrollTop) + outerHeight(this.hot.table);\n    const tableRight = offset(this.hot.table).left - (this.hot.rootWindow.pageXOffset || documentElement.scrollLeft) + outerWidth(this.hot.table);\n    return event.clientY > tableBottom && event.clientX <= tableRight;\n  }\n\n  /**\n   * Bind the events used by the plugin.\n   *\n   * @private\n   */\n  registerEvents() {\n    const {\n      documentElement\n    } = this.hot.rootDocument;\n    this.eventManager.addEventListener(documentElement, 'mouseup', () => this.onMouseUp());\n    this.eventManager.addEventListener(documentElement, 'mousemove', event => this.onMouseMove(event));\n  }\n\n  /**\n   * On cell corner double click callback.\n   *\n   * @private\n   */\n  onCellCornerDblClick() {\n    const selectionApplied = this.selectAdjacent();\n    if (selectionApplied) {\n      this.fillIn();\n    }\n  }\n\n  /**\n   * On after cell corner mouse down listener.\n   *\n   * @private\n   */\n  onAfterCellCornerMouseDown() {\n    this.handleDraggedCells = 1;\n    this.mouseDownOnCellCorner = true;\n  }\n\n  /**\n   * On before cell mouse over listener.\n   *\n   * @private\n   * @param {CellCoords} coords `CellCoords` coord object.\n   */\n  onBeforeCellMouseOver(coords) {\n    if (this.mouseDownOnCellCorner && !this.hot.view.isMouseDown() && this.handleDraggedCells) {\n      this.handleDraggedCells += 1;\n      this.showBorder(coords);\n      this.addNewRowIfNeeded();\n    }\n  }\n\n  /**\n   * On mouse up listener.\n   *\n   * @private\n   */\n  onMouseUp() {\n    if (this.handleDraggedCells) {\n      if (this.handleDraggedCells > 1) {\n        this.fillIn();\n      }\n      this.handleDraggedCells = 0;\n      this.mouseDownOnCellCorner = false;\n    }\n  }\n\n  /**\n   * On mouse move listener.\n   *\n   * @private\n   * @param {MouseEvent} event `mousemove` event properties.\n   */\n  onMouseMove(event) {\n    const mouseWasDraggedOutside = this.getIfMouseWasDraggedOutside(event);\n    if (this.addingStarted === false && this.handleDraggedCells > 0 && mouseWasDraggedOutside) {\n      this.mouseDragOutside = true;\n      this.addingStarted = true;\n    } else {\n      this.mouseDragOutside = false;\n    }\n    if (this.mouseDragOutside && this.autoInsertRow) {\n      this.addRow();\n    }\n  }\n\n  /**\n   * Clears mapped settings.\n   *\n   * @private\n   */\n  clearMappedSettings() {\n    this.directions.length = 0;\n    this.autoInsertRow = false;\n  }\n\n  /**\n   * Map settings.\n   *\n   * @private\n   */\n  mapSettings() {\n    const mappedSettings = getMappedFillHandleSetting(this.hot.getSettings().fillHandle);\n    this.directions = mappedSettings.directions;\n    this.autoInsertRow = mappedSettings.autoInsertRow;\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}","import { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach, arrayFilter } from \"../../helpers/array.mjs\";\nimport { cancelAnimationFrame, requestAnimationFrame } from \"../../helpers/feature.mjs\";\nimport { isVisible } from \"../../helpers/dom/element.mjs\";\nimport GhostTable from \"../../utils/ghostTable.mjs\";\nimport { isObject, hasOwnProperty } from \"../../helpers/object.mjs\";\nimport { valueAccordingPercent, rangeEach } from \"../../helpers/number.mjs\";\nimport SamplesGenerator from \"../../utils/samplesGenerator.mjs\";\nimport { isPercentValue } from \"../../helpers/string.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nexport const PLUGIN_KEY = 'autoRowSize';\nexport const PLUGIN_PRIORITY = 40;\nconst ROW_WIDTHS_MAP_NAME = 'autoRowSize';\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @plugin AutoRowSize\n * @class AutoRowSize\n * @description\n * The `AutoRowSize` plugin allows you to set row heights based on their highest cells.\n *\n * By default, the plugin is declared as `undefined`, which makes it disabled (same as if it was declared as `false`).\n * Enabling this plugin may decrease the overall table performance, as it needs to calculate the heights of all cells to\n * resize the rows accordingly.\n * If you experience problems with the performance, try turning this feature off and declaring the row heights manually.\n *\n * But, to display Handsontable's [scrollbar](https://handsontable.com/docs/8.0.0/demo-scrolling.html)\n * in a proper size, you need to enable the `AutoRowSize` plugin,\n * by setting the [`autoRowSize`](@/api/options.md#autoRowSize) option to `true`.\n *\n * Row height calculations are divided into sync and async part. Each of this parts has their own advantages and\n * disadvantages. Synchronous calculations are faster but they block the browser UI, while the slower asynchronous\n * operations don't block the browser UI.\n *\n * To configure the sync/async distribution, you can pass an absolute value (number of rows) or a percentage value to a config object:\n * ```js\n * // as a number (300 rows in sync, rest async)\n * autoRowSize: {syncLimit: 300},\n *\n * // as a string (percent)\n * autoRowSize: {syncLimit: '40%'},\n *\n * // allow sample duplication\n * autoRowSize: {syncLimit: '40%', allowSampleDuplicates: true},\n * ```\n *\n * You can also use the `allowSampleDuplicates` option to allow sampling duplicate values when calculating the row\n * height. __Note__, that this might have a negative impact on performance.\n *\n * To configure this plugin see {@link Options#autoRowSize}.\n *\n * @example\n *\n * ::: only-for javascript\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   data: getData(),\n *   autoRowSize: true\n * });\n * // Access to plugin instance:\n * const plugin = hot.getPlugin('autoRowSize');\n *\n * plugin.getRowHeight(4);\n *\n * if (plugin.isEnabled()) {\n *   // code...\n * }\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * // First, let's contruct Handsontable\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n *   autoRowSize={true}\n * />\n *\n * ...\n *\n * // Access to plugin instance:\n * const hot = hotRef.current.hotInstance;\n * const plugin = hot.getPlugin('autoRowSize');\n *\n * plugin.getRowHeight(4);\n *\n * if (plugin.isEnabled()) {\n *   // code...\n * }\n * ```\n * :::\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\nexport class AutoRowSize extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get SETTING_KEYS() {\n    return true;\n  }\n  static get CALCULATION_STEP() {\n    return 50;\n  }\n  static get SYNC_CALCULATION_LIMIT() {\n    return 500;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * PhysicalIndexToValueMap to keep and track heights for physical row indexes.\n     *\n     * @private\n     * @type {PhysicalIndexToValueMap}\n     */\n    this.rowHeightsMap = void 0;\n    /**\n     * Columns header's height cache.\n     *\n     * @private\n     * @type {number}\n     */\n    this.headerHeight = null;\n    /**\n     * Instance of {@link GhostTable} for rows and columns size calculations.\n     *\n     * @private\n     * @type {GhostTable}\n     */\n    this.ghostTable = new GhostTable(this.hot);\n    /**\n     * Instance of {@link SamplesGenerator} for generating samples necessary for rows height calculations.\n     *\n     * @private\n     * @type {SamplesGenerator}\n     */\n    this.samplesGenerator = new SamplesGenerator((row, column) => {\n      if (row >= 0 && column >= 0) {\n        const cellMeta = this.hot.getCellMeta(row, column);\n        if (cellMeta.hidden) {\n          // do not generate samples for cells that are covered by merged cell (null values)\n          return false;\n        }\n      }\n      let cellValue;\n      if (row >= 0) {\n        cellValue = this.hot.getDataAtCell(row, column);\n      } else if (row === -1) {\n        cellValue = this.hot.getColHeader(column);\n      }\n      return {\n        value: cellValue\n      };\n    });\n    /**\n     * `true` if only the first calculation was performed.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.firstCalculation = true;\n    /**\n     * `true` if the size calculation is in progress.\n     *\n     * @type {boolean}\n     */\n    this.inProgress = false;\n    /**\n     * Number of already measured rows (we already know their sizes).\n     *\n     * @type {number}\n     */\n    this.measuredRows = 0;\n    /**\n     * PhysicalIndexToValueMap to keep and track heights for physical row indexes.\n     *\n     * @private\n     * @type {PhysicalIndexToValueMap}\n     */\n    this.rowHeightsMap = new IndexToValueMap();\n    this.hot.rowIndexMapper.registerMap(ROW_WIDTHS_MAP_NAME, this.rowHeightsMap);\n\n    // Leave the listener active to allow auto-sizing the rows when the plugin is disabled.\n    // This is necessary for height recalculation for resize handler doubleclick (ManualRowResize).\n    this.addHook('beforeRowResize', (size, row, isDblClick) => this.onBeforeRowResize(size, row, isDblClick));\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    const settings = this.hot.getSettings()[PLUGIN_KEY];\n    return settings === true || isObject(settings);\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    this.setSamplingOptions();\n    this.addHook('afterLoadData', function () {\n      return _this.onAfterLoadData(...arguments);\n    });\n    this.addHook('beforeChangeRender', changes => this.onBeforeChange(changes));\n    this.addHook('beforeColumnResize', () => this.recalculateAllRowsHeight());\n    this.addHook('beforeViewRender', force => this.onBeforeViewRender(force));\n    this.addHook('modifyRowHeight', (height, row) => this.getRowHeight(row, height));\n    this.addHook('modifyColumnHeaderHeight', () => this.getColumnHeaderHeight());\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.headerHeight = null;\n    super.disablePlugin();\n\n    // Leave the listener active to allow auto-sizing the rows when the plugin is disabled.\n    // This is necesseary for height recalculation for resize handler doubleclick (ManualRowResize).\n    this.addHook('beforeRowResize', (size, row, isDblClick) => this.onBeforeRowResize(size, row, isDblClick));\n  }\n\n  /**\n   * Calculate a given rows height.\n   *\n   * @param {number|object} rowRange Row index or an object with `from` and `to` indexes as a range.\n   * @param {number|object} colRange Column index or an object with `from` and `to` indexes as a range.\n   * @param {boolean} [force=false] If `true` the calculation will be processed regardless of whether the width exists in the cache.\n   */\n  calculateRowsHeight() {\n    let rowRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      from: 0,\n      to: this.hot.countRows() - 1\n    };\n    let colRange = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      from: 0,\n      to: this.hot.countCols() - 1\n    };\n    let force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // eslint-disable-line max-len\n    const rowsRange = typeof rowRange === 'number' ? {\n      from: rowRange,\n      to: rowRange\n    } : rowRange;\n    const columnsRange = typeof colRange === 'number' ? {\n      from: colRange,\n      to: colRange\n    } : colRange;\n    if (this.hot.getColHeader(0) !== null) {\n      const samples = this.samplesGenerator.generateRowSamples(-1, columnsRange);\n      this.ghostTable.addColumnHeadersRow(samples.get(-1));\n    }\n    rangeEach(rowsRange.from, rowsRange.to, row => {\n      // For rows we must calculate row height even when user had set height value manually.\n      // We can shrink column but cannot shrink rows!\n      if (force || this.rowHeightsMap.getValueAtIndex(row) === null) {\n        const samples = this.samplesGenerator.generateRowSamples(row, columnsRange);\n        arrayEach(samples, _ref => {\n          let [rowIndex, sample] = _ref;\n          return this.ghostTable.addRow(rowIndex, sample);\n        });\n      }\n    });\n    if (this.ghostTable.rows.length) {\n      this.hot.batchExecution(() => {\n        this.ghostTable.getHeights((row, height) => {\n          if (row < 0) {\n            this.headerHeight = height;\n          } else {\n            this.rowHeightsMap.setValueAtIndex(this.hot.toPhysicalRow(row), height);\n          }\n        });\n      }, true);\n      this.measuredRows = rowsRange.to + 1;\n      this.ghostTable.clean();\n    }\n  }\n\n  /**\n   * Calculate all rows heights. The calculated row will be cached in the {@link AutoRowSize#heights} property.\n   * To retrieve height for specified row use {@link AutoRowSize#getRowHeight} method.\n   *\n   * @param {object|number} colRange Row index or an object with `from` and `to` properties which define row range.\n   */\n  calculateAllRowsHeight() {\n    let colRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      from: 0,\n      to: this.hot.countCols() - 1\n    };\n    let current = 0;\n    const length = this.hot.countRows() - 1;\n    let timer = null;\n    this.inProgress = true;\n    const loop = () => {\n      // When hot was destroyed after calculating finished cancel frame\n      if (!this.hot) {\n        cancelAnimationFrame(timer);\n        this.inProgress = false;\n        return;\n      }\n      this.calculateRowsHeight({\n        from: current,\n        to: Math.min(current + AutoRowSize.CALCULATION_STEP, length)\n      }, colRange);\n      current = current + AutoRowSize.CALCULATION_STEP + 1;\n      if (current < length) {\n        timer = requestAnimationFrame(loop);\n      } else {\n        cancelAnimationFrame(timer);\n        this.inProgress = false;\n\n        // @TODO Should call once per render cycle, currently fired separately in different plugins\n        this.hot.view.adjustElementsSize(true);\n\n        // tmp\n        if (this.hot.view._wt.wtOverlays.inlineStartOverlay.needFullRender) {\n          this.hot.view._wt.wtOverlays.inlineStartOverlay.clone.draw();\n        }\n      }\n    };\n    const syncLimit = this.getSyncCalculationLimit();\n\n    // sync\n    if (this.firstCalculation && syncLimit >= 0) {\n      this.calculateRowsHeight({\n        from: 0,\n        to: syncLimit\n      }, colRange);\n      this.firstCalculation = false;\n      current = syncLimit + 1;\n    }\n    // async\n    if (current < length) {\n      loop();\n    } else {\n      this.inProgress = false;\n      this.hot.view.adjustElementsSize(false);\n    }\n  }\n\n  /**\n   * Sets the sampling options.\n   *\n   * @private\n   */\n  setSamplingOptions() {\n    const setting = this.hot.getSettings()[PLUGIN_KEY];\n    const samplingRatio = setting && hasOwnProperty(setting, 'samplingRatio') ? setting.samplingRatio : void 0;\n    const allowSampleDuplicates = setting && hasOwnProperty(setting, 'allowSampleDuplicates') ? setting.allowSampleDuplicates : void 0;\n    if (samplingRatio && !isNaN(samplingRatio)) {\n      this.samplesGenerator.setSampleCount(parseInt(samplingRatio, 10));\n    }\n    if (allowSampleDuplicates) {\n      this.samplesGenerator.setAllowDuplicates(allowSampleDuplicates);\n    }\n  }\n\n  /**\n   * Recalculates all rows height (overwrite cache values).\n   */\n  recalculateAllRowsHeight() {\n    if (isVisible(this.hot.view._wt.wtTable.TABLE)) {\n      this.clearCache();\n      this.calculateAllRowsHeight();\n    }\n  }\n\n  /**\n   * Gets value which tells how many rows should be calculated synchronously (rest of the rows will be calculated\n   * asynchronously). The limit is calculated based on `syncLimit` set to autoRowSize option (see {@link Options#autoRowSize}).\n   *\n   * @returns {number}\n   */\n  getSyncCalculationLimit() {\n    const settings = this.hot.getSettings()[PLUGIN_KEY];\n    /* eslint-disable no-bitwise */\n    let limit = AutoRowSize.SYNC_CALCULATION_LIMIT;\n    const rowsLimit = this.hot.countRows() - 1;\n    if (isObject(settings)) {\n      limit = settings.syncLimit;\n      if (isPercentValue(limit)) {\n        limit = valueAccordingPercent(rowsLimit, limit);\n      } else {\n        // Force to Number\n        limit >>= 0;\n      }\n    }\n    return Math.min(limit, rowsLimit);\n  }\n\n  /**\n   * Get a row's height, as measured in the DOM.\n   *\n   * The height returned includes 1 px of the row's bottom border.\n   *\n   * Mind that this method is different from the\n   * [`getRowHeight()`](@/api/core.md#getrowheight) method\n   * of Handsontable's [Core](@/api/core.md).\n   *\n   * @param {number} row A visual row index.\n   * @param {number} [defaultHeight] If no height is found, `defaultHeight` is returned instead.\n   * @returns {number} The height of the specified row, in pixels.\n   */\n  getRowHeight(row) {\n    let defaultHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : void 0;\n    const cachedHeight = row < 0 ? this.headerHeight : this.rowHeightsMap.getValueAtIndex(this.hot.toPhysicalRow(row));\n    let height = defaultHeight;\n    if (cachedHeight !== null && cachedHeight > (defaultHeight || 0)) {\n      height = cachedHeight;\n    }\n    return height;\n  }\n\n  /**\n   * Get the calculated column header height.\n   *\n   * @returns {number|undefined}\n   */\n  getColumnHeaderHeight() {\n    return this.headerHeight;\n  }\n\n  /**\n   * Get the first visible row.\n   *\n   * @returns {number} Returns row index, -1 if table is not rendered or if there are no rows to base the the calculations on.\n   */\n  getFirstVisibleRow() {\n    const wot = this.hot.view._wt;\n    if (wot.wtViewport.rowsVisibleCalculator) {\n      return wot.wtTable.getFirstVisibleRow();\n    }\n    if (wot.wtViewport.rowsRenderCalculator) {\n      return wot.wtTable.getFirstRenderedRow();\n    }\n    return -1;\n  }\n\n  /**\n   * Gets the last visible row.\n   *\n   * @returns {number} Returns row index or -1 if table is not rendered.\n   */\n  getLastVisibleRow() {\n    const wot = this.hot.view._wt;\n    if (wot.wtViewport.rowsVisibleCalculator) {\n      return wot.wtTable.getLastVisibleRow();\n    }\n    if (wot.wtViewport.rowsRenderCalculator) {\n      return wot.wtTable.getLastRenderedRow();\n    }\n    return -1;\n  }\n\n  /**\n   * Clears cached heights.\n   */\n  clearCache() {\n    this.headerHeight = null;\n    this.rowHeightsMap.init();\n  }\n\n  /**\n   * Clears cache by range.\n   *\n   * @param {object|number} range Row index or an object with `from` and `to` properties which define row range.\n   */\n  clearCacheByRange(range) {\n    const {\n      from,\n      to\n    } = typeof range === 'number' ? {\n      from: range,\n      to: range\n    } : range;\n    this.hot.batchExecution(() => {\n      rangeEach(Math.min(from, to), Math.max(from, to), row => {\n        this.rowHeightsMap.setValueAtIndex(row, null);\n      });\n    }, true);\n  }\n\n  /**\n   * Checks if all heights were calculated. If not then return `true` (need recalculate).\n   *\n   * @returns {boolean}\n   */\n  isNeedRecalculate() {\n    return !!arrayFilter(this.rowHeightsMap.getValues().slice(0, this.measuredRows), item => item === null).length;\n  }\n\n  /**\n   * On before view render listener.\n   *\n   * @private\n   */\n  onBeforeViewRender() {\n    const force = this.hot.renderCall;\n    const fixedRowsBottom = this.hot.getSettings().fixedRowsBottom;\n    const firstVisibleRow = this.getFirstVisibleRow();\n    const lastVisibleRow = this.getLastVisibleRow();\n    if (firstVisibleRow === -1 || lastVisibleRow === -1) {\n      return;\n    }\n    this.calculateRowsHeight({\n      from: firstVisibleRow,\n      to: lastVisibleRow\n    }, void 0, force);\n\n    // Calculate rows height synchronously for bottom overlay\n    if (fixedRowsBottom) {\n      const totalRows = this.hot.countRows() - 1;\n      this.calculateRowsHeight({\n        from: totalRows - fixedRowsBottom,\n        to: totalRows\n      });\n    }\n    if (this.isNeedRecalculate() && !this.inProgress) {\n      this.calculateAllRowsHeight();\n    }\n  }\n\n  /**\n   * On before row move listener.\n   *\n   * @private\n   * @param {number} from Row index where was grabbed.\n   * @param {number} to Destination row index.\n   */\n  onBeforeRowMove(from, to) {\n    this.clearCacheByRange({\n      from,\n      to\n    });\n    this.calculateAllRowsHeight();\n  }\n\n  /**\n   * On before row resize listener.\n   *\n   * @private\n   * @param {number} size The size of the current row index.\n   * @param {number} row Current row index.\n   * @param {boolean} isDblClick Indicates if the resize was triggered by doubleclick.\n   * @returns {number}\n   */\n  onBeforeRowResize(size, row, isDblClick) {\n    let newSize = size;\n    if (isDblClick) {\n      this.calculateRowsHeight(row, void 0, true);\n      newSize = this.getRowHeight(row);\n    }\n    return newSize;\n  }\n\n  /**\n   * On after load data listener.\n   *\n   * @private\n   */\n  onAfterLoadData() {\n    if (this.hot.view) {\n      this.recalculateAllRowsHeight();\n    } else {\n      // first load - initialization\n      this.hot._registerTimeout(() => {\n        if (this.hot) {\n          this.recalculateAllRowsHeight();\n        }\n      });\n    }\n  }\n\n  /**\n   * On before change listener.\n   *\n   * @private\n   * @param {Array} changes 2D array containing information about each of the edited cells.\n   */\n  onBeforeChange(changes) {\n    let range = null;\n    if (changes.length === 1) {\n      range = changes[0][0];\n    } else if (changes.length > 1) {\n      range = {\n        from: changes[0][0],\n        to: changes[changes.length - 1][0]\n      };\n    }\n    if (range !== null) {\n      this.clearCacheByRange(range);\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    this.ghostTable.clean();\n    super.destroy();\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nimport { getDecreasedIndexes, getIncreasedIndexes } from \"./actionsOnIndexes.mjs\";\nimport { getListWithInsertedItems as sequenceStrategyInsert, getListWithRemovedItems as sequenceStrategyRemove } from \"./indexesSequence.mjs\";\nimport { getListWithInsertedItems as physicalStrategyInsert, getListWithRemovedItems as physicalStrategyRemove } from \"./physicallyIndexed.mjs\";\nconst alterStrategies = new Map([['indexesSequence', {\n  getListWithInsertedItems: sequenceStrategyInsert,\n  getListWithRemovedItems: sequenceStrategyRemove\n}], ['physicallyIndexed', {\n  getListWithInsertedItems: physicalStrategyInsert,\n  getListWithRemovedItems: physicalStrategyRemove\n}]]);\nconst alterUtilsFactory = indexationStrategy => {\n  if (alterStrategies.has(indexationStrategy) === false) {\n    throw new Error(`Alter strategy with ID '${indexationStrategy}' does not exist.`);\n  }\n  return alterStrategies.get(indexationStrategy);\n};\nexport { getDecreasedIndexes, getIncreasedIndexes, alterUtilsFactory };","import { IndexMap, alterUtilsFactory, getDecreasedIndexes, getIncreasedIndexes } from \"../../../translations/index.mjs\";\nconst {\n  getListWithInsertedItems,\n  getListWithRemovedItems\n} = alterUtilsFactory('physicallyIndexed');\n\n/**\n * Map from physical index to another index.\n */\nclass LooseBindsMap extends IndexMap {\n  constructor() {\n    super(index => index);\n  }\n\n  /**\n   * Add values to list and reorganize.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insert(insertionIndex, insertedIndexes) {\n    const listAfterUpdate = getIncreasedIndexes(this.indexedValues, insertedIndexes);\n    this.indexedValues = getListWithInsertedItems(listAfterUpdate, insertionIndex, insertedIndexes, this.initValueOrFn);\n    super.insert(insertionIndex, insertedIndexes);\n  }\n\n  /**\n   * Remove values from the list and reorganize.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  remove(removedIndexes) {\n    const listAfterUpdate = getListWithRemovedItems(this.indexedValues, removedIndexes);\n    this.indexedValues = getDecreasedIndexes(listAfterUpdate, removedIndexes);\n    super.remove(removedIndexes);\n  }\n}\nexport default LooseBindsMap;","import { IndexMap, alterUtilsFactory } from \"../../../translations/index.mjs\";\nconst {\n  getListWithInsertedItems,\n  getListWithRemovedItems\n} = alterUtilsFactory('physicallyIndexed');\n\n/**\n * Map from physical index to another index.\n */\nclass StrictBindsMap extends IndexMap {\n  constructor() {\n    super(index => index);\n  }\n\n  /**\n   * Add values to list and reorganize.\n   *\n   * @private\n   * @param {number} insertionIndex Position inside the list.\n   * @param {Array} insertedIndexes List of inserted indexes.\n   */\n  insert(insertionIndex, insertedIndexes) {\n    this.indexedValues = getListWithInsertedItems(this.indexedValues, insertionIndex, insertedIndexes, (_, ordinalNumber) => this.getNextValue(ordinalNumber));\n    super.insert(insertionIndex, insertedIndexes);\n  }\n\n  /**\n   * Remove values from the list and reorganize.\n   *\n   * @private\n   * @param {Array} removedIndexes List of removed indexes.\n   */\n  remove(removedIndexes) {\n    this.indexedValues = getListWithRemovedItems(this.indexedValues, removedIndexes);\n    super.remove(removedIndexes);\n  }\n\n  /**\n   * Get next values, which should be greater than actual maximum value in the list.\n   *\n   * @param {number} ordinalNumber Position in the list.\n   * @returns {number}\n   */\n  getNextValue(ordinalNumber) {\n    return Math.max(...this.getValues()) + 1 + ordinalNumber;\n  }\n}\nexport default StrictBindsMap;","import { BasePlugin } from \"../base/index.mjs\";\nimport LooseBindsMap from \"./maps/looseBindsMap.mjs\";\nimport StrictBindsMap from \"./maps/strictBindsMap.mjs\";\nexport const PLUGIN_KEY = 'bindRowsWithHeaders';\nexport const PLUGIN_PRIORITY = 210;\nconst DEFAULT_BIND = 'loose';\nconst bindTypeToMapStrategy = new Map([['loose', LooseBindsMap], ['strict', StrictBindsMap]]);\n\n/**\n * @plugin BindRowsWithHeaders\n * @class BindRowsWithHeaders\n *\n * @description\n * Plugin allows binding the table rows with their headers.\n *\n * If the plugin is enabled, the table row headers will \"stick\" to the rows, when they are hidden/moved. Basically, if\n * at the initialization row 0 has a header titled \"A\", it will have it no matter what you do with the table.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   // enable plugin\n *   bindRowsWithHeaders: true\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={getData()}\n *   // enable plugin\n *   bindRowsWithHeaders={true}\n * />\n * ```\n * :::\n */\nexport class BindRowsWithHeaders extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Plugin indexes cache.\n     *\n     * @private\n     * @type {null|IndexMap}\n     */\n    this.headerIndexes = null;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link BindRowsWithHeaders#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    let bindType = this.hot.getSettings()[PLUGIN_KEY];\n    if (typeof bindType !== 'string') {\n      bindType = DEFAULT_BIND;\n    }\n    const MapStrategy = bindTypeToMapStrategy.get(bindType);\n    this.headerIndexes = this.hot.rowIndexMapper.registerMap('bindRowsWithHeaders', new MapStrategy());\n    this.addHook('modifyRowHeader', row => this.onModifyRowHeader(row));\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.rowIndexMapper.unregisterMap('bindRowsWithHeaders');\n    super.disablePlugin();\n  }\n\n  /**\n   * On modify row header listener.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @returns {number}\n   */\n  onModifyRowHeader(row) {\n    return this.headerIndexes.getValueAtIndex(this.hot.toPhysicalRow(row));\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach, arrayFilter, arrayUnique } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { warn } from \"../../helpers/console.mjs\";\nimport { addClass, hasClass, removeClass, fastInnerText, removeAttribute, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { stopImmediatePropagation } from \"../../helpers/dom/event.mjs\";\nimport { A11Y_EXPANDED, A11Y_HIDDEN } from \"../../helpers/a11y.mjs\";\nexport const PLUGIN_KEY = 'collapsibleColumns';\nexport const PLUGIN_PRIORITY = 290;\nconst SETTING_KEYS = ['nestedHeaders'];\nconst COLLAPSIBLE_ELEMENT_CLASS = 'collapsibleIndicator';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nconst actionDictionary = new Map([['collapse', {\n  hideColumn: true,\n  beforeHook: 'beforeColumnCollapse',\n  afterHook: 'afterColumnCollapse'\n}], ['expand', {\n  hideColumn: false,\n  beforeHook: 'beforeColumnExpand',\n  afterHook: 'afterColumnExpand'\n}]]);\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin CollapsibleColumns\n * @class CollapsibleColumns\n *\n * @description\n * The _CollapsibleColumns_ plugin allows collapsing of columns, covered by a header with the `colspan` property defined.\n *\n * Clicking the \"collapse/expand\" button collapses (or expands) all \"child\" headers except the first one.\n *\n * Setting the {@link Options#collapsiblecolumns} property to `true` will display a \"collapse/expand\" button in every header\n * with a defined `colspan` property.\n *\n * To limit this functionality to a smaller group of headers, define the `collapsibleColumns` property as an array\n * of objects, as in the example below.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: generateDataObj(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   nestedHeaders: true,\n *   // enable plugin\n *   collapsibleColumns: true,\n * });\n *\n * // or\n * const hot = new Handsontable(container, {\n *   data: generateDataObj(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   nestedHeaders: true,\n *   // enable and configure which columns can be collapsed\n *   collapsibleColumns: [\n *     {row: -4, col: 1, collapsible: true},\n *     {row: -3, col: 5, collapsible: true}\n *   ],\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={generateDataObj()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   nestedHeaders={true}\n *   // enable plugin\n *   collapsibleColumns={true}\n * />\n *\n * // or\n * <HotTable\n *   data={generateDataObj()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   nestedHeaders={true}\n *   // enable and configure which columns can be collapsed\n *   collapsibleColumns={[\n *     {row: -4, col: 1, collapsible: true},\n *     {row: -3, col: 5, collapsible: true}\n *   ]}\n * />\n * ```\n * :::\n */\nvar _collapsedColumnsMap = /*#__PURE__*/new WeakMap();\nexport class CollapsibleColumns extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Cached reference to the NestedHeaders plugin.\n     *\n     * @private\n     * @type {NestedHeaders}\n     */\n    _defineProperty(this, \"nestedHeadersPlugin\", null);\n    /**\n     * Event manager instance reference.\n     *\n     * @private\n     * @type {EventManager}\n     */\n    _defineProperty(this, \"eventManager\", new EventManager(this));\n    /**\n     * The NestedHeaders plugin StateManager instance.\n     *\n     * @private\n     * @type {StateManager}\n     */\n    _defineProperty(this, \"headerStateManager\", null);\n    /**\n     * Map of collapsed columns by the plugin.\n     *\n     * @private\n     * @type {HidingMap|null}\n     */\n    _classPrivateFieldInitSpec(this, _collapsedColumnsMap, {\n      writable: true,\n      value: null\n    });\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get PLUGIN_DEPS() {\n    return ['plugin:NestedHeaders'];\n  }\n  static get SETTING_KEYS() {\n    return [PLUGIN_KEY, ...SETTING_KEYS];\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link CollapsibleColumns#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const {\n      nestedHeaders\n    } = this.hot.getSettings();\n    if (!nestedHeaders) {\n      warn('You need to configure the Nested Headers plugin in order to use collapsible headers.');\n    }\n    _classPrivateFieldSet(this, _collapsedColumnsMap, this.hot.columnIndexMapper.createAndRegisterIndexMap(this.pluginName, 'hiding'));\n    this.nestedHeadersPlugin = this.hot.getPlugin('nestedHeaders');\n    this.headerStateManager = this.nestedHeadersPlugin.getStateManager();\n    this.addHook('init', () => this.onInit());\n    this.addHook('afterLoadData', function () {\n      return _this.onAfterLoadData(...arguments);\n    });\n    this.addHook('afterGetColHeader', function () {\n      return _this.onAfterGetColHeader(...arguments);\n    });\n    this.addHook('beforeOnCellMouseDown', (event, coords, TD) => this.onBeforeOnCellMouseDown(event, coords, TD));\n    this.registerShortcuts();\n    super.enablePlugin();\n    // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n    this.updatePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *   - [`collapsibleColumns`](@/api/options.md#collapsiblecolumns)\n   *   - [`nestedHeaders`](@/api/options.md#nestedheaders)\n   */\n  updatePlugin() {\n    // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n    if (!this.hot.view) {\n      return;\n    }\n    if (!this.nestedHeadersPlugin.detectedOverlappedHeaders) {\n      const {\n        collapsibleColumns\n      } = this.hot.getSettings();\n      if (typeof collapsibleColumns === 'boolean') {\n        // Add `collapsible: true` attribute to all headers with colspan higher than 1.\n        this.headerStateManager.mapState(headerSettings => {\n          return {\n            collapsible: headerSettings.origColspan > 1\n          };\n        });\n      } else if (Array.isArray(collapsibleColumns)) {\n        this.headerStateManager.mapState(() => {\n          return {\n            collapsible: false\n          };\n        });\n        this.headerStateManager.mergeStateWith(collapsibleColumns);\n      }\n    }\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.columnIndexMapper.unregisterMap(this.pluginName);\n    _classPrivateFieldSet(this, _collapsedColumnsMap, null);\n    this.nestedHeadersPlugin = null;\n    this.unregisterShortcuts();\n    this.clearButtons();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling collapsible columns.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Enter']],\n      callback: () => {\n        var _this$headerStateMana;\n        const {\n          row,\n          col\n        } = this.hot.getSelectedRangeLast().highlight;\n        const {\n          collapsible,\n          isCollapsed,\n          columnIndex\n        } = (_this$headerStateMana = this.headerStateManager.getHeaderTreeNodeData(row, col)) !== null && _this$headerStateMana !== void 0 ? _this$headerStateMana : {};\n        if (!collapsible) {\n          return;\n        }\n        if (isCollapsed) {\n          this.expandSection({\n            row,\n            col: columnIndex\n          });\n        } else {\n          this.collapseSection({\n            row,\n            col: columnIndex\n          });\n        }\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected;\n        return (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight.isHeader();\n      },\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling collapsible columns.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Clears the expand/collapse buttons.\n   *\n   * @private\n   */\n  clearButtons() {\n    if (!this.hot.view) {\n      return;\n    }\n    const headerLevels = this.hot.view._wt.getSetting('columnHeaders').length;\n    const mainHeaders = this.hot.view._wt.wtTable.THEAD;\n    const topHeaders = this.hot.view._wt.wtOverlays.topOverlay.clone.wtTable.THEAD;\n    const topLeftCornerHeaders = this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay ? this.hot.view._wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;\n    const removeButton = function (button) {\n      if (button) {\n        button.parentNode.removeChild(button);\n      }\n    };\n    rangeEach(0, headerLevels - 1, i => {\n      const masterLevel = mainHeaders.childNodes[i];\n      const topLevel = topHeaders.childNodes[i];\n      const topLeftCornerLevel = topLeftCornerHeaders ? topLeftCornerHeaders.childNodes[i] : null;\n      rangeEach(0, masterLevel.childNodes.length - 1, j => {\n        let button = masterLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n        removeButton(button);\n        if (topLevel && topLevel.childNodes[j]) {\n          button = topLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n          removeButton(button);\n        }\n        if (topLeftCornerHeaders && topLeftCornerLevel && topLeftCornerLevel.childNodes[j]) {\n          button = topLeftCornerLevel.childNodes[j].querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n          removeButton(button);\n        }\n      });\n    }, true);\n  }\n\n  /**\n   * Expands section at the provided coords.\n   *\n   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).\n   */\n  expandSection(coords) {\n    this.toggleCollapsibleSection([coords], 'expand');\n  }\n\n  /**\n   * Collapses section at the provided coords.\n   *\n   * @param {object} coords Contains coordinates information. (`coords.row`, `coords.col`).\n   */\n  collapseSection(coords) {\n    this.toggleCollapsibleSection([coords], 'collapse');\n  }\n\n  /**\n   * Collapses or expand all collapsible sections, depending on the action parameter.\n   *\n   * @param {string} action 'collapse' or 'expand'.\n   */\n  toggleAllCollapsibleSections(action) {\n    const coords = this.headerStateManager.mapNodes(headerSettings => {\n      const {\n        collapsible,\n        origColspan,\n        headerLevel,\n        columnIndex,\n        isCollapsed\n      } = headerSettings;\n      if (collapsible === true && origColspan > 1 && (isCollapsed && action === 'expand' || !isCollapsed && action === 'collapse')) {\n        return {\n          row: this.headerStateManager.levelToRowCoords(headerLevel),\n          col: columnIndex\n        };\n      }\n    });\n    this.toggleCollapsibleSection(coords, action);\n  }\n\n  /**\n   * Collapses all collapsible sections.\n   */\n  collapseAll() {\n    this.toggleAllCollapsibleSections('collapse');\n  }\n\n  /**\n   * Expands all collapsible sections.\n   */\n  expandAll() {\n    this.toggleAllCollapsibleSections('expand');\n  }\n\n  /**\n   * Collapses/Expands a section.\n   *\n   * @param {Array} coords Array of coords - section coordinates.\n   * @param {string} [action] Action definition ('collapse' or 'expand').\n   * @fires Hooks#beforeColumnCollapse\n   * @fires Hooks#beforeColumnExpand\n   * @fires Hooks#afterColumnCollapse\n   * @fires Hooks#afterColumnExpand\n   */\n  toggleCollapsibleSection(coords, action) {\n    if (!actionDictionary.has(action)) {\n      throw new Error(`Unsupported action is passed (${action}).`);\n    }\n    if (!Array.isArray(coords)) {\n      return;\n    }\n\n    // Ignore coordinates which points to the cells range.\n    const filteredCoords = arrayFilter(coords, _ref => {\n      let {\n        row\n      } = _ref;\n      return row < 0;\n    });\n    let isActionPossible = filteredCoords.length > 0;\n    arrayEach(filteredCoords, _ref2 => {\n      var _this$headerStateMana2;\n      let {\n        row,\n        col: column\n      } = _ref2;\n      const {\n        collapsible,\n        isCollapsed\n      } = (_this$headerStateMana2 = this.headerStateManager.getHeaderSettings(row, column)) !== null && _this$headerStateMana2 !== void 0 ? _this$headerStateMana2 : {};\n      if (!collapsible || isCollapsed && action === 'collapse' || !isCollapsed && action === 'expand') {\n        isActionPossible = false;\n        return false;\n      }\n    });\n    const nodeModRollbacks = [];\n    const affectedColumnsIndexes = [];\n    if (isActionPossible) {\n      arrayEach(filteredCoords, _ref3 => {\n        let {\n          row,\n          col: column\n        } = _ref3;\n        const {\n          colspanCompensation,\n          affectedColumns,\n          rollbackModification\n        } = this.headerStateManager.triggerNodeModification(action, row, column);\n        if (colspanCompensation > 0) {\n          affectedColumnsIndexes.push(...affectedColumns);\n          nodeModRollbacks.push(rollbackModification);\n        }\n      });\n    }\n    const currentCollapsedColumns = this.getCollapsedColumns();\n    let destinationCollapsedColumns = [];\n    if (action === 'collapse') {\n      destinationCollapsedColumns = arrayUnique([...currentCollapsedColumns, ...affectedColumnsIndexes]);\n    } else if (action === 'expand') {\n      destinationCollapsedColumns = arrayFilter(currentCollapsedColumns, index => !affectedColumnsIndexes.includes(index));\n    }\n    const actionTranslator = actionDictionary.get(action);\n    const isActionAllowed = this.hot.runHooks(actionTranslator.beforeHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible);\n    if (isActionAllowed === false) {\n      // Rollback all header nodes modification (collapse or expand).\n      arrayEach(nodeModRollbacks, nodeModRollback => {\n        nodeModRollback();\n      });\n      return;\n    }\n    this.hot.batchExecution(() => {\n      arrayEach(affectedColumnsIndexes, visualColumn => {\n        _classPrivateFieldGet(this, _collapsedColumnsMap).setValueAtIndex(this.hot.toPhysicalColumn(visualColumn), actionTranslator.hideColumn);\n      });\n    }, true);\n    const isActionPerformed = this.getCollapsedColumns().length !== currentCollapsedColumns.length;\n    this.hot.runHooks(actionTranslator.afterHook, currentCollapsedColumns, destinationCollapsedColumns, isActionPossible, isActionPerformed);\n    this.hot.render();\n    this.hot.view.adjustElementsSize(true);\n  }\n\n  /**\n   * Gets an array of physical indexes of collapsed columns.\n   *\n   * @private\n   * @returns {number[]}\n   */\n  getCollapsedColumns() {\n    return _classPrivateFieldGet(this, _collapsedColumnsMap).getHiddenIndexes();\n  }\n\n  /**\n   * Adds the indicator to the headers.\n   *\n   * @private\n   * @param {number} column Column index.\n   * @param {HTMLElement} TH TH element.\n   * @param {number} headerLevel The index of header level counting from the top (positive\n   *                             values counting from 0 to N).\n   */\n  onAfterGetColHeader(column, TH, headerLevel) {\n    var _this$headerStateMana3;\n    const {\n      collapsible,\n      origColspan,\n      isCollapsed\n    } = (_this$headerStateMana3 = this.headerStateManager.getHeaderSettings(headerLevel, column)) !== null && _this$headerStateMana3 !== void 0 ? _this$headerStateMana3 : {};\n    const isNodeCollapsible = collapsible && origColspan > 1 && column >= this.hot.getSettings().fixedColumnsStart;\n    const isAriaTagsEnabled = this.hot.getSettings().ariaTags;\n    let collapsibleElement = TH.querySelector(`.${COLLAPSIBLE_ELEMENT_CLASS}`);\n    removeAttribute(TH, [A11Y_EXPANDED('')[0]]);\n    if (isNodeCollapsible) {\n      if (!collapsibleElement) {\n        collapsibleElement = this.hot.rootDocument.createElement('div');\n        addClass(collapsibleElement, COLLAPSIBLE_ELEMENT_CLASS);\n        TH.querySelector('div:first-child').appendChild(collapsibleElement);\n      }\n      removeClass(collapsibleElement, ['collapsed', 'expanded']);\n      if (isCollapsed) {\n        addClass(collapsibleElement, 'collapsed');\n        fastInnerText(collapsibleElement, '+');\n\n        // Add ARIA tags\n        if (isAriaTagsEnabled) {\n          setAttribute(TH, ...A11Y_EXPANDED(false));\n        }\n      } else {\n        addClass(collapsibleElement, 'expanded');\n        fastInnerText(collapsibleElement, '-');\n\n        // Add ARIA tags\n        if (isAriaTagsEnabled) {\n          setAttribute(TH, ...A11Y_EXPANDED(true));\n        }\n      }\n      if (isAriaTagsEnabled) {\n        setAttribute(collapsibleElement, ...A11Y_HIDDEN());\n      }\n    } else {\n      var _collapsibleElement;\n      (_collapsibleElement = collapsibleElement) === null || _collapsibleElement === void 0 || _collapsibleElement.remove();\n    }\n  }\n\n  /**\n   * Indicator mouse event callback.\n   *\n   * @private\n   * @param {object} event Mouse event.\n   * @param {object} coords Event coordinates.\n   */\n  onBeforeOnCellMouseDown(event, coords) {\n    if (hasClass(event.target, COLLAPSIBLE_ELEMENT_CLASS)) {\n      if (hasClass(event.target, 'expanded')) {\n        this.eventManager.fireEvent(event.target, 'mouseup');\n        this.toggleCollapsibleSection([coords], 'collapse');\n      } else if (hasClass(event.target, 'collapsed')) {\n        this.eventManager.fireEvent(event.target, 'mouseup');\n        this.toggleCollapsibleSection([coords], 'expand');\n      }\n      stopImmediatePropagation(event);\n    }\n  }\n\n  /**\n   * Updates the plugin state after HoT initialization.\n   *\n   * @private\n   */\n  onInit() {\n    // @TODO: Workaround for broken plugin initialization abstraction (#6806).\n    this.updatePlugin();\n  }\n\n  /**\n   * Updates the plugin state after new dataset load.\n   *\n   * @private\n   * @param {Array[]} sourceData Array of arrays or array of objects containing data.\n   * @param {boolean} initialLoad Flag that determines whether the data has been loaded\n   *                              during the initialization.\n   */\n  onAfterLoadData(sourceData, initialLoad) {\n    if (!initialLoad) {\n      this.updatePlugin();\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldSet(this, _collapsedColumnsMap, null);\n    super.destroy();\n  }\n}","import { isObject, objectEach } from \"../../helpers/object.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nconst inheritedColumnProperties = ['sortEmptyCells', 'indicator', 'headerAction', 'compareFunctionFactory'];\nconst SORT_EMPTY_CELLS_DEFAULT = false;\nconst SHOW_SORT_INDICATOR_DEFAULT = true;\nconst HEADER_ACTION_DEFAULT = true;\n\n/**\n * Store and manages states of sorted columns.\n *\n * @private\n * @class ColumnStatesManager\n */\nexport class ColumnStatesManager {\n  constructor(hot, mapName) {\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hot;\n    /**\n     * Index map storing sorting states for every column. ColumnStatesManager write and read to/from this element.\n     *\n     * @type {LinkedPhysicalIndexToValueMap}\n     */\n    this.sortingStates = new IndexToValueMap();\n    /**\n     * Determines whether we should sort empty cells.\n     *\n     * @type {boolean}\n     */\n    this.sortEmptyCells = SORT_EMPTY_CELLS_DEFAULT;\n    /**\n     * Determines whether indicator should be visible (for sorted columns).\n     *\n     * @type {boolean}\n     */\n    this.indicator = SHOW_SORT_INDICATOR_DEFAULT;\n    /**\n     * Determines whether click on the header perform sorting.\n     *\n     * @type {boolean}\n     */\n    this.headerAction = HEADER_ACTION_DEFAULT;\n    /**\n     * Determines compare function factory. Method get as parameters `sortOder` and `columnMeta` and return compare function.\n     */\n    this.compareFunctionFactory = void 0;\n    /**\n     * Name of map storing sorting states. Required for unique name (PR #7440 introduced it). It's needed as\n     * both ColumnSorting and MultiColumnSorting plugins create state manager and as a consequence register maps.\n     * Objects are destroyed in strange order as the updateSettings doesn't work well.\n     */\n    this.mapName = mapName;\n    this.hot.columnIndexMapper.registerMap(mapName, this.sortingStates);\n  }\n\n  /**\n   * Update column properties which affect the sorting result.\n   *\n   * **Note**: All column properties can be overwritten by {@link Options#columns} option.\n   *\n   * @param {object} allSortSettings Column sorting plugin's configuration object.\n   */\n  updateAllColumnsProperties(allSortSettings) {\n    if (!isObject(allSortSettings)) {\n      return;\n    }\n    objectEach(allSortSettings, (newValue, propertyName) => {\n      if (inheritedColumnProperties.includes(propertyName)) {\n        this[propertyName] = newValue;\n      }\n    });\n  }\n\n  /**\n   * Get all column properties which affect the sorting result.\n   *\n   * @returns {object}\n   */\n  getAllColumnsProperties() {\n    const columnProperties = {\n      sortEmptyCells: this.sortEmptyCells,\n      indicator: this.indicator,\n      headerAction: this.headerAction\n    };\n    if (typeof this.compareFunctionFactory === 'function') {\n      columnProperties.compareFunctionFactory = this.compareFunctionFactory;\n    }\n    return columnProperties;\n  }\n\n  /**\n   * Get sort order of column.\n   *\n   * @param {number} searchedColumn Visual column index.\n   * @returns {string|undefined} Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).\n   */\n  getSortOrderOfColumn(searchedColumn) {\n    var _this$sortingStates$g;\n    return (_this$sortingStates$g = this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(searchedColumn))) === null || _this$sortingStates$g === void 0 ? void 0 : _this$sortingStates$g.sortOrder;\n  }\n\n  /**\n   * Get order of particular column in the states queue.\n   *\n   * @param {number} column Visual column index.\n   * @returns {number}\n   */\n  getIndexOfColumnInSortQueue(column) {\n    column = this.hot.toPhysicalColumn(column);\n    return this.sortingStates.getEntries().findIndex(_ref => {\n      let [physicalColumn] = _ref;\n      return physicalColumn === column;\n    });\n  }\n\n  /**\n   * Get number of sorted columns.\n   *\n   * @returns {number}\n   */\n  getNumberOfSortedColumns() {\n    return this.sortingStates.getLength();\n  }\n\n  /**\n   * Get if list of sorted columns is empty.\n   *\n   * @returns {boolean}\n   */\n  isListOfSortedColumnsEmpty() {\n    return this.getNumberOfSortedColumns() === 0;\n  }\n\n  /**\n   * Get if particular column is sorted.\n   *\n   * @param {number} column Visual column index.\n   * @returns {boolean}\n   */\n  isColumnSorted(column) {\n    return isObject(this.sortingStates.getValueAtIndex(this.hot.toPhysicalColumn(column)));\n  }\n\n  /**\n   * Queue of sort states containing sorted columns and their orders (Array of objects containing `column` and `sortOrder` properties).\n   *\n   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n   *\n   * @returns {Array<object>}\n   */\n  getSortStates() {\n    if (this.sortingStates === null) {\n      return [];\n    }\n    const sortingStatesQueue = this.sortingStates.getEntries();\n    return sortingStatesQueue.map(_ref2 => {\n      let [physicalColumn, value] = _ref2;\n      return {\n        column: this.hot.toVisualColumn(physicalColumn),\n        ...value\n      };\n    });\n  }\n\n  /**\n   * Get sort state for particular column. Object contains `column` and `sortOrder` properties.\n   *\n   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n   *\n   * @param {number} column Visual column index.\n   * @returns {object|undefined}\n   */\n  getColumnSortState(column) {\n    const sortOrder = this.getSortOrderOfColumn(column);\n    if (isDefined(sortOrder)) {\n      return {\n        column,\n        sortOrder\n      };\n    }\n  }\n\n  /**\n   * Set all column states.\n   *\n   * @param {Array} sortStates Sort states.\n   */\n  setSortStates(sortStates) {\n    this.sortingStates.clear();\n    for (let i = 0; i < sortStates.length; i += 1) {\n      this.sortingStates.setValueAtIndex(this.hot.toPhysicalColumn(sortStates[i].column), {\n        sortOrder: sortStates[i].sortOrder\n      });\n    }\n  }\n\n  /**\n   * Destroy the state manager.\n   */\n  destroy() {\n    this.hot.columnIndexMapper.unregisterMap(this.mapName);\n    this.sortingStates = null;\n  }\n}","import { isObject } from \"../../helpers/object.mjs\";\nimport { isRightClick } from \"../../helpers/dom/event.mjs\";\nexport const ASC_SORT_STATE = 'asc';\nexport const DESC_SORT_STATE = 'desc';\nexport const HEADER_SPAN_CLASS = 'colHeader';\n\n/**\n * Get if column state is valid.\n *\n * @param {number} columnState Particular column state.\n * @returns {boolean}\n */\nfunction isValidColumnState(columnState) {\n  if (isObject(columnState) === false) {\n    return false;\n  }\n  const {\n    column,\n    sortOrder\n  } = columnState;\n  return Number.isInteger(column) && [ASC_SORT_STATE, DESC_SORT_STATE].includes(sortOrder);\n}\n\n/**\n * Get if all sorted columns states are valid.\n *\n * @param {Array} sortStates The sort state collection.\n * @returns {boolean}\n */\nexport function areValidSortStates(sortStates) {\n  if (sortStates.some(columnState => isValidColumnState(columnState) === false)) {\n    return false;\n  }\n  const sortedColumns = sortStates.map(_ref => {\n    let {\n      column\n    } = _ref;\n    return column;\n  });\n\n  // Indexes occurs only once.\n  return new Set(sortedColumns).size === sortedColumns.length;\n}\n\n/**\n * Get next sort order for particular column. The order sequence looks as follows: 'asc' -> 'desc' -> undefined -> 'asc'.\n *\n * @param {string|undefined} sortOrder Sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).\n * @returns {string|undefined} Next sort order (`asc` for ascending, `desc` for descending and undefined for not sorted).\n */\nexport function getNextSortOrder(sortOrder) {\n  if (sortOrder === DESC_SORT_STATE) {\n    return;\n  } else if (sortOrder === ASC_SORT_STATE) {\n    return DESC_SORT_STATE;\n  }\n  return ASC_SORT_STATE;\n}\n\n/**\n * Get `span` DOM element inside `th` DOM element.\n *\n * @param {Element} TH Th HTML element.\n * @returns {Element | null}\n */\nexport function getHeaderSpanElement(TH) {\n  const headerSpanElement = TH.querySelector(`.${HEADER_SPAN_CLASS}`);\n  return headerSpanElement;\n}\n\n/**\n *\n * Get if handled header is first level column header.\n *\n * @param {number} column Visual column index.\n * @param {Element} TH Th HTML element.\n * @returns {boolean}\n */\nexport function isFirstLevelColumnHeader(column, TH) {\n  if (column < 0 || !TH.parentNode) {\n    return false;\n  }\n  const TRs = TH.parentNode.parentNode.childNodes;\n  const headerLevel = Array.from(TRs).indexOf(TH.parentNode) - TRs.length;\n  if (headerLevel !== -1) {\n    return false;\n  }\n  return true;\n}\n\n/**\n *  Get if header was clicked properly. Click on column header and NOT done by right click return `true`.\n *\n * @param {number} row Visual row index.\n * @param {number} column Visual column index.\n * @param {Event} clickEvent Click event.\n * @returns {boolean}\n */\nexport function wasHeaderClickedProperly(row, column, clickEvent) {\n  return row === -1 && column >= 0 && isRightClick(clickEvent) === false;\n}","import \"core-js/modules/es.array.push.js\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nimport { ASC_SORT_STATE, DESC_SORT_STATE } from \"./utils.mjs\";\nconst HEADER_CLASS_ASC_SORT = 'ascending';\nconst HEADER_CLASS_DESC_SORT = 'descending';\nconst HEADER_CLASS_INDICATOR_DISABLED = 'indicatorDisabled';\nconst HEADER_SORT_CLASS = 'columnSorting';\nconst HEADER_ACTION_CLASS = 'sortAction';\nconst orderToCssClass = new Map([[ASC_SORT_STATE, HEADER_CLASS_ASC_SORT], [DESC_SORT_STATE, HEADER_CLASS_DESC_SORT]]);\n\n/**\n * Get CSS classes which should be added to particular column header.\n *\n * @param {object} columnStatesManager Instance of column state manager.\n * @param {number} column Visual column index.\n * @param {boolean} showSortIndicator Indicates if indicator should be shown for the particular column.\n * @param {boolean} headerAction Indicates if header click to sort should be possible.\n * @returns {Array} Array of CSS classes.\n */\nexport function getClassesToAdd(columnStatesManager, column, showSortIndicator, headerAction) {\n  const cssClasses = [HEADER_SORT_CLASS];\n  if (headerAction) {\n    cssClasses.push(HEADER_ACTION_CLASS);\n  }\n  if (showSortIndicator === false) {\n    cssClasses.push(HEADER_CLASS_INDICATOR_DISABLED);\n    return cssClasses;\n  }\n  const columnOrder = columnStatesManager.getSortOrderOfColumn(column);\n  if (isDefined(columnOrder)) {\n    cssClasses.push(orderToCssClass.get(columnOrder));\n  }\n  return cssClasses;\n}\n\n/**\n * Get CSS classes which should be removed from column header.\n *\n * @returns {Array} Array of CSS classes.\n */\nexport function getClassesToRemove() {\n  return Array.from(orderToCssClass.values()).concat(HEADER_ACTION_CLASS, HEADER_CLASS_INDICATOR_DISABLED, HEADER_SORT_CLASS);\n}","import { getRootComparator } from \"./registry.mjs\";\nexport const DO_NOT_SWAP = 0;\nexport const FIRST_BEFORE_SECOND = -1;\nexport const FIRST_AFTER_SECOND = 1;\n\n/**\n * @param {Array} indexesWithData The data to sort.\n * @param {string} rootComparatorId The comparator logic to use.\n * @param {Array} argsForRootComparator Additional arguments for comparator function.\n */\nexport function sort(indexesWithData, rootComparatorId) {\n  const rootComparator = getRootComparator(rootComparatorId);\n  for (var _len = arguments.length, argsForRootComparator = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    argsForRootComparator[_key - 2] = arguments[_key];\n  }\n  indexesWithData.sort(rootComparator(...argsForRootComparator));\n}","import { isEmpty } from \"../../../helpers/mixed.mjs\";\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\n/**\n * Default sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {object} columnMeta Column meta object.\n * @param {object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  const locale = columnMeta.locale;\n  return function (value, nextValue) {\n    const {\n      sortEmptyCells\n    } = columnPluginSettings;\n    if (typeof value === 'string') {\n      value = value.toLocaleLowerCase(locale);\n    }\n    if (typeof nextValue === 'string') {\n      nextValue = nextValue.toLocaleLowerCase(locale);\n    }\n    if (value === nextValue) {\n      return DO_NOT_SWAP;\n    }\n    if (isEmpty(value)) {\n      if (isEmpty(nextValue)) {\n        return DO_NOT_SWAP;\n      }\n\n      // Just fist value is empty and `sortEmptyCells` option was set\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n      return FIRST_AFTER_SECOND;\n    }\n    if (isEmpty(nextValue)) {\n      // Just second value is empty and `sortEmptyCells` option was set\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n      return FIRST_BEFORE_SECOND;\n    }\n    if (isNaN(value) && !isNaN(nextValue)) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    } else if (!isNaN(value) && isNaN(nextValue)) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    } else if (!(isNaN(value) || isNaN(nextValue))) {\n      value = parseFloat(value);\n      nextValue = parseFloat(nextValue);\n    }\n    if (value < nextValue) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n    if (value > nextValue) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n    return DO_NOT_SWAP;\n  };\n}\nexport const COLUMN_DATA_TYPE = 'default';","import { isEmpty } from \"../../../helpers/mixed.mjs\";\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\n/**\n * Numeric sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {object} columnMeta Column meta object.\n * @param {object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  return function (value, nextValue) {\n    const parsedFirstValue = parseFloat(value);\n    const parsedSecondValue = parseFloat(nextValue);\n    const {\n      sortEmptyCells\n    } = columnPluginSettings;\n\n    // Watch out when changing this part of code! Check below returns 0 (as expected) when comparing empty string, null, undefined\n    if (parsedFirstValue === parsedSecondValue || isNaN(parsedFirstValue) && isNaN(parsedSecondValue)) {\n      return DO_NOT_SWAP;\n    }\n    if (sortEmptyCells) {\n      if (isEmpty(value)) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n      if (isEmpty(nextValue)) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n    }\n    if (isNaN(parsedFirstValue)) {\n      return FIRST_AFTER_SECOND;\n    }\n    if (isNaN(parsedSecondValue)) {\n      return FIRST_BEFORE_SECOND;\n    }\n    if (parsedFirstValue < parsedSecondValue) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    } else if (parsedFirstValue > parsedSecondValue) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n    return DO_NOT_SWAP;\n  };\n}\nexport const COLUMN_DATA_TYPE = 'numeric';","import { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\nimport { compareFunctionFactory as defaultCompareFunctionFactory } from \"../sortFunction/default.mjs\";\nimport { isEmpty } from \"../../../helpers/mixed.mjs\";\n/**\n * Checkbox sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {object} columnMeta Column meta object.\n * @param {object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  const checkedTemplate = columnMeta.checkedTemplate;\n  const uncheckedTemplate = columnMeta.uncheckedTemplate;\n  const {\n    sortEmptyCells\n  } = columnPluginSettings;\n  return function (value, nextValue) {\n    const isEmptyValue = isEmpty(value);\n    const isEmptyNextValue = isEmpty(nextValue);\n    const unifiedValue = isEmptyValue ? uncheckedTemplate : value;\n    const unifiedNextValue = isEmptyNextValue ? uncheckedTemplate : nextValue;\n    const isValueFromTemplate = unifiedValue === uncheckedTemplate || unifiedValue === checkedTemplate;\n    const isNextValueFromTemplate = unifiedNextValue === uncheckedTemplate || unifiedNextValue === checkedTemplate;\n\n    // As an empty cell we recognize cells with undefined, null and '' values.\n    if (sortEmptyCells === false) {\n      if (isEmptyValue && isEmptyNextValue === false) {\n        return FIRST_AFTER_SECOND;\n      }\n      if (isEmptyValue === false && isEmptyNextValue) {\n        return FIRST_BEFORE_SECOND;\n      }\n    }\n\n    // 1st value === #BAD_VALUE#\n    if (isValueFromTemplate === false && isNextValueFromTemplate) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n\n    // 2nd value === #BAD_VALUE#\n    if (isValueFromTemplate && isNextValueFromTemplate === false) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n\n    // 1st value === #BAD_VALUE# && 2nd value === #BAD_VALUE#\n    if (isValueFromTemplate === false && isNextValueFromTemplate === false) {\n      // Sorting by values (not just by visual representation).\n      return defaultCompareFunctionFactory(sortOrder, columnMeta, columnPluginSettings)(value, nextValue);\n    }\n    if (unifiedValue === uncheckedTemplate && unifiedNextValue === checkedTemplate) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n    if (unifiedValue === checkedTemplate && unifiedNextValue === uncheckedTemplate) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n    return DO_NOT_SWAP;\n  };\n}\nexport const COLUMN_DATA_TYPE = 'checkbox';","import moment from 'moment';\nimport { isEmpty } from \"../../../helpers/mixed.mjs\";\nimport { DO_NOT_SWAP, FIRST_BEFORE_SECOND, FIRST_AFTER_SECOND } from \"../sortService/index.mjs\";\n/**\n * Date sorting compare function factory. Method get as parameters `sortOrder` and `columnMeta` and return compare function.\n *\n * @param {string} sortOrder Sort order (`asc` for ascending, `desc` for descending).\n * @param {object} columnMeta Column meta object.\n * @param {object} columnPluginSettings Plugin settings for the column.\n * @returns {Function} The compare function.\n */\nexport function compareFunctionFactory(sortOrder, columnMeta, columnPluginSettings) {\n  return function (value, nextValue) {\n    const {\n      sortEmptyCells\n    } = columnPluginSettings;\n    if (value === nextValue) {\n      return DO_NOT_SWAP;\n    }\n    if (isEmpty(value)) {\n      if (isEmpty(nextValue)) {\n        return DO_NOT_SWAP;\n      }\n\n      // Just fist value is empty and `sortEmptyCells` option was set\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n      }\n      return FIRST_AFTER_SECOND;\n    }\n    if (isEmpty(nextValue)) {\n      // Just second value is empty and `sortEmptyCells` option was set\n      if (sortEmptyCells) {\n        return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n      }\n      return FIRST_BEFORE_SECOND;\n    }\n    const dateFormat = columnMeta.dateFormat;\n    const firstDate = moment(value, dateFormat);\n    const nextDate = moment(nextValue, dateFormat);\n    if (!firstDate.isValid()) {\n      return FIRST_AFTER_SECOND;\n    }\n    if (!nextDate.isValid()) {\n      return FIRST_BEFORE_SECOND;\n    }\n    if (nextDate.isAfter(firstDate)) {\n      return sortOrder === 'asc' ? FIRST_BEFORE_SECOND : FIRST_AFTER_SECOND;\n    }\n    if (nextDate.isBefore(firstDate)) {\n      return sortOrder === 'asc' ? FIRST_AFTER_SECOND : FIRST_BEFORE_SECOND;\n    }\n    return DO_NOT_SWAP;\n  };\n}\nexport const COLUMN_DATA_TYPE = 'date';","import { compareFunctionFactory as defaultSort, COLUMN_DATA_TYPE as DEFAULT_DATA_TYPE } from \"../sortFunction/default.mjs\";\nimport { compareFunctionFactory as numericSort, COLUMN_DATA_TYPE as NUMERIC_DATA_TYPE } from \"../sortFunction/numeric.mjs\";\nimport { compareFunctionFactory as checkboxSort, COLUMN_DATA_TYPE as CHECKBOX_DATA_TYPE } from \"../sortFunction/checkbox.mjs\";\nimport { compareFunctionFactory as dateSort, COLUMN_DATA_TYPE as DATE_DATA_TYPE } from \"../sortFunction/date.mjs\";\nimport staticRegister from \"../../../utils/staticRegister.mjs\";\nconst {\n  register: registerCompareFunctionFactory,\n  getItem: getGloballyCompareFunctionFactory,\n  hasItem: hasGloballyCompareFunctionFactory\n} = staticRegister('sorting.compareFunctionFactory');\nconst {\n  register: registerRootComparator,\n  getItem: getRootComparator\n} = staticRegister('sorting.mainSortComparator');\n\n/**\n * Gets sort function for the particular column basing on it's data type.\n *\n * @param {string} type The data type.\n * @returns {Function}\n */\nexport function getCompareFunctionFactory(type) {\n  if (hasGloballyCompareFunctionFactory(type)) {\n    return getGloballyCompareFunctionFactory(type);\n  }\n  return getGloballyCompareFunctionFactory(DEFAULT_DATA_TYPE);\n}\nregisterCompareFunctionFactory(NUMERIC_DATA_TYPE, numericSort);\nregisterCompareFunctionFactory(CHECKBOX_DATA_TYPE, checkboxSort);\nregisterCompareFunctionFactory(DATE_DATA_TYPE, dateSort);\nregisterCompareFunctionFactory(DEFAULT_DATA_TYPE, defaultSort);\nexport { registerRootComparator, getRootComparator };","import { getCompareFunctionFactory } from \"./sortService/index.mjs\";\n/**\n * Sort comparator handled by conventional sort algorithm.\n *\n * @param {Array} sortingOrders Sort orders (`asc` for ascending, `desc` for descending).\n * @param {Array} columnMetas Column meta objects.\n * @returns {Function}\n */\nexport function rootComparator(sortingOrders, columnMetas) {\n  return function (rowIndexWithValues, nextRowIndexWithValues) {\n    // We sort array of arrays. Single array is in form [rowIndex, ...values].\n    // We compare just values, stored at second index of array.\n    const [, ...values] = rowIndexWithValues;\n    const [, ...nextValues] = nextRowIndexWithValues;\n    return function getCompareResult(column) {\n      const sortingOrder = sortingOrders[column];\n      const columnMeta = columnMetas[column];\n      const value = values[column];\n      const nextValue = nextValues[column];\n      const pluginSettings = columnMeta.columnSorting;\n      const compareFunctionFactory = pluginSettings.compareFunctionFactory ? pluginSettings.compareFunctionFactory : getCompareFunctionFactory(columnMeta.type);\n      const compareResult = compareFunctionFactory(sortingOrder, columnMeta, pluginSettings)(value, nextValue);\n\n      // DIFF - MultiColumnSorting & ColumnSorting: removed iteration through next sorted columns.\n\n      return compareResult;\n    }(0);\n  };\n}","import \"core-js/modules/es.array.push.js\";\nimport { addClass, removeClass, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { isUndefined, isDefined } from \"../../helpers/mixed.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isFunction } from \"../../helpers/function.mjs\";\nimport { arrayMap } from \"../../helpers/array.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { IndexesSequence, PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { ColumnStatesManager } from \"./columnStatesManager.mjs\";\nimport { getNextSortOrder, areValidSortStates, getHeaderSpanElement, isFirstLevelColumnHeader, wasHeaderClickedProperly } from \"./utils.mjs\";\nimport { getClassesToRemove, getClassesToAdd } from \"./domHelpers.mjs\";\nimport { rootComparator } from \"./rootComparator.mjs\";\nimport { registerRootComparator, sort } from \"./sortService/index.mjs\";\nimport { A11Y_SORT } from \"../../helpers/a11y.mjs\";\nexport const PLUGIN_KEY = 'columnSorting';\nexport const PLUGIN_PRIORITY = 50;\nexport const APPEND_COLUMN_CONFIG_STRATEGY = 'append';\nexport const REPLACE_COLUMN_CONFIG_STRATEGY = 'replace';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nregisterRootComparator(PLUGIN_KEY, rootComparator);\nHooks.getSingleton().register('beforeColumnSort');\nHooks.getSingleton().register('afterColumnSort');\n\n// DIFF - MultiColumnSorting & ColumnSorting: changed configuration documentation.\n/**\n * @plugin ColumnSorting\n * @class ColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#columnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * columnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1)\n * columnSorting: {\n *   initialConfig: {\n *     column: 1,\n *     sortOrder: 'asc'\n *   }\n * }\n *\n * // as an object which define specific sorting options for all columns\n * columnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: https://handsontable.com/docs/Options.html#columns\n * columns: [{\n *   columnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]\n * ```\n */\nexport class ColumnSorting extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Instance of column state manager.\n     *\n     * @private\n     * @type {null|ColumnStatesManager}\n     */\n    this.columnStatesManager = null;\n    /**\n     * Cached column properties from plugin like i.e. `indicator`, `headerAction`.\n     *\n     * @private\n     * @type {null|PhysicalIndexToValueMap}\n     */\n    this.columnMetaCache = null;\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {string}\n     */\n    this.pluginKey = PLUGIN_KEY;\n    /**\n     * Plugin indexes cache.\n     *\n     * @private\n     * @type {null|IndexesSequence}\n     */\n    this.indexesSequenceCache = null;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[this.pluginKey];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    this.columnStatesManager = new ColumnStatesManager(this.hot, `${this.pluginKey}.sortingStates`);\n    this.columnMetaCache = new IndexToValueMap(physicalIndex => {\n      let visualIndex = this.hot.toVisualColumn(physicalIndex);\n      if (visualIndex === null) {\n        visualIndex = physicalIndex;\n      }\n      return this.getMergedPluginSettings(visualIndex);\n    });\n    this.hot.columnIndexMapper.registerMap(`${this.pluginKey}.columnMeta`, this.columnMetaCache);\n    this.addHook('afterGetColHeader', (column, TH) => this.onAfterGetColHeader(column, TH));\n    this.addHook('beforeOnCellMouseDown', function () {\n      return _this.onBeforeOnCellMouseDown(...arguments);\n    });\n    this.addHook('afterOnCellMouseDown', (event, target) => this.onAfterOnCellMouseDown(event, target));\n    this.addHook('afterInit', () => this.loadOrSortBySettings());\n    this.addHook('afterLoadData', function () {\n      return _this.onAfterLoadData(...arguments);\n    });\n\n    // TODO: Workaround? It should be refactored / described.\n    if (this.hot.view) {\n      this.loadOrSortBySettings();\n    }\n    this.registerShortcuts();\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    const clearColHeader = (column, TH) => {\n      const headerSpanElement = getHeaderSpanElement(TH);\n      if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n        return;\n      }\n      this.updateHeaderClasses(headerSpanElement);\n    };\n\n    // Changing header width and removing indicator.\n    this.hot.addHook('afterGetColHeader', clearColHeader);\n    this.hot.addHookOnce('afterViewRender', () => {\n      this.hot.removeHook('afterGetColHeader', clearColHeader);\n    });\n    this.hot.batchExecution(() => {\n      if (this.indexesSequenceCache !== null) {\n        this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());\n        this.hot.rowIndexMapper.unregisterMap(this.pluginKey);\n      }\n    }, true);\n    this.hot.columnIndexMapper.unregisterMap(`${this.pluginKey}.columnMeta`);\n    this.columnStatesManager.destroy();\n    this.columnMetaCache = null;\n    this.columnStatesManager = null;\n    this.unregisterShortcuts();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling column sorting functionality.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Enter']],\n      callback: () => {\n        const {\n          highlight\n        } = this.hot.getSelectedRangeLast();\n        if (highlight.row === -1 && highlight.col >= 0) {\n          this.sort(this.getColumnNextConfig(highlight.col));\n        }\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected;\n        return (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight.isHeader();\n      },\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling column sorting functionality.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  // DIFF - MultiColumnSorting & ColumnSorting: changed function documentation.\n  /**\n   * Sorts the table by chosen columns and orders.\n   *\n   * @param {undefined|object} sortConfig Single column sort configuration. The configuration object contains `column` and `sortOrder` properties.\n   * First of them contains visual column index, the second one contains sort order (`asc` for ascending, `desc` for descending).\n   *\n   * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n   *\n   * @example\n   * ```js\n   * // sort ascending first visual column\n   * hot.getPlugin('columnSorting').sort({ column: 0, sortOrder: 'asc' });\n   * ```\n   *\n   * @fires Hooks#beforeColumnSort\n   * @fires Hooks#afterColumnSort\n   */\n  sort(sortConfig) {\n    const currentSortConfig = this.getSortConfig();\n\n    // We always pass configs defined as an array to `beforeColumnSort` and `afterColumnSort` hooks.\n    const destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n    const sortPossible = this.areValidSortConfigs(destinationSortConfigs);\n    const allowSort = this.hot.runHooks('beforeColumnSort', currentSortConfig, destinationSortConfigs, sortPossible);\n    if (allowSort === false) {\n      return;\n    }\n    if (currentSortConfig.length === 0 && this.indexesSequenceCache === null) {\n      this.indexesSequenceCache = this.hot.rowIndexMapper.registerMap(this.pluginKey, new IndexesSequence());\n      this.indexesSequenceCache.setValues(this.hot.rowIndexMapper.getIndexesSequence());\n    }\n    if (sortPossible) {\n      this.columnStatesManager.setSortStates(destinationSortConfigs);\n      this.sortByPresetSortStates(destinationSortConfigs);\n      this.saveAllSortSettings(destinationSortConfigs);\n    }\n    this.hot.runHooks('afterColumnSort', currentSortConfig, sortPossible ? destinationSortConfigs : currentSortConfig, sortPossible);\n    if (sortPossible) {\n      this.hot.render();\n      // TODO: Workaround? This triggers fast redraw. One test won't pass after removal.\n      // It should be refactored / described.\n      this.hot.forceFullRender = false;\n      this.hot.view.render();\n    }\n  }\n\n  /**\n   * Clear the sort performed on the table.\n   */\n  clearSort() {\n    this.sort([]);\n  }\n\n  /**\n   * Checks if the table is sorted (any column have to be sorted).\n   *\n   * @returns {boolean}\n   */\n  isSorted() {\n    return this.enabled && !this.columnStatesManager.isListOfSortedColumnsEmpty();\n  }\n\n  /**\n   * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   *\n   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n   *\n   * @param {number} [column] Visual column index.\n   * @returns {undefined|object|Array}\n   */\n  getSortConfig(column) {\n    if (isDefined(column)) {\n      return this.columnStatesManager.getColumnSortState(column);\n    }\n    return this.columnStatesManager.getSortStates();\n  }\n\n  /**\n   * @description\n   * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n   * Note: Please keep in mind that this method doesn't re-render the table.\n   *\n   * @example\n   * ```js\n   * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n   *   const columnSortPlugin = this.getPlugin('columnSorting');\n   *\n   *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n   *\n   *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n   *\n   *   this.loadData(newData); // Load new data set and re-render the table.\n   *\n   *   return false; // The blockade for the default sort action.\n   * }\n   * ```\n   *\n   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   */\n  setSortConfig(sortConfig) {\n    // We always set configs defined as an array.\n    const destinationSortConfigs = this.getNormalizedSortConfigs(sortConfig);\n    if (this.areValidSortConfigs(destinationSortConfigs)) {\n      this.columnStatesManager.setSortStates(destinationSortConfigs);\n    }\n  }\n\n  /**\n   * Get normalized sort configs.\n   *\n   * @private\n   * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   * @returns {Array}\n   */\n  getNormalizedSortConfigs() {\n    let sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (Array.isArray(sortConfig)) {\n      return sortConfig.slice(0, 1);\n    }\n    return [sortConfig];\n  }\n\n  /**\n   * Get if sort configs are valid.\n   *\n   * @private\n   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   * @returns {boolean}\n   */\n  areValidSortConfigs(sortConfigs) {\n    const numberOfColumns = this.hot.countCols();\n\n    // We don't translate visual indexes to physical indexes.\n    return areValidSortStates(sortConfigs) && sortConfigs.every(_ref => {\n      let {\n        column\n      } = _ref;\n      return column <= numberOfColumns && column >= 0;\n    });\n  }\n\n  /**\n   * Saves all sorting settings. Saving works only when {@link Options#persistentState} option is enabled.\n   *\n   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   *\n   * @private\n   * @fires Hooks#persistentStateSave\n   */\n  saveAllSortSettings(sortConfigs) {\n    const allSortSettings = this.columnStatesManager.getAllColumnsProperties();\n    const translateColumnToPhysical = _ref2 => {\n      let {\n        column: visualColumn,\n        ...restOfProperties\n      } = _ref2;\n      return {\n        column: this.hot.toPhysicalColumn(visualColumn),\n        ...restOfProperties\n      };\n    };\n    allSortSettings.initialConfig = arrayMap(sortConfigs, translateColumnToPhysical);\n    this.hot.runHooks('persistentStateSave', 'columnSorting', allSortSettings);\n  }\n\n  /**\n   * Get all saved sorting settings. Loading works only when {@link Options#persistentState} option is enabled.\n   *\n   * @private\n   * @returns {object} Previously saved sort settings.\n   *\n   * @fires Hooks#persistentStateLoad\n   */\n  getAllSavedSortSettings() {\n    const storedAllSortSettings = {};\n    this.hot.runHooks('persistentStateLoad', 'columnSorting', storedAllSortSettings);\n    const allSortSettings = storedAllSortSettings.value;\n    const translateColumnToVisual = _ref3 => {\n      let {\n        column: physicalColumn,\n        ...restOfProperties\n      } = _ref3;\n      return {\n        column: this.hot.toVisualColumn(physicalColumn),\n        ...restOfProperties\n      };\n    };\n    if (isDefined(allSortSettings) && Array.isArray(allSortSettings.initialConfig)) {\n      allSortSettings.initialConfig = arrayMap(allSortSettings.initialConfig, translateColumnToVisual);\n    }\n    return allSortSettings;\n  }\n\n  /**\n   * Get next sort configuration for particular column. Object contain `column` and `sortOrder` properties.\n   *\n   * **Note**: Please keep in mind that returned object expose **visual** column index under the `column` key.\n   *\n   * @private\n   * @param {number} column Visual column index.\n   * @returns {undefined|object}\n   */\n  getColumnNextConfig(column) {\n    const sortOrder = this.columnStatesManager.getSortOrderOfColumn(column);\n    if (isDefined(sortOrder)) {\n      const nextSortOrder = getNextSortOrder(sortOrder);\n      if (isDefined(nextSortOrder)) {\n        return {\n          column,\n          sortOrder: nextSortOrder\n        };\n      }\n      return;\n    }\n    const nrOfColumns = this.hot.countCols();\n    if (Number.isInteger(column) && column >= 0 && column < nrOfColumns) {\n      return {\n        column,\n        sortOrder: getNextSortOrder()\n      };\n    }\n  }\n\n  /**\n   * Get sort configuration with \"next order\" for particular column.\n   *\n   * @private\n   * @param {number} columnToChange Visual column index of column which order will be changed.\n   * @param {string} strategyId ID of strategy. Possible values: 'append' and 'replace'. The first one\n   * change order of particular column and change it's position in the sort queue to the last one. The second one\n   * just change order of particular column.\n   *\n   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key.\n   *\n   * @returns {Array}\n   */\n  getNextSortConfig(columnToChange) {\n    let strategyId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : APPEND_COLUMN_CONFIG_STRATEGY;\n    const indexOfColumnToChange = this.columnStatesManager.getIndexOfColumnInSortQueue(columnToChange);\n    const isColumnSorted = indexOfColumnToChange !== -1;\n    const currentSortConfig = this.getSortConfig();\n    const nextColumnConfig = this.getColumnNextConfig(columnToChange);\n    if (isColumnSorted) {\n      if (isUndefined(nextColumnConfig)) {\n        return [...currentSortConfig.slice(0, indexOfColumnToChange), ...currentSortConfig.slice(indexOfColumnToChange + 1)];\n      }\n      if (strategyId === APPEND_COLUMN_CONFIG_STRATEGY) {\n        return [...currentSortConfig.slice(0, indexOfColumnToChange), ...currentSortConfig.slice(indexOfColumnToChange + 1), nextColumnConfig];\n      } else if (strategyId === REPLACE_COLUMN_CONFIG_STRATEGY) {\n        return [...currentSortConfig.slice(0, indexOfColumnToChange), nextColumnConfig, ...currentSortConfig.slice(indexOfColumnToChange + 1)];\n      }\n    }\n    if (isDefined(nextColumnConfig)) {\n      return currentSortConfig.concat(nextColumnConfig);\n    }\n    return currentSortConfig;\n  }\n\n  /**\n   * Get plugin's column config for the specified column index.\n   *\n   * @private\n   * @param {object} columnConfig Configuration inside `columns` property for the specified column index.\n   * @returns {object}\n   */\n  getPluginColumnConfig(columnConfig) {\n    if (isObject(columnConfig)) {\n      const pluginColumnConfig = columnConfig[this.pluginKey];\n      if (isObject(pluginColumnConfig)) {\n        return pluginColumnConfig;\n      }\n    }\n    return {};\n  }\n\n  /**\n   * Get plugin settings related properties, properly merged from cascade settings.\n   *\n   * @private\n   * @param {number} column Visual column index.\n   * @returns {object}\n   */\n  getMergedPluginSettings(column) {\n    const pluginMainSettings = this.hot.getSettings()[this.pluginKey];\n    const storedColumnProperties = this.columnStatesManager.getAllColumnsProperties();\n    const cellMeta = this.hot.getCellMeta(0, column);\n    const columnMeta = Object.getPrototypeOf(cellMeta);\n    if (Array.isArray(columnMeta.columns)) {\n      return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns[column]));\n    } else if (isFunction(columnMeta.columns)) {\n      return Object.assign(storedColumnProperties, pluginMainSettings, this.getPluginColumnConfig(columnMeta.columns(column)));\n    }\n    return Object.assign(storedColumnProperties, pluginMainSettings);\n  }\n\n  /**\n   * Get copy of settings for first cell in the column.\n   *\n   * @private\n   * @param {number} column Visual column index.\n   * @returns {object}\n   */\n  // TODO: Workaround. Inheriting of non-primitive cell meta values doesn't work. Instead of getting properties from column meta we call this function.\n  // TODO: Remove test named: \"should not break the dataset when inserted new row\" (#5431).\n  getFirstCellSettings(column) {\n    const cellMeta = this.hot.getCellMeta(0, column);\n    const cellMetaCopy = Object.create(cellMeta);\n    cellMetaCopy[this.pluginKey] = this.columnMetaCache.getValueAtIndex(this.hot.toPhysicalColumn(column));\n    return cellMetaCopy;\n  }\n\n  /**\n   * Get number of rows which should be sorted.\n   *\n   * @private\n   * @param {number} numberOfRows Total number of displayed rows.\n   * @returns {number}\n   */\n  getNumberOfRowsToSort(numberOfRows) {\n    const settings = this.hot.getSettings();\n\n    // `maxRows` option doesn't take into account `minSpareRows` option in this case.\n    if (settings.maxRows <= numberOfRows) {\n      return settings.maxRows;\n    }\n    return numberOfRows - settings.minSpareRows;\n  }\n\n  /**\n   * Performs the sorting using a stable sort function basing on internal state of sorting.\n   *\n   * @param {Array} sortConfigs Sort configuration for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   * @private\n   */\n  sortByPresetSortStates(sortConfigs) {\n    if (sortConfigs.length === 0) {\n      this.hot.rowIndexMapper.setIndexesSequence(this.indexesSequenceCache.getValues());\n      return;\n    }\n    const indexesWithData = [];\n    const numberOfRows = this.hot.countRows();\n    const getDataForSortedColumns = visualRowIndex => arrayMap(sortConfigs, sortConfig => this.hot.getDataAtCell(visualRowIndex, sortConfig.column));\n    for (let visualRowIndex = 0; visualRowIndex < this.getNumberOfRowsToSort(numberOfRows); visualRowIndex += 1) {\n      indexesWithData.push([this.hot.toPhysicalRow(visualRowIndex)].concat(getDataForSortedColumns(visualRowIndex)));\n    }\n    const indexesBefore = arrayMap(indexesWithData, indexWithData => indexWithData[0]);\n    sort(indexesWithData, this.pluginKey, arrayMap(sortConfigs, sortConfig => sortConfig.sortOrder), arrayMap(sortConfigs, sortConfig => this.getFirstCellSettings(sortConfig.column)));\n\n    // Append spareRows\n    for (let visualRowIndex = indexesWithData.length; visualRowIndex < numberOfRows; visualRowIndex += 1) {\n      indexesWithData.push([visualRowIndex].concat(getDataForSortedColumns(visualRowIndex)));\n    }\n    const indexesAfter = arrayMap(indexesWithData, indexWithData => indexWithData[0]);\n    const indexMapping = new Map(arrayMap(indexesBefore, (indexBefore, indexInsideArray) => [indexBefore, indexesAfter[indexInsideArray]]));\n    const newIndexesSequence = arrayMap(this.hot.rowIndexMapper.getIndexesSequence(), physicalIndex => {\n      if (indexMapping.has(physicalIndex)) {\n        return indexMapping.get(physicalIndex);\n      }\n      return physicalIndex;\n    });\n    this.hot.rowIndexMapper.setIndexesSequence(newIndexesSequence);\n  }\n\n  /**\n   * Load saved settings or sort by predefined plugin configuration.\n   *\n   * @private\n   */\n  loadOrSortBySettings() {\n    const storedAllSortSettings = this.getAllSavedSortSettings();\n    if (isObject(storedAllSortSettings)) {\n      this.sortBySettings(storedAllSortSettings);\n    } else {\n      const allSortSettings = this.hot.getSettings()[this.pluginKey];\n      this.sortBySettings(allSortSettings);\n    }\n  }\n\n  /**\n   * Sort the table by provided configuration.\n   *\n   * @private\n   * @param {object} allSortSettings All sort config settings. Object may contain `initialConfig`, `indicator`,\n   * `sortEmptyCells`, `headerAction` and `compareFunctionFactory` properties.\n   */\n  sortBySettings(allSortSettings) {\n    if (isObject(allSortSettings)) {\n      this.columnStatesManager.updateAllColumnsProperties(allSortSettings);\n      const initialConfig = allSortSettings.initialConfig;\n      if (Array.isArray(initialConfig) || isObject(initialConfig)) {\n        this.sort(initialConfig);\n      }\n    } else {\n      // Extra render for headers. Their width may change.\n      this.hot.render();\n    }\n  }\n\n  /**\n   * Callback for the `onAfterGetColHeader` hook. Adds column sorting CSS classes.\n   *\n   * @private\n   * @param {number} column Visual column index.\n   * @param {Element} TH TH HTML element.\n   */\n  onAfterGetColHeader(column, TH) {\n    const headerSpanElement = getHeaderSpanElement(TH);\n    if (isFirstLevelColumnHeader(column, TH) === false || headerSpanElement === null) {\n      return;\n    }\n    const pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n    const showSortIndicator = pluginSettingsForColumn.indicator;\n    const headerActionEnabled = pluginSettingsForColumn.headerAction;\n    this.updateHeaderClasses(headerSpanElement, this.columnStatesManager, column, showSortIndicator, headerActionEnabled);\n    if (this.hot.getSettings().ariaTags) {\n      const currentSortState = this.columnStatesManager.getSortOrderOfColumn(column);\n      setAttribute(TH, ...A11Y_SORT(currentSortState ? `${currentSortState}ending` : 'none'));\n    }\n  }\n\n  /**\n   * Update header classes.\n   *\n   * @private\n   * @param {HTMLElement} headerSpanElement Header span element.\n   * @param {...*} args Extra arguments for helpers.\n   */\n  updateHeaderClasses(headerSpanElement) {\n    removeClass(headerSpanElement, getClassesToRemove(headerSpanElement));\n    if (this.enabled !== false) {\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      addClass(headerSpanElement, getClassesToAdd(...args));\n    }\n  }\n\n  /**\n   * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n   * for `updateSettings` in specific situations.\n   *\n   * @private\n   * @param {object} newSettings New settings object.\n   */\n  onUpdateSettings(newSettings) {\n    super.onUpdateSettings();\n    if (this.columnMetaCache !== null) {\n      // Column meta cache base on settings, thus we should re-init the map.\n      this.columnMetaCache.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n    }\n    if (isDefined(newSettings[this.pluginKey])) {\n      this.sortBySettings(newSettings[this.pluginKey]);\n    }\n  }\n\n  /**\n   * Callback for the `afterLoadData` hook.\n   *\n   * @private\n   * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\n   */\n  onAfterLoadData(initialLoad) {\n    if (initialLoad === true) {\n      // TODO: Workaround? It should be refactored / described.\n      if (this.hot.view) {\n        this.loadOrSortBySettings();\n      }\n    }\n  }\n\n  /**\n   * Indicates if clickable header was clicked.\n   *\n   * @private\n   * @param {MouseEvent} event The `mousedown` event.\n   * @param {number} column Visual column index.\n   * @returns {boolean}\n   */\n  wasClickableHeaderClicked(event, column) {\n    const pluginSettingsForColumn = this.getFirstCellSettings(column)[this.pluginKey];\n    const headerActionEnabled = pluginSettingsForColumn.headerAction;\n    return headerActionEnabled && event.target.nodeName === 'SPAN';\n  }\n\n  /**\n   * Changes the behavior of selection / dragging.\n   *\n   * @private\n   * @param {MouseEvent} event The `mousedown` event.\n   * @param {CellCoords} coords Visual coordinates.\n   * @param {HTMLElement} TD The cell element.\n   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n   *                            a boolean value that allows or disallows changing the selection for that particular area.\n   */\n  onBeforeOnCellMouseDown(event, coords, TD, controller) {\n    if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n      return;\n    }\n    if (this.wasClickableHeaderClicked(event, coords.col) && this.hot.getShortcutManager().isCtrlPressed()) {\n      controller.column = true;\n    }\n  }\n\n  /**\n   * Callback for the `onAfterOnCellMouseDown` hook.\n   *\n   * @private\n   * @param {Event} event Event which are provided by hook.\n   * @param {CellCoords} coords Visual coords of the selected cell.\n   */\n  onAfterOnCellMouseDown(event, coords) {\n    if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n      return;\n    }\n    if (this.wasClickableHeaderClicked(event, coords.col)) {\n      if (this.hot.getShortcutManager().isCtrlPressed()) {\n        this.hot.deselectCell();\n        this.hot.selectColumns(coords.col);\n      }\n      this.sort(this.getColumnNextConfig(coords.col));\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    var _this$columnStatesMan;\n    // TODO: Probably not supported yet by ESLint: https://github.com/eslint/eslint/issues/11045\n    // eslint-disable-next-line no-unused-expressions\n    (_this$columnStatesMan = this.columnStatesManager) === null || _this$columnStatesMan === void 0 || _this$columnStatesMan.destroy();\n    super.destroy();\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { warn } from \"../../helpers/console.mjs\";\n/**\n * Class used to make all endpoint-related operations.\n *\n * @private\n * @class Endpoints\n */\nclass Endpoints {\n  constructor(plugin, settings) {\n    /**\n     * The main plugin instance.\n     */\n    this.plugin = plugin;\n    /**\n     * Handsontable instance.\n     *\n     * @type {object}\n     */\n    this.hot = this.plugin.hot;\n    /**\n     * Array of declared plugin endpoints (calculation destination points).\n     *\n     * @type {Array}\n     * @default {Array} Empty array.\n     */\n    this.endpoints = [];\n    /**\n     * The plugin settings, taken from Handsontable configuration.\n     *\n     * @type {object|Function}\n     * @default null\n     */\n    this.settings = settings;\n    /**\n     * Settings type. Can be either 'array' or 'function.\n     *\n     * @type {string}\n     * @default {'array'}\n     */\n    this.settingsType = 'array';\n    /**\n     * The current endpoint (calculation destination point) in question.\n     *\n     * @type {object}\n     * @default null\n     */\n    this.currentEndpoint = null;\n    /**\n     * Array containing a list of changes to be applied.\n     *\n     * @private\n     * @type {Array}\n     * @default {[]}\n     */\n    this.cellsToSetCache = [];\n  }\n\n  /**\n   * Get a single endpoint object.\n   *\n   * @param {number} index Index of the endpoint.\n   * @returns {object}\n   */\n  getEndpoint(index) {\n    if (this.settingsType === 'function') {\n      return this.fillMissingEndpointData(this.settings)[index];\n    }\n    return this.endpoints[index];\n  }\n\n  /**\n   * Get an array with all the endpoints.\n   *\n   * @returns {Array}\n   */\n  getAllEndpoints() {\n    if (this.settingsType === 'function') {\n      return this.fillMissingEndpointData(this.settings);\n    }\n    return this.endpoints;\n  }\n\n  /**\n   * Used to fill the blanks in the endpoint data provided by a settings function.\n   *\n   * @private\n   * @param {Function} func Function provided in the HOT settings.\n   * @returns {Array} An array of endpoints.\n   */\n  fillMissingEndpointData(func) {\n    return this.parseSettings(func.call(this));\n  }\n\n  /**\n   * Parse plugin's settings.\n   *\n   * @param {Array} settings The settings array.\n   * @returns {object[]}\n   */\n  parseSettings(settings) {\n    const endpointsArray = [];\n    let settingsArray = settings;\n    if (!settingsArray && typeof this.settings === 'function') {\n      this.settingsType = 'function';\n      return;\n    }\n    if (!settingsArray) {\n      settingsArray = this.settings;\n    }\n    arrayEach(settingsArray, val => {\n      const newEndpoint = {};\n      this.assignSetting(val, newEndpoint, 'ranges', [[0, this.hot.countRows() - 1]]);\n      this.assignSetting(val, newEndpoint, 'reversedRowCoords', false);\n      this.assignSetting(val, newEndpoint, 'destinationRow', new Error(`\n        You must provide a destination row for the Column Summary plugin in order to work properly!\n      `));\n      this.assignSetting(val, newEndpoint, 'destinationColumn', new Error(`\n        You must provide a destination column for the Column Summary plugin in order to work properly!\n      `));\n      this.assignSetting(val, newEndpoint, 'sourceColumn', val.destinationColumn);\n      this.assignSetting(val, newEndpoint, 'type', 'sum');\n      this.assignSetting(val, newEndpoint, 'forceNumeric', false);\n      this.assignSetting(val, newEndpoint, 'suppressDataTypeErrors', true);\n      this.assignSetting(val, newEndpoint, 'suppressDataTypeErrors', true);\n      this.assignSetting(val, newEndpoint, 'customFunction', null);\n      this.assignSetting(val, newEndpoint, 'readOnly', true);\n      this.assignSetting(val, newEndpoint, 'roundFloat', false);\n      endpointsArray.push(newEndpoint);\n    });\n    return endpointsArray;\n  }\n\n  /**\n   * Setter for the internal setting objects.\n   *\n   * @param {object} settings Object with the settings.\n   * @param {object} endpoint Contains information about the endpoint for the the calculation.\n   * @param {string} name Settings name.\n   * @param {object} defaultValue Default value for the settings.\n   */\n  assignSetting(settings, endpoint, name, defaultValue) {\n    if (name === 'ranges' && settings[name] === void 0) {\n      endpoint[name] = defaultValue;\n      return;\n    } else if (name === 'ranges' && settings[name].length === 0) {\n      return;\n    }\n    if (settings[name] === void 0) {\n      if (defaultValue instanceof Error) {\n        throw defaultValue;\n      }\n      endpoint[name] = defaultValue;\n    } else {\n      /* eslint-disable no-lonely-if */\n      if (name === 'destinationRow' && endpoint.reversedRowCoords) {\n        endpoint[name] = this.hot.countRows() - settings[name] - 1;\n      } else {\n        endpoint[name] = settings[name];\n      }\n    }\n  }\n\n  /**\n   * Resets the endpoint setup before the structure alteration (like inserting or removing rows/columns). Used for settings provided as a function.\n   *\n   * @private\n   * @param {string} action Type of the action performed.\n   * @param {number} index Row/column index.\n   * @param {number} number Number of rows/columns added/removed.\n   */\n  resetSetupBeforeStructureAlteration(action, index, number) {\n    if (this.settingsType !== 'function') {\n      return;\n    }\n    const type = action.indexOf('row') > -1 ? 'row' : 'col';\n    const endpoints = this.getAllEndpoints();\n    arrayEach(endpoints, val => {\n      if (type === 'row' && val.destinationRow >= index) {\n        if (action === 'insert_row') {\n          val.alterRowOffset = number;\n        } else if (action === 'remove_row') {\n          val.alterRowOffset = -1 * number;\n        }\n      }\n      if (type === 'col' && val.destinationColumn >= index) {\n        if (action === 'insert_col') {\n          val.alterColumnOffset = number;\n        } else if (action === 'remove_col') {\n          val.alterColumnOffset = -1 * number;\n        }\n      }\n    });\n    this.resetAllEndpoints(endpoints, false);\n  }\n\n  /**\n   * AfterCreateRow/afterCreateRow/afterRemoveRow/afterRemoveCol hook callback. Reset and reenables the summary functionality\n   * after changing the table structure.\n   *\n   * @private\n   * @param {string} action Type of the action performed.\n   * @param {number} index Row/column index.\n   * @param {number} number Number of rows/columns added/removed.\n   * @param {Array} [logicRows] Array of the logical indexes.\n   * @param {string} [source] Source of change.\n   * @param {boolean} [forceRefresh] `true` of the endpoints should refresh after completing the function.\n   */\n  resetSetupAfterStructureAlteration(action, index, number, logicRows, source) {\n    let forceRefresh = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;\n    if (this.settingsType === 'function') {\n      // We need to run it on a next avaiable hook, because the TrimRows' `afterCreateRow` hook triggers after this one,\n      // and it needs to be run to properly calculate the endpoint value.\n      const beforeViewRenderCallback = () => {\n        this.hot.removeHook('beforeViewRender', beforeViewRenderCallback);\n        return this.refreshAllEndpoints();\n      };\n      this.hot.addHookOnce('beforeViewRender', beforeViewRenderCallback);\n      return;\n    }\n    const type = action.indexOf('row') > -1 ? 'row' : 'col';\n    const multiplier = action.indexOf('remove') > -1 ? -1 : 1;\n    const endpoints = this.getAllEndpoints();\n    const rowMoving = action.indexOf('move_row') === 0;\n    const placeOfAlteration = index;\n    arrayEach(endpoints, val => {\n      if (type === 'row' && val.destinationRow >= placeOfAlteration) {\n        val.alterRowOffset = multiplier * number;\n      }\n      if (type === 'col' && val.destinationColumn >= placeOfAlteration) {\n        val.alterColumnOffset = multiplier * number;\n      }\n    });\n    this.resetAllEndpoints(endpoints, !rowMoving);\n    if (rowMoving) {\n      arrayEach(endpoints, endpoint => {\n        this.extendEndpointRanges(endpoint, placeOfAlteration, logicRows[0], logicRows.length);\n        this.recreatePhysicalRanges(endpoint);\n        this.clearOffsetInformation(endpoint);\n      });\n    } else {\n      arrayEach(endpoints, endpoint => {\n        this.shiftEndpointCoordinates(endpoint, placeOfAlteration);\n      });\n    }\n    if (forceRefresh) {\n      this.refreshAllEndpoints();\n    }\n  }\n\n  /**\n   * Clear the offset information from the endpoint object.\n   *\n   * @private\n   * @param {object} endpoint And endpoint object.\n   */\n  clearOffsetInformation(endpoint) {\n    endpoint.alterRowOffset = void 0;\n    endpoint.alterColumnOffset = void 0;\n  }\n\n  /**\n   * Extend the row ranges for the provided endpoint.\n   *\n   * @private\n   * @param {object} endpoint The endpoint object.\n   * @param {number} placeOfAlteration Index of the row where the alteration takes place.\n   * @param {number} previousPosition Previous endpoint result position.\n   * @param {number} offset Offset generated by the alteration.\n   */\n  extendEndpointRanges(endpoint, placeOfAlteration, previousPosition, offset) {\n    arrayEach(endpoint.ranges, range => {\n      // is a range, not a single row\n      if (range[1]) {\n        if (placeOfAlteration >= range[0] && placeOfAlteration <= range[1]) {\n          if (previousPosition > range[1]) {\n            range[1] += offset;\n          } else if (previousPosition < range[0]) {\n            range[0] -= offset;\n          }\n        } else if (previousPosition >= range[0] && previousPosition <= range[1]) {\n          range[1] -= offset;\n          if (placeOfAlteration <= range[0]) {\n            range[0] += 1;\n            range[1] += 1;\n          }\n        }\n      }\n    });\n  }\n\n  /**\n   * Recreate the physical ranges for the provided endpoint. Used (for example) when a row gets moved and extends an existing range.\n   *\n   * @private\n   * @param {object} endpoint An endpoint object.\n   */\n  recreatePhysicalRanges(endpoint) {\n    const ranges = endpoint.ranges;\n    const newRanges = [];\n    const allIndexes = [];\n    arrayEach(ranges, range => {\n      const newRange = [];\n      if (range[1]) {\n        for (let i = range[0]; i <= range[1]; i++) {\n          newRange.push(this.hot.toPhysicalRow(i));\n        }\n      } else {\n        newRange.push(this.hot.toPhysicalRow(range[0]));\n      }\n      allIndexes.push(newRange);\n    });\n    arrayEach(allIndexes, range => {\n      let newRange = [];\n      arrayEach(range, (coord, index) => {\n        if (index === 0) {\n          newRange.push(coord);\n        } else if (range[index] !== range[index - 1] + 1) {\n          newRange.push(range[index - 1]);\n          newRanges.push(newRange);\n          newRange = [];\n          newRange.push(coord);\n        }\n        if (index === range.length - 1) {\n          newRange.push(coord);\n          newRanges.push(newRange);\n        }\n      });\n    });\n    endpoint.ranges = newRanges;\n  }\n\n  /**\n   * Shifts the endpoint coordinates by the defined offset.\n   *\n   * @private\n   * @param {object} endpoint Endpoint object.\n   * @param {number} offsetStartIndex Index of the performed change (if the change is located after the endpoint, nothing about the endpoint has to be changed.\n   */\n  shiftEndpointCoordinates(endpoint, offsetStartIndex) {\n    if (endpoint.alterRowOffset && endpoint.alterRowOffset !== 0) {\n      endpoint.destinationRow += endpoint.alterRowOffset || 0;\n      arrayEach(endpoint.ranges, element => {\n        arrayEach(element, (subElement, j) => {\n          if (subElement >= offsetStartIndex) {\n            element[j] += endpoint.alterRowOffset || 0;\n          }\n        });\n      });\n    } else if (endpoint.alterColumnOffset && endpoint.alterColumnOffset !== 0) {\n      endpoint.destinationColumn += endpoint.alterColumnOffset || 0;\n      endpoint.sourceColumn += endpoint.alterColumnOffset || 0;\n    }\n  }\n\n  /**\n   * Resets (removes) the endpoints from the table.\n   *\n   * @param {Array} [endpoints] Array containing the endpoints.\n   * @param {boolean} [useOffset=true] Use the cell offset value.\n   */\n  resetAllEndpoints() {\n    let endpoints = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.getAllEndpoints();\n    let useOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const anyEndpointOutOfRange = endpoints.some(endpoint => {\n      const alterRowOffset = endpoint.alterRowOffset || 0;\n      const alterColOffset = endpoint.alterColumnOffset || 0;\n      if (endpoint.destinationRow + alterRowOffset >= this.hot.countRows() || endpoint.destinationColumn + alterColOffset >= this.hot.countCols()) {\n        return true;\n      }\n      return false;\n    });\n    if (anyEndpointOutOfRange) {\n      return;\n    }\n    this.cellsToSetCache = [];\n    arrayEach(endpoints, endpoint => {\n      this.resetEndpointValue(endpoint, useOffset);\n    });\n    this.hot.setDataAtCell(this.cellsToSetCache, 'ColumnSummary.reset');\n    this.cellsToSetCache = [];\n  }\n\n  /**\n   * Calculate and refresh all defined endpoints.\n   */\n  refreshAllEndpoints() {\n    this.cellsToSetCache = [];\n    arrayEach(this.getAllEndpoints(), value => {\n      this.currentEndpoint = value;\n      this.plugin.calculate(value);\n      this.setEndpointValue(value, 'init');\n    });\n    this.currentEndpoint = null;\n    this.hot.setDataAtCell(this.cellsToSetCache, 'ColumnSummary.reset');\n    this.cellsToSetCache = [];\n  }\n\n  /**\n   * Calculate and refresh endpoints only in the changed columns.\n   *\n   * @param {Array} changes Array of changes from the `afterChange` hook.\n   */\n  refreshChangedEndpoints(changes) {\n    const needToRefresh = [];\n    this.cellsToSetCache = [];\n    arrayEach(changes, (value, key, changesObj) => {\n      // if nothing changed, dont update anything\n      if (`${value[2] || ''}` === `${value[3]}`) {\n        return;\n      }\n      arrayEach(this.getAllEndpoints(), (endpoint, j) => {\n        if (this.hot.propToCol(changesObj[key][1]) === endpoint.sourceColumn && needToRefresh.indexOf(j) === -1) {\n          needToRefresh.push(j);\n        }\n      });\n    });\n    arrayEach(needToRefresh, value => {\n      this.refreshEndpoint(this.getEndpoint(value));\n    });\n    this.hot.setDataAtCell(this.cellsToSetCache, 'ColumnSummary.reset');\n    this.cellsToSetCache = [];\n  }\n\n  /**\n   * Calculate and refresh a single endpoint.\n   *\n   * @param {object} endpoint Contains the endpoint information.\n   */\n  refreshEndpoint(endpoint) {\n    this.currentEndpoint = endpoint;\n    this.plugin.calculate(endpoint);\n    this.setEndpointValue(endpoint);\n    this.currentEndpoint = null;\n  }\n\n  /**\n   * Reset the endpoint value.\n   *\n   * @param {object} endpoint Contains the endpoint information.\n   * @param {boolean} [useOffset=true] Use the cell offset value.\n   */\n  resetEndpointValue(endpoint) {\n    let useOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const alterRowOffset = endpoint.alterRowOffset || 0;\n    const alterColOffset = endpoint.alterColumnOffset || 0;\n    this.cellsToSetCache.push([this.hot.toVisualRow(endpoint.destinationRow + (useOffset ? alterRowOffset : 0)), this.hot.toVisualColumn(endpoint.destinationColumn + (useOffset ? alterColOffset : 0)), '']);\n  }\n\n  /**\n   * Set the endpoint value.\n   *\n   * @param {object} endpoint Contains the endpoint information.\n   * @param {string} [source] Source of the call information.\n   * @param {boolean} [render=false] `true` if it needs to render the table afterwards.\n   */\n  setEndpointValue(endpoint, source) {\n    let render = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const visualEndpointRowIndex = this.hot.toVisualRow(endpoint.destinationRow);\n    if (endpoint.destinationRow >= this.hot.countRows() || endpoint.destinationColumn >= this.hot.countCols()) {\n      this.throwOutOfBoundsWarning();\n      return;\n    }\n    const destinationVisualRow = this.hot.toVisualRow(endpoint.destinationRow);\n    if (destinationVisualRow !== null) {\n      const cellMeta = this.hot.getCellMeta(destinationVisualRow, endpoint.destinationColumn);\n      if (source === 'init' || cellMeta.readOnly !== endpoint.readOnly) {\n        cellMeta.readOnly = endpoint.readOnly;\n        cellMeta.className = 'columnSummaryResult';\n      }\n    }\n    if (endpoint.roundFloat && !isNaN(endpoint.result)) {\n      endpoint.result = endpoint.result.toFixed(endpoint.roundFloat);\n    }\n    if (render) {\n      this.hot.setDataAtCell(visualEndpointRowIndex, endpoint.destinationColumn, endpoint.result, 'ColumnSummary.set');\n    } else {\n      this.cellsToSetCache.push([visualEndpointRowIndex, endpoint.destinationColumn, endpoint.result]);\n    }\n    endpoint.alterRowOffset = void 0;\n    endpoint.alterColumnOffset = void 0;\n  }\n\n  /**\n   * Throw an error for the calculation range being out of boundaries.\n   *\n   * @private\n   */\n  throwOutOfBoundsWarning() {\n    warn('One of the Column Summary plugins\\' destination points you provided is beyond the table boundaries!');\n  }\n}\nexport default Endpoints;","/**\n * Returns `true` if the value is one of the type: `null`, `undefined` or `NaN`.\n *\n * @param {*} value The value to check.\n * @returns {boolean}\n */\nexport function isNullishOrNaN(value) {\n  return value === null || value === undefined || isNaN(value);\n}","import \"core-js/modules/es.error.cause.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { objectEach } from \"../../helpers/object.mjs\";\nimport Endpoints from \"./endpoints.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\nimport { isNullishOrNaN } from \"./utils.mjs\";\nexport const PLUGIN_KEY = 'columnSummary';\nexport const PLUGIN_PRIORITY = 220;\n\n/**\n * @plugin ColumnSummary\n * @class ColumnSummary\n *\n * @description\n * The `ColumnSummary` plugin lets you [easily summarize your columns](@/guides/columns/column-summary.md).\n *\n * You can use the [built-in summary functions](@/guides/columns/column-summary.md#built-in-summary-functions),\n * or implement a [custom summary function](@/guides/columns/column-summary.md#implement-a-custom-summary-function).\n *\n * For each column summary, you can set the following configuration options:\n *\n * | Option | Required | Type | Default | Description |\n * |---|---|---|---|---|\n * | `sourceColumn` | No | Number | Same as `destinationColumn` | [Selects a column to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize) |\n * | `ranges` | No | Array | - | [Selects ranges of rows to summarize](@/guides/columns/column-summary.md#step-2-select-cells-that-you-want-to-summarize) |\n * | `type` | Yes | String | - | [Sets a summary function](@/guides/columns/column-summary.md#step-3-calculate-your-summary) |\n * | `destinationRow` | Yes | Number | - | [Sets the destination cell's row coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |\n * | `destinationColumn` | Yes | Number | - | [Sets the destination cell's column coordinate](@/guides/columns/column-summary.md#step-4-provide-the-destination-cell-s-coordinates) |\n * | `forceNumeric` | No | Boolean | `false` | [Forces the summary to treat non-numerics as numerics](@/guides/columns/column-summary.md#force-numeric-values) |\n * | `reversedRowCoords` | No | Boolean | `false` | [Reverses row coordinates](@/guides/columns/column-summary.md#step-5-make-room-for-the-destination-cell) |\n * | `suppressDataTypeErrors` | No | Boolean | `true` | [Suppresses data type errors](@/guides/columns/column-summary.md#throw-data-type-errors) |\n * | `readOnly` | No | Boolean | `true` | Makes summary cell read-only |\n * | `roundFloat` | No | Number | - | [Rounds summary result](@/guides/columns/column-summary.md#round-a-column-summary-result) |\n * | `customFunction` | No | Function | - | [Lets you add a custom summary function](@/guides/columns/column-summary.md#implement-a-custom-summary-function) |\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   columnSummary: [\n *     {\n *       type: 'min',\n *       destinationRow: 4,\n *       destinationColumn: 1,\n *     },\n *     {\n *       type: 'max',\n *       destinationRow: 0,\n *       destinationColumn: 3,\n *       reversedRowCoords: true\n *     },\n *     {\n *       type: 'sum',\n *       destinationRow: 4,\n *       destinationColumn: 5,\n *       forceNumeric: true\n *     }\n *   ]\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={getData()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   columnSummary={[\n *     {\n *       type: 'min',\n *       destinationRow: 4,\n *       destinationColumn: 1,\n *     },\n *     {\n *       type: 'max',\n *       destinationRow: 0,\n *       destinationColumn: 3,\n *       reversedRowCoords: true\n *     },\n *     {\n *       type: 'sum',\n *       destinationRow: 4,\n *       destinationColumn: 5,\n *       forceNumeric: true\n *     }\n *   ]}\n * />\n * ```\n * :::\n */\nexport class ColumnSummary extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * The Endpoints class instance. Used to make all endpoint-related operations.\n     *\n     * @private\n     * @type {null|Endpoints}\n     */\n    this.endpoints = null;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ColumnSummary#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    this.settings = this.hot.getSettings()[PLUGIN_KEY];\n    this.endpoints = new Endpoints(this, this.settings);\n    this.addHook('afterInit', function () {\n      return _this.onAfterInit(...arguments);\n    });\n    this.addHook('afterChange', function () {\n      return _this.onAfterChange(...arguments);\n    });\n    this.addHook('beforeCreateRow', (index, amount, source) => this.endpoints.resetSetupBeforeStructureAlteration('insert_row', index, amount, null, source)); // eslint-disable-line max-len\n    this.addHook('beforeCreateCol', (index, amount, source) => this.endpoints.resetSetupBeforeStructureAlteration('insert_col', index, amount, null, source)); // eslint-disable-line max-len\n    this.addHook('beforeRemoveRow', function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return _this.endpoints.resetSetupBeforeStructureAlteration('remove_row', ...args);\n    });\n    this.addHook('beforeRemoveCol', function () {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return _this.endpoints.resetSetupBeforeStructureAlteration('remove_col', ...args);\n    });\n    this.addHook('afterCreateRow', (index, amount, source) => this.endpoints.resetSetupAfterStructureAlteration('insert_row', index, amount, null, source)); // eslint-disable-line max-len\n    this.addHook('afterCreateCol', (index, amount, source) => this.endpoints.resetSetupAfterStructureAlteration('insert_col', index, amount, null, source)); // eslint-disable-line max-len\n    this.addHook('afterRemoveRow', function () {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n      return _this.endpoints.resetSetupAfterStructureAlteration('remove_row', ...args);\n    });\n    this.addHook('afterRemoveCol', function () {\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n      return _this.endpoints.resetSetupAfterStructureAlteration('remove_col', ...args);\n    });\n    this.addHook('afterRowMove', function () {\n      return _this.onAfterRowMove(...arguments);\n    });\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.endpoints = null;\n    this.settings = null;\n    this.currentEndpoint = null;\n  }\n\n  /**\n   * Calculates math for a single endpoint.\n   *\n   * @private\n   * @param {object} endpoint Contains information about the endpoint.\n   */\n  calculate(endpoint) {\n    switch (endpoint.type.toLowerCase()) {\n      case 'sum':\n        endpoint.result = this.calculateSum(endpoint);\n        break;\n      case 'min':\n        endpoint.result = this.calculateMinMax(endpoint, endpoint.type);\n        break;\n      case 'max':\n        endpoint.result = this.calculateMinMax(endpoint, endpoint.type);\n        break;\n      case 'count':\n        endpoint.result = this.countEntries(endpoint);\n        break;\n      case 'average':\n        endpoint.result = this.calculateAverage(endpoint);\n        break;\n      case 'custom':\n        endpoint.result = endpoint.customFunction.call(this, endpoint);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Calculates sum of the values contained in ranges provided in the plugin config.\n   *\n   * @private\n   * @param {object} endpoint Contains the endpoint information.\n   * @returns {number} Sum for the selected range.\n   */\n  calculateSum(endpoint) {\n    let sum = 0;\n    objectEach(endpoint.ranges, range => {\n      sum += this.getPartialSum(range, endpoint.sourceColumn);\n    });\n    return sum;\n  }\n\n  /**\n   * Returns partial sum of values from a single row range.\n   *\n   * @private\n   * @param {Array} rowRange Range for the sum.\n   * @param {number} col Column index.\n   * @returns {number} The partial sum.\n   */\n  getPartialSum(rowRange, col) {\n    let sum = 0;\n    let i = rowRange[1] || rowRange[0];\n    let cellValue = null;\n    let biggestDecimalPlacesCount = 0;\n    do {\n      cellValue = this.getCellValue(i, col);\n      cellValue = isNullishOrNaN(cellValue) ? null : cellValue;\n      if (cellValue !== null) {\n        const decimalPlaces = (`${cellValue}`.split('.')[1] || []).length || 1;\n        if (decimalPlaces > biggestDecimalPlacesCount) {\n          biggestDecimalPlacesCount = decimalPlaces;\n        }\n      }\n      sum += cellValue || 0;\n      i -= 1;\n    } while (i >= rowRange[0]);\n\n    // Workaround for e.g. 802.2 + 1.1 = 803.3000000000001\n    return Math.round(sum * 10 ** biggestDecimalPlacesCount) / 10 ** biggestDecimalPlacesCount;\n  }\n\n  /**\n   * Calculates the minimal value for the selected ranges.\n   *\n   * @private\n   * @param {object} endpoint Contains the endpoint information.\n   * @param {string} type `'min'` or `'max'`.\n   * @returns {number} Min or Max value.\n   */\n  calculateMinMax(endpoint, type) {\n    let result = null;\n    objectEach(endpoint.ranges, range => {\n      const partialResult = this.getPartialMinMax(range, endpoint.sourceColumn, type);\n      if (result === null && partialResult !== null) {\n        result = partialResult;\n      }\n      if (partialResult !== null) {\n        switch (type) {\n          case 'min':\n            result = Math.min(result, partialResult);\n            break;\n          case 'max':\n            result = Math.max(result, partialResult);\n            break;\n          default:\n            break;\n        }\n      }\n    });\n    return result === null ? 'Not enough data' : result;\n  }\n\n  /**\n   * Returns a local minimum of the provided sub-range.\n   *\n   * @private\n   * @param {Array} rowRange Range for the calculation.\n   * @param {number} col Column index.\n   * @param {string} type `'min'` or `'max'`.\n   * @returns {number|null} Min or max value.\n   */\n  getPartialMinMax(rowRange, col, type) {\n    let result = null;\n    let i = rowRange[1] || rowRange[0];\n    let cellValue;\n    do {\n      cellValue = this.getCellValue(i, col);\n      cellValue = isNullishOrNaN(cellValue) ? null : cellValue;\n      if (result === null) {\n        result = cellValue;\n      } else if (cellValue !== null) {\n        switch (type) {\n          case 'min':\n            result = Math.min(result, cellValue);\n            break;\n          case 'max':\n            result = Math.max(result, cellValue);\n            break;\n          default:\n            break;\n        }\n      }\n      i -= 1;\n    } while (i >= rowRange[0]);\n    return result;\n  }\n\n  /**\n   * Counts empty cells in the provided row range.\n   *\n   * @private\n   * @param {Array} rowRange Row range for the calculation.\n   * @param {number} col Column index.\n   * @returns {number} Empty cells count.\n   */\n  countEmpty(rowRange, col) {\n    let cellValue;\n    let counter = 0;\n    let i = rowRange[1] || rowRange[0];\n    do {\n      cellValue = this.getCellValue(i, col);\n      cellValue = isNullishOrNaN(cellValue) ? null : cellValue;\n      if (cellValue === null) {\n        counter += 1;\n      }\n      i -= 1;\n    } while (i >= rowRange[0]);\n    return counter;\n  }\n\n  /**\n   * Counts non-empty cells in the provided row range.\n   *\n   * @private\n   * @param {object} endpoint Contains the endpoint information.\n   * @returns {number} Entry count.\n   */\n  countEntries(endpoint) {\n    let result = 0;\n    const ranges = endpoint.ranges;\n    objectEach(ranges, range => {\n      const partial = range[1] === void 0 ? 1 : range[1] - range[0] + 1;\n      const emptyCount = this.countEmpty(range, endpoint.sourceColumn);\n      result += partial;\n      result -= emptyCount;\n    });\n    return result;\n  }\n\n  /**\n   * Calculates the average value from the cells in the range.\n   *\n   * @private\n   * @param {object} endpoint Contains the endpoint information.\n   * @returns {number} Avarage value.\n   */\n  calculateAverage(endpoint) {\n    const sum = this.calculateSum(endpoint);\n    const entriesCount = this.countEntries(endpoint);\n    return sum / entriesCount;\n  }\n\n  /**\n   * Returns a cell value, taking into consideration a basic validation.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @param {number} col Column index.\n   * @returns {string} The cell value.\n   */\n  getCellValue(row, col) {\n    const visualRowIndex = this.hot.toVisualRow(row);\n    const visualColumnIndex = this.hot.toVisualColumn(col);\n    let cellValue = this.hot.getSourceDataAtCell(row, col);\n    let cellClassName = '';\n    if (visualRowIndex !== null && visualColumnIndex !== null) {\n      cellClassName = this.hot.getCellMeta(visualRowIndex, visualColumnIndex).className || '';\n    }\n    if (cellClassName.indexOf('columnSummaryResult') > -1) {\n      return null;\n    }\n    if (this.endpoints.currentEndpoint.forceNumeric) {\n      if (typeof cellValue === 'string') {\n        cellValue = cellValue.replace(/,/, '.');\n      }\n      cellValue = parseFloat(cellValue);\n    }\n    if (isNaN(cellValue)) {\n      if (!this.endpoints.currentEndpoint.suppressDataTypeErrors) {\n        throw new Error(toSingleLine`ColumnSummary plugin: cell at (${row}, ${col}) is not in a\\x20\n          numeric format. Cannot do the calculation.`);\n      }\n    }\n    return cellValue;\n  }\n\n  /**\n   * `afterInit` hook callback.\n   *\n   * @private\n   */\n  onAfterInit() {\n    this.endpoints.endpoints = this.endpoints.parseSettings();\n    this.endpoints.refreshAllEndpoints(true);\n  }\n\n  /**\n   * `afterChange` hook callback.\n   *\n   * @private\n   * @param {Array} changes 2D array containing information about each of the edited cells.\n   * @param {string} source The string that identifies source of changes.\n   */\n  onAfterChange(changes, source) {\n    if (changes && source !== 'ColumnSummary.reset' && source !== 'ColumnSummary.set' && source !== 'loadData') {\n      this.endpoints.refreshChangedEndpoints(changes);\n    }\n  }\n\n  /**\n   * `beforeRowMove` hook callback.\n   *\n   * @private\n   * @param {Array} rows Array of visual row indexes to be moved.\n   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.\n   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md).\n   */\n  onAfterRowMove(rows, finalIndex) {\n    this.endpoints.resetSetupBeforeStructureAlteration('move_row', rows[0], rows.length, rows, this.pluginName);\n    this.endpoints.resetSetupAfterStructureAlteration('move_row', finalIndex, rows.length, rows, this.pluginName);\n  }\n}","import { addClass, outerWidth, outerHeight } from \"../../helpers/dom/element.mjs\";\n/**\n * Comment editor for the Comments plugin.\n *\n * @private\n * @class CommentEditor\n */\nclass CommentEditor {\n  static get CLASS_EDITOR_CONTAINER() {\n    return 'htCommentsContainer';\n  }\n  static get CLASS_EDITOR() {\n    return 'htComments';\n  }\n  static get CLASS_INPUT() {\n    return 'htCommentTextArea';\n  }\n  static get CLASS_CELL() {\n    return 'htCommentCell';\n  }\n  constructor(rootDocument, isRtl) {\n    this.rootDocument = rootDocument;\n    this.isRtl = isRtl;\n    this.container = null;\n    this.editor = this.createEditor();\n    this.editorStyle = this.editor.style;\n    this.hidden = true;\n    this.hide();\n  }\n\n  /**\n   * Set position of the comments editor according to the  provided x and y coordinates.\n   *\n   * @param {number} x X position (in pixels).\n   * @param {number} y Y position (in pixels).\n   */\n  setPosition(x, y) {\n    this.editorStyle.left = `${x}px`;\n    this.editorStyle.top = `${y}px`;\n  }\n\n  /**\n   * Set the editor size according to the provided arguments.\n   *\n   * @param {number} width Width in pixels.\n   * @param {number} height Height in pixels.\n   */\n  setSize(width, height) {\n    if (width && height) {\n      const input = this.getInputElement();\n      input.style.width = `${width}px`;\n      input.style.height = `${height}px`;\n    }\n  }\n\n  /**\n   * Returns the size of the comments editor.\n   *\n   * @returns {{ width: number, height: number }}\n   */\n  getSize() {\n    return {\n      width: outerWidth(this.getInputElement()),\n      height: outerHeight(this.getInputElement())\n    };\n  }\n\n  /**\n   * Reset the editor size to its initial state.\n   */\n  resetSize() {\n    const input = this.getInputElement();\n    input.style.width = '';\n    input.style.height = '';\n  }\n\n  /**\n   * Set the read-only state for the comments editor.\n   *\n   * @param {boolean} state The new read only state.\n   */\n  setReadOnlyState(state) {\n    const input = this.getInputElement();\n    input.readOnly = state;\n  }\n\n  /**\n   * Show the comments editor.\n   */\n  show() {\n    this.editorStyle.display = 'block';\n    this.hidden = false;\n  }\n\n  /**\n   * Hide the comments editor.\n   */\n  hide() {\n    if (!this.hidden) {\n      this.editorStyle.display = 'none';\n    }\n    this.hidden = true;\n  }\n\n  /**\n   * Checks if the editor is visible.\n   *\n   * @returns {boolean}\n   */\n  isVisible() {\n    return this.editorStyle.display === 'block';\n  }\n\n  /**\n   * Set the comment value.\n   *\n   * @param {string} [value] The value to use.\n   */\n  setValue() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    const comment = value || '';\n    this.getInputElement().value = comment;\n  }\n\n  /**\n   * Get the comment value.\n   *\n   * @returns {string}\n   */\n  getValue() {\n    return this.getInputElement().value;\n  }\n\n  /**\n   * Checks if the comment input element is focused.\n   *\n   * @returns {boolean}\n   */\n  isFocused() {\n    return this.rootDocument.activeElement === this.getInputElement();\n  }\n\n  /**\n   * Focus the comments input element.\n   */\n  focus() {\n    this.getInputElement().focus();\n  }\n\n  /**\n   * Create the `textarea` to be used as a comments editor.\n   *\n   * @returns {HTMLElement}\n   */\n  createEditor() {\n    const editor = this.rootDocument.createElement('div');\n    const textArea = this.rootDocument.createElement('textarea');\n    editor.style.display = 'none';\n    this.container = this.rootDocument.createElement('div');\n    this.container.setAttribute('dir', this.isRtl ? 'rtl' : 'ltr');\n    addClass(this.container, CommentEditor.CLASS_EDITOR_CONTAINER);\n    this.rootDocument.body.appendChild(this.container);\n    addClass(editor, CommentEditor.CLASS_EDITOR);\n    addClass(textArea, CommentEditor.CLASS_INPUT);\n    textArea.setAttribute('data-hot-input', true);\n    editor.appendChild(textArea);\n    this.container.appendChild(editor);\n    return editor;\n  }\n\n  /**\n   * Get the input element.\n   *\n   * @returns {HTMLElement}\n   */\n  getInputElement() {\n    return this.editor.querySelector(`.${CommentEditor.CLASS_INPUT}`);\n  }\n\n  /**\n   * Destroy the comments editor.\n   */\n  destroy() {\n    const containerParentElement = this.container ? this.container.parentNode : null;\n    this.editor.parentNode.removeChild(this.editor);\n    this.editor = null;\n    this.editorStyle = null;\n    if (containerParentElement) {\n      containerParentElement.removeChild(this.container);\n    }\n  }\n}\nexport default CommentEditor;","import { debounce } from \"../../helpers/function.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nconst DEFAULT_DISPLAY_DELAY = 250;\nconst DEFAULT_HIDE_DELAY = 250;\n\n/**\n * Display switch for the Comments plugin. Manages the time of delayed displaying / hiding comments.\n *\n * @private\n * @class DisplaySwitch\n */\nclass DisplaySwitch {\n  constructor(displayDelay) {\n    /**\n     * Flag to determine if comment can be showed or hidden. State `true` mean that last performed action\n     * was an attempt to show comment element. State `false` mean that it was attempt to hide comment element.\n     *\n     * @type {boolean}\n     */\n    this.wasLastActionShow = true;\n    /**\n     * Show comment after predefined delay. It keeps reference to immutable `debounce` function.\n     *\n     * @type {Function}\n     */\n    this.showDebounced = null;\n    /**\n     * Reference to timer, run by `setTimeout`, which is hiding comment.\n     *\n     * @type {number}\n     */\n    this.hidingTimer = null;\n    this.updateDelay(displayDelay);\n  }\n\n  /**\n   * Responsible for hiding comment after proper delay.\n   */\n  hide() {\n    this.wasLastActionShow = false;\n    this.hidingTimer = setTimeout(() => {\n      if (this.wasLastActionShow === false) {\n        this.runLocalHooks('hide');\n      }\n    }, DEFAULT_HIDE_DELAY);\n  }\n\n  /**\n   * Responsible for showing comment after proper delay.\n   *\n   * @param {object} range Coordinates of selected cell.\n   */\n  show(range) {\n    this.wasLastActionShow = true;\n    this.showDebounced(range);\n  }\n\n  /**\n   * Cancel hiding comment.\n   */\n  cancelHiding() {\n    this.wasLastActionShow = true;\n    clearTimeout(this.hidingTimer);\n    this.hidingTimer = null;\n  }\n\n  /**\n   * Update the switch settings.\n   *\n   * @param {number} displayDelay Delay of showing the comments (in milliseconds).\n   */\n  updateDelay() {\n    let displayDelay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DEFAULT_DISPLAY_DELAY;\n    this.showDebounced = debounce(range => {\n      if (this.wasLastActionShow) {\n        this.runLocalHooks('show', range.from.row, range.from.col);\n      }\n    }, displayDelay);\n  }\n\n  /**\n   * Destroy the switcher.\n   */\n  destroy() {\n    this.clearLocalHooks();\n  }\n}\nmixin(DisplaySwitch, localHooks);\nexport default DisplaySwitch;","export const KEY = '---------';\n\n/**\n * @returns {object}\n */\nexport default function separatorItem() {\n  return {\n    name: KEY\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {Comments} plugin The Comments plugin instance.\n * @returns {object}\n */\nexport default function addEditCommentItem(plugin) {\n  return {\n    key: 'commentsAddEdit',\n    name() {\n      var _this$getSelectedRang;\n      const highlight = (_this$getSelectedRang = this.getSelectedRangeLast()) === null || _this$getSelectedRang === void 0 ? void 0 : _this$getSelectedRang.highlight;\n      if (highlight !== null && highlight !== void 0 && highlight.isCell() && plugin.getCommentAtCell(highlight.row, highlight.col)) {\n        return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_EDIT_COMMENT);\n      }\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ADD_COMMENT);\n    },\n    callback() {\n      const range = this.getSelectedRangeLast();\n      this.deselectCell();\n      plugin.setRange(range);\n      plugin.show();\n      plugin.focusEditor();\n    },\n    disabled() {\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.highlight.isHeader()) {\n        return true;\n      }\n      return this.countRenderedRows() === 0 || this.countRenderedCols() === 0;\n    }\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {Comments} plugin The Comments plugin instance.\n * @returns {object}\n */\nexport default function removeCommentItem(plugin) {\n  return {\n    key: 'commentsRemove',\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_REMOVE_COMMENT);\n    },\n    callback() {\n      const range = this.getSelectedRangeLast();\n      range.forAll((row, column) => {\n        if (row >= 0 && column >= 0) {\n          plugin.removeCommentAtCell(row, column, false);\n        }\n      });\n      this.render();\n    },\n    disabled() {\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.highlight.isHeader()) {\n        return true;\n      }\n      return this.countRenderedRows() === 0 || this.countRenderedCols() === 0;\n    }\n  };\n}","import { arrayEach } from \"../../helpers/array.mjs\";\n/**\n * @param {string} className The full element class name to process.\n * @param {string} alignment The alignment class name to compare with.\n * @returns {string}\n */\nexport function prepareVerticalAlignClass(className, alignment) {\n  if (className.indexOf(alignment) !== -1) {\n    return className;\n  }\n  const replacedClassName = className.replace('htTop', '').replace('htMiddle', '').replace('htBottom', '').replace('  ', '');\n  return `${replacedClassName} ${alignment}`;\n}\n\n/**\n * @param {string} className The full element class name to process.\n * @param {string} alignment The alignment class name to compare with.\n * @returns {string}\n */\nexport function prepareHorizontalAlignClass(className, alignment) {\n  if (className.indexOf(alignment) !== -1) {\n    return className;\n  }\n  const replacedClassName = className.replace('htLeft', '').replace('htCenter', '').replace('htRight', '').replace('htJustify', '').replace('  ', '');\n  return `${replacedClassName} ${alignment}`;\n}\n\n/**\n * @param {CellRange[]} ranges An array of the cell ranges.\n * @param {Function} callback The callback function.\n * @returns {object}\n */\nexport function getAlignmentClasses(ranges, callback) {\n  const classes = {};\n  arrayEach(ranges, range => {\n    range.forAll((row, col) => {\n      // Alignment classes should only collected within cell ranges. We skip header coordinates.\n      if (row >= 0 && col >= 0) {\n        if (!classes[row]) {\n          classes[row] = [];\n        }\n        classes[row][col] = callback(row, col);\n      }\n    });\n  });\n  return classes;\n}\n\n/**\n * @param {CellRange[]} ranges An array of the cell ranges.\n * @param {string} type The type of the alignment axis ('horizontal' or 'vertical').\n * @param {string} alignment CSS class name to add.\n * @param {Function} cellDescriptor The function which fetches the cell meta object based in passed coordinates.\n * @param {Function} propertySetter The function which contains logic for added/removed alignment.\n */\nexport function align(ranges, type, alignment, cellDescriptor, propertySetter) {\n  arrayEach(ranges, range => {\n    range.forAll((row, col) => {\n      // Alignment classes should only collected within cell ranges. We skip header coordinates.\n      if (row >= 0 && col >= 0) {\n        applyAlignClassName(row, col, type, alignment, cellDescriptor, propertySetter);\n      }\n    });\n  });\n}\n\n/**\n * @param {number} row The visual row index.\n * @param {number} col The visual column index.\n * @param {string} type The type of the alignment axis ('horizontal' or 'vertical').\n * @param {string} alignment CSS class name to add.\n * @param {Function} cellDescriptor The function which fetches the cell meta object based in passed coordinates.\n * @param {Function} propertySetter The function which contains logic for added/removed alignment.\n */\nfunction applyAlignClassName(row, col, type, alignment, cellDescriptor, propertySetter) {\n  const cellMeta = cellDescriptor(row, col);\n  let className = alignment;\n  if (cellMeta.className) {\n    if (type === 'vertical') {\n      className = prepareVerticalAlignClass(cellMeta.className, alignment);\n    } else {\n      className = prepareHorizontalAlignClass(cellMeta.className, alignment);\n    }\n  }\n  propertySetter(row, col, 'className', className);\n}\n\n/**\n * @param {string} label The label text.\n * @returns {string}\n */\nexport function markLabelAsSelected(label) {\n  // workaround for https://github.com/handsontable/handsontable/issues/1946\n  return `<span class=\"selected\">${String.fromCharCode(10003)}</span>${label}`;\n}\n\n/**\n * @param {CellRange[]} ranges An array of the cell ranges.\n * @param {Function} comparator The comparator function.\n * @returns {boolean}\n */\nexport function checkSelectionConsistency(ranges, comparator) {\n  let result = false;\n  if (Array.isArray(ranges)) {\n    arrayEach(ranges, range => {\n      range.forAll((row, col) => {\n        // Selection consistency should only check within cell ranges. We skip header coordinates.\n        if (row >= 0 && col >= 0 && comparator(row, col)) {\n          result = true;\n          return false;\n        }\n      });\n      return result;\n    });\n  }\n  return result;\n}\n\n/**\n * Returns document offset based on the passed element. If the document objects between element and the\n * base document are not the same the offset as top and left properties will be returned.\n *\n * @param {Element} elementToCheck The element to compare with Document object.\n * @param {Document} baseDocument The base Document object.\n * @returns {{ top: number, left: number }}\n */\nexport function getDocumentOffsetByElement(elementToCheck, baseDocument) {\n  const offset = {\n    top: 0,\n    left: 0\n  };\n  if (baseDocument !== elementToCheck.ownerDocument) {\n    const {\n      frameElement\n    } = baseDocument.defaultView;\n    const {\n      top,\n      left\n    } = frameElement.getBoundingClientRect();\n    offset.top = top;\n    offset.left = left;\n  }\n  return offset;\n}","import * as C from \"../../../i18n/constants.mjs\";\nimport { checkSelectionConsistency, markLabelAsSelected } from \"../../contextMenu/utils.mjs\";\nimport { META_READONLY } from \"../comments.mjs\";\n/**\n * @param {Comments} plugin The Comments plugin instance.\n * @returns {object}\n */\nexport default function readOnlyCommentItem(plugin) {\n  return {\n    key: 'commentsReadOnly',\n    name() {\n      const label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_READ_ONLY_COMMENT);\n      const areReadOnly = checkSelectionConsistency(this.getSelectedRange(), (row, col) => {\n        return plugin.getCommentMeta(row, col, META_READONLY);\n      });\n      return areReadOnly ? markLabelAsSelected(label) : label;\n    },\n    callback() {\n      const range = this.getSelectedRangeLast();\n      range.forAll((row, column) => {\n        if (row >= 0 && column >= 0) {\n          const currentState = !!plugin.getCommentMeta(row, column, META_READONLY);\n          plugin.updateCommentMeta(row, column, {\n            [META_READONLY]: !currentState\n          });\n        }\n      });\n    },\n    disabled() {\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.highlight.isHeader()) {\n        return true;\n      }\n      if (!plugin.getCommentAtCell(range.highlight.row, range.highlight.col)) {\n        return true;\n      }\n      return this.countRenderedRows() === 0 || this.countRenderedCols() === 0;\n    }\n  };\n}","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { addClass, closest, isChildOf, hasClass, outerWidth, outerHeight } from \"../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../helpers/dom/event.mjs\";\nimport { deepClone, deepExtend, isObject } from \"../../helpers/object.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport CommentEditor from \"./commentEditor.mjs\";\nimport DisplaySwitch from \"./displaySwitch.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport addEditCommentItem from \"./contextMenuItem/addEditComment.mjs\";\nimport removeCommentItem from \"./contextMenuItem/removeComment.mjs\";\nimport readOnlyCommentItem from \"./contextMenuItem/readOnlyComment.mjs\";\nexport const PLUGIN_KEY = 'comments';\nexport const PLUGIN_PRIORITY = 60;\nexport const META_COMMENT = 'comment';\nexport const META_COMMENT_VALUE = 'value';\nexport const META_STYLE = 'style';\nexport const META_READONLY = 'readOnly';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nconst SHORTCUTS_CONTEXT_NAME = `plugin:${PLUGIN_KEY}`;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @plugin Comments\n * @class Comments\n *\n * @description\n * This plugin allows setting and managing cell comments by either an option in the context menu or with the use of\n * the API.\n *\n * To enable the plugin, you'll need to set the comments property of the config object to `true`:\n * ```js\n * comments: true\n * ```\n *\n * or an object with extra predefined plugin config:\n *\n * ```js\n * comments: {\n *   displayDelay: 1000,\n *   readOnly: true,\n *   style: {\n *     width: 300,\n *     height: 100\n *   }\n * }\n * ```\n *\n * To add comments at the table initialization, define the `comment` property in the `cell` config array as in an example below.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *   data: getData(),\n *   comments: true,\n *   cell: [\n *     {row: 1, col: 1, comment: {value: 'Foo'}},\n *     {row: 2, col: 2, comment: {value: 'Bar'}}\n *   ]\n * });\n *\n * // Access to the Comments plugin instance:\n * const commentsPlugin = hot.getPlugin('comments');\n *\n * // Manage comments programmatically:\n * commentsPlugin.setCommentAtCell(1, 6, 'Comment contents');\n * commentsPlugin.showAtCell(1, 6);\n * commentsPlugin.removeCommentAtCell(1, 6);\n *\n * // You can also set range once and use proper methods:\n * commentsPlugin.setRange({from: {row: 1, col: 6}});\n * commentsPlugin.setComment('Comment contents');\n * commentsPlugin.show();\n * commentsPlugin.removeComment();\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n *   comments={true}\n *   cell={[\n *     {row: 1, col: 1, comment: {value: 'Foo'}},\n *     {row: 2, col: 2, comment: {value: 'Bar'}}\n *   ]}\n * />\n *\n * // Access to the Comments plugin instance:\n * const hot = hotRef.current.hotInstance;\n * const commentsPlugin = hot.getPlugin('comments');\n *\n * // Manage comments programmatically:\n * commentsPlugin.setCommentAtCell(1, 6, 'Comment contents');\n * commentsPlugin.showAtCell(1, 6);\n * commentsPlugin.removeCommentAtCell(1, 6);\n *\n * // You can also set range once and use proper methods:\n * commentsPlugin.setRange({from: {row: 1, col: 6}});\n * commentsPlugin.setComment('Comment contents');\n * commentsPlugin.show();\n * commentsPlugin.removeComment();\n * ```\n * :::\n */\nvar _editor = /*#__PURE__*/new WeakMap();\nvar _displaySwitch = /*#__PURE__*/new WeakMap();\nvar _preventEditorAutoSwitch = /*#__PURE__*/new WeakMap();\nvar _preventEditorHiding = /*#__PURE__*/new WeakMap();\nvar _tempEditorDimensions = /*#__PURE__*/new WeakMap();\nvar _cellBelowCursor = /*#__PURE__*/new WeakMap();\nvar _commentValueBeforeSave = /*#__PURE__*/new WeakMap();\nexport class Comments extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Current cell range, an object with `from` property, with `row` and `col` properties (e.q. `{from: {row: 1, col: 6}}`).\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"range\", {});\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @protected\n     * @type {EventManager}\n     */\n    _defineProperty(this, \"eventManager\", null);\n    /**\n     * Instance of {@link CommentEditor}.\n     *\n     * @private\n     * @type {CommentEditor}\n     */\n    _classPrivateFieldInitSpec(this, _editor, {\n      writable: true,\n      value: null\n    });\n    /**\n     * Instance of {@link DisplaySwitch}.\n     *\n     * @private\n     * @type {DisplaySwitch}\n     */\n    _classPrivateFieldInitSpec(this, _displaySwitch, {\n      writable: true,\n      value: null\n    });\n    /**\n     * Prevents showing/hiding editor that reacts on the logic triggered by the \"mouseover\" events.\n     *\n     * @private\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _preventEditorAutoSwitch, {\n      writable: true,\n      value: false\n    });\n    /**\n     * Prevents hiding editor when the table viewport is scrolled and that scroll is triggered by the\n     * keyboard shortcut that insert or edits the comment.\n     *\n     * @private\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _preventEditorHiding, {\n      writable: true,\n      value: false\n    });\n    /**\n     * The property for holding editor dimensions for further processing.\n     *\n     * @private\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _tempEditorDimensions, {\n      writable: true,\n      value: {}\n    });\n    /**\n     * The flag that allows processing mousedown event correctly when comments editor is triggered.\n     *\n     * @private\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _cellBelowCursor, {\n      writable: true,\n      value: null\n    });\n    /**\n     * Holds the comment value before it's actually saved to the cell meta.\n     *\n     * @private\n     * @type {string}\n     */\n    _classPrivateFieldInitSpec(this, _commentValueBeforeSave, {\n      writable: true,\n      value: ''\n    });\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link Comments#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    if (!_classPrivateFieldGet(this, _editor)) {\n      _classPrivateFieldSet(this, _editor, new CommentEditor(this.hot.rootDocument, this.hot.isRtl()));\n    }\n    if (!this.eventManager) {\n      this.eventManager = new EventManager(this);\n    }\n    if (!_classPrivateFieldGet(this, _displaySwitch)) {\n      _classPrivateFieldSet(this, _displaySwitch, new DisplaySwitch(this.getDisplayDelaySetting()));\n    }\n    this.addHook('afterContextMenuDefaultOptions', options => this.addToContextMenu(options));\n    this.addHook('afterRenderer', (TD, row, col, prop, value, cellProperties) => this.onAfterRenderer(TD, cellProperties));\n    this.addHook('afterScroll', () => this.onAfterScroll());\n    this.addHook('afterBeginEditing', () => this.hide());\n    this.addHook('afterDocumentKeyDown', event => this.onAfterDocumentKeyDown(event));\n    _classPrivateFieldGet(this, _displaySwitch).addLocalHook('hide', () => this.hide());\n    _classPrivateFieldGet(this, _displaySwitch).addLocalHook('show', (row, col) => this.showAtCell(row, col));\n    this.registerShortcuts();\n    this.registerListeners();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *   - [`comments`](@/api/options.md#comments)\n   */\n  updatePlugin() {\n    _classPrivateFieldGet(this, _displaySwitch).updateDelay(this.getDisplayDelaySetting());\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.unregisterShortcuts();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling context menu.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    const manager = this.hot.getShortcutManager();\n    const gridContext = manager.getContext('grid');\n    const pluginContext = manager.addContext(SHORTCUTS_CONTEXT_NAME);\n    gridContext.addShortcut({\n      keys: [['Control', 'Alt', 'M']],\n      callback: () => {\n        const range = this.hot.getSelectedRangeLast();\n        _classPrivateFieldSet(this, _preventEditorHiding, true);\n        this.hot.scrollToFocusedCell(() => {\n          this.setRange(range);\n          this.show();\n          this.focusEditor();\n          manager.setActiveContextName(SHORTCUTS_CONTEXT_NAME);\n          this.hot._registerTimeout(() => {\n            _classPrivateFieldSet(this, _preventEditorHiding, false);\n          });\n        });\n      },\n      stopPropagation: true,\n      runOnlyIf: () => {\n        var _this$hot$getSelected;\n        return ((_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight.isCell()) && !_classPrivateFieldGet(this, _editor).isVisible();\n      },\n      group: SHORTCUTS_GROUP\n    });\n    pluginContext.addShortcut({\n      keys: [['Escape']],\n      callback: () => {\n        _classPrivateFieldGet(this, _editor).setValue(_classPrivateFieldGet(this, _commentValueBeforeSave));\n        this.hide();\n        manager.setActiveContextName('grid');\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected2;\n        return ((_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.highlight.isCell()) && _classPrivateFieldGet(this, _editor).isVisible();\n      },\n      group: SHORTCUTS_GROUP\n    });\n    pluginContext.addShortcut({\n      keys: [['Control/Meta', 'Enter']],\n      callback: () => {\n        this.hide();\n        manager.setActiveContextName('grid');\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected3;\n        return ((_this$hot$getSelected3 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected3 === void 0 ? void 0 : _this$hot$getSelected3.highlight.isCell()) && _classPrivateFieldGet(this, _editor).isVisible();\n      },\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling context menu.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Registers all necessary DOM listeners.\n   *\n   * @private\n   */\n  registerListeners() {\n    const {\n      rootDocument\n    } = this.hot;\n    const editorElement = this.getEditorInputElement();\n    this.eventManager.addEventListener(rootDocument, 'mouseover', event => this.onMouseOver(event));\n    this.eventManager.addEventListener(rootDocument, 'mousedown', event => this.onMouseDown(event));\n    this.eventManager.addEventListener(rootDocument, 'mouseup', () => this.onMouseUp());\n    this.eventManager.addEventListener(editorElement, 'focus', () => this.onEditorFocus());\n    this.eventManager.addEventListener(editorElement, 'blur', () => this.onEditorBlur());\n    this.eventManager.addEventListener(editorElement, 'mousedown', event => this.onEditorMouseDown(event));\n    this.eventManager.addEventListener(editorElement, 'mouseup', event => this.onEditorMouseUp(event));\n  }\n\n  /**\n   * Sets the current cell range to be able to use general methods like {@link Comments#setComment}, {@link Comments#removeComment}, {@link Comments#show}.\n   *\n   * @param {object} range Object with `from` property, each with `row` and `col` properties.\n   */\n  setRange(range) {\n    this.range = range;\n  }\n\n  /**\n   * Clears the currently selected cell.\n   */\n  clearRange() {\n    this.range = {};\n  }\n\n  /**\n   * Checks if the event target is a cell containing a comment.\n   *\n   * @private\n   * @param {Event} event DOM event.\n   * @returns {boolean}\n   */\n  targetIsCellWithComment(event) {\n    const closestCell = closest(event.target, 'TD', 'TBODY');\n    return !!(closestCell && hasClass(closestCell, 'htCommentCell') && closest(closestCell, [this.hot.rootElement]));\n  }\n\n  /**\n   * Checks if the event target is a comment textarea.\n   *\n   * @private\n   * @param {Event} event DOM event.\n   * @returns {boolean}\n   */\n  targetIsCommentTextArea(event) {\n    return this.getEditorInputElement() === event.target;\n  }\n\n  /**\n   * Sets a comment for a cell according to the previously set range (see {@link Comments#setRange}).\n   *\n   * @param {string} value Comment contents.\n   */\n  setComment(value) {\n    if (!this.range.from) {\n      throw new Error('Before using this method, first set cell range (hot.getPlugin(\"comment\").setRange())');\n    }\n    const editorValue = _classPrivateFieldGet(this, _editor).getValue();\n    let comment = '';\n    if (value !== null && value !== void 0) {\n      comment = value;\n    } else if (editorValue !== null && editorValue !== void 0) {\n      comment = editorValue;\n    }\n    const row = this.range.from.row;\n    const col = this.range.from.col;\n    this.updateCommentMeta(row, col, {\n      [META_COMMENT_VALUE]: comment\n    });\n    this.hot.render();\n  }\n\n  /**\n   * Sets a comment for a specified cell.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} value Comment contents.\n   */\n  setCommentAtCell(row, column, value) {\n    this.setRange({\n      from: this.hot._createCellCoords(row, column)\n    });\n    this.setComment(value);\n  }\n\n  /**\n   * Removes a comment from a cell according to previously set range (see {@link Comments#setRange}).\n   *\n   * @param {boolean} [forceRender=true] If set to `true`, the table will be re-rendered at the end of the operation.\n   */\n  removeComment() {\n    let forceRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (!this.range.from) {\n      throw new Error('Before using this method, first set cell range (hot.getPlugin(\"comment\").setRange())');\n    }\n    this.hot.setCellMeta(this.range.from.row, this.range.from.col, META_COMMENT);\n    if (forceRender) {\n      this.hot.render();\n    }\n    this.hide();\n  }\n\n  /**\n   * Removes a comment from a specified cell.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {boolean} [forceRender=true] If `true`, the table will be re-rendered at the end of the operation.\n   */\n  removeCommentAtCell(row, column) {\n    let forceRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    this.setRange({\n      from: this.hot._createCellCoords(row, column)\n    });\n    this.removeComment(forceRender);\n  }\n\n  /**\n   * Gets comment from a cell according to previously set range (see {@link Comments#setRange}).\n   *\n   * @returns {string|undefined} Returns a content of the comment.\n   */\n  getComment() {\n    const row = this.range.from.row;\n    const column = this.range.from.col;\n    return this.getCommentMeta(row, column, META_COMMENT_VALUE);\n  }\n\n  /**\n   * Gets comment from a cell at the provided coordinates.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {string|undefined} Returns a content of the comment.\n   */\n  getCommentAtCell(row, column) {\n    return this.getCommentMeta(row, column, META_COMMENT_VALUE);\n  }\n\n  /**\n   * Shows the comment editor accordingly to the previously set range (see {@link Comments#setRange}).\n   *\n   * @returns {boolean} Returns `true` if comment editor was shown.\n   */\n  show() {\n    var _ref;\n    if (!this.range.from) {\n      throw new Error('Before using this method, first set cell range (hot.getPlugin(\"comment\").setRange())');\n    }\n    const {\n      from: {\n        row,\n        col\n      }\n    } = this.range;\n    if (row < 0 || row > this.hot.countSourceRows() - 1 || col < 0 || col > this.hot.countSourceCols() - 1) {\n      return false;\n    }\n    const meta = this.hot.getCellMeta(this.range.from.row, this.range.from.col);\n    _classPrivateFieldGet(this, _displaySwitch).cancelHiding();\n    _classPrivateFieldGet(this, _editor).setValue((_ref = meta[META_COMMENT] ? meta[META_COMMENT][META_COMMENT_VALUE] : null) !== null && _ref !== void 0 ? _ref : '');\n    _classPrivateFieldGet(this, _editor).show();\n    this.refreshEditor(true);\n    return true;\n  }\n\n  /**\n   * Shows comment editor according to cell coordinates.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {boolean} Returns `true` if comment editor was shown.\n   */\n  showAtCell(row, column) {\n    this.setRange({\n      from: this.hot._createCellCoords(row, column)\n    });\n    return this.show();\n  }\n\n  /**\n   * Hides the comment editor.\n   */\n  hide() {\n    _classPrivateFieldGet(this, _editor).hide();\n  }\n\n  /**\n   * Refreshes comment editor position and styling.\n   *\n   * @param {boolean} [force=false] If `true` then recalculation will be forced.\n   */\n  refreshEditor() {\n    var _renderableRow, _renderableColumn;\n    let force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!force && (!this.range.from || !_classPrivateFieldGet(this, _editor).isVisible())) {\n      return;\n    }\n    const {\n      rowIndexMapper,\n      columnIndexMapper\n    } = this.hot;\n    const {\n      row: visualRow,\n      col: visualColumn\n    } = this.range.from;\n    let renderableRow = rowIndexMapper.getRenderableFromVisualIndex(visualRow);\n    let renderableColumn = columnIndexMapper.getRenderableFromVisualIndex(visualColumn);\n    // Used when the requested row is hidden, and the editor needs to be positioned on the previous row's coords.\n    const targetingPreviousRow = renderableRow === null;\n\n    // Reset the editor position to (0, 0) so the opening direction calculation wouldn't be influenced by its\n    // previous position\n    _classPrivateFieldGet(this, _editor).setPosition(0, 0);\n    if (renderableRow === null) {\n      renderableRow = rowIndexMapper.getRenderableFromVisualIndex(rowIndexMapper.getNearestNotHiddenIndex(visualRow, -1));\n    }\n    if (renderableColumn === null) {\n      renderableColumn = columnIndexMapper.getRenderableFromVisualIndex(columnIndexMapper.getNearestNotHiddenIndex(visualColumn, -1));\n    }\n    const isBeforeRenderedRows = renderableRow === null;\n    const isBeforeRenderedColumns = renderableColumn === null;\n    renderableRow = (_renderableRow = renderableRow) !== null && _renderableRow !== void 0 ? _renderableRow : 0;\n    renderableColumn = (_renderableColumn = renderableColumn) !== null && _renderableColumn !== void 0 ? _renderableColumn : 0;\n    const {\n      rootWindow,\n      view: {\n        _wt: wt\n      }\n    } = this.hot;\n    const {\n      wtTable\n    } = wt;\n    // TODO: Probably using `hot.getCell` would be the best. However, case for showing comment editor for hidden cell\n    // potentially should be removed with that change (currently a test for it is passing).\n    const TD = wt.getCell({\n      row: renderableRow,\n      col: renderableColumn\n    }, true);\n    const commentStyle = this.getCommentMeta(visualRow, visualColumn, META_STYLE);\n    if (commentStyle) {\n      _classPrivateFieldGet(this, _editor).setSize(commentStyle.width, commentStyle.height);\n    } else {\n      _classPrivateFieldGet(this, _editor).resetSize();\n    }\n    const lastColWidth = isBeforeRenderedColumns ? 0 : wtTable.getStretchedColumnWidth(renderableColumn);\n    const lastRowHeight = targetingPreviousRow && !isBeforeRenderedRows ? outerHeight(TD) : 0;\n    const {\n      left,\n      top,\n      width: cellWidth,\n      height: cellHeight\n    } = TD.getBoundingClientRect();\n    const {\n      width: editorWidth,\n      height: editorHeight\n    } = _classPrivateFieldGet(this, _editor).getSize();\n    const {\n      innerWidth,\n      innerHeight\n    } = this.hot.rootWindow;\n    const documentElement = this.hot.rootDocument.documentElement;\n    let x = left + rootWindow.scrollX + lastColWidth;\n    let y = top + rootWindow.scrollY + lastRowHeight;\n    if (this.hot.isRtl()) {\n      x -= editorWidth + lastColWidth;\n    }\n\n    // flip to the right or left the comments editor position when it goes out of browser viewport\n    if (this.hot.isLtr() && left + cellWidth + editorWidth > innerWidth) {\n      x = left + rootWindow.scrollX - editorWidth - 1;\n    } else if (this.hot.isRtl() && x < -(documentElement.scrollWidth - documentElement.clientWidth)) {\n      x = left + rootWindow.scrollX + lastColWidth + 1;\n    }\n    if (top + editorHeight > innerHeight) {\n      y -= editorHeight - cellHeight + 1;\n    }\n    _classPrivateFieldGet(this, _editor).setPosition(x, y);\n    _classPrivateFieldGet(this, _editor).setReadOnlyState(this.getCommentMeta(visualRow, visualColumn, META_READONLY));\n  }\n\n  /**\n   * Focuses the comments editor element.\n   */\n  focusEditor() {\n    _classPrivateFieldGet(this, _editor).focus();\n  }\n\n  /**\n   * Sets or update the comment-related cell meta.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {object} metaObject Object defining all the comment-related meta information.\n   */\n  updateCommentMeta(row, column, metaObject) {\n    const oldComment = this.hot.getCellMeta(row, column)[META_COMMENT];\n    let newComment;\n    if (oldComment) {\n      newComment = deepClone(oldComment);\n      deepExtend(newComment, metaObject);\n    } else {\n      newComment = metaObject;\n    }\n    this.hot.setCellMeta(row, column, META_COMMENT, newComment);\n  }\n\n  /**\n   * Gets the comment related meta information.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} property Cell meta property.\n   * @returns {Mixed}\n   */\n  getCommentMeta(row, column, property) {\n    const cellMeta = this.hot.getCellMeta(row, column);\n    if (!cellMeta[META_COMMENT]) {\n      return void 0;\n    }\n    return cellMeta[META_COMMENT][property];\n  }\n\n  /**\n   * `mousedown` event callback.\n   *\n   * @private\n   * @param {MouseEvent} event The `mousedown` event.\n   */\n  onMouseDown(event) {\n    if (!this.hot.view || !this.hot.view._wt) {\n      return;\n    }\n    if (!_classPrivateFieldGet(this, _preventEditorAutoSwitch) && !this.targetIsCommentTextArea(event)) {\n      const eventCell = closest(event.target, 'TD', 'TBODY');\n      let coordinates = null;\n      if (eventCell) {\n        coordinates = this.hot.getCoords(eventCell);\n      }\n      if (!eventCell || this.range.from && coordinates && (this.range.from.row !== coordinates.row || this.range.from.col !== coordinates.col)) {\n        this.hide();\n      }\n    }\n  }\n\n  /**\n   * `mouseover` event callback.\n   *\n   * @private\n   * @param {MouseEvent} event The `mouseover` event.\n   */\n  onMouseOver(event) {\n    const {\n      rootDocument\n    } = this.hot;\n    if (_classPrivateFieldGet(this, _preventEditorAutoSwitch) || _classPrivateFieldGet(this, _editor).isFocused() || hasClass(event.target, 'wtBorder') || _classPrivateFieldGet(this, _cellBelowCursor) === event.target || !_classPrivateFieldGet(this, _editor)) {\n      return;\n    }\n    _classPrivateFieldSet(this, _cellBelowCursor, rootDocument.elementFromPoint(event.clientX, event.clientY));\n    if (this.targetIsCellWithComment(event)) {\n      const range = this.hot._createCellRange(this.hot.getCoords(event.target));\n      _classPrivateFieldGet(this, _displaySwitch).show(range);\n    } else if (isChildOf(event.target, rootDocument) && !this.targetIsCommentTextArea(event)) {\n      _classPrivateFieldGet(this, _displaySwitch).hide();\n    }\n  }\n\n  /**\n   * `mouseup` event callback.\n   *\n   * @private\n   */\n  onMouseUp() {\n    _classPrivateFieldSet(this, _preventEditorAutoSwitch, false);\n  }\n\n  /**\n   * The `afterRenderer` hook callback.\n   *\n   * @private\n   * @param {HTMLTableCellElement} TD The rendered `TD` element.\n   * @param {object} cellProperties The rendered cell's property object.\n   */\n  onAfterRenderer(TD, cellProperties) {\n    if (cellProperties[META_COMMENT] && cellProperties[META_COMMENT][META_COMMENT_VALUE]) {\n      addClass(TD, cellProperties.commentedCellClassName);\n    }\n  }\n\n  /**\n   * Hook observer the \"blur\" event from the comments editor element. The hook clears the\n   * editor content and gives back the keyboard shortcuts control by switching to the \"grid\" context.\n   *\n   * @private\n   */\n  onEditorBlur() {\n    _classPrivateFieldSet(this, _commentValueBeforeSave, '');\n    this.hot.getShortcutManager().setActiveContextName('grid');\n    this.setComment();\n  }\n\n  /**\n   * Hook observer the \"focus\" event from the comments editor element. The hook takes the control of\n   * the keyboard shortcuts by switching the context to plugins one.\n   *\n   * @private\n   */\n  onEditorFocus() {\n    _classPrivateFieldSet(this, _commentValueBeforeSave, this.getComment());\n    this.hot.listen();\n    this.hot.getShortcutManager().setActiveContextName(SHORTCUTS_CONTEXT_NAME);\n  }\n\n  /**\n   * `mousedown` hook. Along with `onEditorMouseUp` used to simulate the textarea resizing event.\n   *\n   * @private\n   * @param {MouseEvent} event The `mousedown` event.\n   */\n  onEditorMouseDown(event) {\n    _classPrivateFieldSet(this, _tempEditorDimensions, {\n      width: outerWidth(event.target),\n      height: outerHeight(event.target)\n    });\n  }\n\n  /**\n   * `mouseup` hook. Along with `onEditorMouseDown` used to simulate the textarea resizing event.\n   *\n   * @private\n   * @param {MouseEvent} event The `mouseup` event.\n   */\n  onEditorMouseUp(event) {\n    const currentWidth = outerWidth(event.target);\n    const currentHeight = outerHeight(event.target);\n    if (currentWidth !== _classPrivateFieldGet(this, _tempEditorDimensions).width + 1 || currentHeight !== _classPrivateFieldGet(this, _tempEditorDimensions).height + 2) {\n      this.updateCommentMeta(this.range.from.row, this.range.from.col, {\n        [META_STYLE]: {\n          width: currentWidth,\n          height: currentHeight\n        }\n      });\n    }\n  }\n\n  /**\n   * Observes the pressed keys and if there is already opened the comment editor prevents open\n   * the table editor into the fast edit mode.\n   *\n   * @param {Event} event The keydown event.\n   */\n  onAfterDocumentKeyDown(event) {\n    if (_classPrivateFieldGet(this, _editor).isVisible()) {\n      stopImmediatePropagation(event);\n    }\n  }\n\n  /**\n   * Observes the changes in the scroll position if triggered it hides the comment editor.\n   */\n  onAfterScroll() {\n    if (!_classPrivateFieldGet(this, _preventEditorHiding)) {\n      this.hide();\n    }\n  }\n\n  /**\n   * Add Comments plugin options to the Context Menu.\n   *\n   * @private\n   * @param {object} options The menu options.\n   */\n  addToContextMenu(options) {\n    options.items.push({\n      name: SEPARATOR\n    }, addEditCommentItem(this), removeCommentItem(this), readOnlyCommentItem(this));\n  }\n\n  /**\n   * Get `displayDelay` setting of comment plugin.\n   *\n   * @private\n   * @returns {number|undefined}\n   */\n  getDisplayDelaySetting() {\n    const commentSetting = this.hot.getSettings()[PLUGIN_KEY];\n    if (isObject(commentSetting)) {\n      return commentSetting.displayDelay;\n    }\n  }\n\n  /**\n   * Gets the editors input element.\n   *\n   * @private\n   * @returns {HTMLTextAreaElement}\n   */\n  getEditorInputElement() {\n    return _classPrivateFieldGet(this, _editor).getInputElement();\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    if (_classPrivateFieldGet(this, _editor)) {\n      _classPrivateFieldGet(this, _editor).destroy();\n    }\n    if (_classPrivateFieldGet(this, _displaySwitch)) {\n      _classPrivateFieldGet(this, _displaySwitch).destroy();\n    }\n    super.destroy();\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.unshift.js\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { hasOwnProperty } from \"../../helpers/object.mjs\";\n/**\n * Command executor for ContextMenu.\n *\n * @private\n * @class CommandExecutor\n */\nexport class CommandExecutor {\n  constructor(hotInstance) {\n    this.hot = hotInstance;\n    this.commands = {};\n    this.commonCallback = null;\n  }\n\n  /**\n   * Register command.\n   *\n   * @param {string} name Command name.\n   * @param {object} commandDescriptor Command descriptor object with properties like `key` (command id),\n   *                                   `callback` (task to execute), `name` (command name), `disabled` (command availability).\n   */\n  registerCommand(name, commandDescriptor) {\n    this.commands[name] = commandDescriptor;\n  }\n\n  /**\n   * Set common callback which will be trigger on every executed command.\n   *\n   * @param {Function} callback Function which will be fired on every command execute.\n   */\n  setCommonCallback(callback) {\n    this.commonCallback = callback;\n  }\n\n  /**\n   * Execute command by its name.\n   *\n   * @param {string} commandName Command id.\n   * @param {*} params Arguments passed to command task.\n   */\n  execute(commandName) {\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n    const commandSplit = commandName.split(':');\n    const commandNamePrimary = commandSplit[0];\n    const subCommandName = commandSplit.length === 2 ? commandSplit[1] : null;\n    let command = this.commands[commandNamePrimary];\n    if (!command) {\n      throw new Error(`Menu command '${commandNamePrimary}' not exists.`);\n    }\n    if (subCommandName && command.submenu) {\n      command = findSubCommand(subCommandName, command.submenu.items);\n    }\n    if (command.disabled === true) {\n      return;\n    }\n    if (typeof command.disabled === 'function' && command.disabled.call(this.hot) === true) {\n      return;\n    }\n    if (hasOwnProperty(command, 'submenu')) {\n      return;\n    }\n    const callbacks = [];\n    if (typeof command.callback === 'function') {\n      callbacks.push(command.callback);\n    }\n    if (typeof this.commonCallback === 'function') {\n      callbacks.push(this.commonCallback);\n    }\n    params.unshift(commandSplit.join(':'));\n    arrayEach(callbacks, callback => callback.apply(this.hot, params));\n  }\n}\n\n/**\n * @param {string} subCommandName The subcommand name.\n * @param {string[]} subCommands The collection of the commands.\n * @returns {boolean}\n */\nfunction findSubCommand(subCommandName, subCommands) {\n  let command;\n  arrayEach(subCommands, cmd => {\n    const cmds = cmd.key ? cmd.key.split(':') : null;\n    if (Array.isArray(cmds) && cmds[1] === subCommandName) {\n      command = cmd;\n      return false;\n    }\n  });\n  return command;\n}","import { align, getAlignmentClasses, checkSelectionConsistency, markLabelAsSelected } from \"../utils.mjs\";\nimport { KEY as SEPARATOR } from \"./separator.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'alignment';\n\n/**\n * @returns {object}\n */\nexport default function alignmentItem() {\n  return {\n    key: KEY,\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT);\n    },\n    disabled() {\n      if (this.countRows() === 0 || this.countCols() === 0) {\n        return true;\n      }\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader()) {\n        return true;\n      }\n      return !(this.getSelectedRange() && !this.selection.isSelectedByCorner());\n    },\n    submenu: {\n      items: [{\n        key: `${KEY}:left`,\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_LEFT);\n          const hasClass = checkSelectionConsistency(this.getSelectedRange(), (row, col) => {\n            const className = this.getCellMeta(row, col).className;\n            if (className && className.indexOf('htLeft') !== -1) {\n              return true;\n            }\n          });\n          if (hasClass) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'horizontal';\n          const alignment = 'htLeft';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:center`,\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_CENTER);\n          const hasClass = checkSelectionConsistency(this.getSelectedRange(), (row, col) => {\n            const className = this.getCellMeta(row, col).className;\n            if (className && className.indexOf('htCenter') !== -1) {\n              return true;\n            }\n          });\n          if (hasClass) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'horizontal';\n          const alignment = 'htCenter';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:right`,\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT);\n          const hasClass = checkSelectionConsistency(this.getSelectedRange(), (row, col) => {\n            const className = this.getCellMeta(row, col).className;\n            if (className && className.indexOf('htRight') !== -1) {\n              return true;\n            }\n          });\n          if (hasClass) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'horizontal';\n          const alignment = 'htRight';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:justify`,\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY);\n          const hasClass = checkSelectionConsistency(this.getSelectedRange(), (row, col) => {\n            const className = this.getCellMeta(row, col).className;\n            if (className && className.indexOf('htJustify') !== -1) {\n              return true;\n            }\n          });\n          if (hasClass) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'horizontal';\n          const alignment = 'htJustify';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        name: SEPARATOR\n      }, {\n        key: `${KEY}:top`,\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_TOP);\n          const hasClass = checkSelectionConsistency(this.getSelectedRange(), (row, col) => {\n            const className = this.getCellMeta(row, col).className;\n            if (className && className.indexOf('htTop') !== -1) {\n              return true;\n            }\n          });\n          if (hasClass) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'vertical';\n          const alignment = 'htTop';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:middle`,\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE);\n          const hasClass = checkSelectionConsistency(this.getSelectedRange(), (row, col) => {\n            const className = this.getCellMeta(row, col).className;\n            if (className && className.indexOf('htMiddle') !== -1) {\n              return true;\n            }\n          });\n          if (hasClass) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'vertical';\n          const alignment = 'htMiddle';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }, {\n        key: `${KEY}:bottom`,\n        name() {\n          let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM);\n          const hasClass = checkSelectionConsistency(this.getSelectedRange(), (row, col) => {\n            const className = this.getCellMeta(row, col).className;\n            if (className && className.indexOf('htBottom') !== -1) {\n              return true;\n            }\n          });\n          if (hasClass) {\n            label = markLabelAsSelected(label);\n          }\n          return label;\n        },\n        callback() {\n          const selectedRange = this.getSelectedRange();\n          const stateBefore = getAlignmentClasses(selectedRange, (row, col) => this.getCellMeta(row, col).className);\n          const type = 'vertical';\n          const alignment = 'htBottom';\n          this.runHooks('beforeCellAlignment', stateBefore, selectedRange, type, alignment);\n          align(selectedRange, type, alignment, (row, col) => this.getCellMeta(row, col), (row, col, key, value) => this.setCellMeta(row, col, key, value));\n          this.render();\n        },\n        disabled: false\n      }]\n    }\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'clear_column';\n\n/**\n * @returns {object}\n */\nexport default function clearColumnItem() {\n  return {\n    key: KEY,\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_CLEAR_COLUMN);\n    },\n    callback(key, selection) {\n      const startColumn = selection[0].start.col;\n      const endColumn = selection[0].end.col;\n      if (this.countRows()) {\n        this.populateFromArray(0, startColumn, [[null]], Math.max(selection[0].start.row, selection[0].end.row), endColumn, 'ContextMenu.clearColumn');\n      }\n    },\n    disabled() {\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader() && range.highlight.col < 0) {\n        return true;\n      }\n      return !this.selection.isSelectedByColumnHeader();\n    }\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'col_left';\n\n/**\n * @returns {object}\n */\nexport default function columnLeftItem() {\n  return {\n    key: KEY,\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_INSERT_LEFT);\n    },\n    callback() {\n      const latestSelection = this.getSelectedRangeLast().getTopLeftCorner();\n      const alterAction = this.isRtl() ? 'insert_col_end' : 'insert_col_start';\n      this.alter(alterAction, latestSelection.col, 1, 'ContextMenu.columnLeft');\n    },\n    disabled() {\n      if (!this.isColumnModificationAllowed()) {\n        return true;\n      }\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader() && range.highlight.col < 0) {\n        return true;\n      }\n      if (this.selection.isSelectedByCorner()) {\n        const totalColumns = this.countCols();\n\n        // Enable \"Insert column left\" only when there is at least one column.\n        return totalColumns === 0;\n      }\n      return this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;\n    },\n    hidden() {\n      return !this.getSettings().allowInsertColumn;\n    }\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'col_right';\n\n/**\n * @returns {object}\n */\nexport default function columnRightItem() {\n  return {\n    key: KEY,\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_INSERT_RIGHT);\n    },\n    callback() {\n      const latestSelection = this.getSelectedRangeLast().getTopRightCorner();\n      const alterAction = this.isRtl() ? 'insert_col_start' : 'insert_col_end';\n      this.alter(alterAction, latestSelection.col, 1, 'ContextMenu.columnRight');\n    },\n    disabled() {\n      if (!this.isColumnModificationAllowed()) {\n        return true;\n      }\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader() && range.highlight.col < 0) {\n        return true;\n      }\n      if (this.selection.isSelectedByCorner()) {\n        // Enable \"Insert column right\" always when the menu is triggered by corner click.\n        return false;\n      }\n      return this.selection.isSelectedByRowHeader() || this.countCols() >= this.getSettings().maxCols;\n    },\n    hidden() {\n      return !this.getSettings().allowInsertColumn;\n    }\n  };\n}","import { checkSelectionConsistency, markLabelAsSelected } from \"../utils.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'make_read_only';\n\n/**\n * @returns {object}\n */\nexport default function readOnlyItem() {\n  return {\n    key: KEY,\n    name() {\n      let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_READ_ONLY);\n      const atLeastOneReadOnly = checkSelectionConsistency(this.getSelectedRange(), (row, col) => this.getCellMeta(row, col).readOnly);\n      if (atLeastOneReadOnly) {\n        label = markLabelAsSelected(label);\n      }\n      return label;\n    },\n    callback() {\n      const ranges = this.getSelectedRange();\n      const atLeastOneReadOnly = checkSelectionConsistency(ranges, (row, col) => this.getCellMeta(row, col).readOnly);\n      arrayEach(ranges, range => {\n        range.forAll((row, col) => {\n          if (row >= 0 && col >= 0) {\n            this.setCellMeta(row, col, 'readOnly', !atLeastOneReadOnly);\n          }\n        });\n      });\n      this.render();\n    },\n    disabled() {\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader()) {\n        return true;\n      }\n      if (this.selection.isSelectedByCorner()) {\n        return true;\n      }\n      if (this.countRows() === 0 || this.countCols() === 0) {\n        return true;\n      }\n      if (!this.getSelectedRange() || this.getSelectedRange().length === 0) {\n        return true;\n      }\n      return false;\n    }\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'redo';\n\n/**\n * @returns {object}\n */\nexport default function redoItem() {\n  return {\n    key: KEY,\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_REDO);\n    },\n    callback() {\n      this.redo();\n    },\n    hidden() {\n      const undoRedo = this.getPlugin('undoRedo');\n      return !undoRedo || !undoRedo.isEnabled();\n    },\n    disabled() {\n      return !this.getPlugin('undoRedo').isRedoAvailable();\n    }\n  };\n}","import { transformSelectionToColumnDistance } from \"../../../selection/utils.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'remove_col';\n\n/**\n * @returns {object}\n */\nexport default function removeColumnItem() {\n  return {\n    key: KEY,\n    name() {\n      const selection = this.getSelected();\n      let pluralForm = 0;\n      if (selection) {\n        if (selection.length > 1) {\n          pluralForm = 1;\n        } else {\n          const [, fromColumn,, toColumn] = selection[0];\n          if (fromColumn - toColumn !== 0) {\n            pluralForm = 1;\n          }\n        }\n      }\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_REMOVE_COLUMN, pluralForm);\n    },\n    callback() {\n      this.alter('remove_col', transformSelectionToColumnDistance(this.getSelected()), null, 'ContextMenu.removeColumn');\n    },\n    disabled() {\n      if (!this.isColumnModificationAllowed()) {\n        return true;\n      }\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader() && range.highlight.col < 0) {\n        return true;\n      }\n      const totalColumns = this.countCols();\n      if (this.selection.isSelectedByCorner()) {\n        // Enable \"Remove column\" only when there is at least one column.\n        return totalColumns === 0;\n      }\n      return this.selection.isSelectedByRowHeader() || totalColumns === 0;\n    },\n    hidden() {\n      return !this.getSettings().allowRemoveColumn;\n    }\n  };\n}","import { transformSelectionToRowDistance } from \"../../../selection/utils.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'remove_row';\n\n/**\n * @returns {object}\n */\nexport default function removeRowItem() {\n  return {\n    key: KEY,\n    name() {\n      const selection = this.getSelected();\n      let pluralForm = 0;\n      if (selection) {\n        if (selection.length > 1) {\n          pluralForm = 1;\n        } else {\n          const [fromRow,, toRow] = selection[0];\n          if (fromRow - toRow !== 0) {\n            pluralForm = 1;\n          }\n        }\n      }\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_REMOVE_ROW, pluralForm);\n    },\n    callback() {\n      // TODO: Please keep in mind that below `1` may be improper. The table's way of work, before change `f1747b3912ea3b21fe423fd102ca94c87db81379` was restored.\n      // There is still problem when removing more than one row.\n      this.alter('remove_row', transformSelectionToRowDistance(this.getSelected()), 1, 'ContextMenu.removeRow');\n    },\n    disabled() {\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader() && range.highlight.row < 0) {\n        return true;\n      }\n      const totalRows = this.countRows();\n      if (this.selection.isSelectedByCorner()) {\n        // Enable \"Remove row\" only when there is at least one row.\n        return totalRows === 0;\n      }\n      return this.selection.isSelectedByColumnHeader() || totalRows === 0;\n    },\n    hidden() {\n      return !this.getSettings().allowRemoveRow;\n    }\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'row_above';\n\n/**\n * @returns {object}\n */\nexport default function rowAboveItem() {\n  return {\n    key: KEY,\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ROW_ABOVE);\n    },\n    callback() {\n      const latestSelection = this.getSelectedRangeLast().getTopLeftCorner();\n      this.alter('insert_row_above', latestSelection.row, 1, 'ContextMenu.rowAbove');\n    },\n    disabled() {\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader() && range.highlight.row < 0) {\n        return true;\n      }\n      if (this.selection.isSelectedByCorner()) {\n        const totalRows = this.countRows();\n\n        // Enable \"Insert row above\" only when there is at least one row.\n        return totalRows === 0;\n      }\n      return this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows;\n    },\n    hidden() {\n      return !this.getSettings().allowInsertRow;\n    }\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'row_below';\n\n/**\n * @returns {object}\n */\nexport default function rowBelowItem() {\n  return {\n    key: KEY,\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_ROW_BELOW);\n    },\n    callback() {\n      const latestSelection = this.getSelectedRangeLast().getBottomRightCorner();\n      this.alter('insert_row_below', latestSelection.row, 1, 'ContextMenu.rowBelow');\n    },\n    disabled() {\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader() && range.highlight.row < 0) {\n        return true;\n      }\n      if (this.selection.isSelectedByCorner()) {\n        // Enable \"Insert row below\" always when the menu is triggered by corner click.\n        return false;\n      }\n      return this.selection.isSelectedByColumnHeader() || this.countRows() >= this.getSettings().maxRows;\n    },\n    hidden() {\n      return !this.getSettings().allowInsertRow;\n    }\n  };\n}","import { CONTEXTMENU_ITEMS_NO_ITEMS } from \"../../../i18n/constants.mjs\";\nexport const KEY = 'no_items';\n\n/**\n * @returns {object}\n */\nexport default function noItemsItem() {\n  return {\n    key: KEY,\n    name() {\n      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_NO_ITEMS);\n    },\n    disabled: true,\n    isCommand: false\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nexport const KEY = 'undo';\n\n/**\n * @returns {object}\n */\nexport default function undoItem() {\n  return {\n    key: KEY,\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_UNDO);\n    },\n    callback() {\n      this.undo();\n    },\n    hidden() {\n      const undoRedo = this.getPlugin('undoRedo');\n      return !undoRedo || !undoRedo.isEnabled();\n    },\n    disabled() {\n      return !this.getPlugin('undoRedo').isUndoAvailable();\n    }\n  };\n}","import { objectEach } from \"../../../helpers/object.mjs\";\nimport alignmentItem, { KEY as ALIGNMENT } from \"./alignment.mjs\";\nimport clearColumnItem, { KEY as CLEAR_COLUMN } from \"./clearColumn.mjs\";\nimport columnLeftItem, { KEY as COLUMN_LEFT } from \"./columnLeft.mjs\";\nimport columnRightItem, { KEY as COLUMN_RIGHT } from \"./columnRight.mjs\";\nimport readOnlyItem, { KEY as READ_ONLY } from \"./readOnly.mjs\";\nimport redoItem, { KEY as REDO } from \"./redo.mjs\";\nimport removeColumnItem, { KEY as REMOVE_COLUMN } from \"./removeColumn.mjs\";\nimport removeRowItem, { KEY as REMOVE_ROW } from \"./removeRow.mjs\";\nimport rowAboveItem, { KEY as ROW_ABOVE } from \"./rowAbove.mjs\";\nimport rowBelowItem, { KEY as ROW_BELOW } from \"./rowBelow.mjs\";\nimport separatorItem, { KEY as SEPARATOR } from \"./separator.mjs\";\nimport noItemsItem, { KEY as NO_ITEMS } from \"./noItems.mjs\";\nimport undoItem, { KEY as UNDO } from \"./undo.mjs\";\nexport { KEY as ALIGNMENT } from \"./alignment.mjs\";\nexport { KEY as CLEAR_COLUMN } from \"./clearColumn.mjs\";\nexport { KEY as COLUMN_LEFT } from \"./columnLeft.mjs\";\nexport { KEY as COLUMN_RIGHT } from \"./columnRight.mjs\";\nexport { KEY as READ_ONLY } from \"./readOnly.mjs\";\nexport { KEY as REDO } from \"./redo.mjs\";\nexport { KEY as REMOVE_COLUMN } from \"./removeColumn.mjs\";\nexport { KEY as REMOVE_ROW } from \"./removeRow.mjs\";\nexport { KEY as ROW_ABOVE } from \"./rowAbove.mjs\";\nexport { KEY as ROW_BELOW } from \"./rowBelow.mjs\";\nexport { KEY as SEPARATOR } from \"./separator.mjs\";\nexport { KEY as NO_ITEMS } from \"./noItems.mjs\";\nexport { KEY as UNDO } from \"./undo.mjs\";\nexport const ITEMS = [ROW_ABOVE, ROW_BELOW, COLUMN_LEFT, COLUMN_RIGHT, CLEAR_COLUMN, REMOVE_ROW, REMOVE_COLUMN, UNDO, REDO, READ_ONLY, ALIGNMENT, SEPARATOR, NO_ITEMS];\nconst _predefinedItems = {\n  [SEPARATOR]: separatorItem,\n  [NO_ITEMS]: noItemsItem,\n  [ROW_ABOVE]: rowAboveItem,\n  [ROW_BELOW]: rowBelowItem,\n  [COLUMN_LEFT]: columnLeftItem,\n  [COLUMN_RIGHT]: columnRightItem,\n  [CLEAR_COLUMN]: clearColumnItem,\n  [REMOVE_ROW]: removeRowItem,\n  [REMOVE_COLUMN]: removeColumnItem,\n  [UNDO]: undoItem,\n  [REDO]: redoItem,\n  [READ_ONLY]: readOnlyItem,\n  [ALIGNMENT]: alignmentItem\n};\n\n/**\n * Gets new object with all predefined menu items.\n *\n * @returns {object}\n */\nexport function predefinedItems() {\n  const items = {};\n  objectEach(_predefinedItems, (itemFactory, key) => {\n    items[key] = itemFactory();\n  });\n  return items;\n}\n\n/**\n * Add new predefined menu item to the collection.\n *\n * @param {string} key Menu command id.\n * @param {object} item Object command descriptor.\n */\nexport function addItem(key, item) {\n  if (ITEMS.indexOf(key) === -1) {\n    _predefinedItems[key] = item;\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { objectEach, isObject, extend } from \"../../helpers/object.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { SEPARATOR, ITEMS, predefinedItems } from \"./predefinedItems/index.mjs\";\n/**\n * Predefined items class factory for menu items.\n *\n * @private\n * @class ItemsFactory\n */\nexport class ItemsFactory {\n  constructor(hotInstance) {\n    let orderPattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.hot = hotInstance;\n    this.predefinedItems = predefinedItems();\n    this.defaultOrderPattern = orderPattern;\n  }\n\n  /**\n   * Set predefined items.\n   *\n   * @param {Array} predefinedItemsCollection Array of predefined items.\n   */\n  setPredefinedItems(predefinedItemsCollection) {\n    const items = {};\n    this.defaultOrderPattern.length = 0;\n    objectEach(predefinedItemsCollection, (value, key) => {\n      let menuItemKey = '';\n      if (value.name === SEPARATOR) {\n        items[SEPARATOR] = value;\n        menuItemKey = SEPARATOR;\n\n        // Menu item added as a property to array\n      } else if (isNaN(parseInt(key, 10))) {\n        value.key = value.key === void 0 ? key : value.key;\n        items[key] = value;\n        menuItemKey = value.key;\n      } else {\n        items[value.key] = value;\n        menuItemKey = value.key;\n      }\n      this.defaultOrderPattern.push(menuItemKey);\n    });\n    this.predefinedItems = items;\n  }\n\n  /**\n   * Get all menu items based on pattern.\n   *\n   * @param {Array|object|boolean} pattern Pattern which you can define by displaying menu items order. If `true` default\n   *                                       pattern will be used.\n   * @returns {Array}\n   */\n  getItems() {\n    let pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    return getItems(pattern, this.defaultOrderPattern, this.predefinedItems);\n  }\n}\n\n/**\n * @param {object[]} itemsPattern The user defined menu items collection.\n * @param {object[]} defaultPattern The menu default items collection.\n * @param {object} items Additional options.\n * @returns {object[]} Returns parsed and merged menu items collection ready to render.\n */\nfunction getItems() {\n  let itemsPattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  let defaultPattern = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let items = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const result = [];\n  let pattern = itemsPattern;\n  if (pattern && pattern.items) {\n    pattern = pattern.items;\n  } else if (!Array.isArray(pattern)) {\n    pattern = defaultPattern;\n  }\n  if (isObject(pattern)) {\n    objectEach(pattern, (value, key) => {\n      let item = items[typeof value === 'string' ? value : key];\n      if (!item) {\n        item = value;\n      }\n      if (isObject(value)) {\n        extend(item, value);\n      } else if (typeof item === 'string') {\n        item = {\n          name: item\n        };\n      }\n      if (item.key === void 0) {\n        item.key = key;\n      }\n      result.push(item);\n    });\n  } else {\n    arrayEach(pattern, (name, key) => {\n      let item = items[name];\n\n      // Item deleted from settings `allowInsertRow: false` etc.\n      if (!item && ITEMS.indexOf(name) >= 0) {\n        return;\n      }\n      if (!item) {\n        item = {\n          name,\n          key: `${key}`\n        };\n      }\n      if (isObject(name)) {\n        extend(item, name);\n      }\n      if (item.key === void 0) {\n        item.key = key;\n      }\n      result.push(item);\n    });\n  }\n  return result;\n}","/**\n * Helper class for checking if element will fit at the desired side of cursor.\n *\n * @private\n * @class Cursor\n */\nexport class Cursor {\n  constructor(object, rootWindow) {\n    const windowScrollTop = rootWindow.scrollY;\n    const windowScrollLeft = rootWindow.scrollX;\n    let top;\n    let topRelative;\n    let left;\n    let leftRelative;\n    let cellHeight;\n    let cellWidth;\n    this.rootWindow = rootWindow;\n    this.type = this.getSourceType(object);\n    if (this.type === 'literal') {\n      top = parseInt(object.top, 10);\n      left = parseInt(object.left, 10);\n      cellHeight = object.height || 0;\n      cellWidth = object.width || 0;\n      topRelative = top;\n      leftRelative = left;\n      top += windowScrollTop;\n      left += windowScrollLeft;\n    } else if (this.type === 'event') {\n      top = parseInt(object.pageY, 10);\n      left = parseInt(object.pageX, 10);\n      cellHeight = object.target.clientHeight;\n      cellWidth = object.target.clientWidth;\n      topRelative = top - windowScrollTop;\n      leftRelative = left - windowScrollLeft;\n    }\n    this.top = top;\n    this.topRelative = topRelative;\n    this.left = left;\n    this.leftRelative = leftRelative;\n    this.scrollTop = windowScrollTop;\n    this.scrollLeft = windowScrollLeft;\n    this.cellHeight = cellHeight;\n    this.cellWidth = cellWidth;\n  }\n\n  /**\n   * Get source type name.\n   *\n   * @param {*} object Event or Object with coordinates.\n   * @returns {string} Returns one of this values: `'literal'`, `'event'`.\n   */\n  getSourceType(object) {\n    let type = 'literal';\n    if (object instanceof Event) {\n      type = 'event';\n    }\n    return type;\n  }\n\n  /**\n   * Checks if element can be placed above the cursor.\n   *\n   * @param {HTMLElement} element Element to check if it's size will fit above the cursor.\n   * @returns {boolean}\n   */\n  fitsAbove(element) {\n    return this.topRelative >= element.offsetHeight;\n  }\n\n  /**\n   * Checks if element can be placed below the cursor.\n   *\n   * @param {HTMLElement} element Element to check if it's size will fit below the cursor.\n   * @param {number} [viewportHeight] The viewport height.\n   * @returns {boolean}\n   */\n  fitsBelow(element) {\n    let viewportHeight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rootWindow.innerHeight;\n    return this.topRelative + element.offsetHeight <= viewportHeight;\n  }\n\n  /**\n   * Checks if element can be placed on the right of the cursor.\n   *\n   * @param {HTMLElement} element Element to check if it's size will fit on the right of the cursor.\n   * @param {number} [viewportWidth] The viewport width.\n   * @returns {boolean}\n   */\n  fitsOnRight(element) {\n    let viewportWidth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.rootWindow.innerWidth;\n    return this.leftRelative + this.cellWidth + element.offsetWidth <= viewportWidth;\n  }\n\n  /**\n   * Checks if element can be placed on the left on the cursor.\n   *\n   * @param {HTMLElement} element Element to check if it's size will fit on the left of the cursor.\n   * @returns {boolean}\n   */\n  fitsOnLeft(element) {\n    return this.leftRelative >= element.offsetWidth;\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { Cursor } from \"./cursor.mjs\";\n/**\n * Helper class for positioning the menu and submenus in the correct place relative to the\n * cursor position (DOM element or mouse coordinates).\n *\n * @private\n * @class Positioner\n */\nvar _container = /*#__PURE__*/new WeakMap();\nvar _parentContainer = /*#__PURE__*/new WeakMap();\nvar _cursor = /*#__PURE__*/new WeakMap();\nvar _keepInViewport = /*#__PURE__*/new WeakMap();\nvar _offset = /*#__PURE__*/new WeakMap();\nexport class Positioner {\n  constructor(keepInViewport) {\n    /**\n     * The menu container element the positioning will be applied to.\n     *\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _container, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * For positioning the submenu, the parent element is used to calculate offsets to ensure that submenu\n     * is positioned right next to the parent menu.\n     *\n     * @type {HTMLElement}\n     */\n    _classPrivateFieldInitSpec(this, _parentContainer, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The instance of the Cursor class.\n     *\n     * @type {Cursor}\n     */\n    _classPrivateFieldInitSpec(this, _cursor, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Enabling the option allows changing the position calculation so that the menus (or submenus)\n     * are always placed within the visible viewport of the browser.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _keepInViewport, {\n      writable: true,\n      value: false\n    });\n    /**\n     * Allows apply the position offset for directions.\n     *\n     * @type {{above: number, below: number, left: number, right: number}}\n     */\n    _classPrivateFieldInitSpec(this, _offset, {\n      writable: true,\n      value: {\n        above: 0,\n        below: 0,\n        left: 0,\n        right: 0\n      }\n    });\n    _classPrivateFieldSet(this, _keepInViewport, keepInViewport);\n  }\n\n  /**\n   * Sets offset position for specified directions (`above`, `below`, `left` or `right`).\n   *\n   * @param {'above' | 'below' | 'left' | 'right'} direction A direction name.\n   * @param {number} [offset=0] Offset value.\n   * @returns {Positioner}\n   */\n  setOffset(direction) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    _classPrivateFieldGet(this, _offset)[direction] = offset;\n    return this;\n  }\n\n  /**\n   * Sets the menu element to work with. The element can be owned by the main menu or the submenu.\n   *\n   * @param {HTMLElement} container The menu container element.\n   * @returns {Positioner}\n   */\n  setElement(container) {\n    _classPrivateFieldSet(this, _container, container);\n    return this;\n  }\n\n  /**\n   * Sets the parent menu element to work with.\n   *\n   * @param {HTMLElement} container The parent menu container element.\n   * @returns {Positioner}\n   */\n  setParentElement(container) {\n    _classPrivateFieldSet(this, _parentContainer, container);\n    return this;\n  }\n\n  /**\n   * Updates the menu position.\n   *\n   * @param {object|MouseEvent} coords The literal object with `top`, `left`, `width` and `height` props or a\n   * mouse event object.\n   */\n  updatePosition(coords) {\n    _classPrivateFieldSet(this, _cursor, new Cursor(coords, _classPrivateFieldGet(this, _container).ownerDocument.defaultView));\n    if (_classPrivateFieldGet(this, _keepInViewport)) {\n      if (_classPrivateFieldGet(this, _cursor).fitsBelow(_classPrivateFieldGet(this, _container))) {\n        this.setPositionBelowCursor();\n      } else if (_classPrivateFieldGet(this, _cursor).fitsAbove(_classPrivateFieldGet(this, _container))) {\n        this.setPositionAboveCursor();\n      } else {\n        this.setPositionBelowCursor();\n      }\n      this.updateHorizontalPosition();\n    } else {\n      this.setPositionBelowCursor();\n      this.setPositionOnRightOfCursor();\n    }\n  }\n\n  /**\n   * Updates the menu horizontal position.\n   */\n  updateHorizontalPosition() {\n    if (_classPrivateFieldGet(this, _container).dir === 'rtl') {\n      if (_classPrivateFieldGet(this, _cursor).fitsOnLeft(_classPrivateFieldGet(this, _container))) {\n        this.setPositionOnLeftOfCursor();\n      } else {\n        this.setPositionOnRightOfCursor();\n      }\n    } else if (_classPrivateFieldGet(this, _cursor).fitsOnRight(_classPrivateFieldGet(this, _container))) {\n      this.setPositionOnRightOfCursor();\n    } else {\n      this.setPositionOnLeftOfCursor();\n    }\n  }\n\n  /**\n   * Sets the menu position above the cursor object.\n   */\n  setPositionAboveCursor() {\n    let top = _classPrivateFieldGet(this, _offset).above + _classPrivateFieldGet(this, _cursor).top - _classPrivateFieldGet(this, _container).offsetHeight;\n    if (_classPrivateFieldGet(this, _parentContainer)) {\n      top = _classPrivateFieldGet(this, _cursor).top + _classPrivateFieldGet(this, _cursor).cellHeight - _classPrivateFieldGet(this, _container).offsetHeight + 3;\n    }\n    _classPrivateFieldGet(this, _container).style.top = `${top}px`;\n  }\n\n  /**\n   * Sets the menu position below the cursor object.\n   */\n  setPositionBelowCursor() {\n    let top = _classPrivateFieldGet(this, _offset).below + _classPrivateFieldGet(this, _cursor).top + 1;\n    if (_classPrivateFieldGet(this, _parentContainer)) {\n      top = _classPrivateFieldGet(this, _cursor).top - 1;\n    }\n    _classPrivateFieldGet(this, _container).style.top = `${top}px`;\n  }\n\n  /**\n   * Sets the menu position on the right of the cursor object.\n   */\n  setPositionOnRightOfCursor() {\n    let left = _classPrivateFieldGet(this, _cursor).left;\n    if (_classPrivateFieldGet(this, _parentContainer)) {\n      const {\n        right: parentMenuRight\n      } = _classPrivateFieldGet(this, _parentContainer).getBoundingClientRect();\n\n      // move the sub menu by the width of the parent's border (usually by 1-2 pixels)\n      left += _classPrivateFieldGet(this, _cursor).cellWidth + parentMenuRight - (_classPrivateFieldGet(this, _cursor).left + _classPrivateFieldGet(this, _cursor).cellWidth);\n    } else {\n      left += _classPrivateFieldGet(this, _offset).right;\n    }\n    _classPrivateFieldGet(this, _container).style.left = `${left}px`;\n  }\n\n  /**\n   * Sets the menu position on the left of the cursor object.\n   */\n  setPositionOnLeftOfCursor() {\n    let left = _classPrivateFieldGet(this, _offset).left + _classPrivateFieldGet(this, _cursor).left - _classPrivateFieldGet(this, _container).offsetWidth;\n    if (_classPrivateFieldGet(this, _parentContainer)) {\n      const {\n        left: parentMenuLeft\n      } = _classPrivateFieldGet(this, _parentContainer).getBoundingClientRect();\n\n      // move the sub menu by the width of the parent's border (usually by 1-2 pixels)\n      left -= _classPrivateFieldGet(this, _cursor).left - parentMenuLeft;\n    }\n    _classPrivateFieldGet(this, _container).style.left = `${left}px`;\n  }\n}","import { clamp } from \"../helpers/number.mjs\";\n/**\n * @typedef Paginator\n * @property {function(number): void} setCurrentPage Sets the current index to the specific page.\n * @property {function(): number} getCurrentPage Gets the current page.\n * @property {function(): number} getSize Gets the total number of pages.\n * @property {function(): void} toFirstItem Move the index to the first page.\n * @property {function(): void} toLastItem Move the index to the last page.\n * @property {function(): void} toNextItem Move the index to the next page.\n * @property {function(): void} toPreviousItem Move the index to the previous page.\n * @property {function(): void} clear Clear the internal state of the paginator.\n */\n/**\n * @param {object} options Paginator options.\n * @param {number} [options.initialPage] Initial index from which paging starts. Also, after clearing the paginator\n * the page is cleared to the initial page.\n * @param {function(): number} [options.size] Sets the max size of the pages.\n * @param {function(number): boolean | void} [options.onItemSelect] Fires the function on each page change.\n * @param {function(): void} [options.onClear] Fires the function after clearing the state.\n * @returns {Paginator}\n */\nexport function createPaginator(_ref) {\n  let {\n    initialPage = -1,\n    size = () => 0,\n    onItemSelect = () => {},\n    onClear = () => {}\n  } = _ref;\n  const visitedPages = new Set();\n  let currentIndex = clamp(initialPage, -1, getSize() - 1);\n\n  /**\n   * Updates the internal state of the paginator.\n   *\n   * @param {number} newIndex The page index to switch.\n   * @param {-1|1} direction The direction of traversing the pages in case when they are disabled.\n   * @returns {number} Returns the final index of the page.\n   */\n  function _updateState(newIndex, direction) {\n    const lastIndex = getSize() - 1;\n    if (newIndex < 0) {\n      newIndex = lastIndex;\n    }\n    if (newIndex > lastIndex) {\n      newIndex = 0;\n    }\n    if (visitedPages.has(newIndex)) {\n      return -1;\n    }\n    visitedPages.add(newIndex);\n    const changeProceed = onItemSelect(newIndex, false);\n    if (changeProceed === false) {\n      newIndex = _updateState(direction === 1 ? ++newIndex : --newIndex,\n      // eslint-disable-line no-plusplus\n      direction);\n    }\n    return newIndex;\n  }\n\n  /**\n   * Sets the page index as current one.\n   *\n   * @param {number} index The index to set.\n   */\n  function setCurrentPage(index) {\n    if (index > -1 && index < getSize() && onItemSelect(index, true) !== false) {\n      currentIndex = index;\n    }\n  }\n\n  /**\n   * Gets the current page.\n   *\n   * @returns {number}\n   */\n  function getCurrentPage() {\n    return currentIndex;\n  }\n\n  /**\n   * Moves the index to the first page.\n   */\n  function toFirstItem() {\n    if (getSize() > 0) {\n      visitedPages.clear();\n      currentIndex = _updateState(0, 1);\n    }\n  }\n\n  /**\n   * Moves the index to the last page.\n   */\n  function toLastItem() {\n    if (getSize() > 0) {\n      visitedPages.clear();\n      currentIndex = _updateState(getSize() - 1, -1);\n    }\n  }\n\n  /**\n   * Moves the index to the next page.\n   */\n  function toNextItem() {\n    if (getSize() > 0) {\n      visitedPages.clear();\n      currentIndex = _updateState(++currentIndex, 1); // eslint-disable-line no-plusplus\n    }\n  }\n\n  /**\n   * Moves the index to the previous page.\n   */\n  function toPreviousItem() {\n    if (getSize() > 0) {\n      visitedPages.clear();\n      currentIndex = _updateState(--currentIndex, -1); // eslint-disable-line no-plusplus\n    }\n  }\n\n  /**\n   * Gets the total number of pages.\n   *\n   * @returns {number}\n   */\n  function getSize() {\n    return Math.max(size(), 0);\n  }\n\n  /**\n   * Clears the internal state of the paginator.\n   */\n  function clear() {\n    visitedPages.clear();\n    currentIndex = initialPage;\n    onClear();\n  }\n  return {\n    setCurrentPage,\n    getCurrentPage,\n    toFirstItem,\n    toLastItem,\n    toNextItem,\n    toPreviousItem,\n    getSize,\n    clear\n  };\n}","import \"core-js/modules/es.array.push.js\";\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport { hasOwnProperty } from \"../../../helpers/object.mjs\";\nimport { hasClass } from \"../../../helpers/dom/element.mjs\";\nimport { SEPARATOR } from \"./../predefinedItems/index.mjs\";\n/**\n * @param {CellRange[]} selRanges An array of the cell ranges.\n * @returns {object[]}\n */\nexport function normalizeSelection(selRanges) {\n  return arrayMap(selRanges, range => ({\n    start: range.getTopStartCorner(),\n    end: range.getBottomEndCorner()\n  }));\n}\n\n/**\n * Check if the provided element is a submenu opener.\n *\n * @param {object} itemToTest Item element.\n * @returns {boolean}\n */\nexport function isItemSubMenu(itemToTest) {\n  return hasOwnProperty(itemToTest, 'submenu');\n}\n\n/**\n * Check if the provided element is a menu separator.\n *\n * @param {object} itemToTest Item element.\n * @returns {boolean}\n */\nexport function isItemSeparator(itemToTest) {\n  return new RegExp(SEPARATOR, 'i').test(itemToTest.name);\n}\n\n/**\n * Check if the provided element presents the disabled menu item.\n *\n * @param {object} itemToTest Item element.\n * @param {object} hot The context for the item function.\n * @returns {boolean}\n */\nexport function isItemDisabled(itemToTest, hot) {\n  return itemToTest.disabled === true || typeof itemToTest.disabled === 'function' && itemToTest.disabled.call(hot) === true;\n}\n\n/**\n * Check if the provided element presents the disabled selection menu item.\n *\n * @param {object} itemToTest Item element.\n * @returns {boolean}\n */\nexport function isItemSelectionDisabled(itemToTest) {\n  return hasOwnProperty(itemToTest, 'disableSelection');\n}\n\n/**\n * @param {HTMLElement} cell The HTML cell element to check.\n * @returns {boolean}\n */\nexport function isSeparator(cell) {\n  return hasClass(cell, 'htSeparator');\n}\n\n/**\n * @param {HTMLElement} cell The HTML cell element to check.\n * @returns {boolean}\n */\nexport function hasSubMenu(cell) {\n  return hasClass(cell, 'htSubmenu');\n}\n\n/**\n * @param {HTMLElement} cell The HTML cell element to check.\n * @returns {boolean}\n */\nexport function isDisabled(cell) {\n  return hasClass(cell, 'htDisabled');\n}\n\n/**\n * @param {HTMLElement} cell The HTML cell element to check.\n * @returns {boolean}\n */\nexport function isSelectionDisabled(cell) {\n  return hasClass(cell, 'htSelectionDisabled');\n}\n\n/**\n * @param {object} item The object which describes the context menu item properties.\n * @param {Core} instance The Handsontable instance.\n * @returns {boolean}\n */\nexport function isItemHidden(item, instance) {\n  return !item.hidden || !(typeof item.hidden === 'function' && item.hidden.call(instance));\n}\n\n/**\n * @param {object[]} items The context menu items collection.\n * @param {string} separator The string which identifies the context menu separator item.\n * @returns {object[]}\n */\nfunction shiftSeparators(items, separator) {\n  const result = items.slice(0);\n  for (let i = 0; i < result.length;) {\n    if (result[i].name === separator) {\n      result.shift();\n    } else {\n      break;\n    }\n  }\n  return result;\n}\n\n/**\n * @param {object[]} items The context menu items collection.\n * @param {string} separator The string which identifies the context menu separator item.\n * @returns {object[]}\n */\nfunction popSeparators(items, separator) {\n  let result = items.slice(0);\n  result.reverse();\n  result = shiftSeparators(result, separator);\n  result.reverse();\n  return result;\n}\n\n/**\n * Removes duplicated menu separators from the context menu items collection.\n *\n * @param {object[]} items The context menu items collection.\n * @returns {object[]}\n */\nfunction removeDuplicatedSeparators(items) {\n  const result = [];\n  arrayEach(items, (value, index) => {\n    if (index > 0) {\n      if (result[result.length - 1].name !== value.name) {\n        result.push(value);\n      }\n    } else {\n      result.push(value);\n    }\n  });\n  return result;\n}\n\n/**\n * Removes menu separators from the context menu items collection.\n *\n * @param {object[]} items The context menu items collection.\n * @param {string} separator The string which identifies the context menu separator item.\n * @returns {object[]}\n */\nexport function filterSeparators(items) {\n  let separator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SEPARATOR;\n  let result = items.slice(0);\n  result = shiftSeparators(result, separator);\n  result = popSeparators(result, separator);\n  result = removeDuplicatedSeparators(result);\n  return result;\n}","import { createPaginator } from \"../../../utils/paginator.mjs\";\nimport { isSeparator, isDisabled, isSelectionDisabled } from \"./utils.mjs\";\n/**\n * Creates navigator for menus and submenus.\n *\n * @param {Handsontable} hotMenu The Handsontable instance of the menu.\n * @returns {Paginator}\n */\nexport function createMenuNavigator(hotMenu) {\n  return createPaginator({\n    size: () => hotMenu.countRows(),\n    onItemSelect(currentItem, directItemChange) {\n      const cell = hotMenu.getCell(currentItem, 0);\n      if (!cell || isSeparator(cell) || isDisabled(cell) || isSelectionDisabled(cell)) {\n        return false;\n      }\n      hotMenu.selectCell(currentItem, 0, ...(directItemChange ? [currentItem, 0, false, false] : []));\n    },\n    onClear() {\n      hotMenu.deselectCell();\n    }\n  });\n}","/**\n * Creates a keyboard shortcuts list with default keyboards binds.\n *\n * @param {Menu} menu The main menu instance.\n * @returns {KeyboardShortcut[]}\n */\nexport function createDefaultShortcutsList(menu) {\n  return [{\n    keys: [['Tab'], ['Shift', 'Tab'], ['Control/Meta', 'A']],\n    forwardToContext: menu.hot.getShortcutManager().getContext('grid'),\n    callback: () => menu.close(true)\n  }, {\n    keys: [['Escape']],\n    callback: () => menu.close()\n  }, {\n    keys: [['ArrowDown']],\n    callback: () => menu.getNavigator().toNextItem()\n  }, {\n    keys: [['ArrowUp']],\n    callback: () => menu.getNavigator().toPreviousItem()\n  }, {\n    keys: [['ArrowRight']],\n    callback: () => {\n      const selection = menu.hotMenu.getSelectedLast();\n      if (selection) {\n        const subMenu = menu.openSubMenu(selection[0]);\n        if (subMenu) {\n          subMenu.getNavigator().toFirstItem();\n        }\n      }\n    }\n  }, {\n    keys: [['ArrowLeft']],\n    callback: () => {\n      const selection = menu.hotMenu.getSelectedLast();\n      if (selection && menu.isSubMenu()) {\n        menu.close();\n        if (menu.isSubMenu()) {\n          menu.parentMenu.hotMenu.listen();\n        }\n      }\n    }\n  }, {\n    keys: [['Control/Meta', 'ArrowUp'], ['Home']],\n    callback: () => menu.getNavigator().toFirstItem()\n  }, {\n    keys: [['Control/Meta', 'ArrowDown'], ['End']],\n    callback: () => menu.getNavigator().toLastItem()\n  }, {\n    keys: [['Enter'], ['Space']],\n    callback: event => {\n      const selection = menu.hotMenu.getSelectedLast();\n      if (!selection) {\n        return;\n      }\n      if (menu.hotMenu.getSourceDataAtRow(selection[0]).submenu) {\n        menu.openSubMenu(selection[0]).getNavigator().toFirstItem();\n      } else {\n        menu.executeCommand(event);\n        menu.close(true);\n      }\n    }\n  }, {\n    keys: [['PageUp']],\n    callback: () => {\n      const selection = menu.hotMenu.getSelectedLast();\n      if (selection) {\n        menu.hotMenu.selection.transformStart(-menu.hotMenu.countVisibleRows(), 0);\n      } else {\n        menu.getNavigator().toFirstItem();\n      }\n    }\n  }, {\n    keys: [['PageDown']],\n    callback: () => {\n      const selection = menu.hotMenu.getSelectedLast();\n      if (selection) {\n        menu.hotMenu.selection.transformStart(menu.hotMenu.countVisibleRows(), 0);\n      } else {\n        menu.getNavigator().toLastItem();\n      }\n    }\n  }];\n}","import \"core-js/modules/es.array.push.js\";\nimport { createDefaultShortcutsList } from \"./defaultShortcutsList.mjs\";\nconst SHORTCUTS_CONTEXT = 'menu';\nconst SHORTCUTS_GROUP = SHORTCUTS_CONTEXT;\n\n/**\n * @typedef KeyboardShortcutsMenuController\n * @property {function(KeyboardShortcut[]): void} addCustomShortcuts Adds (by replacing) new keyboard shortcuts to the menu.\n * @property {function(string): number} getContext Gets the keyboard shortcuts context by name.\n * @property {function(string): void} listen Sets the active keyboard shortcuts context of the menu.\n */\n/**\n * Creates the controller object that allows extending the keyboard shortcuts of the menu.\n *\n * @param {Menu} menu The menu instance.\n * @param {Array<{ shortcuts: KeyboardShortcut, contextName: string }>} [customKeyboardShortcuts] The list of the custom keyboard shortcuts.\n * @returns {KeyboardShortcutsMenuController}\n */\nexport function createKeyboardShortcutsCtrl(menu) {\n  let customKeyboardShortcuts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  const customShortcuts = [];\n  _addShortcuts(createDefaultShortcutsList(menu));\n  customKeyboardShortcuts.forEach(_ref => {\n    let {\n      shortcuts,\n      contextName\n    } = _ref;\n    addCustomShortcuts(shortcuts, contextName);\n  });\n\n  /**\n   * Adds keyboard shortcuts to the menu.\n   *\n   * @param {KeyboardShortcut[]} shortcuts Keyboard shortcuts to add.\n   * @param {string} [contextName] The context name to create or use.\n   */\n  function _addShortcuts(shortcuts, contextName) {\n    getContext(contextName).addShortcuts(shortcuts, {\n      group: SHORTCUTS_CONTEXT\n    });\n  }\n\n  /**\n   * Adds custom keyboard shortcuts to the menu.\n   *\n   * @param {KeyboardShortcut[]} shortcuts Keyboard shortcuts to add.\n   * @param {string} [contextName] The context name to create or use.\n   */\n  function addCustomShortcuts(shortcuts, contextName) {\n    const context = getContext(contextName);\n    shortcuts.forEach(_ref2 => {\n      let {\n        keys\n      } = _ref2;\n      keys.forEach(k => context.removeShortcutsByKeys(k));\n    });\n    customShortcuts.push({\n      shortcuts,\n      contextName\n    });\n    _addShortcuts(shortcuts, contextName);\n  }\n\n  /**\n   * Gets all registered custom keyboard shortcuts.\n   *\n   * @returns {Array<{ shortcuts: KeyboardShortcut, contextName: string }>}\n   */\n  function getCustomShortcuts() {\n    return [...customShortcuts];\n  }\n\n  /**\n   * Gets the context name.\n   *\n   * @param {string} contextName The context name.\n   * @returns {string}\n   */\n  function _getContextName(contextName) {\n    return contextName ? `${SHORTCUTS_GROUP}:${contextName}` : SHORTCUTS_GROUP;\n  }\n\n  /**\n   * Gets the keyboard shortcut context by its name.\n   *\n   * @param {string} contextName The context name.\n   * @returns {object}\n   */\n  function getContext(contextName) {\n    var _manager$getContext;\n    const manager = menu.hotMenu.getShortcutManager();\n    const name = _getContextName(contextName);\n    return (_manager$getContext = manager.getContext(name)) !== null && _manager$getContext !== void 0 ? _manager$getContext : manager.addContext(name);\n  }\n\n  /**\n   * Makes the specified context active.\n   *\n   * @param {string} contextName The context name.\n   */\n  function listen(contextName) {\n    menu.hotMenu.getShortcutManager().setActiveContextName(_getContextName(contextName));\n  }\n  return {\n    addCustomShortcuts,\n    getCustomShortcuts,\n    getContext,\n    listen\n  };\n}","import { isItemSubMenu, isItemDisabled, isItemSelectionDisabled, isItemSeparator } from \"./utils.mjs\";\nimport { addClass, empty, fastInnerHTML, setAttribute } from \"../../../helpers/dom/element.mjs\";\nimport { A11Y_DISABLED, A11Y_EXPANDED, A11Y_LABEL, A11Y_MENU_ITEM, A11Y_TABINDEX } from \"../../../helpers/a11y.mjs\";\n/**\n * Creates the menu renderer function.\n *\n * @private\n * @param {Core} mainTableHot The main table Handsontable instance.\n * @returns {Function}\n */\nexport function createMenuItemRenderer(mainTableHot) {\n  /**\n   * Menu item renderer.\n   *\n   * @private\n   * @param {Core} menuHot The Handsontable instance.\n   * @param {HTMLCellElement} TD The rendered cell element.\n   * @param {number} row The visual index.\n   * @param {number} col The visual index.\n   * @param {string} prop The column property if used.\n   * @param {string} value The cell value.\n   */\n  return (menuHot, TD, row, col, prop, value) => {\n    if (TD.hasAttribute('ghost-table')) {\n      return;\n    }\n    const item = menuHot.getSourceDataAtRow(row);\n    const wrapper = mainTableHot.rootDocument.createElement('div');\n    const itemValue = typeof value === 'function' ? value.call(mainTableHot) : value;\n    empty(TD);\n    addClass(wrapper, 'htItemWrapper');\n    if (mainTableHot.getSettings().ariaTags) {\n      const isFocusable = !isItemDisabled(item, mainTableHot) && !isItemSelectionDisabled(item) && !isItemSeparator(item);\n      setAttribute(TD, [A11Y_MENU_ITEM(), A11Y_LABEL(itemValue), ...(isFocusable ? [A11Y_TABINDEX(-1)] : []), ...(isItemDisabled(item, mainTableHot) ? [A11Y_DISABLED()] : []), ...(isItemSubMenu(item) ? [A11Y_EXPANDED(false)] : [])]);\n    }\n    TD.className = '';\n    TD.appendChild(wrapper);\n    if (isItemSeparator(item)) {\n      addClass(TD, 'htSeparator');\n    } else if (typeof item.renderer === 'function') {\n      addClass(TD, 'htCustomMenuRenderer');\n      TD.appendChild(item.renderer(menuHot, wrapper, row, col, prop, itemValue));\n    } else {\n      fastInnerHTML(wrapper, itemValue);\n    }\n    if (isItemDisabled(item, mainTableHot)) {\n      addClass(TD, 'htDisabled');\n    } else if (isItemSelectionDisabled(item)) {\n      addClass(TD, 'htSelectionDisabled');\n    } else if (isItemSubMenu(item)) {\n      addClass(TD, 'htSubmenu');\n    }\n  };\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { Positioner } from \"./positioner.mjs\";\nimport { createMenuNavigator } from \"./navigator.mjs\";\nimport { createKeyboardShortcutsCtrl } from \"./shortcuts.mjs\";\nimport { SEPARATOR, NO_ITEMS, predefinedItems } from \"./../predefinedItems/index.mjs\";\nimport { filterSeparators, hasSubMenu, isItemHidden, normalizeSelection, isItemSubMenu, isItemDisabled, isItemSeparator } from \"./utils.mjs\";\nimport EventManager from \"../../../eventManager.mjs\";\nimport { arrayEach, arrayFilter, arrayReduce } from \"../../../helpers/array.mjs\";\nimport { isWindowsOS, isMobileBrowser, isIpadOS } from \"../../../helpers/browser.mjs\";\nimport { addClass, isChildOf, getParentWindow, hasClass, setAttribute } from \"../../../helpers/dom/element.mjs\";\nimport { isRightClick } from \"../../../helpers/dom/event.mjs\";\nimport { debounce, isFunction } from \"../../../helpers/function.mjs\";\nimport { isUndefined, isDefined } from \"../../../helpers/mixed.mjs\";\nimport { mixin } from \"../../../helpers/object.mjs\";\nimport localHooks from \"../../../mixins/localHooks.mjs\";\nimport { createMenuItemRenderer } from \"./menuItemRenderer.mjs\";\nimport { A11Y_EXPANDED, A11Y_MENU, A11Y_TABINDEX } from \"../../../helpers/a11y.mjs\";\nconst MIN_WIDTH = 215;\n\n/**\n * @typedef MenuOptions\n * @property {Menu} [parent=null] Instance of {@link Menu}.\n * @property {string} [name=null] Name of the menu.\n * @property {string} [className=''] Custom class name.\n * @property {boolean} [keepInViewport=true] Determine if should be kept in viewport.\n * @property {boolean} [standalone] Enabling closing menu when clicked element is not belongs to menu itself.\n * @property {number} [minWidth=MIN_WIDTH] The minimum width.\n * @property {HTMLElement} [container] The container.\n */\n\n/**\n * @private\n * @class Menu\n */\nvar _navigator = /*#__PURE__*/new WeakMap();\nvar _shortcutsCtrl = /*#__PURE__*/new WeakMap();\nexport class Menu {\n  /**\n   * @param {Core} hotInstance Handsontable instance.\n   * @param {MenuOptions} [options] Menu options.\n   */\n  constructor(hotInstance, options) {\n    var _this = this;\n    /**\n     * The controller module that allows modifying the menu item selection positions.\n     *\n     * @type {Paginator}\n     */\n    _classPrivateFieldInitSpec(this, _navigator, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The controller module that allows extending the keyboard shortcuts for the menu.\n     *\n     * @type {KeyboardShortcutsMenuController}\n     */\n    _classPrivateFieldInitSpec(this, _shortcutsCtrl, {\n      writable: true,\n      value: void 0\n    });\n    this.hot = hotInstance;\n    this.options = options || {\n      parent: null,\n      name: null,\n      className: '',\n      keepInViewport: true,\n      standalone: false,\n      minWidth: MIN_WIDTH,\n      container: this.hot.rootDocument.documentElement\n    };\n    this.eventManager = new EventManager(this);\n    this.container = this.createContainer(this.options.name);\n    this.positioner = new Positioner(this.options.keepInViewport);\n    this.hotMenu = null;\n    this.hotSubMenus = {};\n    this.parentMenu = this.options.parent || null;\n    this.menuItems = null;\n    this.origOutsideClickDeselects = null;\n    this.registerEvents();\n    if (this.isSubMenu()) {\n      this.addLocalHook('afterSelectionChange', function () {\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return _this.parentMenu.runLocalHooks('afterSelectionChange', ...args);\n      });\n    }\n  }\n\n  /**\n   * Register event listeners.\n   *\n   * @private\n   */\n  registerEvents() {\n    let frame = this.hot.rootWindow;\n    while (frame) {\n      this.eventManager.addEventListener(frame.document, 'mousedown', event => this.onDocumentMouseDown(event));\n      this.eventManager.addEventListener(frame.document, 'contextmenu', event => this.onDocumentContextMenu(event));\n      frame = getParentWindow(frame);\n    }\n  }\n\n  /**\n   * Set array of objects which defines menu items.\n   *\n   * @param {Array} menuItems Menu items to display.\n   */\n  setMenuItems(menuItems) {\n    this.menuItems = menuItems;\n  }\n\n  /**\n   * Gets the controller object that allows modifying the the menu item selection.\n   *\n   * @returns {Paginator | undefined}\n   */\n  getNavigator() {\n    return _classPrivateFieldGet(this, _navigator);\n  }\n\n  /**\n   * Gets the controller object that allows extending the keyboard shortcuts of the menu.\n   *\n   * @returns {KeyboardShortcutsMenuController | undefined}\n   */\n  getKeyboardShortcutsCtrl() {\n    return _classPrivateFieldGet(this, _shortcutsCtrl);\n  }\n\n  /**\n   * Returns currently selected menu item. Returns `null` if no item was selected.\n   *\n   * @returns {object|null}\n   */\n  getSelectedItem() {\n    return this.hasSelectedItem() ? this.hotMenu.getSourceDataAtRow(this.hotMenu.getSelectedLast()[0]) : null;\n  }\n\n  /**\n   * Checks if the menu has selected (highlighted) any item from the menu list.\n   *\n   * @returns {boolean}\n   */\n  hasSelectedItem() {\n    return Array.isArray(this.hotMenu.getSelectedLast());\n  }\n\n  /**\n   * Check if menu is using as sub-menu.\n   *\n   * @returns {boolean}\n   */\n  isSubMenu() {\n    return this.parentMenu !== null;\n  }\n\n  /**\n   * Open menu.\n   *\n   * @fires Hooks#beforeContextMenuShow\n   * @fires Hooks#afterContextMenuShow\n   */\n  open() {\n    this.runLocalHooks('beforeOpen');\n    this.container.removeAttribute('style');\n    this.container.style.display = 'block';\n    const delayedOpenSubMenu = debounce(row => this.openSubMenu(row), 300);\n    const minWidthOfMenu = this.options.minWidth || MIN_WIDTH;\n    let noItemsDefined = false;\n    let filteredItems = arrayFilter(this.menuItems, item => {\n      if (item.key === NO_ITEMS) {\n        noItemsDefined = true;\n      }\n      return isItemHidden(item, this.hot);\n    });\n    if (filteredItems.length < 1 && !noItemsDefined) {\n      filteredItems.push(predefinedItems()[NO_ITEMS]);\n    } else if (filteredItems.length === 0) {\n      return;\n    }\n    filteredItems = filterSeparators(filteredItems, SEPARATOR);\n    let shouldAutoCloseMenu = false;\n    const settings = {\n      data: filteredItems,\n      colHeaders: false,\n      autoColumnSize: true,\n      autoWrapRow: false,\n      modifyColWidth(width) {\n        if (isDefined(width) && width < minWidthOfMenu) {\n          return minWidthOfMenu;\n        }\n        return width;\n      },\n      autoRowSize: false,\n      readOnly: true,\n      editor: false,\n      copyPaste: false,\n      hiddenRows: true,\n      maxCols: 1,\n      columns: [{\n        data: 'name',\n        renderer: createMenuItemRenderer(this.hot)\n      }],\n      renderAllRows: true,\n      fragmentSelection: false,\n      outsideClickDeselects: false,\n      disableVisualSelection: 'area',\n      layoutDirection: this.hot.isRtl() ? 'rtl' : 'ltr',\n      ariaTags: false,\n      beforeOnCellMouseOver: (event, coords) => {\n        _classPrivateFieldGet(this, _navigator).setCurrentPage(coords.row);\n      },\n      afterOnCellMouseOver: (event, coords) => {\n        if (this.isAllSubMenusClosed()) {\n          delayedOpenSubMenu(coords.row);\n        } else {\n          this.openSubMenu(coords.row);\n        }\n      },\n      rowHeights: row => filteredItems[row].name === SEPARATOR ? 1 : 23,\n      afterOnCellContextMenu: event => {\n        event.preventDefault();\n\n        // On the Windows platform, the \"contextmenu\" is triggered after the \"mouseup\" so that's\n        // why the closing menu is here. (#6507#issuecomment-582392301).\n        if (isWindowsOS() && shouldAutoCloseMenu && this.hasSelectedItem()) {\n          this.close(true);\n        }\n      },\n      afterSelection: (row, column, row2, column2, preventScrolling) => {\n        // do not scroll the viewport when mouse clicks on partially visible menu item\n        if (this.hotMenu.view.isMouseDown()) {\n          preventScrolling.value = true;\n        }\n        this.runLocalHooks('afterSelectionChange', this.getSelectedItem());\n      },\n      beforeOnCellMouseUp: event => {\n        if (this.hasSelectedItem()) {\n          shouldAutoCloseMenu = !this.isCommandPassive(this.getSelectedItem());\n          this.executeCommand(event);\n        }\n      },\n      afterOnCellMouseUp: event => {\n        // If the code runs on the other platform than Windows, the \"mouseup\" is triggered\n        // after the \"contextmenu\". So then \"mouseup\" closes the menu. Otherwise, the closing\n        // menu responsibility is forwarded to \"afterOnCellContextMenu\" callback (#6507#issuecomment-582392301).\n        if ((!isWindowsOS() || !isRightClick(event)) && shouldAutoCloseMenu && this.hasSelectedItem()) {\n          // The timeout is necessary only for mobile devices. For desktop, the click event that is fired\n          // right after the mouseup event gets the event element target the same as the mouseup event.\n          // For mobile devices, the click event is triggered with native delay (~300ms), so when the mouseup\n          // event hides the tapped element, the click event grabs the element below. As a result, the filter\n          // by condition menu is closed and immediately open on tapping the \"None\" item.\n          if (isMobileBrowser() || isIpadOS()) {\n            this.hot._registerTimeout(() => this.close(true), 325);\n          } else {\n            this.close(true);\n          }\n        }\n      },\n      afterUnlisten: () => {\n        // Restore menu focus, fix for `this.instance.unlisten();` call in the tableView.js@260 file.\n        // This prevents losing table responsiveness for keyboard events when filter select menu is closed (#6497).\n        if (!this.hasSelectedItem() && this.isOpened()) {\n          this.hotMenu.listen();\n        }\n      }\n    };\n    this.origOutsideClickDeselects = this.hot.getSettings().outsideClickDeselects;\n    this.hot.getSettings().outsideClickDeselects = false;\n    this.hotMenu = new this.hot.constructor(this.container, settings);\n    this.hotMenu.addHook('afterInit', () => this.onAfterInit());\n    this.hotMenu.init();\n    _classPrivateFieldSet(this, _navigator, createMenuNavigator(this.hotMenu));\n    _classPrivateFieldSet(this, _shortcutsCtrl, createKeyboardShortcutsCtrl(this));\n    _classPrivateFieldGet(this, _shortcutsCtrl).listen();\n    this.focus();\n    if (this.isSubMenu()) {\n      this.addLocalHook('afterOpen', () => this.parentMenu.runLocalHooks('afterSubmenuOpen', this));\n    }\n    this.runLocalHooks('afterOpen', this);\n  }\n\n  /**\n   * Close menu.\n   *\n   * @param {boolean} [closeParent=false] If `true` try to close parent menu if exists.\n   */\n  close() {\n    let closeParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    if (!this.isOpened()) {\n      return;\n    }\n    if (closeParent && this.isSubMenu()) {\n      this.parentMenu.close();\n    } else {\n      _classPrivateFieldGet(this, _navigator).clear();\n      this.closeAllSubMenus();\n      this.container.style.display = 'none';\n      this.hotMenu.destroy();\n      this.hotMenu = null;\n      this.hot.getSettings().outsideClickDeselects = this.origOutsideClickDeselects;\n      this.runLocalHooks('afterClose');\n      if (this.isSubMenu()) {\n        if (this.hot.getSettings().ariaTags) {\n          const selection = this.parentMenu.hotMenu.getSelectedLast();\n          if (selection) {\n            const cell = this.parentMenu.hotMenu.getCell(selection[0], 0);\n            setAttribute(cell, [A11Y_EXPANDED(false)]);\n          }\n        }\n        this.parentMenu.hotMenu.listen();\n      }\n    }\n  }\n\n  /**\n   * Open sub menu at the provided row index.\n   *\n   * @param {number} row Row index.\n   * @returns {Menu|boolean} Returns created menu or `false` if no one menu was created.\n   */\n  openSubMenu(row) {\n    if (!this.hotMenu) {\n      return false;\n    }\n    const cell = this.hotMenu.getCell(row, 0);\n    this.closeAllSubMenus();\n    if (!cell || !hasSubMenu(cell)) {\n      return false;\n    }\n    const dataItem = this.hotMenu.getSourceDataAtRow(row);\n    const subMenu = new Menu(this.hot, {\n      parent: this,\n      name: dataItem.name,\n      className: this.options.className,\n      keepInViewport: true,\n      container: this.options.container\n    });\n    subMenu.setMenuItems(dataItem.submenu.items);\n    subMenu.open();\n    subMenu.setPosition(cell.getBoundingClientRect());\n    this.hotSubMenus[dataItem.key] = subMenu;\n\n    // Update the accessibility tags on the cell being the base for the submenu.\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(cell, [A11Y_EXPANDED(true)]);\n    }\n    return subMenu;\n  }\n\n  /**\n   * Close sub menu at row index.\n   *\n   * @param {number} row Row index.\n   */\n  closeSubMenu(row) {\n    const dataItem = this.hotMenu.getSourceDataAtRow(row);\n    const menus = this.hotSubMenus[dataItem.key];\n    if (menus) {\n      menus.destroy();\n      delete this.hotSubMenus[dataItem.key];\n      const cell = this.hotMenu.getCell(row, 0);\n\n      // Update the accessibility tags on the cell being the base for the submenu.\n      if (this.hot.getSettings().ariaTags) {\n        setAttribute(cell, [A11Y_EXPANDED(false)]);\n      }\n    }\n  }\n\n  /**\n   * Close all opened sub menus.\n   */\n  closeAllSubMenus() {\n    arrayEach(this.hotMenu.getData(), (value, row) => this.closeSubMenu(row));\n  }\n\n  /**\n   * Checks if all created and opened sub menus are closed.\n   *\n   * @returns {boolean}\n   */\n  isAllSubMenusClosed() {\n    return Object.keys(this.hotSubMenus).length === 0;\n  }\n\n  /**\n   * Focus the menu so all keyboard shortcuts become active.\n   */\n  focus() {\n    if (this.isOpened()) {\n      this.hotMenu.rootElement.focus({\n        preventScroll: true\n      });\n      this.getKeyboardShortcutsCtrl().listen();\n      this.hotMenu.listen();\n    }\n  }\n\n  /**\n   * Destroy instance.\n   */\n  destroy() {\n    const menuContainerParentElement = this.container.parentNode;\n    this.clearLocalHooks();\n    this.close();\n    this.parentMenu = null;\n    this.eventManager.destroy();\n    if (menuContainerParentElement) {\n      menuContainerParentElement.removeChild(this.container);\n    }\n  }\n\n  /**\n   * Checks if menu was opened.\n   *\n   * @returns {boolean} Returns `true` if menu was opened.\n   */\n  isOpened() {\n    return this.hotMenu !== null;\n  }\n\n  /**\n   * Execute menu command.\n   *\n   * The `executeCommand()` method works only for selected cells.\n   *\n   * When no cells are selected, `executeCommand()` doesn't do anything.\n   *\n   * @param {Event} [event] The mouse event object.\n   */\n  executeCommand(event) {\n    if (!this.isOpened() || !this.hasSelectedItem()) {\n      return;\n    }\n    const selectedItem = this.getSelectedItem();\n    this.runLocalHooks('select', selectedItem, event);\n    if (this.isCommandPassive(selectedItem)) {\n      return;\n    }\n    const selRanges = this.hot.getSelectedRange();\n    const normalizedSelection = selRanges ? normalizeSelection(selRanges) : [];\n    this.runLocalHooks('executeCommand', selectedItem.key, normalizedSelection, event);\n    if (this.isSubMenu()) {\n      this.parentMenu.runLocalHooks('executeCommand', selectedItem.key, normalizedSelection, event);\n    }\n  }\n\n  /**\n   * Checks if the passed command is passive or not. The command is passive when it's marked as\n   * disabled, the descriptor object contains `isCommand` property set to `false`, command\n   * is a separator, or the item is recognized as submenu. For passive items the menu is not\n   * closed automatically after the user trigger the command through the UI.\n   *\n   * @param {object} commandDescriptor Selected menu item from the menu data source.\n   * @returns {boolean}\n   */\n  isCommandPassive(commandDescriptor) {\n    return commandDescriptor.isCommand === false || isItemSeparator(commandDescriptor) || isItemDisabled(commandDescriptor, this.hot) || isItemSubMenu(commandDescriptor);\n  }\n\n  /**\n   * Set offset menu position for specified area (`above`, `below`, `left` or `right`).\n   *\n   * @param {string} area Specified area name (`above`, `below`, `left` or `right`).\n   * @param {number} offset Offset value.\n   */\n  setOffset(area) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.positioner.setOffset(area, offset);\n  }\n\n  /**\n   * Set menu position based on dom event or based on literal object.\n   *\n   * @param {Event|object} coords Event or literal Object with coordinates.\n   */\n  setPosition(coords) {\n    if (this.isSubMenu()) {\n      this.positioner.setParentElement(this.parentMenu.container);\n    }\n    this.positioner.setElement(this.container).updatePosition(coords);\n  }\n\n  /**\n   * Create container/wrapper for handsontable.\n   *\n   * @private\n   * @param {string} [name] Class name.\n   * @returns {HTMLElement}\n   */\n  createContainer() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n    const doc = this.options.container.ownerDocument;\n    let className = name;\n    let container;\n    if (className) {\n      if (isFunction(className)) {\n        className = className.call(this.hot);\n        if (className === null || isUndefined(className)) {\n          className = '';\n        } else {\n          className = className.toString();\n        }\n      }\n      className = className.replace(/[^A-z0-9]/g, '_');\n      className = `${this.options.className}Sub_${className}`;\n      container = doc.querySelector(`.${this.options.className}.${className}`);\n    }\n    if (!container) {\n      container = doc.createElement('div');\n      addClass(container, `htMenu ${this.options.className}`);\n      if (className) {\n        addClass(container, className);\n      }\n      this.options.container.appendChild(container);\n    }\n    return container;\n  }\n\n  /**\n   * On after init listener.\n   *\n   * @private\n   */\n  onAfterInit() {\n    const {\n      wtTable\n    } = this.hotMenu.view._wt;\n    const data = this.hotMenu.getSettings().data;\n    const hiderStyle = wtTable.hider.style;\n    const holderStyle = wtTable.holder.style;\n    const currentHiderWidth = parseInt(hiderStyle.width, 10);\n    const realHeight = arrayReduce(data, (accumulator, value) => accumulator + (value.name === SEPARATOR ? 1 : 26), 0);\n\n    // Additional 3px to menu's size because of additional border around its `table.htCore`.\n    holderStyle.width = `${currentHiderWidth + 3}px`;\n    holderStyle.height = `${realHeight + 3}px`;\n    hiderStyle.height = holderStyle.height;\n\n    // Replace the default accessibility tags with the context menu's\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(this.hotMenu.rootElement, [A11Y_MENU(), A11Y_TABINDEX(-1)]);\n    }\n  }\n\n  /**\n   * Document mouse down listener.\n   *\n   * @private\n   * @param {Event} event The mouse event object.\n   */\n  onDocumentMouseDown(event) {\n    if (!this.isOpened()) {\n      return;\n    }\n\n    // Close menu when clicked element is not belongs to menu itself\n    if (this.options.standalone && this.hotMenu && !isChildOf(event.target, this.hotMenu.rootElement)) {\n      this.close(true);\n\n      // Automatically close menu when clicked element is not belongs to menu or submenu (not necessarily to itself)\n    } else if ((this.isAllSubMenusClosed() || this.isSubMenu()) && !isChildOf(event.target, '.htMenu')) {\n      this.close(true);\n    }\n  }\n\n  /**\n   * Document's contextmenu listener.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  onDocumentContextMenu(event) {\n    if (!this.isOpened()) {\n      return;\n    }\n    if (hasClass(event.target, 'htCore') && isChildOf(event.target, this.hotMenu.rootElement)) {\n      event.preventDefault();\n    }\n  }\n}\nmixin(Menu, localHooks);","import { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { objectEach } from \"../../helpers/object.mjs\";\nimport { CommandExecutor } from \"./commandExecutor.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { ItemsFactory } from \"./itemsFactory.mjs\";\nimport { Menu } from \"./menu/index.mjs\";\nimport { getDocumentOffsetByElement } from \"./utils.mjs\";\nimport { hasClass } from \"../../helpers/dom/element.mjs\";\nimport { ROW_ABOVE, ROW_BELOW, COLUMN_LEFT, COLUMN_RIGHT, REMOVE_ROW, REMOVE_COLUMN, UNDO, REDO, READ_ONLY, ALIGNMENT, SEPARATOR } from \"./predefinedItems/index.mjs\";\nexport const PLUGIN_KEY = 'contextMenu';\nexport const PLUGIN_PRIORITY = 70;\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nHooks.getSingleton().register('afterContextMenuDefaultOptions');\nHooks.getSingleton().register('beforeContextMenuShow');\nHooks.getSingleton().register('afterContextMenuShow');\nHooks.getSingleton().register('afterContextMenuHide');\nHooks.getSingleton().register('afterContextMenuExecute');\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @class ContextMenu\n * @description\n * This plugin creates the Handsontable Context Menu. It allows to create a new row or column at any place in the\n * grid among [other features](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options).\n * Possible values:\n * * `true` (to enable default options),\n * * `false` (to disable completely)\n * * `{ uiContainer: containerDomElement }` (to declare a container for all of the Context Menu's dom elements to be placed in).\n * * An array of [the available strings](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options)\n *\n * See [the context menu demo](@/guides/accessories-and-menus/context-menu.md) for examples.\n *\n * @example\n * ```js\n * // as a boolean\n * contextMenu: true\n * // as a array\n * contextMenu: ['row_above', 'row_below', '---------', 'undo', 'redo']\n * ```\n *\n * @plugin ContextMenu\n */\nexport class ContextMenu extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get PLUGIN_DEPS() {\n    return ['plugin:AutoColumnSize'];\n  }\n\n  /**\n   * Context menu default items order when `contextMenu` options is set as `true`.\n   *\n   * @returns {string[]}\n   */\n  static get DEFAULT_ITEMS() {\n    return [ROW_ABOVE, ROW_BELOW, SEPARATOR, COLUMN_LEFT, COLUMN_RIGHT, SEPARATOR, REMOVE_ROW, REMOVE_COLUMN, SEPARATOR, UNDO, REDO, SEPARATOR, READ_ONLY, SEPARATOR, ALIGNMENT];\n  }\n\n  /**\n   * @param {Core} hotInstance Handsontable instance.\n   */\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n    this.eventManager = new EventManager(this);\n    /**\n     * Instance of {@link CommandExecutor}.\n     *\n     * @private\n     * @type {CommandExecutor}\n     */\n    this.commandExecutor = new CommandExecutor(this.hot);\n    /**\n     * Instance of {@link ItemsFactory}.\n     *\n     * @private\n     * @type {ItemsFactory}\n     */\n    this.itemsFactory = null;\n    /**\n     * Instance of {@link Menu}.\n     *\n     * @private\n     * @type {Menu}\n     */\n    this.menu = null;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ContextMenu#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const settings = this.hot.getSettings()[PLUGIN_KEY];\n    if (typeof settings.callback === 'function') {\n      this.commandExecutor.setCommonCallback(settings.callback);\n    }\n    this.menu = new Menu(this.hot, {\n      className: 'htContextMenu',\n      keepInViewport: true,\n      container: settings.uiContainer || this.hot.rootDocument.body\n    });\n    this.menu.addLocalHook('beforeOpen', () => this.onMenuBeforeOpen());\n    this.menu.addLocalHook('afterOpen', () => this.onMenuAfterOpen());\n    this.menu.addLocalHook('afterClose', () => this.onMenuAfterClose());\n    this.menu.addLocalHook('executeCommand', function () {\n      for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n        params[_key] = arguments[_key];\n      }\n      return _this.executeCommand.call(_this, ...params);\n    });\n    this.addHook('afterOnCellContextMenu', event => this.onAfterOnCellContextMenu(event));\n    this.registerShortcuts();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`contextMenu`](@/api/options.md#contextmenu)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    this.unregisterShortcuts();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.close();\n    if (this.menu) {\n      this.menu.destroy();\n      this.menu = null;\n    }\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling context menu.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Control/Meta', 'Shift', '\\\\'], ['Shift', 'F10']],\n      callback: () => {\n        const {\n          highlight\n        } = this.hot.getSelectedRangeLast();\n        this.hot.scrollToFocusedCell();\n        const rect = this.hot.getCell(highlight.row, highlight.col, true).getBoundingClientRect();\n        const offset = getDocumentOffsetByElement(this.menu.container, this.hot.rootDocument);\n        this.open({\n          left: rect.left + offset.left,\n          top: rect.top + offset.top - 1 + rect.height\n        }, {\n          left: rect.width,\n          above: -rect.height\n        });\n      },\n      runOnlyIf: () => this.hot.getSelectedRangeLast() && !this.menu.isOpened(),\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling context menu.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Opens menu and re-position it based on the passed coordinates.\n   *\n   * @param {{ top: number, left: number }|Event} position An object with `top` and `left` properties\n   * which contains coordinates relative to the browsers viewport (without included scroll offsets).\n   * Or if the native event is passed the menu will be positioned based on the `pageX` and `pageY`\n   * coordinates.\n   * @param {{ above: number, below: number, left: number, right: number }} offset An object allows applying\n   * the offset to the menu position.\n   * @fires Hooks#beforeContextMenuShow\n   * @fires Hooks#afterContextMenuShow\n   */\n  open(position) {\n    var _this$menu;\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      above: 0,\n      below: 0,\n      left: 0,\n      right: 0\n    };\n    if ((_this$menu = this.menu) !== null && _this$menu !== void 0 && _this$menu.isOpened()) {\n      return;\n    }\n    this.prepareMenuItems();\n    this.menu.open();\n    objectEach(offset, (value, key) => {\n      this.menu.setOffset(key, value);\n    });\n    this.menu.setPosition(position);\n  }\n\n  /**\n   * Closes the menu.\n   */\n  close() {\n    var _this$menu2;\n    (_this$menu2 = this.menu) === null || _this$menu2 === void 0 || _this$menu2.close();\n    this.itemsFactory = null;\n  }\n\n  /**\n   * Execute context menu command.\n   *\n   * The `executeCommand()` method works only for selected cells.\n   *\n   * When no cells are selected, `executeCommand()` doesn't do anything.\n   *\n   * You can execute all predefined commands:\n   *  * `'row_above'` - Insert row above\n   *  * `'row_below'` - Insert row below\n   *  * `'col_left'` - Insert column left\n   *  * `'col_right'` - Insert column right\n   *  * `'clear_column'` - Clear selected column\n   *  * `'remove_row'` - Remove row\n   *  * `'remove_col'` - Remove column\n   *  * `'undo'` - Undo last action\n   *  * `'redo'` - Redo last action\n   *  * `'make_read_only'` - Make cell read only\n   *  * `'alignment:left'` - Alignment to the left\n   *  * `'alignment:top'` - Alignment to the top\n   *  * `'alignment:right'` - Alignment to the right\n   *  * `'alignment:bottom'` - Alignment to the bottom\n   *  * `'alignment:middle'` - Alignment to the middle\n   *  * `'alignment:center'` - Alignment to the center (justify).\n   *\n   * Or you can execute command registered in settings where `key` is your command name.\n   *\n   * @param {string} commandName The command name to be executed.\n   * @param {*} params Additional parameters passed to command executor module.\n   */\n  executeCommand(commandName) {\n    if (this.itemsFactory === null) {\n      this.prepareMenuItems();\n    }\n    for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      params[_key2 - 1] = arguments[_key2];\n    }\n    this.commandExecutor.execute(commandName, ...params);\n  }\n\n  /**\n   * Prepares available contextMenu's items list and registers them in commandExecutor.\n   *\n   * @private\n   * @fires Hooks#afterContextMenuDefaultOptions\n   * @fires Hooks#beforeContextMenuSetItems\n   */\n  prepareMenuItems() {\n    this.itemsFactory = new ItemsFactory(this.hot, ContextMenu.DEFAULT_ITEMS);\n    const settings = this.hot.getSettings()[PLUGIN_KEY];\n    const predefinedItems = {\n      items: this.itemsFactory.getItems(settings)\n    };\n    this.hot.runHooks('afterContextMenuDefaultOptions', predefinedItems);\n    this.itemsFactory.setPredefinedItems(predefinedItems.items);\n    const menuItems = this.itemsFactory.getItems(settings);\n    this.hot.runHooks('beforeContextMenuSetItems', menuItems);\n    this.menu.setMenuItems(menuItems);\n\n    // Register all commands. Predefined and added by user or by plugins\n    arrayEach(menuItems, command => this.commandExecutor.registerCommand(command.key, command));\n  }\n\n  /**\n   * On contextmenu listener.\n   *\n   * @private\n   * @param {Event} event The mouse event object.\n   */\n  onAfterOnCellContextMenu(event) {\n    const settings = this.hot.getSettings();\n    const showRowHeaders = settings.rowHeaders;\n    const showColHeaders = settings.colHeaders;\n\n    /**\n     * @private\n     * @param {HTMLElement} element The element to validate.\n     * @returns {boolean}\n     */\n    function isValidElement(element) {\n      return element.nodeName === 'TD' || element.parentNode.nodeName === 'TD';\n    }\n    const element = event.target;\n    this.close();\n    if (hasClass(element, 'handsontableInput')) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    if (!(showRowHeaders || showColHeaders)) {\n      if (!isValidElement(element) && !(hasClass(element, 'current') && hasClass(element, 'wtBorder'))) {\n        return;\n      }\n    }\n    const offset = getDocumentOffsetByElement(this.menu.container, this.hot.rootDocument);\n    this.open({\n      top: event.clientY + offset.top,\n      left: event.clientX + offset.left\n    });\n  }\n\n  /**\n   * On menu before open listener.\n   *\n   * @private\n   */\n  onMenuBeforeOpen() {\n    this.hot.runHooks('beforeContextMenuShow', this);\n  }\n\n  /**\n   * On menu after open listener.\n   *\n   * @private\n   */\n  onMenuAfterOpen() {\n    this.hot.runHooks('afterContextMenuShow', this);\n  }\n\n  /**\n   * On menu after close listener.\n   *\n   * @private\n   */\n  onMenuAfterClose() {\n    this.hot.listen();\n    this.hot.runHooks('afterContextMenuHide', this);\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    this.close();\n    if (this.menu) {\n      this.menu.destroy();\n    }\n    super.destroy();\n  }\n}\nContextMenu.SEPARATOR = {\n  name: SEPARATOR\n};","import { CONTEXTMENU_ITEMS_COPY } from \"../../../i18n/constants.mjs\";\n/**\n * @param {CopyPaste} copyPastePlugin The plugin instance.\n * @returns {object}\n */\nexport default function copyItem(copyPastePlugin) {\n  return {\n    key: 'copy',\n    name() {\n      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_COPY);\n    },\n    callback() {\n      copyPastePlugin.copyCellsOnly();\n    },\n    disabled() {\n      if (this.countRows() === 0 || this.countCols() === 0) {\n        return true;\n      }\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader()) {\n        return true;\n      }\n      const selected = this.getSelected();\n\n      // Disable for no selection or for non-contiguous selection.\n      if (!selected || selected.length > 1) {\n        return true;\n      }\n      return false;\n    },\n    hidden: false\n  };\n}","import { CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY } from \"../../../i18n/constants.mjs\";\nimport { clamp } from \"../../../helpers/number.mjs\";\n/**\n * @param {CopyPaste} copyPastePlugin The plugin instance.\n * @returns {object}\n */\nexport default function copyColumnHeadersOnlyItem(copyPastePlugin) {\n  return {\n    key: 'copy_column_headers_only',\n    name() {\n      const selectedRange = this.getSelectedRangeLast();\n      const nounForm = selectedRange ? clamp(selectedRange.getWidth() - 1, 0, 1) : 0;\n      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY, nounForm);\n    },\n    callback() {\n      copyPastePlugin.copyColumnHeadersOnly();\n    },\n    disabled() {\n      if (!this.hasColHeaders()) {\n        return true;\n      }\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader()) {\n        return true;\n      }\n      const selected = this.getSelected();\n\n      // Disable for no selection or for non-contiguous selection.\n      if (!selected || selected.length > 1) {\n        return true;\n      }\n      return false;\n    },\n    hidden: false\n  };\n}","import { CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS } from \"../../../i18n/constants.mjs\";\nimport { clamp } from \"../../../helpers/number.mjs\";\n/**\n * @param {CopyPaste} copyPastePlugin The plugin instance.\n * @returns {object}\n */\nexport default function copyWithColumnGroupHeadersItem(copyPastePlugin) {\n  return {\n    key: 'copy_with_column_group_headers',\n    name() {\n      const selectedRange = this.getSelectedRangeLast();\n      const nounForm = selectedRange ? clamp(selectedRange.getWidth() - 1, 0, 1) : 0;\n      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS, nounForm);\n    },\n    callback() {\n      copyPastePlugin.copyWithAllColumnHeaders();\n    },\n    disabled() {\n      if (!this.hasColHeaders() || !this.getSettings().nestedHeaders) {\n        return true;\n      }\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader()) {\n        return true;\n      }\n      const selected = this.getSelected();\n\n      // Disable for no selection or for non-contiguous selection.\n      if (!selected || selected.length > 1) {\n        return true;\n      }\n      return false;\n    },\n    hidden: false\n  };\n}","import { CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS } from \"../../../i18n/constants.mjs\";\nimport { clamp } from \"../../../helpers/number.mjs\";\n/**\n * @param {CopyPaste} copyPastePlugin The plugin instance.\n * @returns {object}\n */\nexport default function copyWithColumnHeadersItem(copyPastePlugin) {\n  return {\n    key: 'copy_with_column_headers',\n    name() {\n      const selectedRange = this.getSelectedRangeLast();\n      const nounForm = selectedRange ? clamp(selectedRange.getWidth() - 1, 0, 1) : 0;\n      return this.getTranslatedPhrase(CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS, nounForm);\n    },\n    callback() {\n      copyPastePlugin.copyWithColumnHeaders();\n    },\n    disabled() {\n      if (!this.hasColHeaders()) {\n        return true;\n      }\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader()) {\n        return true;\n      }\n      const selected = this.getSelected();\n\n      // Disable for no selection or for non-contiguous selection.\n      if (!selected || selected.length > 1) {\n        return true;\n      }\n      return false;\n    },\n    hidden: false\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {CopyPaste} copyPastePlugin The plugin instance.\n * @returns {object}\n */\nexport default function cutItem(copyPastePlugin) {\n  return {\n    key: 'cut',\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_CUT);\n    },\n    callback() {\n      copyPastePlugin.cut();\n    },\n    disabled() {\n      if (this.countRows() === 0 || this.countCols() === 0) {\n        return true;\n      }\n      const range = this.getSelectedRangeLast();\n      if (!range) {\n        return true;\n      }\n      if (range.isSingleHeader()) {\n        return true;\n      }\n      const selected = this.getSelected();\n\n      // Disable for no selection or for non-contiquous selection.\n      if (!selected || selected.length > 1) {\n        return true;\n      }\n      return false;\n    },\n    hidden: false\n  };\n}","/**\n * @private\n */\nexport default class ClipboardData {\n  constructor() {\n    this.data = {};\n  }\n  setData(type, value) {\n    this.data[type] = value;\n  }\n  getData(type) {\n    return this.data[type] || void 0;\n  }\n}","import ClipboardData from \"./clipboardData.mjs\";\n/**\n * @private\n */\nexport default class PasteEvent {\n  constructor() {\n    this.clipboardData = new ClipboardData();\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\n/**\n * The utils class produces the selection ranges in the `{startRow, startCol, endRow, endCol}` format\n * based on the current table selection. The CopyPaste plugin consumes that ranges to generate\n * appropriate data ready to copy to the clipboard.\n *\n * @private\n */\nvar _selectedRange = /*#__PURE__*/new WeakMap();\nvar _countRows = /*#__PURE__*/new WeakMap();\nvar _countColumns = /*#__PURE__*/new WeakMap();\nvar _rowsLimit = /*#__PURE__*/new WeakMap();\nvar _columnsLimit = /*#__PURE__*/new WeakMap();\nvar _countColumnHeaders = /*#__PURE__*/new WeakMap();\nvar _trimColumnsRange = /*#__PURE__*/new WeakSet();\nvar _trimRowsRange = /*#__PURE__*/new WeakSet();\nexport class CopyableRangesFactory {\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * @param {{\n   *   countRows: function(): number,\n   *   countColumns: function(): number,\n   *   rowsLimit: function(): number,\n   *   columnsLimit: function(): number,\n   *   countColumnHeaders: function(): number\n   * }} dependencies The utils class dependencies.\n   */\n  constructor(_ref) {\n    let {\n      countRows,\n      countColumns,\n      rowsLimit,\n      columnsLimit,\n      countColumnHeaders\n    } = _ref;\n    /**\n     * Trimmed the rows range to the limit.\n     *\n     * @param {*} startRow The lowest row index in the range.\n     * @param {*} endRow The highest row index in the range.\n     * @returns {number} Returns trimmed row index if it exceeds the limit.\n     */\n    _classPrivateMethodInitSpec(this, _trimRowsRange);\n    /**\n     * Trimmed the columns range to the limit.\n     *\n     * @param {*} startColumn The lowest column index in the range.\n     * @param {*} endColumn The highest column index in the range.\n     * @returns {number} Returns trimmed column index if it exceeds the limit.\n     */\n    _classPrivateMethodInitSpec(this, _trimColumnsRange);\n    /**\n     * @type {CellRange}\n     */\n    _classPrivateFieldInitSpec(this, _selectedRange, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _countRows, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _countColumns, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _rowsLimit, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _columnsLimit, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * @type {function(): number}\n     */\n    _classPrivateFieldInitSpec(this, _countColumnHeaders, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _countRows, countRows);\n    _classPrivateFieldSet(this, _countColumns, countColumns);\n    _classPrivateFieldSet(this, _rowsLimit, rowsLimit);\n    _classPrivateFieldSet(this, _columnsLimit, columnsLimit);\n    _classPrivateFieldSet(this, _countColumnHeaders, countColumnHeaders);\n  }\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n\n  /**\n   * Sets the selection range to be processed.\n   *\n   * @param {CellRange} selectedRange The selection range represented by the CellRange class.\n   */\n  setSelectedRange(selectedRange) {\n    _classPrivateFieldSet(this, _selectedRange, selectedRange);\n  }\n\n  /**\n   * Returns a new coords object within the dataset range (cells) with `startRow`, `startCol`, `endRow`\n   * and `endCol` keys.\n   *\n   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}\n   */\n  getCellsRange() {\n    if (_classPrivateFieldGet(this, _countRows).call(this) === 0 || _classPrivateFieldGet(this, _countColumns).call(this) === 0) {\n      return null;\n    }\n    const {\n      row: startRow,\n      col: startCol\n    } = _classPrivateFieldGet(this, _selectedRange).getTopStartCorner();\n    const {\n      row: endRow,\n      col: endCol\n    } = _classPrivateFieldGet(this, _selectedRange).getBottomEndCorner();\n    const finalEndRow = _classPrivateMethodGet(this, _trimRowsRange, _trimRowsRange2).call(this, startRow, endRow);\n    const finalEndCol = _classPrivateMethodGet(this, _trimColumnsRange, _trimColumnsRange2).call(this, startCol, endCol);\n    const isRangeTrimmed = endRow !== finalEndRow || endCol !== finalEndCol;\n    return {\n      isRangeTrimmed,\n      startRow,\n      startCol,\n      endRow: finalEndRow,\n      endCol: finalEndCol\n    };\n  }\n\n  /**\n   * Returns a new coords object within the most-bottom column headers range with `startRow`,\n   * `startCol`, `endRow` and `endCol` keys.\n   *\n   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}\n   */\n  getMostBottomColumnHeadersRange() {\n    if (_classPrivateFieldGet(this, _countColumns).call(this) === 0 || _classPrivateFieldGet(this, _countColumnHeaders).call(this) === 0) {\n      return null;\n    }\n    const {\n      col: startCol\n    } = _classPrivateFieldGet(this, _selectedRange).getTopStartCorner();\n    const {\n      col: endCol\n    } = _classPrivateFieldGet(this, _selectedRange).getBottomEndCorner();\n    const finalEndCol = _classPrivateMethodGet(this, _trimColumnsRange, _trimColumnsRange2).call(this, startCol, endCol);\n    const isRangeTrimmed = endCol !== finalEndCol;\n    return {\n      isRangeTrimmed,\n      startRow: -1,\n      startCol,\n      endRow: -1,\n      endCol: finalEndCol\n    };\n  }\n\n  /**\n   * Returns a new coords object within all column headers layers (including nested headers) range with\n   * `startRow`, `startCol`, `endRow` and `endCol` keys.\n   *\n   * @returns {{startRow: number, startCol: number, endRow: number, endCol: number} | null}\n   */\n  getAllColumnHeadersRange() {\n    if (_classPrivateFieldGet(this, _countColumns).call(this) === 0 || _classPrivateFieldGet(this, _countColumnHeaders).call(this) === 0) {\n      return null;\n    }\n    const {\n      col: startCol\n    } = _classPrivateFieldGet(this, _selectedRange).getTopStartCorner();\n    const {\n      col: endCol\n    } = _classPrivateFieldGet(this, _selectedRange).getBottomEndCorner();\n    const finalEndCol = _classPrivateMethodGet(this, _trimColumnsRange, _trimColumnsRange2).call(this, startCol, endCol);\n    const isRangeTrimmed = endCol !== finalEndCol;\n    return {\n      isRangeTrimmed,\n      startRow: -_classPrivateFieldGet(this, _countColumnHeaders).call(this),\n      startCol,\n      endRow: -1,\n      endCol: finalEndCol\n    };\n  }\n}\n\n/**\n * Returns an object with `rows` and `columns` keys. The arrays contains sorted indexes\n * generated according to the given `ranges` array.\n *\n * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges The range to process.\n * @returns {{rows: number[], columns: number[]}}\n */\nfunction _trimColumnsRange2(startColumn, endColumn) {\n  return Math.min(endColumn, Math.max(startColumn + _classPrivateFieldGet(this, _columnsLimit).call(this) - 1, startColumn));\n}\nfunction _trimRowsRange2(startRow, endRow) {\n  return Math.min(endRow, Math.max(startRow + _classPrivateFieldGet(this, _rowsLimit).call(this) - 1, startRow));\n}\nexport function normalizeRanges(ranges) {\n  const rows = [];\n  const columns = [];\n  arrayEach(ranges, range => {\n    const minRow = Math.min(range.startRow, range.endRow);\n    const maxRow = Math.max(range.startRow, range.endRow);\n    rangeEach(minRow, maxRow, row => {\n      if (rows.indexOf(row) === -1) {\n        rows.push(row);\n      }\n    });\n    const minColumn = Math.min(range.startCol, range.endCol);\n    const maxColumn = Math.max(range.startCol, range.endCol);\n    rangeEach(minColumn, maxColumn, column => {\n      if (columns.indexOf(column) === -1) {\n        columns.push(column);\n      }\n    });\n  });\n  return {\n    rows,\n    columns\n  };\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { stringify, parse } from \"../../3rdparty/SheetClip/index.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { sanitize } from \"../../helpers/string.mjs\";\nimport { removeContentEditableFromElementAndDeselect, runWithSelectedContendEditableElement, makeElementContentEditableAndSelectItsContent } from \"../../helpers/dom/element.mjs\";\nimport { isSafari } from \"../../helpers/browser.mjs\";\nimport copyItem from \"./contextMenuItem/copy.mjs\";\nimport copyColumnHeadersOnlyItem from \"./contextMenuItem/copyColumnHeadersOnly.mjs\";\nimport copyWithColumnGroupHeadersItem from \"./contextMenuItem/copyWithColumnGroupHeaders.mjs\";\nimport copyWithColumnHeadersItem from \"./contextMenuItem/copyWithColumnHeaders.mjs\";\nimport cutItem from \"./contextMenuItem/cut.mjs\";\nimport PasteEvent from \"./pasteEvent.mjs\";\nimport { CopyableRangesFactory, normalizeRanges } from \"./copyableRanges.mjs\";\nimport { _dataToHTML, htmlToGridSettings } from \"../../utils/parseTable.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nHooks.getSingleton().register('afterCopyLimit');\nHooks.getSingleton().register('modifyCopyableRange');\nHooks.getSingleton().register('beforeCut');\nHooks.getSingleton().register('afterCut');\nHooks.getSingleton().register('beforePaste');\nHooks.getSingleton().register('afterPaste');\nHooks.getSingleton().register('beforeCopy');\nHooks.getSingleton().register('afterCopy');\nexport const PLUGIN_KEY = 'copyPaste';\nexport const PLUGIN_PRIORITY = 80;\nconst SETTING_KEYS = ['fragmentSelection'];\nconst META_HEAD = ['<meta name=\"generator\" content=\"Handsontable\"/>', '<style type=\"text/css\">td{white-space:normal}br{mso-data-placement:same-cell}</style>'].join('');\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @description\n * Copy, cut, and paste data by using the `CopyPaste` plugin.\n *\n * Control the `CopyPaste` plugin programmatically through its [API methods](#methods).\n *\n * The user can access the copy-paste features through:\n * - The [context menu](@/guides/cell-features/clipboard.md#context-menu).\n * - The [keyboard shortcuts](@/guides/cell-features/clipboard.md#related-keyboard-shortcuts).\n * - The browser's menu bar.\n *\n * Read more:\n * - [Guides: Clipboard](@/guides/cell-features/clipboard.md)\n * - [Configuration options: `copyPaste`](@/api/options.md#copypaste)\n *\n * @example\n * ```js\n * // enable the plugin with the default configuration\n * copyPaste: true,\n *\n * // or, enable the plugin with a custom configuration\n * copyPaste: {\n *   columnsLimit: 25,\n *   rowsLimit: 50,\n *   pasteMode: 'shift_down',\n *   copyColumnHeaders: true,\n *   copyColumnGroupHeaders: true,\n *   copyColumnHeadersOnly: true,\n *   uiContainer: document.body,\n * },\n * ```\n * @class CopyPaste\n * @plugin CopyPaste\n */\nvar _enableCopyColumnHeaders = /*#__PURE__*/new WeakMap();\nvar _enableCopyColumnGroupHeaders = /*#__PURE__*/new WeakMap();\nvar _enableCopyColumnHeadersOnly = /*#__PURE__*/new WeakMap();\nvar _copyMode = /*#__PURE__*/new WeakMap();\nvar _isTriggeredByCopy = /*#__PURE__*/new WeakMap();\nvar _isTriggeredByCut = /*#__PURE__*/new WeakMap();\nvar _copyableRangesFactory = /*#__PURE__*/new WeakMap();\nvar _ensureClipboardEventsGetTriggered = /*#__PURE__*/new WeakSet();\nvar _countCopiedHeaders = /*#__PURE__*/new WeakSet();\nvar _addContentEditableToHighlightedCell = /*#__PURE__*/new WeakSet();\nvar _removeContentEditableFromHighlightedCell = /*#__PURE__*/new WeakSet();\nexport class CopyPaste extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Remove the `contenteditable` attribute from the highlighted cell and deselect its content.\n     */\n    _classPrivateMethodInitSpec(this, _removeContentEditableFromHighlightedCell);\n    /**\n     * Add the `contenteditable` attribute to the highlighted cell and select its content.\n     */\n    _classPrivateMethodInitSpec(this, _addContentEditableToHighlightedCell);\n    /**\n     * Counts how many column headers will be copied based on the passed range.\n     *\n     * @private\n     * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.\n     * @returns {{ columnHeadersCount: number }} Returns an object with keys that holds\n     *                                           information with the number of copied headers.\n     */\n    _classPrivateMethodInitSpec(this, _countCopiedHeaders);\n    /**\n     * Ensure that the `copy`/`cut` events get triggered properly in Safari.\n     *\n     * @param {string} eventName Name of the event to get triggered.\n     */\n    _classPrivateMethodInitSpec(this, _ensureClipboardEventsGetTriggered);\n    /**\n     * The maximum number of columns than can be copied to the clipboard.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    _defineProperty(this, \"columnsLimit\", Infinity);\n    /**\n     * The maximum number of rows than can be copied to the clipboard.\n     *\n     * @type {number}\n     * @default Infinity\n     */\n    _defineProperty(this, \"rowsLimit\", Infinity);\n    /**\n     * When pasting:\n     * - `'overwrite'`: overwrite the currently-selected cells\n     * - `'shift_down'`: move currently-selected cells down\n     * - `'shift_right'`: move currently-selected cells to the right\n     *\n     * @type {string}\n     * @default 'overwrite'\n     */\n    _defineProperty(this, \"pasteMode\", 'overwrite');\n    /**\n     * The UI container for the secondary focusable element.\n     *\n     * @type {HTMLElement}\n     */\n    _defineProperty(this, \"uiContainer\", this.hot.rootDocument.body);\n    /**\n     * Shows the \"Copy with headers\" item in the context menu and extends the context menu with the\n     * `'copy_with_column_headers'` option that can be used for creating custom menus arrangements.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    _classPrivateFieldInitSpec(this, _enableCopyColumnHeaders, {\n      writable: true,\n      value: false\n    });\n    /**\n     * Shows the \"Copy with group headers\" item in the context menu and extends the context menu with the\n     * `'copy_with_column_group headers'` option that can be used for creating custom menus arrangements.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    _classPrivateFieldInitSpec(this, _enableCopyColumnGroupHeaders, {\n      writable: true,\n      value: false\n    });\n    /**\n     * Shows the \"Copy headers only\" item in the context menu and extends the context menu with the\n     * `'copy_column_headers_only'` option that can be used for creating custom menus arrangements.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    _classPrivateFieldInitSpec(this, _enableCopyColumnHeadersOnly, {\n      writable: true,\n      value: false\n    });\n    /**\n     * Defines the data range to copy. Possible values:\n     *  * `'cells-only'` Copy selected cells only;\n     *  * `'column-headers-only'` Copy column headers only;\n     *  * `'with-column-group-headers'` Copy cells with all column headers;\n     *  * `'with-column-headers'` Copy cells with column headers;\n     *\n     * @type {'cells-only' | 'column-headers-only' | 'with-column-group-headers' | 'with-column-headers'}\n     */\n    _classPrivateFieldInitSpec(this, _copyMode, {\n      writable: true,\n      value: 'cells-only'\n    });\n    /**\n     * Flag that is used to prevent copying when the native shortcut was not pressed.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isTriggeredByCopy, {\n      writable: true,\n      value: false\n    });\n    /**\n     * Flag that is used to prevent cutting when the native shortcut was not pressed.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isTriggeredByCut, {\n      writable: true,\n      value: false\n    });\n    /**\n     * Class that helps generate copyable ranges based on the current selection for different copy mode\n     * types.\n     *\n     * @type {CopyableRangesFactory}\n     */\n    _classPrivateFieldInitSpec(this, _copyableRangesFactory, {\n      writable: true,\n      value: new CopyableRangesFactory({\n        countRows: () => this.hot.countRows(),\n        countColumns: () => this.hot.countCols(),\n        rowsLimit: () => this.rowsLimit,\n        columnsLimit: () => this.columnsLimit,\n        countColumnHeaders: () => this.hot.view.getColumnHeadersCount()\n      })\n    });\n    /**\n     * Ranges of the cells coordinates, which should be used to copy/cut/paste actions.\n     *\n     * @private\n     * @type {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>}\n     */\n    _defineProperty(this, \"copyableRanges\", []);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get SETTING_KEYS() {\n    return [PLUGIN_KEY, ...SETTING_KEYS];\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the [`CopyPaste`](#copypaste) plugin is enabled.\n   *\n   * This method gets called by Handsontable's [`beforeInit`](@/api/hooks.md#beforeinit) hook.\n   * If it returns `true`, the [`enablePlugin()`](#enableplugin) method gets called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const {\n      [PLUGIN_KEY]: settings\n    } = this.hot.getSettings();\n    if (typeof settings === 'object') {\n      var _settings$pasteMode, _settings$uiContainer;\n      this.pasteMode = (_settings$pasteMode = settings.pasteMode) !== null && _settings$pasteMode !== void 0 ? _settings$pasteMode : this.pasteMode;\n      this.rowsLimit = isNaN(settings.rowsLimit) ? this.rowsLimit : settings.rowsLimit;\n      this.columnsLimit = isNaN(settings.columnsLimit) ? this.columnsLimit : settings.columnsLimit;\n      _classPrivateFieldSet(this, _enableCopyColumnHeaders, !!settings.copyColumnHeaders);\n      _classPrivateFieldSet(this, _enableCopyColumnGroupHeaders, !!settings.copyColumnGroupHeaders);\n      _classPrivateFieldSet(this, _enableCopyColumnHeadersOnly, !!settings.copyColumnHeadersOnly);\n      this.uiContainer = (_settings$uiContainer = settings.uiContainer) !== null && _settings$uiContainer !== void 0 ? _settings$uiContainer : this.uiContainer;\n    }\n    this.addHook('afterContextMenuDefaultOptions', options => this.onAfterContextMenuDefaultOptions(options));\n    this.addHook('afterSelectionEnd', () => this.onAfterSelectionEnd());\n    this.eventManager = new EventManager(this);\n    this.eventManager.addEventListener(this.hot.rootDocument, 'copy', function () {\n      return _this.onCopy(...arguments);\n    });\n    this.eventManager.addEventListener(this.hot.rootDocument, 'cut', function () {\n      return _this.onCut(...arguments);\n    });\n    this.eventManager.addEventListener(this.hot.rootDocument, 'paste', function () {\n      return _this.onPaste(...arguments);\n    });\n\n    // Without this workaround Safari (tested on Safari@16.5.2) does allow copying/cutting from the browser menu.\n    if (isSafari()) {\n      this.eventManager.addEventListener(this.hot.rootDocument.body, 'mouseenter', function () {\n        return _this.onSafariMouseEnter(...arguments);\n      });\n      this.eventManager.addEventListener(this.hot.rootDocument.body, 'mouseleave', function () {\n        return _this.onSafariMouseLeave(...arguments);\n      });\n      this.addHook('afterSelection', () => this.onSafariAfterSelection());\n    }\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the state of the [`CopyPaste`](#copypaste) plugin.\n   *\n   * Gets called when [`updateSettings()`](@/api/core.md#updatesettings)\n   * is invoked with any of the following configuration options:\n   *  - [`copyPaste`](@/api/options.md#copypaste)\n   *  - [`fragmentSelection`](@/api/options.md#fragmentselection)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the [`CopyPaste`](#copypaste) plugin for your Handsontable instance.\n   */\n  disablePlugin() {\n    super.disablePlugin();\n  }\n\n  /**\n   * Copies the contents of the selected cells (and/or their related column headers) to the system clipboard.\n   *\n   * Takes an optional parameter (`copyMode`) that defines the scope of copying:\n   *\n   * | `copyMode` value              | Description                                                     |\n   * | ----------------------------- | --------------------------------------------------------------- |\n   * | `'cells-only'` (default)      | Copy the selected cells                                         |\n   * | `'with-column-headers'`       | - Copy the selected cells<br>- Copy the nearest column headers  |\n   * | `'with-column-group-headers'` | - Copy the selected cells<br>- Copy all related columns headers |\n   * | `'column-headers-only'`       | Copy the nearest column headers (without copying cells)         |\n   *\n   * @param {string} [copyMode='cells-only'] Copy mode.\n   */\n  copy() {\n    let copyMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'cells-only';\n    _classPrivateFieldSet(this, _copyMode, copyMode);\n    _classPrivateFieldSet(this, _isTriggeredByCopy, true);\n    _classPrivateMethodGet(this, _ensureClipboardEventsGetTriggered, _ensureClipboardEventsGetTriggered2).call(this, 'copy');\n  }\n\n  /**\n   * Copies the contents of the selected cells.\n   */\n  copyCellsOnly() {\n    this.copy('cells-only');\n  }\n  /**\n   * Copies the contents of column headers that are nearest to the selected cells.\n   */\n  copyColumnHeadersOnly() {\n    this.copy('column-headers-only');\n  }\n  /**\n   * Copies the contents of the selected cells and all their related column headers.\n   */\n  copyWithAllColumnHeaders() {\n    this.copy('with-column-group-headers');\n  }\n  /**\n   * Copies the contents of the selected cells and their nearest column headers.\n   */\n  copyWithColumnHeaders() {\n    this.copy('with-column-headers');\n  }\n\n  /**\n   * Cuts the contents of the selected cells to the system clipboard.\n   */\n  cut() {\n    _classPrivateFieldSet(this, _isTriggeredByCut, true);\n    _classPrivateMethodGet(this, _ensureClipboardEventsGetTriggered, _ensureClipboardEventsGetTriggered2).call(this, 'cut');\n  }\n\n  /**\n   * Converts the contents of multiple ranges (`ranges`) into a single string.\n   *\n   * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `endRow`, `startCol` and `endCol`.\n   * @returns {string} A string that will be copied to the clipboard.\n   */\n  getRangedCopyableData(ranges) {\n    return stringify(this.getRangedData(ranges));\n  }\n\n  /**\n   * Converts the contents of multiple ranges (`ranges`) into an array of arrays.\n   *\n   * @param {Array<{startRow: number, startCol: number, endRow: number, endCol: number}>} ranges Array of objects with properties `startRow`, `startCol`, `endRow` and `endCol`.\n   * @returns {Array[]} An array of arrays that will be copied to the clipboard.\n   */\n  getRangedData(ranges) {\n    const data = [];\n    const {\n      rows,\n      columns\n    } = normalizeRanges(ranges);\n\n    // concatenate all rows and columns data defined in ranges into one copyable string\n    arrayEach(rows, row => {\n      const rowSet = [];\n      arrayEach(columns, column => {\n        if (row < 0) {\n          // `row` as the second argument acts here as the `headerLevel` argument\n          rowSet.push(this.hot.getColHeader(column, row));\n        } else {\n          rowSet.push(this.hot.getCopyableData(row, column));\n        }\n      });\n      data.push(rowSet);\n    });\n    return data;\n  }\n\n  /**\n   * Simulates the paste action.\n   *\n   * For security reasons, modern browsers don't allow reading from the system clipboard.\n   *\n   * @param {string} pastableText The value to paste, as a raw string.\n   * @param {string} [pastableHtml=''] The value to paste, as HTML.\n   */\n  paste() {\n    let pastableText = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let pastableHtml = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : pastableText;\n    if (!pastableText && !pastableHtml) {\n      return;\n    }\n    const pasteData = new PasteEvent();\n    if (pastableText) {\n      pasteData.clipboardData.setData('text/plain', pastableText);\n    }\n    if (pastableHtml) {\n      pasteData.clipboardData.setData('text/html', pastableHtml);\n    }\n    this.onPaste(pasteData);\n  }\n\n  /**\n   * Prepares copyable text from the cells selection in the invisible textarea.\n   */\n  setCopyableText() {\n    const selectionRange = this.hot.getSelectedRangeLast();\n    if (!selectionRange) {\n      return;\n    }\n    if (selectionRange.isSingleHeader()) {\n      this.copyableRanges = [];\n      return;\n    }\n    _classPrivateFieldGet(this, _copyableRangesFactory).setSelectedRange(selectionRange);\n    const groupedRanges = new Map([['headers', null], ['cells', null]]);\n    if (_classPrivateFieldGet(this, _copyMode) === 'column-headers-only') {\n      groupedRanges.set('headers', _classPrivateFieldGet(this, _copyableRangesFactory).getMostBottomColumnHeadersRange());\n    } else {\n      if (_classPrivateFieldGet(this, _copyMode) === 'with-column-headers') {\n        groupedRanges.set('headers', _classPrivateFieldGet(this, _copyableRangesFactory).getMostBottomColumnHeadersRange());\n      } else if (_classPrivateFieldGet(this, _copyMode) === 'with-column-group-headers') {\n        groupedRanges.set('headers', _classPrivateFieldGet(this, _copyableRangesFactory).getAllColumnHeadersRange());\n      }\n      groupedRanges.set('cells', _classPrivateFieldGet(this, _copyableRangesFactory).getCellsRange());\n    }\n    this.copyableRanges = Array.from(groupedRanges.values()).filter(range => range !== null).map(_ref => {\n      let {\n        startRow,\n        startCol,\n        endRow,\n        endCol\n      } = _ref;\n      return {\n        startRow,\n        startCol,\n        endRow,\n        endCol\n      };\n    });\n    this.copyableRanges = this.hot.runHooks('modifyCopyableRange', this.copyableRanges);\n    const cellsRange = groupedRanges.get('cells');\n    if (cellsRange !== null && cellsRange.isRangeTrimmed) {\n      const {\n        startRow,\n        startCol,\n        endRow,\n        endCol\n      } = cellsRange;\n      this.hot.runHooks('afterCopyLimit', endRow - startRow + 1, endCol - startCol + 1, this.rowsLimit, this.columnsLimit);\n    }\n  }\n\n  /**\n   * Verifies if editor exists and is open.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  isEditorOpened() {\n    var _this$hot$getActiveEd;\n    return (_this$hot$getActiveEd = this.hot.getActiveEditor()) === null || _this$hot$getActiveEd === void 0 ? void 0 : _this$hot$getActiveEd.isOpened();\n  }\n  /**\n   * Prepares new values to populate them into datasource.\n   *\n   * @private\n   * @param {Array} inputArray An array of the data to populate.\n   * @param {Array} [selection] The selection which indicates from what position the data will be populated.\n   * @returns {Array} Range coordinates after populate data.\n   */\n  populateValues(inputArray) {\n    let selection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.hot.getSelectedRangeLast();\n    if (!inputArray.length) {\n      return;\n    }\n    const populatedRowsLength = inputArray.length;\n    const populatedColumnsLength = inputArray[0].length;\n    const newRows = [];\n    const {\n      row: startRow,\n      col: startColumn\n    } = selection.getTopStartCorner();\n    const {\n      row: endRowFromSelection,\n      col: endColumnFromSelection\n    } = selection.getBottomEndCorner();\n    let visualRowForPopulatedData = startRow;\n    let visualColumnForPopulatedData = startColumn;\n    let lastVisualRow = startRow;\n    let lastVisualColumn = startColumn;\n\n    // We try to populate just all copied data or repeat copied data within a selection. Please keep in mind that we\n    // don't know whether populated data is bigger than selection on start as there are some cells for which values\n    // should be not inserted (it's known right after getting cell meta).\n    while (newRows.length < populatedRowsLength || visualRowForPopulatedData <= endRowFromSelection) {\n      const {\n        skipRowOnPaste,\n        visualRow\n      } = this.hot.getCellMeta(visualRowForPopulatedData, startColumn);\n      visualRowForPopulatedData = visualRow + 1;\n      if (skipRowOnPaste === true) {\n        /* eslint-disable no-continue */\n        continue;\n      }\n      lastVisualRow = visualRow;\n      visualColumnForPopulatedData = startColumn;\n      const newRow = [];\n      const insertedRow = newRows.length % populatedRowsLength;\n      while (newRow.length < populatedColumnsLength || visualColumnForPopulatedData <= endColumnFromSelection) {\n        const {\n          skipColumnOnPaste,\n          visualCol\n        } = this.hot.getCellMeta(startRow, visualColumnForPopulatedData);\n        visualColumnForPopulatedData = visualCol + 1;\n        if (skipColumnOnPaste === true) {\n          /* eslint-disable no-continue */\n          continue;\n        }\n        lastVisualColumn = visualCol;\n        const insertedColumn = newRow.length % populatedColumnsLength;\n        newRow.push(inputArray[insertedRow][insertedColumn]);\n      }\n      newRows.push(newRow);\n    }\n    this.hot.populateFromArray(startRow, startColumn, newRows, void 0, void 0, 'CopyPaste.paste', this.pasteMode);\n    return [startRow, startColumn, lastVisualRow, lastVisualColumn];\n  }\n  /**\n   * `copy` event callback on textarea element.\n   *\n   * @param {Event} event ClipboardEvent.\n   * @private\n   */\n  onCopy(event) {\n    if (!this.hot.isListening() && !_classPrivateFieldGet(this, _isTriggeredByCopy) || this.isEditorOpened()) {\n      return;\n    }\n    this.setCopyableText();\n    _classPrivateFieldSet(this, _isTriggeredByCopy, false);\n    const data = this.getRangedData(this.copyableRanges);\n    const copiedHeadersCount = _classPrivateMethodGet(this, _countCopiedHeaders, _countCopiedHeaders2).call(this, this.copyableRanges);\n    const allowCopying = !!this.hot.runHooks('beforeCopy', data, this.copyableRanges, copiedHeadersCount);\n    if (allowCopying) {\n      const textPlain = stringify(data);\n      if (event && event.clipboardData) {\n        const textHTML = _dataToHTML(data, this.hot.rootDocument);\n        event.clipboardData.setData('text/plain', textPlain);\n        event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\n      } else if (typeof ClipboardEvent === 'undefined') {\n        this.hot.rootWindow.clipboardData.setData('Text', textPlain);\n      }\n      this.hot.runHooks('afterCopy', data, this.copyableRanges, copiedHeadersCount);\n    }\n    _classPrivateFieldSet(this, _copyMode, 'cells-only');\n    event.preventDefault();\n  }\n\n  /**\n   * `cut` event callback on textarea element.\n   *\n   * @param {Event} event ClipboardEvent.\n   * @private\n   */\n  onCut(event) {\n    if (!this.hot.isListening() && !_classPrivateFieldGet(this, _isTriggeredByCut) || this.isEditorOpened()) {\n      return;\n    }\n    this.setCopyableText();\n    _classPrivateFieldSet(this, _isTriggeredByCut, false);\n    const rangedData = this.getRangedData(this.copyableRanges);\n    const allowCuttingOut = !!this.hot.runHooks('beforeCut', rangedData, this.copyableRanges);\n    if (allowCuttingOut) {\n      const textPlain = stringify(rangedData);\n      if (event && event.clipboardData) {\n        const textHTML = _dataToHTML(rangedData, this.hot.rootDocument);\n        event.clipboardData.setData('text/plain', textPlain);\n        event.clipboardData.setData('text/html', [META_HEAD, textHTML].join(''));\n      } else if (typeof ClipboardEvent === 'undefined') {\n        this.hot.rootWindow.clipboardData.setData('Text', textPlain);\n      }\n      this.hot.emptySelectedCells('CopyPaste.cut');\n      this.hot.runHooks('afterCut', rangedData, this.copyableRanges);\n    }\n    event.preventDefault();\n  }\n\n  /**\n   * `paste` event callback on textarea element.\n   *\n   * @param {Event} event ClipboardEvent or pseudo ClipboardEvent, if paste was called manually.\n   * @private\n   */\n  onPaste(event) {\n    if (!this.hot.isListening() || this.isEditorOpened() || !this.hot.getSelected()) {\n      return;\n    }\n    if (event && event.preventDefault) {\n      event.preventDefault();\n    }\n    let pastedData;\n    if (event && typeof event.clipboardData !== 'undefined') {\n      const textHTML = sanitize(event.clipboardData.getData('text/html'), {\n        ADD_TAGS: ['meta'],\n        ADD_ATTR: ['content'],\n        FORCE_BODY: true\n      });\n      if (textHTML && /(<table)|(<TABLE)/g.test(textHTML)) {\n        const parsedConfig = htmlToGridSettings(textHTML, this.hot.rootDocument);\n        pastedData = parsedConfig.data;\n      } else {\n        pastedData = event.clipboardData.getData('text/plain');\n      }\n    } else if (typeof ClipboardEvent === 'undefined' && typeof this.hot.rootWindow.clipboardData !== 'undefined') {\n      pastedData = this.hot.rootWindow.clipboardData.getData('Text');\n    }\n    if (typeof pastedData === 'string') {\n      pastedData = parse(pastedData);\n    }\n    if (pastedData === void 0 || pastedData && pastedData.length === 0) {\n      return;\n    }\n    if (this.hot.runHooks('beforePaste', pastedData, this.copyableRanges) === false) {\n      return;\n    }\n    const [startRow, startColumn, endRow, endColumn] = this.populateValues(pastedData);\n    this.hot.selectCell(startRow, startColumn, Math.min(this.hot.countRows() - 1, endRow), Math.min(this.hot.countCols() - 1, endColumn));\n    this.hot.runHooks('afterPaste', pastedData, this.copyableRanges);\n  }\n\n  /**\n   * Add copy and cut options to the Context Menu.\n   *\n   * @private\n   * @param {object} options Contains default added options of the Context Menu.\n   */\n  onAfterContextMenuDefaultOptions(options) {\n    options.items.push({\n      name: '---------'\n    }, copyItem(this));\n    if (_classPrivateFieldGet(this, _enableCopyColumnHeaders)) {\n      options.items.push(copyWithColumnHeadersItem(this));\n    }\n    if (_classPrivateFieldGet(this, _enableCopyColumnGroupHeaders)) {\n      options.items.push(copyWithColumnGroupHeadersItem(this));\n    }\n    if (_classPrivateFieldGet(this, _enableCopyColumnHeadersOnly)) {\n      options.items.push(copyColumnHeadersOnlyItem(this));\n    }\n    options.items.push(cutItem(this));\n  }\n\n  /**\n   * Force focus on focusableElement after end of the selection.\n   *\n   * @private\n   */\n  onAfterSelectionEnd() {\n    if (this.isEditorOpened()) {\n      return;\n    }\n    if (this.hot.getSettings().fragmentSelection) {\n      return;\n    }\n    this.setCopyableText();\n  }\n\n  /**\n   * `document.body` `mouseenter` callback used to work around a Safari's problem with copying/cutting from the\n   * browser's menu.\n   *\n   * @private\n   */\n  onSafariMouseEnter() {\n    _classPrivateMethodGet(this, _removeContentEditableFromHighlightedCell, _removeContentEditableFromHighlightedCell2).call(this);\n  }\n\n  /**\n   * `document.body` `mouseleave` callback used to work around a Safari's problem with copying/cutting from the\n   * browser's menu.\n   *\n   * @private\n   */\n  onSafariMouseLeave() {\n    _classPrivateMethodGet(this, _addContentEditableToHighlightedCell, _addContentEditableToHighlightedCell2).call(this);\n  }\n\n  /**\n   * `afterSelection` hook callback triggered only on Safari.\n   *\n   * @private\n   */\n  onSafariAfterSelection() {\n    _classPrivateMethodGet(this, _removeContentEditableFromHighlightedCell, _removeContentEditableFromHighlightedCell2).call(this);\n  }\n\n  /**\n   * Destroys the `CopyPaste` plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}\nfunction _ensureClipboardEventsGetTriggered2(eventName) {\n  // Without this workaround Safari (tested on Safari@16.5.2) does not trigger the 'copy' event.\n  if (isSafari()) {\n    const lastSelectedRange = this.hot.getSelectedRangeLast();\n    if (lastSelectedRange) {\n      const {\n        row: highlightRow,\n        col: highlightColumn\n      } = lastSelectedRange.highlight;\n      const currentlySelectedCell = this.hot.getCell(highlightRow, highlightColumn, true);\n      if (currentlySelectedCell) {\n        runWithSelectedContendEditableElement(currentlySelectedCell, () => {\n          this.hot.rootDocument.execCommand(eventName);\n        });\n      }\n    }\n  } else {\n    this.hot.rootDocument.execCommand(eventName);\n  }\n}\nfunction _countCopiedHeaders2(ranges) {\n  const {\n    rows\n  } = normalizeRanges(ranges);\n  let columnHeadersCount = 0;\n  for (let row = 0; row < rows.length; row++) {\n    if (rows[row] >= 0) {\n      break;\n    }\n    columnHeadersCount += 1;\n  }\n  return {\n    columnHeadersCount\n  };\n}\nfunction _addContentEditableToHighlightedCell2() {\n  if (this.hot.isListening()) {\n    const lastSelectedRange = this.hot.getSelectedRangeLast();\n    if (lastSelectedRange) {\n      const {\n        row: highlightRow,\n        col: highlightColumn\n      } = lastSelectedRange.highlight;\n      const currentlySelectedCell = this.hot.getCell(highlightRow, highlightColumn, true);\n      if (currentlySelectedCell) {\n        makeElementContentEditableAndSelectItsContent(currentlySelectedCell);\n      }\n    }\n  }\n}\nfunction _removeContentEditableFromHighlightedCell2() {\n  // If the instance is not listening, the workaround is not needed.\n  if (this.hot.isListening()) {\n    const lastSelectedRange = this.hot.getSelectedRangeLast();\n    if (lastSelectedRange) {\n      const {\n        row: highlightRow,\n        col: highlightColumn\n      } = lastSelectedRange.highlight;\n      const currentlySelectedCell = this.hot.getCell(highlightRow, highlightColumn, true);\n      if (currentlySelectedCell !== null && currentlySelectedCell !== void 0 && currentlySelectedCell.hasAttribute('contenteditable')) {\n        removeContentEditableFromElementAndDeselect(currentlySelectedCell);\n      }\n    }\n  }\n}","import { hasOwnProperty, isObject } from \"../../helpers/object.mjs\";\nimport { isDefined } from \"../../helpers/mixed.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\n/**\n * Create separated id for borders for each cell.\n *\n * @param {number} row Visual row index.\n * @param {number} col Visual column index.\n * @returns {string}\n */\nexport function createId(row, col) {\n  return `border_row${row}col${col}`;\n}\n\n/**\n * Create default single border for each position (top/right/bottom/left).\n *\n * @returns {object} `{{width: number, color: string}}`.\n */\nexport function createDefaultCustomBorder() {\n  return {\n    width: 1,\n    color: '#000'\n  };\n}\n\n/**\n * Create default object for empty border.\n *\n * @returns {object} `{{hide: boolean}}`.\n */\nexport function createSingleEmptyBorder() {\n  return {\n    hide: true\n  };\n}\n\n/**\n * Create default Handsontable border object.\n *\n * @returns {object} `{{width: number, color: string, cornerVisible: boolean}}`.\n */\nexport function createDefaultHtBorder() {\n  return {\n    width: 1,\n    color: '#000',\n    cornerVisible: false\n  };\n}\n\n/**\n * Normalizes the border object to be compatible with the Border API from the Walkontable.\n * The function translates the \"left\"/\"right\" properties to \"start\"/\"end\" prop names.\n *\n * @param {object} border The configuration object of the border.\n * @returns {object}\n */\nexport function normalizeBorder(border) {\n  if (isDefined(border.start) || isDefined(border.left)) {\n    var _border$start;\n    border.start = (_border$start = border.start) !== null && _border$start !== void 0 ? _border$start : border.left;\n  }\n  if (isDefined(border.end) || isDefined(border.right)) {\n    var _border$end;\n    border.end = (_border$end = border.end) !== null && _border$end !== void 0 ? _border$end : border.right;\n  }\n  delete border.left;\n  delete border.right;\n  return border;\n}\n\n/**\n * Denormalizes the border object to be backward compatible with the previous version of the CustomBorders\n * plugin API. The function extends the border configuration object for the backward compatible \"left\"/\"right\"\n * properties.\n *\n * @param {object} border The configuration object of the border.\n * @returns {object}\n */\nexport function denormalizeBorder(border) {\n  if (isDefined(border.start)) {\n    border.left = border.start;\n  }\n  if (isDefined(border.end)) {\n    border.right = border.end;\n  }\n  return border;\n}\n\n/**\n * Prepare empty border for each cell with all custom borders hidden.\n *\n * @param {number} row Visual row index.\n * @param {number} col Visual column index.\n * @returns {{id: string, border: any, row: number, col: number, top: {hide: boolean}, bottom: {hide: boolean}, start: {hide: boolean}, end: {hide: boolean}}} Returns border configuration containing visual indexes.\n */\nexport function createEmptyBorders(row, col) {\n  return {\n    id: createId(row, col),\n    border: createDefaultHtBorder(),\n    row,\n    col,\n    top: createSingleEmptyBorder(),\n    bottom: createSingleEmptyBorder(),\n    start: createSingleEmptyBorder(),\n    end: createSingleEmptyBorder()\n  };\n}\n\n/**\n * @param {object} defaultBorder The default border object.\n * @param {object} customBorder The border object with custom settings.\n * @returns {object}\n */\nexport function extendDefaultBorder(defaultBorder, customBorder) {\n  if (hasOwnProperty(customBorder, 'border') && customBorder.border) {\n    defaultBorder.border = customBorder.border;\n  }\n  if (hasOwnProperty(customBorder, 'top') && isDefined(customBorder.top)) {\n    if (customBorder.top) {\n      if (!isObject(customBorder.top)) {\n        customBorder.top = createDefaultCustomBorder();\n      }\n      defaultBorder.top = customBorder.top;\n    } else {\n      customBorder.top = createSingleEmptyBorder();\n      defaultBorder.top = customBorder.top;\n    }\n  }\n  if (hasOwnProperty(customBorder, 'bottom') && isDefined(customBorder.bottom)) {\n    if (customBorder.bottom) {\n      if (!isObject(customBorder.bottom)) {\n        customBorder.bottom = createDefaultCustomBorder();\n      }\n      defaultBorder.bottom = customBorder.bottom;\n    } else {\n      customBorder.bottom = createSingleEmptyBorder();\n      defaultBorder.bottom = customBorder.bottom;\n    }\n  }\n  if (hasOwnProperty(customBorder, 'start') && isDefined(customBorder.start)) {\n    if (customBorder.start) {\n      if (!isObject(customBorder.start)) {\n        customBorder.start = createDefaultCustomBorder();\n      }\n      defaultBorder.start = customBorder.start;\n    } else {\n      customBorder.start = createSingleEmptyBorder();\n      defaultBorder.start = customBorder.start;\n    }\n  }\n  if (hasOwnProperty(customBorder, 'end') && isDefined(customBorder.end)) {\n    if (customBorder.end) {\n      if (!isObject(customBorder.end)) {\n        customBorder.end = createDefaultCustomBorder();\n      }\n      defaultBorder.end = customBorder.end;\n    } else {\n      customBorder.end = createSingleEmptyBorder();\n      defaultBorder.end = customBorder.end;\n    }\n  }\n  return defaultBorder;\n}\n\n/**\n * Check if selection has border.\n *\n * @param {Core} hot The Handsontable instance.\n * @param {string} [direction] If set ('left' or 'top') then only the specified border side will be checked.\n * @returns {boolean}\n */\nexport function checkSelectionBorders(hot, direction) {\n  let atLeastOneHasBorder = false;\n  arrayEach(hot.getSelectedRange(), range => {\n    range.forAll((r, c) => {\n      if (r < 0 || c < 0) {\n        return;\n      }\n      const metaBorders = hot.getCellMeta(r, c).borders;\n      if (metaBorders) {\n        if (direction) {\n          if (!hasOwnProperty(metaBorders[direction], 'hide') || metaBorders[direction].hide === false) {\n            atLeastOneHasBorder = true;\n            return false; // breaks forAll\n          }\n        } else {\n          atLeastOneHasBorder = true;\n          return false; // breaks forAll\n        }\n      }\n    });\n  });\n\n  return atLeastOneHasBorder;\n}\n\n/**\n * Mark label in contextMenu as selected.\n *\n * @param {string} label The label text.\n * @returns {string}\n */\nexport function markSelected(label) {\n  return `<span class=\"selected\">${String.fromCharCode(10003)}</span>${label}`; // workaround for https://github.com/handsontable/handsontable/issues/1946\n}\n\n/**\n * Checks if in the borders config there are defined \"left\" or \"right\" border properties.\n *\n * @param {object[]} borders The custom border plugin's options.\n * @returns {boolean}\n */\nexport function hasLeftRightTypeOptions(borders) {\n  return borders.some(border => isDefined(border.left) || isDefined(border.right));\n}\n\n/**\n * Checks if in the borders config there are defined \"start\" or \"end\" border properties.\n *\n * @param {object[]} borders The custom border plugin's options.\n * @returns {boolean}\n */\nexport function hasStartEndTypeOptions(borders) {\n  return borders.some(border => isDefined(border.start) || isDefined(border.end));\n}\nconst physicalToInlinePropNames = new Map([['left', 'start'], ['right', 'end']]);\n\n/**\n * Translates the physical horizontal direction to logical ones. If not known property name is\n * passed it will be returned without modification.\n *\n * @param {string} propName The physical direction property name (\"left\" or \"right\").\n * @returns {string}\n */\nexport function toInlinePropName(propName) {\n  var _physicalToInlineProp;\n  return (_physicalToInlineProp = physicalToInlinePropNames.get(propName)) !== null && _physicalToInlineProp !== void 0 ? _physicalToInlineProp : propName;\n}","import * as C from \"../../../i18n/constants.mjs\";\nimport { checkSelectionBorders, markSelected } from \"../utils.mjs\";\n/**\n * @param {CustomBorders} customBordersPlugin The plugin instance.\n * @returns {object}\n */\nexport default function top(customBordersPlugin) {\n  return {\n    key: 'borders:top',\n    name() {\n      let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_BORDERS_TOP);\n      const hasBorder = checkSelectionBorders(this, 'top');\n      if (hasBorder) {\n        label = markSelected(label);\n      }\n      return label;\n    },\n    callback(key, selected) {\n      const hasBorder = checkSelectionBorders(this, 'top');\n      customBordersPlugin.prepareBorder(selected, 'top', hasBorder);\n    }\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nimport { checkSelectionBorders, markSelected } from \"../utils.mjs\";\n/**\n * @param {CustomBorders} customBordersPlugin The plugin instance.\n * @returns {object}\n */\nexport default function right(customBordersPlugin) {\n  const borderDirection = customBordersPlugin.hot.isRtl() ? 'start' : 'end';\n  return {\n    key: 'borders:right',\n    name() {\n      let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_BORDERS_RIGHT);\n      const hasBorder = checkSelectionBorders(this, borderDirection);\n      if (hasBorder) {\n        label = markSelected(label);\n      }\n      return label;\n    },\n    callback(key, selected) {\n      const hasBorder = checkSelectionBorders(this, borderDirection);\n      customBordersPlugin.prepareBorder(selected, borderDirection, hasBorder);\n    }\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nimport { checkSelectionBorders, markSelected } from \"../utils.mjs\";\n/**\n * @param {CustomBorders} customBordersPlugin The plugin instance.\n * @returns {object}\n */\nexport default function bottom(customBordersPlugin) {\n  return {\n    key: 'borders:bottom',\n    name() {\n      let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_BORDERS_BOTTOM);\n      const hasBorder = checkSelectionBorders(this, 'bottom');\n      if (hasBorder) {\n        label = markSelected(label);\n      }\n      return label;\n    },\n    callback(key, selected) {\n      const hasBorder = checkSelectionBorders(this, 'bottom');\n      customBordersPlugin.prepareBorder(selected, 'bottom', hasBorder);\n    }\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nimport { checkSelectionBorders, markSelected } from \"../utils.mjs\";\n/**\n * @param {CustomBorders} customBordersPlugin The plugin instance.\n * @returns {object}\n */\nexport default function left(customBordersPlugin) {\n  const borderDirection = customBordersPlugin.hot.isRtl() ? 'end' : 'start';\n  return {\n    key: 'borders:left',\n    name() {\n      let label = this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_BORDERS_LEFT);\n      const hasBorder = checkSelectionBorders(this, borderDirection);\n      if (hasBorder) {\n        label = markSelected(label);\n      }\n      return label;\n    },\n    callback(key, selected) {\n      const hasBorder = checkSelectionBorders(this, borderDirection);\n      customBordersPlugin.prepareBorder(selected, borderDirection, hasBorder);\n    }\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nimport { checkSelectionBorders } from \"../utils.mjs\";\n/**\n * @param {CustomBorders} customBordersPlugin The plugin instance.\n * @returns {object}\n */\nexport default function noBorders(customBordersPlugin) {\n  return {\n    key: 'borders:no_borders',\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_REMOVE_BORDERS);\n    },\n    callback(key, selected) {\n      customBordersPlugin.prepareBorder(selected, 'noBorders');\n    },\n    disabled() {\n      return !checkSelectionBorders(this);\n    }\n  };\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { hasOwnProperty, deepClone } from \"../../helpers/object.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { arrayEach, arrayReduce, arrayMap } from \"../../helpers/array.mjs\";\nimport * as C from \"../../i18n/constants.mjs\";\nimport { top as menuItemTop, bottom as menuItemBottom, left as menuItemLeft, right as menuItemRight, noBorders as menuItemNoBorders } from \"./contextMenuItem/index.mjs\";\nimport { createId, createDefaultCustomBorder, createSingleEmptyBorder, createEmptyBorders, extendDefaultBorder, hasLeftRightTypeOptions, hasStartEndTypeOptions, toInlinePropName, normalizeBorder, denormalizeBorder } from \"./utils.mjs\";\nimport { detectSelectionType, normalizeSelectionFactory } from \"../../selection/index.mjs\";\nexport const PLUGIN_KEY = 'customBorders';\nexport const PLUGIN_PRIORITY = 90;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin CustomBorders\n * @class CustomBorders\n *\n * @description\n * This plugin enables an option to apply custom borders through the context menu (configurable with context menu key\n * `borders`).\n *\n * To initialize Handsontable with predefined custom borders, provide cell coordinates and border styles in a form\n * of an array.\n *\n * See [`customBorders` configuration option](@/api/options.md#customBorders) or go to\n * [Custom cell borders demo](@/guides/cell-features/formatting-cells.md#custom-cell-borders) for more examples.\n *\n * @example\n * ```js\n * customBorders: [\n *   {\n *    range: {\n *      from: {\n *        row: 1,\n *        col: 1\n *      },\n *      to: {\n *        row: 3,\n *        col: 4\n *      },\n *    },\n *    start: {},\n *    end: {},\n *    top: {},\n *    bottom: {},\n *   },\n * ],\n *\n * // or\n * customBorders: [\n *   { row: 2,\n *     col: 2,\n *     start: {\n *       width: 2,\n *       color: 'red',\n *     },\n *     end: {\n *       width: 1,\n *       color: 'green',\n *     },\n *     top: '',\n *     bottom: '',\n *   }\n * ],\n * ```\n */\nexport class CustomBorders extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Saved borders.\n     *\n     * @private\n     * @type {Array}\n     */\n    _defineProperty(this, \"savedBorders\", []);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link CustomBorders#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    this.addHook('afterContextMenuDefaultOptions', options => this.onAfterContextMenuDefaultOptions(options));\n    this.addHook('init', () => this.onAfterInit());\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hideBorders();\n    super.disablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`customBorders`](@/api/options.md#customborders)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    this.changeBorderSettings();\n    super.updatePlugin();\n  }\n\n  /**\n   * Set custom borders.\n   *\n   * @example\n   * ```js\n   * const customBordersPlugin = hot.getPlugin('customBorders');\n   *\n   * // Using an array of arrays (produced by `.getSelected()` method).\n   * customBordersPlugin.setBorders([[1, 1, 2, 2], [6, 2, 0, 2]], {start: {width: 2, color: 'blue'}});\n   *\n   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).\n   * //  Selecting a cell range.\n   * hot.selectCell(0, 0, 2, 2);\n   * // Returning selected cells' range with the getSelectedRange method.\n   * customBordersPlugin.setBorders(hot.getSelectedRange(), {start: {hide: false, width: 2, color: 'blue'}});\n   * ```\n   *\n   * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.\n   * @param {object} borderObject Object with `top`, `right`, `bottom` and `start` properties.\n   */\n  setBorders(selectionRanges, borderObject) {\n    let borderKeys = ['top', 'bottom', 'start', 'end'];\n    let normBorder = null;\n    if (borderObject) {\n      this.checkSettingsCohesion([borderObject]);\n      borderKeys = Object.keys(borderObject);\n      normBorder = normalizeBorder(borderObject);\n    }\n    const selectionType = detectSelectionType(selectionRanges);\n    const selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);\n    arrayEach(selectionRanges, selection => {\n      selectionSchemaNormalizer(selection).forAll((row, col) => {\n        arrayEach(borderKeys, borderKey => {\n          this.prepareBorderFromCustomAdded(row, col, normBorder, toInlinePropName(borderKey));\n        });\n      });\n    });\n\n    /*\n    The line below triggers a re-render of Handsontable. This will be a \"fastDraw\"\n    render, because that is the default for the TableView class.\n     The re-render is needed for borders on cells that did not have a border before.\n    The way this call works is that it calls Table.refreshSelections, which calls\n    Selection.getBorder, which creates a new instance of Border.\n     Seems wise to keep this single-direction flow of creating new Borders\n    */\n    this.hot.view.render();\n  }\n\n  /**\n   * Get custom borders.\n   *\n   * @example\n   * ```js\n   * const customBordersPlugin = hot.getPlugin('customBorders');\n   *\n   * // Using an array of arrays (produced by `.getSelected()` method).\n   * customBordersPlugin.getBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);\n   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).\n   * customBordersPlugin.getBorders(hot.getSelectedRange());\n   * // Using without param - return all customBorders.\n   * customBordersPlugin.getBorders();\n   * ```\n   *\n   * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.\n   * @returns {object[]} Returns array of border objects.\n   */\n  getBorders(selectionRanges) {\n    if (!Array.isArray(selectionRanges)) {\n      return this.savedBorders;\n    }\n    const selectionType = detectSelectionType(selectionRanges);\n    const selectionSchemaNormalizer = normalizeSelectionFactory(selectionType);\n    const selectedBorders = [];\n    arrayEach(selectionRanges, selection => {\n      selectionSchemaNormalizer(selection).forAll((row, col) => {\n        arrayEach(this.savedBorders, border => {\n          if (border.row === row && border.col === col) {\n            selectedBorders.push(denormalizeBorder(border));\n          }\n        });\n      });\n    });\n    return selectedBorders;\n  }\n\n  /**\n   * Clear custom borders.\n   *\n   * @example\n   * ```js\n   * const customBordersPlugin = hot.getPlugin('customBorders');\n   *\n   * // Using an array of arrays (produced by `.getSelected()` method).\n   * customBordersPlugin.clearBorders([[1, 1, 2, 2], [6, 2, 0, 2]]);\n   * // Using an array of CellRange objects (produced by `.getSelectedRange()` method).\n   * customBordersPlugin.clearBorders(hot.getSelectedRange());\n   * // Using without param - clear all customBorders.\n   * customBordersPlugin.clearBorders();\n   * ```\n   *\n   * @param {Array[]|CellRange[]} selectionRanges Array of selection ranges.\n   */\n  clearBorders(selectionRanges) {\n    if (selectionRanges) {\n      this.setBorders(selectionRanges);\n    } else {\n      arrayEach(this.savedBorders, border => {\n        this.clearBordersFromSelectionSettings(border.id);\n        this.clearNullCellRange();\n        this.hot.removeCellMeta(border.row, border.col, 'borders');\n      });\n      this.savedBorders.length = 0;\n    }\n  }\n\n  /**\n   * Insert WalkontableSelection instance into Walkontable settings.\n   *\n   * @private\n   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.\n   * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.\n   */\n  insertBorderIntoSettings(border, place) {\n    const hasSavedBorders = this.checkSavedBorders(border);\n    if (!hasSavedBorders) {\n      this.savedBorders.push(border);\n    }\n    const visualCellRange = this.hot._createCellRange(this.hot._createCellCoords(border.row, border.col));\n    const hasCustomSelections = this.checkCustomSelections(border, visualCellRange, place);\n    if (!hasCustomSelections) {\n      this.hot.selection.highlight.addCustomSelection({\n        border,\n        visualCellRange\n      });\n    }\n  }\n\n  /**\n   * Prepare borders from setting (single cell).\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {object} borderDescriptor Object with `row` and `col`, `start`, `end`, `top` and `bottom` properties.\n   * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.\n   */\n  prepareBorderFromCustomAdded(row, column, borderDescriptor, place) {\n    const nrOfRows = this.hot.countRows();\n    const nrOfColumns = this.hot.countCols();\n    if (row >= nrOfRows || column >= nrOfColumns) {\n      return;\n    }\n    let border = createEmptyBorders(row, column);\n    if (borderDescriptor) {\n      border = extendDefaultBorder(border, borderDescriptor);\n      arrayEach(this.hot.selection.highlight.customSelections, customSelection => {\n        if (border.id === customSelection.settings.id) {\n          Object.assign(customSelection.settings, borderDescriptor);\n          border.id = customSelection.settings.id;\n          border.top = customSelection.settings.top;\n          border.bottom = customSelection.settings.bottom;\n          border.start = customSelection.settings.start;\n          border.end = customSelection.settings.end;\n          return false; // breaks forAll\n        }\n      });\n    }\n\n    this.hot.setCellMeta(row, column, 'borders', denormalizeBorder(border));\n    this.insertBorderIntoSettings(border, place);\n  }\n\n  /**\n   * Prepare borders from setting (object).\n   *\n   * @private\n   * @param {object} range {CellRange} The CellRange object.\n   * @param {object} customBorder Object with `start`, `end`, `top` and `bottom` properties.\n   */\n  prepareBorderFromCustomAddedRange(range, customBorder) {\n    const lastRowIndex = Math.min(range.to.row, this.hot.countRows() - 1);\n    const lastColumnIndex = Math.min(range.to.col, this.hot.countCols() - 1);\n    rangeEach(range.from.row, lastRowIndex, rowIndex => {\n      rangeEach(range.from.col, lastColumnIndex, colIndex => {\n        const border = createEmptyBorders(rowIndex, colIndex);\n        let add = 0;\n        if (rowIndex === range.from.row) {\n          if (hasOwnProperty(customBorder, 'top')) {\n            add += 1;\n            border.top = customBorder.top;\n          }\n        }\n\n        // Please keep in mind that `range.to.row` may be beyond the table boundaries. The border won't be rendered.\n        if (rowIndex === range.to.row) {\n          if (hasOwnProperty(customBorder, 'bottom')) {\n            add += 1;\n            border.bottom = customBorder.bottom;\n          }\n        }\n        if (colIndex === range.from.col) {\n          if (hasOwnProperty(customBorder, 'start')) {\n            add += 1;\n            border.start = customBorder.start;\n          }\n        }\n\n        // Please keep in mind that `range.to.col` may be beyond the table boundaries. The border won't be rendered.\n        if (colIndex === range.to.col) {\n          if (hasOwnProperty(customBorder, 'end')) {\n            add += 1;\n            border.end = customBorder.end;\n          }\n        }\n        if (add > 0) {\n          this.hot.setCellMeta(rowIndex, colIndex, 'borders', denormalizeBorder(border));\n          this.insertBorderIntoSettings(border);\n        } else {\n          // TODO sometimes it enters here. Why?\n        }\n      });\n    });\n  }\n\n  /**\n   * Remove border (triggered from context menu).\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   */\n  removeAllBorders(row, column) {\n    const borderId = createId(row, column);\n    this.spliceBorder(borderId);\n    this.clearBordersFromSelectionSettings(borderId);\n    this.clearNullCellRange();\n    this.hot.removeCellMeta(row, column, 'borders');\n  }\n\n  /**\n   * Set borders for each cell re. To border position.\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `start`, `end` and `noBorders`.\n   * @param {boolean} remove True when remove borders, and false when add borders.\n   */\n  setBorder(row, column, place, remove) {\n    let bordersMeta = this.hot.getCellMeta(row, column).borders;\n    if (!bordersMeta || bordersMeta.border === void 0) {\n      bordersMeta = createEmptyBorders(row, column);\n    } else {\n      bordersMeta = normalizeBorder(bordersMeta);\n    }\n    if (remove) {\n      bordersMeta[place] = createSingleEmptyBorder();\n      const hideCount = this.countHide(bordersMeta);\n      if (hideCount === 4) {\n        this.removeAllBorders(row, column);\n      } else {\n        const customSelectionsChecker = this.checkCustomSelectionsFromContextMenu(bordersMeta, place, remove);\n        if (!customSelectionsChecker) {\n          this.insertBorderIntoSettings(bordersMeta);\n        }\n        this.hot.setCellMeta(row, column, 'borders', denormalizeBorder(bordersMeta));\n      }\n    } else {\n      bordersMeta[place] = createDefaultCustomBorder();\n      const customSelectionsChecker = this.checkCustomSelectionsFromContextMenu(bordersMeta, place, remove);\n      if (!customSelectionsChecker) {\n        this.insertBorderIntoSettings(bordersMeta);\n      }\n      this.hot.setCellMeta(row, column, 'borders', denormalizeBorder(bordersMeta));\n    }\n  }\n\n  /**\n   * Prepare borders based on cell and border position.\n   *\n   * @private\n   * @param {CellRange[]} selected An array of CellRange objects.\n   * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `left`, `right` and `noBorders`.\n   * @param {boolean} remove True when remove borders, and false when add borders.\n   */\n  prepareBorder(selected, place, remove) {\n    arrayEach(selected, _ref => {\n      let {\n        start,\n        end\n      } = _ref;\n      if (start.row === end.row && start.col === end.col) {\n        if (place === 'noBorders') {\n          this.removeAllBorders(start.row, start.col);\n        } else {\n          this.setBorder(start.row, start.col, place, remove);\n        }\n      } else {\n        switch (place) {\n          case 'noBorders':\n            rangeEach(start.col, end.col, colIndex => {\n              rangeEach(start.row, end.row, rowIndex => {\n                this.removeAllBorders(rowIndex, colIndex);\n              });\n            });\n            break;\n          case 'top':\n            rangeEach(start.col, end.col, topCol => {\n              this.setBorder(start.row, topCol, place, remove);\n            });\n            break;\n          case 'bottom':\n            rangeEach(start.col, end.col, bottomCol => {\n              this.setBorder(end.row, bottomCol, place, remove);\n            });\n            break;\n          case 'start':\n            rangeEach(start.row, end.row, rowStart => {\n              this.setBorder(rowStart, start.col, place, remove);\n            });\n            break;\n          case 'end':\n            rangeEach(start.row, end.row, rowEnd => {\n              this.setBorder(rowEnd, end.col, place, remove);\n            });\n            break;\n          default:\n            break;\n        }\n      }\n    });\n  }\n\n  /**\n   * Create borders from settings.\n   *\n   * @private\n   * @param {Array} customBorders Object with `row` and `col`, `start`, `end`, `top` and `bottom` properties.\n   */\n  createCustomBorders(customBorders) {\n    arrayEach(customBorders, customBorder => {\n      const normCustomBorder = normalizeBorder(customBorder);\n      if (customBorder.range) {\n        this.prepareBorderFromCustomAddedRange(customBorder.range, normCustomBorder);\n      } else {\n        this.prepareBorderFromCustomAdded(customBorder.row, customBorder.col, normCustomBorder);\n      }\n    });\n  }\n\n  /**\n   * Count hide property in border object.\n   *\n   * @private\n   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and\n   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.\n   * @returns {number}\n   */\n  countHide(border) {\n    const {\n      top,\n      bottom,\n      start,\n      end\n    } = border;\n    const values = [top, bottom, start, end];\n    return arrayReduce(values, (accumulator, value) => {\n      let result = accumulator;\n      if (value && value.hide) {\n        result += 1;\n      }\n      return result;\n    }, 0);\n  }\n\n  /**\n   * Clear borders settings from custom selections.\n   *\n   * @private\n   * @param {string} borderId Border id name as string.\n   */\n  clearBordersFromSelectionSettings(borderId) {\n    const index = arrayMap(this.hot.selection.highlight.customSelections, customSelection => customSelection.settings.id).indexOf(borderId);\n    if (index > -1) {\n      this.hot.selection.highlight.customSelections[index].clear();\n    }\n  }\n\n  /**\n   * Clear cellRange with null value.\n   *\n   * @private\n   */\n  clearNullCellRange() {\n    arrayEach(this.hot.selection.highlight.customSelections, (customSelection, index) => {\n      if (customSelection.cellRange === null) {\n        this.hot.selection.highlight.customSelections[index].destroy();\n        this.hot.selection.highlight.customSelections.splice(index, 1);\n        return false; // breaks forAll\n      }\n    });\n  }\n\n  /**\n   * Hide custom borders.\n   *\n   * @private\n   */\n  hideBorders() {\n    arrayEach(this.savedBorders, border => {\n      this.clearBordersFromSelectionSettings(border.id);\n      this.clearNullCellRange();\n    });\n  }\n\n  /**\n   * Splice border from savedBorders.\n   *\n   * @private\n   * @param {string} borderId Border id name as string.\n   */\n  spliceBorder(borderId) {\n    const index = arrayMap(this.savedBorders, border => border.id).indexOf(borderId);\n    if (index > -1) {\n      this.savedBorders.splice(index, 1);\n    }\n  }\n\n  /**\n   * Check if an border already exists in the savedBorders array, and if true update border in savedBorders.\n   *\n   * @private\n   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and\n   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.\n   *\n   * @returns {boolean}\n   */\n  checkSavedBorders(border) {\n    let check = false;\n    const hideCount = this.countHide(border);\n    if (hideCount === 4) {\n      this.spliceBorder(border.id);\n      check = true;\n    } else {\n      arrayEach(this.savedBorders, (savedBorder, index) => {\n        if (border.id === savedBorder.id) {\n          this.savedBorders[index] = border;\n          check = true;\n          return false; // breaks forAll\n        }\n      });\n    }\n\n    return check;\n  }\n\n  /**\n   * Check if an border already exists in the customSelections, and if true call toggleHiddenClass method.\n   *\n   * @private\n   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and\n   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.\n   * @param {string} place Coordinate where add/remove border - `top`, `bottom`, `start`, `end` and `noBorders`.\n   * @param {boolean} remove True when remove borders, and false when add borders.\n   *\n   * @returns {boolean}\n   */\n  checkCustomSelectionsFromContextMenu(border, place, remove) {\n    let check = false;\n    arrayEach(this.hot.selection.highlight.customSelections, customSelection => {\n      if (border.id === customSelection.settings.id) {\n        const borders = this.hot.view._wt.selectionManager.getBorderInstances(customSelection);\n        arrayEach(borders, borderObject => {\n          borderObject.toggleHiddenClass(place, remove); // TODO this also bad?\n        });\n\n        check = true;\n        return false; // breaks forAll\n      }\n    });\n\n    return check;\n  }\n\n  /**\n   * Check if an border already exists in the customSelections, and if true reset cellRange.\n   *\n   * @private\n   * @param {object} border Object with `row` and `col`, `start`, `end`, `top` and `bottom`, `id` and\n   *                        `border` ({Object} with `color`, `width` and `cornerVisible` property) properties.\n   * @param {CellRange} cellRange The selection range to check.\n   * @param {string} [place] Coordinate where add/remove border - `top`, `bottom`, `start`, `end`.\n   * @returns {boolean}\n   */\n  checkCustomSelections(border, cellRange, place) {\n    const hideCount = this.countHide(border);\n    let check = false;\n    if (hideCount === 4) {\n      this.removeAllBorders(border.row, border.col);\n      check = true;\n    } else {\n      arrayEach(this.hot.selection.highlight.customSelections, customSelection => {\n        if (border.id === customSelection.settings.id) {\n          customSelection.visualCellRange = cellRange;\n          customSelection.commit();\n          if (place) {\n            const borders = this.hot.view._wt.selectionManager.getBorderInstances(customSelection);\n            arrayEach(borders, borderObject => {\n              borderObject.changeBorderStyle(place, border);\n            });\n          }\n          check = true;\n          return false; // breaks forAll\n        }\n      });\n    }\n\n    return check;\n  }\n\n  /**\n   * Change borders from settings.\n   *\n   * @private\n   */\n  changeBorderSettings() {\n    const customBorders = this.hot.getSettings()[PLUGIN_KEY];\n    if (Array.isArray(customBorders)) {\n      const bordersClone = deepClone(customBorders);\n      this.checkSettingsCohesion(bordersClone);\n      if (!bordersClone.length) {\n        this.savedBorders = bordersClone;\n      }\n      this.createCustomBorders(bordersClone);\n    } else if (customBorders !== void 0) {\n      this.createCustomBorders(this.savedBorders);\n    }\n  }\n\n  /**\n   * Checks the settings cohesion. The properties such like \"left\"/\"right\" are supported only\n   * in the LTR mode and the \"left\"/\"right\" options can not be used together with \"start\"/\"end\" properties.\n   *\n   * @private\n   * @param {object[]} customBorders The user defined custom border objects array.\n   */\n  checkSettingsCohesion(customBorders) {\n    const hasLeftOrRight = hasLeftRightTypeOptions(customBorders);\n    const hasStartOrEnd = hasStartEndTypeOptions(customBorders);\n    if (hasLeftOrRight && hasStartOrEnd) {\n      throw new Error('The \"left\"/\"right\" and \"start\"/\"end\" options should not be used together. ' + 'Please use only the option \"start\"/\"end\".');\n    }\n    if (this.hot.isRtl() && hasLeftOrRight) {\n      throw new Error('The \"left\"/\"right\" properties are not supported for RTL. Please use option \"start\"/\"end\".');\n    }\n  }\n\n  /**\n   * Add border options to context menu.\n   *\n   * @private\n   * @param {object} defaultOptions Context menu items.\n   */\n  onAfterContextMenuDefaultOptions(defaultOptions) {\n    if (!this.hot.getSettings()[PLUGIN_KEY]) {\n      return;\n    }\n    defaultOptions.items.push({\n      name: '---------'\n    }, {\n      key: 'borders',\n      name() {\n        return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_BORDERS);\n      },\n      disabled() {\n        const range = this.getSelectedRangeLast();\n        if (!range) {\n          return true;\n        }\n        if (range.isSingleHeader()) {\n          return true;\n        }\n        return this.selection.isSelectedByCorner();\n      },\n      submenu: {\n        items: [menuItemTop(this), menuItemRight(this), menuItemBottom(this), menuItemLeft(this), menuItemNoBorders(this)]\n      }\n    });\n  }\n\n  /**\n   * `afterInit` hook callback.\n   *\n   * @private\n   */\n  onAfterInit() {\n    this.changeBorderSettings();\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}","import { BasePlugin } from \"../base/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { isRightClick } from \"../../helpers/dom/event.mjs\";\nimport { getParentWindow } from \"../../helpers/dom/element.mjs\";\nexport const PLUGIN_KEY = 'dragToScroll';\nexport const PLUGIN_PRIORITY = 100;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @description\n * Plugin used to scroll Handsontable by selecting a cell and dragging outside of the visible viewport.\n *\n *\n * @class DragToScroll\n * @plugin DragToScroll\n */\nexport class DragToScroll extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n    this.eventManager = new EventManager(this);\n    /**\n     * Size of an element and its position relative to the viewport,\n     * e.g. {bottom: 449, height: 441, left: 8, right: 814, top: 8, width: 806, x: 8, y:8}.\n     *\n     * @type {DOMRect}\n     */\n    this.boundaries = null;\n    /**\n     * Callback function.\n     *\n     * @private\n     * @type {Function}\n     */\n    this.callback = null;\n    /**\n     * Flag indicates mouseDown/mouseUp.\n     *\n     * @private\n     * @type {boolean}\n     */\n    this.listening = false;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link DragToScroll#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    this.addHook('afterOnCellMouseDown', event => this.setupListening(event));\n    this.addHook('afterOnCellCornerMouseDown', event => this.setupListening(event));\n    this.registerEvents();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`dragToScroll`](@/api/options.md#dragtoscroll)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.unregisterEvents();\n    super.disablePlugin();\n  }\n\n  /**\n   * Sets the value of the visible element.\n   *\n   * @param {DOMRect} boundaries An object with coordinates compatible with DOMRect.\n   */\n  setBoundaries(boundaries) {\n    this.boundaries = boundaries;\n  }\n\n  /**\n   * Changes callback function.\n   *\n   * @param {Function} callback The callback function.\n   */\n  setCallback(callback) {\n    this.callback = callback;\n  }\n\n  /**\n   * Checks if the mouse position (X, Y) is outside of the viewport and fires a callback with calculated X an Y diffs\n   * between passed boundaries.\n   *\n   * @param {number} x Mouse X coordinate to check.\n   * @param {number} y Mouse Y coordinate to check.\n   */\n  check(x, y) {\n    let diffX = 0;\n    let diffY = 0;\n    if (y < this.boundaries.top) {\n      // y is less than top\n      diffY = y - this.boundaries.top;\n    } else if (y > this.boundaries.bottom) {\n      // y is more than bottom\n      diffY = y - this.boundaries.bottom;\n    }\n    if (x < this.boundaries.left) {\n      // x is less than left\n      diffX = x - this.boundaries.left;\n    } else if (x > this.boundaries.right) {\n      // x is more than right\n      diffX = x - this.boundaries.right;\n    }\n    this.callback(diffX, diffY);\n  }\n\n  /**\n   * Enables listening on `mousemove` event.\n   *\n   * @private\n   */\n  listen() {\n    this.listening = true;\n  }\n\n  /**\n   * Disables listening on `mousemove` event.\n   *\n   * @private\n   */\n  unlisten() {\n    this.listening = false;\n  }\n\n  /**\n   * Returns current state of listening.\n   *\n   * @private\n   * @returns {boolean}\n   */\n  isListening() {\n    return this.listening;\n  }\n\n  /**\n   * Registers dom listeners.\n   *\n   * @private\n   */\n  registerEvents() {\n    const {\n      rootWindow\n    } = this.hot;\n    let frame = rootWindow;\n    while (frame) {\n      this.eventManager.addEventListener(frame.document, 'contextmenu', () => this.unlisten());\n      this.eventManager.addEventListener(frame.document, 'mouseup', () => this.unlisten());\n      this.eventManager.addEventListener(frame.document, 'mousemove', event => this.onMouseMove(event));\n      frame = getParentWindow(frame);\n    }\n  }\n\n  /**\n   * Unbinds the events used by the plugin.\n   *\n   * @private\n   */\n  unregisterEvents() {\n    this.eventManager.clear();\n  }\n\n  /**\n   * On after on cell/cellCorner mouse down listener.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event object.\n   */\n  setupListening(event) {\n    if (isRightClick(event)) {\n      return;\n    }\n    const scrollHandler = this.hot.view._wt.wtTable.holder; // native scroll\n\n    if (scrollHandler === this.hot.rootWindow) {\n      // not much we can do currently\n      return;\n    }\n    this.setBoundaries(scrollHandler.getBoundingClientRect());\n    this.setCallback((scrollX, scrollY) => {\n      if (scrollX < 0) {\n        scrollHandler.scrollLeft -= 50;\n      } else if (scrollX > 0) {\n        scrollHandler.scrollLeft += 50;\n      }\n      if (scrollY < 0) {\n        scrollHandler.scrollTop -= 20;\n      } else if (scrollY > 0) {\n        scrollHandler.scrollTop += 20;\n      }\n    });\n    this.listen();\n  }\n\n  /**\n   * 'mouseMove' event callback.\n   *\n   * @private\n   * @param {MouseEvent} event `mousemove` event properties.\n   */\n  onMouseMove(event) {\n    if (!this.isListening()) {\n      return;\n    }\n    this.check(event.clientX, event.clientY);\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { objectEach } from \"../../helpers/object.mjs\";\nimport { CommandExecutor } from \"../contextMenu/commandExecutor.mjs\";\nimport { getDocumentOffsetByElement } from \"../contextMenu/utils.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { hasClass, setAttribute } from \"../../helpers/dom/element.mjs\";\nimport { ItemsFactory } from \"../contextMenu/itemsFactory.mjs\";\nimport { Menu } from \"../contextMenu/menu/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { COLUMN_LEFT, COLUMN_RIGHT, REMOVE_COLUMN, CLEAR_COLUMN, READ_ONLY, ALIGNMENT, SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport { A11Y_HASPOPUP, A11Y_HIDDEN } from \"../../helpers/a11y.mjs\";\nHooks.getSingleton().register('afterDropdownMenuDefaultOptions');\nHooks.getSingleton().register('beforeDropdownMenuShow');\nHooks.getSingleton().register('afterDropdownMenuShow');\nHooks.getSingleton().register('afterDropdownMenuHide');\nHooks.getSingleton().register('afterDropdownMenuExecute');\nexport const PLUGIN_KEY = 'dropdownMenu';\nexport const PLUGIN_PRIORITY = 230;\nconst BUTTON_CLASS_NAME = 'changeType';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @plugin DropdownMenu\n * @class DropdownMenu\n *\n * @description\n * This plugin creates the Handsontable Dropdown Menu. It allows to create a new row or column at any place in the grid\n * among [other features](@/guides/accessories-and-menus/context-menu.md#context-menu-with-specific-options).\n * Possible values:\n * * `true` (to enable default options),\n * * `false` (to disable completely).\n *\n * or array of any available strings:\n * * `[\"row_above\", \"row_below\", \"col_left\", \"col_right\",\n * \"remove_row\", \"remove_col\", \"---------\", \"undo\", \"redo\"]`.\n *\n * See [the dropdown menu demo](@/guides/columns/column-menu.md) for examples.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: data,\n *   colHeaders: true,\n *   // enable dropdown menu\n *   dropdownMenu: true\n * });\n *\n * // or\n * const hot = new Handsontable(container, {\n *   data: data,\n *   colHeaders: true,\n *   // enable and configure dropdown menu\n *   dropdownMenu: ['remove_col', '---------', 'make_read_only', 'alignment']\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={data}\n *   comments={true}\n *   // enable and configure dropdown menu\n *   dropdownMenu={['remove_col', '---------', 'make_read_only', 'alignment']}\n * />\n * ```\n * :::\n */\nvar _addCustomShortcuts = /*#__PURE__*/new WeakSet();\nexport class DropdownMenu extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get PLUGIN_DEPS() {\n    return ['plugin:AutoColumnSize'];\n  }\n\n  /**\n   * Default menu items order when `dropdownMenu` is enabled by setting the config item to `true`.\n   *\n   * @returns {Array}\n   */\n  static get DEFAULT_ITEMS() {\n    return [COLUMN_LEFT, COLUMN_RIGHT, SEPARATOR, REMOVE_COLUMN, SEPARATOR, CLEAR_COLUMN, SEPARATOR, READ_ONLY, SEPARATOR, ALIGNMENT];\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Instance of {@link EventManager}.\n     *\n     * @private\n     * @type {EventManager}\n     */\n    /**\n     * Add custom shortcuts to the provided menu instance.\n     *\n     * @param {Menu} menuInstance The menu instance.\n     */\n    _classPrivateMethodInitSpec(this, _addCustomShortcuts);\n    this.eventManager = new EventManager(this);\n    /**\n     * Instance of {@link CommandExecutor}.\n     *\n     * @private\n     * @type {CommandExecutor}\n     */\n    this.commandExecutor = new CommandExecutor(this.hot);\n    /**\n     * Instance of {@link ItemsFactory}.\n     *\n     * @private\n     * @type {ItemsFactory}\n     */\n    this.itemsFactory = null;\n    /**\n     * Instance of {@link Menu}.\n     *\n     * @private\n     * @type {Menu}\n     */\n    this.menu = null;\n\n    // One listener for enable/disable functionality\n    this.hot.addHook('afterGetColHeader', (col, TH) => this.onAfterGetColHeader(col, TH));\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link DropdownMenu#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   *\n   * @fires Hooks#afterDropdownMenuDefaultOptions\n   * @fires Hooks#beforeDropdownMenuSetItems\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    this.itemsFactory = new ItemsFactory(this.hot, DropdownMenu.DEFAULT_ITEMS);\n    const settings = this.hot.getSettings()[PLUGIN_KEY];\n    const predefinedItems = {\n      items: this.itemsFactory.getItems(settings)\n    };\n    this.registerEvents();\n    if (typeof settings.callback === 'function') {\n      this.commandExecutor.setCommonCallback(settings.callback);\n    }\n    this.registerShortcuts();\n    super.enablePlugin();\n    this.callOnPluginsReady(() => {\n      this.hot.runHooks('afterDropdownMenuDefaultOptions', predefinedItems);\n      this.itemsFactory.setPredefinedItems(predefinedItems.items);\n      const menuItems = this.itemsFactory.getItems(settings);\n      if (this.menu) {\n        this.menu.destroy();\n      }\n      this.menu = new Menu(this.hot, {\n        className: 'htDropdownMenu',\n        keepInViewport: true,\n        container: settings.uiContainer || this.hot.rootDocument.body\n      });\n      this.hot.runHooks('beforeDropdownMenuSetItems', menuItems);\n      this.menu.setMenuItems(menuItems);\n      this.menu.addLocalHook('beforeOpen', () => this.onMenuBeforeOpen());\n      this.menu.addLocalHook('afterOpen', () => this.onMenuAfterOpen());\n      this.menu.addLocalHook('afterSubmenuOpen', subMenuInstance => this.onSubMenuAfterOpen(subMenuInstance));\n      this.menu.addLocalHook('afterClose', () => this.onMenuAfterClose());\n      this.menu.addLocalHook('executeCommand', function () {\n        for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {\n          params[_key] = arguments[_key];\n        }\n        return _this.executeCommand.call(_this, ...params);\n      });\n\n      // Register all commands. Predefined and added by user or by plugins\n      arrayEach(menuItems, command => this.commandExecutor.registerCommand(command.key, command));\n    });\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`dropdownMenu`](@/api/options.md#dropdownmenu)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.close();\n    if (this.menu) {\n      this.menu.destroy();\n    }\n    this.unregisterShortcuts();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling dropdown menu.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    const gridContext = this.hot.getShortcutManager().getContext('grid');\n    const callback = () => {\n      const {\n        highlight\n      } = this.hot.getSelectedRangeLast();\n      if ((highlight.isHeader() && highlight.row === -1 || highlight.isCell()) && highlight.col >= 0) {\n        this.hot.selectColumns(highlight.col, highlight.col, -1);\n        const {\n          from\n        } = this.hot.getSelectedRangeLast();\n        const offset = getDocumentOffsetByElement(this.menu.container, this.hot.rootDocument);\n        const target = this.hot.getCell(-1, from.col, true);\n        const rect = target.getBoundingClientRect();\n        this.open({\n          left: rect.left + offset.left,\n          top: rect.top + target.offsetHeight + offset.top\n        }, {\n          left: rect.width\n        });\n      }\n    };\n    gridContext.addShortcuts([{\n      keys: [['Shift', 'Alt', 'ArrowDown'], ['Control/Meta', 'Enter']],\n      callback,\n      runOnlyIf: () => {\n        var _this$hot$getSelected;\n        return ((_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight.isHeader()) && !this.menu.isOpened();\n      },\n      captureCtrl: true,\n      group: SHORTCUTS_GROUP\n    }, {\n      keys: [['Shift', 'Alt', 'ArrowDown']],\n      callback,\n      runOnlyIf: () => {\n        var _this$hot$getSelected2;\n        return ((_this$hot$getSelected2 = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected2 === void 0 ? void 0 : _this$hot$getSelected2.highlight.isCell()) && !this.menu.isOpened();\n      },\n      group: SHORTCUTS_GROUP\n    }]);\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling dropdown menu.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Registers the DOM listeners.\n   *\n   * @private\n   */\n  registerEvents() {\n    this.eventManager.addEventListener(this.hot.rootElement, 'click', event => this.onTableClick(event));\n  }\n\n  /**\n   * Opens menu and re-position it based on the passed coordinates.\n   *\n   * @param {{ top: number, left: number }|Event} position An object with `top` and `left` properties\n   * which contains coordinates relative to the browsers viewport (without included scroll offsets).\n   * Or if the native event is passed the menu will be positioned based on the `pageX` and `pageY`\n   * coordinates.\n   * @param {{ above: number, below: number, left: number, right: number }} offset An object allows applying\n   * the offset to the menu position.\n   * @fires Hooks#beforeDropdownMenuShow\n   * @fires Hooks#afterDropdownMenuShow\n   */\n  open(position) {\n    var _this$menu;\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      above: 0,\n      below: 0,\n      left: 0,\n      right: 0\n    };\n    if ((_this$menu = this.menu) !== null && _this$menu !== void 0 && _this$menu.isOpened()) {\n      return;\n    }\n    this.menu.open();\n    objectEach(offset, (value, key) => {\n      this.menu.setOffset(key, value);\n    });\n    this.menu.setPosition(position);\n  }\n\n  /**\n   * Closes dropdown menu.\n   */\n  close() {\n    var _this$menu2;\n    (_this$menu2 = this.menu) === null || _this$menu2 === void 0 || _this$menu2.close();\n  }\n\n  /**\n   * Executes context menu command.\n   *\n   * The `executeCommand()` method works only for selected cells.\n   *\n   * When no cells are selected, `executeCommand()` doesn't do anything.\n   *\n   * You can execute all predefined commands:\n   *  * `'row_above'` - Insert row above\n   *  * `'row_below'` - Insert row below\n   *  * `'col_left'` - Insert column left\n   *  * `'col_right'` - Insert column right\n   *  * `'clear_column'` - Clear selected column\n   *  * `'remove_row'` - Remove row\n   *  * `'remove_col'` - Remove column\n   *  * `'undo'` - Undo last action\n   *  * `'redo'` - Redo last action\n   *  * `'make_read_only'` - Make cell read only\n   *  * `'alignment:left'` - Alignment to the left\n   *  * `'alignment:top'` - Alignment to the top\n   *  * `'alignment:right'` - Alignment to the right\n   *  * `'alignment:bottom'` - Alignment to the bottom\n   *  * `'alignment:middle'` - Alignment to the middle\n   *  * `'alignment:center'` - Alignment to the center (justify).\n   *\n   * Or you can execute command registered in settings where `key` is your command name.\n   *\n   * @param {string} commandName Command name to execute.\n   * @param {*} params Additional parameters passed to the command executor.\n   */\n  executeCommand(commandName) {\n    for (var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      params[_key2 - 1] = arguments[_key2];\n    }\n    this.commandExecutor.execute(commandName, ...params);\n  }\n\n  /**\n   * Turns on / off listening on dropdown menu.\n   *\n   * @private\n   * @param {boolean} listen Turn on listening when value is set to true, otherwise turn it off.\n   */\n  setListening() {\n    let listen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (this.menu.isOpened()) {\n      if (listen) {\n        this.menu.hotMenu.listen();\n      } else {\n        this.menu.hotMenu.unlisten();\n      }\n    }\n  }\n  /**\n   * Table click listener.\n   *\n   * @private\n   * @param {Event} event The mouse event object.\n   */\n  onTableClick(event) {\n    event.stopPropagation();\n    if (hasClass(event.target, BUTTON_CLASS_NAME)) {\n      const offset = getDocumentOffsetByElement(this.menu.container, this.hot.rootDocument);\n      const rect = event.target.getBoundingClientRect();\n      this.open({\n        left: rect.left + offset.left,\n        top: rect.top + event.target.offsetHeight + 3 + offset.top\n      }, {\n        left: rect.width\n      });\n    }\n  }\n\n  /**\n   * On after get column header listener.\n   *\n   * @private\n   * @param {number} col Visual column index.\n   * @param {HTMLTableCellElement} TH Header's TH element.\n   */\n  onAfterGetColHeader(col, TH) {\n    // Corner or a higher-level header\n    const headerRow = TH.parentNode;\n    if (!headerRow) {\n      return;\n    }\n    const headerRowList = headerRow.parentNode.childNodes;\n    const level = Array.prototype.indexOf.call(headerRowList, headerRow);\n    if (col < 0 || level !== headerRowList.length - 1) {\n      return;\n    }\n    const existingButton = TH.querySelector(`.${BUTTON_CLASS_NAME}`);\n\n    // Plugin enabled and buttons already exists, return.\n    if (this.enabled && existingButton) {\n      return;\n    }\n    // Plugin disabled and buttons still exists, so remove them.\n    if (!this.enabled) {\n      if (existingButton) {\n        existingButton.parentNode.removeChild(existingButton);\n      }\n      return;\n    }\n    const button = this.hot.rootDocument.createElement('button');\n    button.className = BUTTON_CLASS_NAME;\n    button.type = 'button';\n    button.tabIndex = -1;\n    if (this.hot.getSettings().ariaTags) {\n      setAttribute(button, [A11Y_HIDDEN()]);\n      setAttribute(TH, [A11Y_HASPOPUP('menu')]);\n    }\n\n    // prevent page reload on button click\n    button.onclick = function () {\n      return false;\n    };\n    TH.firstChild.insertBefore(button, TH.firstChild.firstChild);\n  }\n\n  /**\n   * On menu before open listener.\n   *\n   * @private\n   * @fires Hooks#beforeDropdownMenuShow\n   */\n  onMenuBeforeOpen() {\n    this.hot.runHooks('beforeDropdownMenuShow', this);\n  }\n\n  /**\n   * On menu after open listener.\n   *\n   * @private\n   * @fires Hooks#afterDropdownMenuShow\n   */\n  onMenuAfterOpen() {\n    this.hot.runHooks('afterDropdownMenuShow', this);\n    _classPrivateMethodGet(this, _addCustomShortcuts, _addCustomShortcuts2).call(this, this.menu);\n  }\n\n  /**\n   * Listener for the `afterSubmenuOpen` hook.\n   *\n   * @private\n   * @param {Menu} subMenuInstance The opened sub menu instance.\n   */\n  onSubMenuAfterOpen(subMenuInstance) {\n    _classPrivateMethodGet(this, _addCustomShortcuts, _addCustomShortcuts2).call(this, subMenuInstance);\n  }\n\n  /**\n   * On menu after close listener.\n   *\n   * @private\n   * @fires Hooks#afterDropdownMenuHide\n   */\n  onMenuAfterClose() {\n    this.hot.listen();\n    this.hot.runHooks('afterDropdownMenuHide', this);\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    this.close();\n    if (this.menu) {\n      this.menu.destroy();\n    }\n    super.destroy();\n  }\n}\nfunction _addCustomShortcuts2(menuInstance) {\n  menuInstance.getKeyboardShortcutsCtrl().addCustomShortcuts([{\n    keys: [['Control/Meta', 'A']],\n    callback: () => false\n  }]);\n}\nDropdownMenu.SEPARATOR = {\n  name: SEPARATOR\n};","import \"core-js/modules/es.array.push.js\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\n/**\n * @private\n */\nclass DataProvider {\n  constructor(hotInstance) {\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hotInstance;\n    /**\n     * Format type class options.\n     *\n     * @type {object}\n     */\n    this.options = {};\n  }\n\n  /**\n   * Set options for data provider.\n   *\n   * @param {object} options Object with specified options.\n   */\n  setOptions(options) {\n    this.options = options;\n  }\n\n  /**\n   * Get table data based on provided settings to the class constructor.\n   *\n   * @returns {Array}\n   */\n  getData() {\n    const {\n      startRow,\n      startCol,\n      endRow,\n      endCol\n    } = this._getDataRange();\n    const options = this.options;\n    const data = [];\n    rangeEach(startRow, endRow, rowIndex => {\n      const row = [];\n      if (!options.exportHiddenRows && this._isHiddenRow(rowIndex)) {\n        return;\n      }\n      rangeEach(startCol, endCol, colIndex => {\n        if (!options.exportHiddenColumns && this._isHiddenColumn(colIndex)) {\n          return;\n        }\n        row.push(this.hot.getDataAtCell(rowIndex, colIndex));\n      });\n      data.push(row);\n    });\n    return data;\n  }\n\n  /**\n   * Gets list of row headers.\n   *\n   * @returns {Array}\n   */\n  getRowHeaders() {\n    const headers = [];\n    if (this.options.rowHeaders) {\n      const {\n        startRow,\n        endRow\n      } = this._getDataRange();\n      const rowHeaders = this.hot.getRowHeader();\n      rangeEach(startRow, endRow, row => {\n        if (!this.options.exportHiddenRows && this._isHiddenRow(row)) {\n          return;\n        }\n        headers.push(rowHeaders[row]);\n      });\n    }\n    return headers;\n  }\n\n  /**\n   * Gets list of columns headers.\n   *\n   * @returns {Array}\n   */\n  getColumnHeaders() {\n    const headers = [];\n    if (this.options.columnHeaders) {\n      const {\n        startCol,\n        endCol\n      } = this._getDataRange();\n      const colHeaders = this.hot.getColHeader();\n      rangeEach(startCol, endCol, column => {\n        if (!this.options.exportHiddenColumns && this._isHiddenColumn(column)) {\n          return;\n        }\n        headers.push(colHeaders[column]);\n      });\n    }\n    return headers;\n  }\n\n  /**\n   * Get data range object based on settings provided in the class constructor.\n   *\n   * @private\n   * @returns {object} Returns object with keys `startRow`, `startCol`, `endRow` and `endCol`.\n   */\n  _getDataRange() {\n    const cols = this.hot.countCols() - 1;\n    const rows = this.hot.countRows() - 1;\n    let [startRow = 0, startCol = 0, endRow = rows, endCol = cols] = this.options.range;\n    startRow = Math.max(startRow, 0);\n    startCol = Math.max(startCol, 0);\n    endRow = Math.min(endRow, rows);\n    endCol = Math.min(endCol, cols);\n    return {\n      startRow,\n      startCol,\n      endRow,\n      endCol\n    };\n  }\n\n  /**\n   * Check if row at specified row index is hidden.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @returns {boolean}\n   */\n  _isHiddenRow(row) {\n    return this.hot.rowIndexMapper.isHidden(this.hot.toPhysicalRow(row));\n  }\n\n  /**\n   * Check if column at specified column index is hidden.\n   *\n   * @private\n   * @param {number} column Visual column index.\n   * @returns {boolean}\n   */\n  _isHiddenColumn(column) {\n    return this.hot.columnIndexMapper.isHidden(this.hot.toPhysicalColumn(column));\n  }\n}\nexport default DataProvider;","import { extend, clone } from \"../../../helpers/object.mjs\";\nimport { substitute } from \"../../../helpers/string.mjs\";\n/**\n * @private\n */\nclass BaseType {\n  /**\n   * Default options.\n   *\n   * @returns {object}\n   */\n  static get DEFAULT_OPTIONS() {\n    return {\n      mimeType: 'text/plain',\n      fileExtension: 'txt',\n      filename: 'Handsontable [YYYY]-[MM]-[DD]',\n      encoding: 'utf-8',\n      bom: false,\n      columnHeaders: false,\n      rowHeaders: false,\n      exportHiddenColumns: false,\n      exportHiddenRows: false,\n      range: []\n    };\n  }\n  constructor(dataProvider, options) {\n    /**\n     * Data provider.\n     *\n     * @type {DataProvider}\n     */\n    this.dataProvider = dataProvider;\n    /**\n     * Format type class options.\n     *\n     * @type {object}\n     */\n    this.options = this._mergeOptions(options);\n    this.dataProvider.setOptions(this.options);\n  }\n\n  /**\n   * Merge options provided by users with defaults.\n   *\n   * @param {object} options An object with options to merge with.\n   * @returns {object} Returns new options object.\n   */\n  _mergeOptions(options) {\n    let _options = clone(this.constructor.DEFAULT_OPTIONS);\n    const date = new Date();\n    _options = extend(clone(BaseType.DEFAULT_OPTIONS), _options);\n    _options = extend(_options, options);\n    _options.filename = substitute(_options.filename, {\n      YYYY: date.getFullYear(),\n      MM: `${date.getMonth() + 1}`.padStart(2, '0'),\n      DD: `${date.getDate()}`.padStart(2, '0')\n    });\n    return _options;\n  }\n}\nexport default BaseType;","import { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport BaseType from \"./_base.mjs\";\nconst CHAR_CARRIAGE_RETURN = String.fromCharCode(13);\nconst CHAR_DOUBLE_QUOTES = String.fromCharCode(34);\nconst CHAR_LINE_FEED = String.fromCharCode(10);\n\n/**\n * @private\n */\nclass Csv extends BaseType {\n  /**\n   * Default options for exporting CSV format.\n   *\n   * @returns {object}\n   */\n  static get DEFAULT_OPTIONS() {\n    return {\n      mimeType: 'text/csv',\n      fileExtension: 'csv',\n      bom: true,\n      columnDelimiter: ',',\n      rowDelimiter: '\\r\\n'\n    };\n  }\n\n  /**\n   * Create string body in desired format.\n   *\n   * @returns {string}\n   */\n  export() {\n    const options = this.options;\n    const data = this.dataProvider.getData();\n    let columnHeaders = this.dataProvider.getColumnHeaders();\n    const hasColumnHeaders = columnHeaders.length > 0;\n    const rowHeaders = this.dataProvider.getRowHeaders();\n    const hasRowHeaders = rowHeaders.length > 0;\n    let result = options.bom ? String.fromCharCode(0xFEFF) : '';\n    if (hasColumnHeaders) {\n      columnHeaders = arrayMap(columnHeaders, value => this._escapeCell(value, true));\n      if (hasRowHeaders) {\n        result += options.columnDelimiter;\n      }\n      result += columnHeaders.join(options.columnDelimiter);\n      result += options.rowDelimiter;\n    }\n    arrayEach(data, (value, index) => {\n      if (index > 0) {\n        result += options.rowDelimiter;\n      }\n      if (hasRowHeaders) {\n        result += this._escapeCell(rowHeaders[index]) + options.columnDelimiter;\n      }\n      result += value.map(cellValue => this._escapeCell(cellValue)).join(options.columnDelimiter);\n    });\n    return result;\n  }\n\n  /**\n   * Escape cell value.\n   *\n   * @param {*} value Cell value.\n   * @param {boolean} [force=false] Indicates if cell value will be escaped forcefully.\n   * @returns {string}\n   */\n  _escapeCell(value) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let escapedValue = stringify(value);\n    if (escapedValue !== '' && (force || escapedValue.indexOf(CHAR_CARRIAGE_RETURN) >= 0 || escapedValue.indexOf(CHAR_DOUBLE_QUOTES) >= 0 || escapedValue.indexOf(CHAR_LINE_FEED) >= 0 || escapedValue.indexOf(this.options.columnDelimiter) >= 0)) {\n      escapedValue = escapedValue.replace(new RegExp('\"', 'g'), '\"\"');\n      escapedValue = `\"${escapedValue}\"`;\n    }\n    return escapedValue;\n  }\n}\nexport default Csv;","import Csv from \"./types/csv.mjs\";\nexport const TYPE_CSV = 'csv';\nexport const TYPE_EXCEL = 'excel'; // TODO\nexport const TYPE_PDF = 'pdf'; // TODO\n\nexport const EXPORT_TYPES = {\n  [TYPE_CSV]: Csv\n};\n\n/**\n * @private\n * @param {string} type The exporter type.\n * @param {DataProvider} dataProvider The data provider.\n * @param {object} options Constructor options for exporter class.\n * @returns {BaseType|null}\n */\nexport default function typeFactory(type, dataProvider, options) {\n  if (typeof EXPORT_TYPES[type] === 'function') {\n    return new EXPORT_TYPES[type](dataProvider, options);\n  }\n  return null;\n}","import \"core-js/modules/es.error.cause.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport DataProvider from \"./dataProvider.mjs\";\nimport typeFactory, { EXPORT_TYPES } from \"./typeFactory.mjs\";\nexport const PLUGIN_KEY = 'exportFile';\nexport const PLUGIN_PRIORITY = 240;\n\n/**\n * @plugin ExportFile\n * @class ExportFile\n *\n * @description\n * The `ExportFile` plugin lets you export table data as a string, blob, or downloadable CSV file.\n *\n * See [the export file demo](@/guides/accessories-and-menus/export-to-csv.md) for examples.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData()\n * });\n *\n * // access to exportFile plugin instance\n * const exportPlugin = hot.getPlugin('exportFile');\n *\n * // export as a string\n * exportPlugin.exportAsString('csv');\n *\n * // export as a blob object\n * exportPlugin.exportAsBlob('csv');\n *\n * // export to downloadable file (named: MyFile.csv)\n * exportPlugin.downloadFile('csv', {filename: 'MyFile'});\n *\n * // export as a string (with specified data range):\n * exportPlugin.exportAsString('csv', {\n *   exportHiddenRows: true,     // default false\n *   exportHiddenColumns: true,  // default false\n *   columnHeaders: true,        // default false\n *   rowHeaders: true,           // default false\n *   columnDelimiter: ';',       // default ','\n *   range: [1, 1, 6, 6]         // [startRow, endRow, startColumn, endColumn]\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n * />\n *\n * const hot = hotRef.current.hotInstance;\n * // access to exportFile plugin instance\n * const exportPlugin = hot.getPlugin('exportFile');\n *\n * // export as a string\n * exportPlugin.exportAsString('csv');\n *\n * // export as a blob object\n * exportPlugin.exportAsBlob('csv');\n *\n * // export to downloadable file (named: MyFile.csv)\n * exportPlugin.downloadFile('csv', {filename: 'MyFile'});\n *\n * // export as a string (with specified data range):\n * exportPlugin.exportAsString('csv', {\n *   exportHiddenRows: true,     // default false\n *   exportHiddenColumns: true,  // default false\n *   columnHeaders: true,        // default false\n *   rowHeaders: true,           // default false\n *   columnDelimiter: ';',       // default ','\n *   range: [1, 1, 6, 6]         // [startRow, endRow, startColumn, endColumn]\n * });\n * ```\n * :::\n */\nexport class ExportFile extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ExportFile#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return true;\n  }\n\n  /**\n   * @typedef ExportOptions\n   * @memberof ExportFile\n   * @type {object}\n   * @property {boolean} [exportHiddenRows=false] Include hidden rows in the exported file.\n   * @property {boolean} [exportHiddenColumns=false] Include hidden columns in the exported file.\n   * @property {boolean} [columnHeaders=false] Include column headers in the exported file.\n   * @property {boolean} [rowHeaders=false] Include row headers in the exported file.\n   * @property {string} [columnDelimiter=','] Column delimiter.\n   * @property {string} [range=[]] Cell range that will be exported to file.\n   */\n\n  /**\n   * Exports table data as a string.\n   *\n   * @param {string} format Export format type eq. `'csv'`.\n   * @param {ExportOptions} options Export options.\n   * @returns {string}\n   */\n  exportAsString(format) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this._createTypeFormatter(format, options).export();\n  }\n\n  /**\n   * Exports table data as a blob object.\n   *\n   * @param {string} format Export format type eq. `'csv'`.\n   * @param {ExportOptions} options Export options.\n   * @returns {Blob}\n   */\n  exportAsBlob(format) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return this._createBlob(this._createTypeFormatter(format, options));\n  }\n\n  /**\n   * Exports table data as a downloadable file.\n   *\n   * @param {string} format Export format type eq. `'csv'`.\n   * @param {ExportOptions} options Export options.\n   */\n  downloadFile(format) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      rootDocument,\n      rootWindow\n    } = this.hot;\n    const formatter = this._createTypeFormatter(format, options);\n    const blob = this._createBlob(formatter);\n    const URL = rootWindow.URL || rootWindow.webkitURL;\n    const a = rootDocument.createElement('a');\n    const name = `${formatter.options.filename}.${formatter.options.fileExtension}`;\n    if (a.download !== void 0) {\n      const url = URL.createObjectURL(blob);\n      a.style.display = 'none';\n      a.setAttribute('href', url);\n      a.setAttribute('download', name);\n      rootDocument.body.appendChild(a);\n      a.dispatchEvent(new MouseEvent('click'));\n      rootDocument.body.removeChild(a);\n      setTimeout(() => {\n        URL.revokeObjectURL(url);\n      }, 100);\n    } else if (navigator.msSaveOrOpenBlob) {\n      // IE10+\n      navigator.msSaveOrOpenBlob(blob, name);\n    }\n  }\n\n  /**\n   * Creates and returns class formatter for specified export type.\n   *\n   * @private\n   * @param {string} format Export format type eq. `'csv'`.\n   * @param {ExportOptions} options Export options.\n   * @returns {BaseType}\n   */\n  _createTypeFormatter(format) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!EXPORT_TYPES[format]) {\n      throw new Error(`Export format type \"${format}\" is not supported.`);\n    }\n    return typeFactory(format, new DataProvider(this.hot), options);\n  }\n\n  /**\n   * Creates blob object based on provided type formatter class.\n   *\n   * @private\n   * @param {BaseType} typeFormatter The instance of the specyfic formatter/exporter.\n   * @returns {Blob}\n   */\n  _createBlob(typeFormatter) {\n    let formatter = null;\n    if (typeof Blob !== 'undefined') {\n      formatter = new Blob([typeFormatter.export()], {\n        type: `${typeFormatter.options.mimeType};charset=${typeFormatter.options.encoding}`\n      });\n    }\n    return formatter;\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport { mixin } from \"../../../helpers/object.mjs\";\nimport localHooks from \"../../../mixins/localHooks.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../../translations/index.mjs\";\n/**\n * @private\n * @class BaseComponent\n */\nexport class BaseComponent {\n  constructor(hotInstance, _ref) {\n    let {\n      id,\n      stateless = true\n    } = _ref;\n    /**\n     * The Handsontable instance.\n     *\n     * @type {Core}\n     */\n    _defineProperty(this, \"hot\", void 0);\n    /**\n     * The component uniq id.\n     *\n     * @type {string}\n     */\n    _defineProperty(this, \"id\", void 0);\n    /**\n     * List of registered component UI elements.\n     *\n     * @type {Array}\n     */\n    _defineProperty(this, \"elements\", []);\n    /**\n     * Flag which determines if element is hidden.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"hidden\", false);\n    /**\n     * The component states id.\n     *\n     * @type {string}\n     */\n    _defineProperty(this, \"stateId\", '');\n    /**\n     * Index map which stores component states for each column.\n     *\n     * @type {LinkedPhysicalIndexToValueMap|null}\n     */\n    _defineProperty(this, \"state\", void 0);\n    this.hot = hotInstance;\n    this.id = id;\n    this.stateId = `Filters.component.${this.id}`;\n    this.state = stateless ? null : this.hot.columnIndexMapper.registerMap(this.stateId, new IndexToValueMap());\n  }\n\n  /**\n   * Gets the list of elements from which the component is built.\n   *\n   * @returns {BaseUI[]}\n   */\n  getElements() {\n    return this.elements;\n  }\n\n  /**\n   * Reset elements to its initial state.\n   */\n  reset() {\n    arrayEach(this.elements, ui => ui.reset());\n  }\n\n  /**\n   * Hide component.\n   */\n  hide() {\n    this.hidden = true;\n  }\n\n  /**\n   * Show component.\n   */\n  show() {\n    this.hidden = false;\n  }\n\n  /**\n   * Check if component is hidden.\n   *\n   * @returns {boolean}\n   */\n  isHidden() {\n    return this.hot === null || this.hidden;\n  }\n\n  /**\n   * Restores the component state from the given physical column index. The method\n   * internally calls the `setState` method. The state then is individually processed\n   * by each component.\n   *\n   * @param {number} physicalColumn The physical column index.\n   */\n  restoreState(physicalColumn) {\n    if (this.state) {\n      this.setState(this.state.getValueAtIndex(physicalColumn));\n    }\n  }\n\n  /**\n   * The custom logic for component state restoring.\n   */\n  setState() {\n    throw new Error('The state setting logic is not implemented');\n  }\n\n  /**\n   * Saves the component state to the given physical column index. The method\n   * internally calls the `getState` method, which returns the current state of\n   * the component.\n   *\n   * @param {number} physicalColumn The physical column index.\n   */\n  saveState(physicalColumn) {\n    if (this.state) {\n      this.state.setValueAtIndex(physicalColumn, this.getState());\n    }\n  }\n\n  /**\n   * The custom logic for component state gathering (for stateful components).\n   */\n  getState() {\n    throw new Error('The state gathering logic is not implemented');\n  }\n\n  /**\n   * Destroy element.\n   */\n  destroy() {\n    this.hot.columnIndexMapper.unregisterMap(this.stateId);\n    this.clearLocalHooks();\n    arrayEach(this.elements, ui => ui.destroy());\n    this.state = null;\n    this.elements = null;\n    this.hot = null;\n  }\n}\nmixin(BaseComponent, localHooks);","import \"core-js/modules/es.error.cause.js\";\nexport const conditions = {};\n\n/**\n * Get condition closure with pre-bound arguments.\n *\n * @param {string} name Condition name.\n * @param {Array} args Condition arguments.\n * @returns {Function}\n */\nexport function getCondition(name, args) {\n  if (!conditions[name]) {\n    throw Error(`Filter condition \"${name}\" does not exist.`);\n  }\n  const {\n    condition,\n    descriptor\n  } = conditions[name];\n  let conditionArguments = args;\n  if (descriptor.inputValuesDecorator) {\n    conditionArguments = descriptor.inputValuesDecorator(conditionArguments);\n  }\n  return function (dataRow) {\n    return condition.apply(dataRow.meta.instance, [].concat([dataRow], [conditionArguments]));\n  };\n}\n\n/**\n * Get condition object descriptor which defines some additional informations about this condition.\n *\n * @param {string} name Condition name.\n * @returns {object}\n */\nexport function getConditionDescriptor(name) {\n  if (!conditions[name]) {\n    throw Error(`Filter condition \"${name}\" does not exist.`);\n  }\n  return conditions[name].descriptor;\n}\n\n/**\n * Condition registerer.\n *\n * @param {string} name Condition name.\n * @param {Function} condition Condition function.\n * @param {object} descriptor Condition descriptor.\n */\nexport function registerCondition(name, condition, descriptor) {\n  descriptor.key = name;\n  conditions[name] = {\n    condition,\n    descriptor\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'none';\n\n/**\n * @returns {boolean}\n */\nexport function condition() {\n  return true;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_NONE,\n  inputsCount: 0,\n  showOperators: false\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../conditionRegisterer.mjs\";\nimport { isEmpty } from \"../../../helpers/mixed.mjs\";\nexport const CONDITION_NAME = 'empty';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @returns {boolean}\n */\nexport function condition(dataRow) {\n  return isEmpty(dataRow.value);\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_EMPTY,\n  inputsCount: 0,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition, getCondition } from \"../conditionRegisterer.mjs\";\nimport { CONDITION_NAME as CONDITION_EMPTY } from \"./empty.mjs\";\nexport const CONDITION_NAME = 'not_empty';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @returns {boolean}\n */\nexport function condition(dataRow, inputValues) {\n  return !getCondition(CONDITION_EMPTY, inputValues)(dataRow);\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_NOT_EMPTY,\n  inputsCount: 0,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport { registerCondition } from \"../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'eq';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {Array} inputValues.\"0\" Value to check if it same as row's data.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [value] = _ref;\n  return stringify(dataRow.value).toLocaleLowerCase(dataRow.meta.locale) === stringify(value);\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_EQUAL,\n  inputsCount: 1,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition, getCondition } from \"../conditionRegisterer.mjs\";\nimport { CONDITION_NAME as CONDITION_EQUAL } from \"./equal.mjs\";\nexport const CONDITION_NAME = 'neq';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @returns {boolean}\n */\nexport function condition(dataRow, inputValues) {\n  return !getCondition(CONDITION_EQUAL, inputValues)(dataRow);\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_NOT_EQUAL,\n  inputsCount: 1,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'gt';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {any} inputValues.\"0\" Condition value to compare numbers.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [value] = _ref;\n  let conditionValue = value;\n  if (dataRow.meta.type === 'numeric') {\n    conditionValue = parseFloat(conditionValue, 10);\n  }\n  return dataRow.value > conditionValue;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_GREATER_THAN,\n  inputsCount: 1,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'gte';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {*} inputValues.\"0\" Condition value to compare numbers.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [value] = _ref;\n  let conditionValue = value;\n  if (dataRow.meta.type === 'numeric') {\n    conditionValue = parseFloat(conditionValue, 10);\n  }\n  return dataRow.value >= conditionValue;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL,\n  inputsCount: 1,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'lt';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {*} inputValues.\"0\" Condition value to compare numbers.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [value] = _ref;\n  let conditionValue = value;\n  if (dataRow.meta.type === 'numeric') {\n    conditionValue = parseFloat(conditionValue, 10);\n  }\n  return dataRow.value < conditionValue;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_LESS_THAN,\n  inputsCount: 1,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'lte';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {*} inputValues.\"0\" Condition value to compare numbers.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [value] = _ref;\n  let conditionValue = value;\n  if (dataRow.meta.type === 'numeric') {\n    conditionValue = parseFloat(conditionValue, 10);\n  }\n  return dataRow.value <= conditionValue;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL,\n  inputsCount: 1,\n  showOperators: true\n});","import moment from 'moment';\nimport * as C from \"../../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'date_after';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {*} inputValues.\"0\" Minimum date of a range.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [value] = _ref;\n  const date = moment(dataRow.value, dataRow.meta.dateFormat);\n  const inputDate = moment(value, dataRow.meta.dateFormat);\n  if (!date.isValid() || !inputDate.isValid()) {\n    return false;\n  }\n  return date.diff(inputDate) >= 0;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_AFTER,\n  inputsCount: 1,\n  showOperators: true\n});","import moment from 'moment';\nimport * as C from \"../../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'date_before';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {*} inputValues.\"0\" Maximum date of a range.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [value] = _ref;\n  const date = moment(dataRow.value, dataRow.meta.dateFormat);\n  const inputDate = moment(value, dataRow.meta.dateFormat);\n  if (!date.isValid() || !inputDate.isValid()) {\n    return false;\n  }\n  return date.diff(inputDate) <= 0;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_BEFORE,\n  inputsCount: 1,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition, getCondition } from \"../conditionRegisterer.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_AFTER } from \"./date/after.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_BEFORE } from \"./date/before.mjs\";\nexport const CONDITION_NAME = 'between';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {number} inputValues.\"0\" The minimum value of the range.\n * @param {number} inputValues.\"1\" The maximum value of the range.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [from, to] = _ref;\n  let fromValue = from;\n  let toValue = to;\n  if (dataRow.meta.type === 'numeric') {\n    const _from = parseFloat(fromValue, 10);\n    const _to = parseFloat(toValue, 10);\n    fromValue = Math.min(_from, _to);\n    toValue = Math.max(_from, _to);\n  } else if (dataRow.meta.type === 'date') {\n    const dateBefore = getCondition(CONDITION_DATE_BEFORE, [toValue]);\n    const dateAfter = getCondition(CONDITION_DATE_AFTER, [fromValue]);\n    return dateBefore(dataRow) && dateAfter(dataRow);\n  }\n  return dataRow.value >= fromValue && dataRow.value <= toValue;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_BETWEEN,\n  inputsCount: 2,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition, getCondition } from \"../conditionRegisterer.mjs\";\nimport { CONDITION_NAME as CONDITION_BETWEEN } from \"./between.mjs\";\nexport const CONDITION_NAME = 'not_between';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @returns {boolean}\n */\nexport function condition(dataRow, inputValues) {\n  return !getCondition(CONDITION_BETWEEN, inputValues)(dataRow);\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_NOT_BETWEEN,\n  inputsCount: 2,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport { registerCondition } from \"../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'begins_with';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {*} inputValues.\"0\" Value to check if it occurs at the beginning.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [value] = _ref;\n  return stringify(dataRow.value).toLocaleLowerCase(dataRow.meta.locale).startsWith(stringify(value));\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_BEGINS_WITH,\n  inputsCount: 1,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport { registerCondition } from \"../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'ends_with';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {*} inputValues.\"0\" Value to check if it occurs at the end.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [value] = _ref;\n  return stringify(dataRow.value).toLocaleLowerCase(dataRow.meta.locale).endsWith(stringify(value));\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_ENDS_WITH,\n  inputsCount: 1,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport { registerCondition } from \"../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'contains';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {*} inputValues.\"0\" A value to check if it occurs in the row's data.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [value] = _ref;\n  return stringify(dataRow.value).toLocaleLowerCase(dataRow.meta.locale).indexOf(stringify(value)) >= 0;\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_CONTAINS,\n  inputsCount: 1,\n  showOperators: true\n});","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerCondition, getCondition } from \"../conditionRegisterer.mjs\";\nimport { CONDITION_NAME as CONDITION_CONTAINS } from \"./contains.mjs\";\nexport const CONDITION_NAME = 'not_contains';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @returns {boolean}\n */\nexport function condition(dataRow, inputValues) {\n  return !getCondition(CONDITION_CONTAINS, inputValues)(dataRow);\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_NOT_CONTAIN,\n  inputsCount: 1,\n  showOperators: true\n});","import moment from 'moment';\nimport * as C from \"../../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'date_tomorrow';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @returns {boolean}\n */\nexport function condition(dataRow) {\n  const date = moment(dataRow.value, dataRow.meta.dateFormat);\n  if (!date.isValid()) {\n    return false;\n  }\n  return date.isSame(moment().subtract(-1, 'days').startOf('day'), 'd');\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_TOMORROW,\n  inputsCount: 0\n});","import moment from 'moment';\nimport * as C from \"../../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'date_today';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @returns {boolean}\n */\nexport function condition(dataRow) {\n  const date = moment(dataRow.value, dataRow.meta.dateFormat);\n  if (!date.isValid()) {\n    return false;\n  }\n  return date.isSame(moment().startOf('day'), 'd');\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_TODAY,\n  inputsCount: 0\n});","import moment from 'moment';\nimport * as C from \"../../../../i18n/constants.mjs\";\nimport { registerCondition } from \"../../conditionRegisterer.mjs\";\nexport const CONDITION_NAME = 'date_yesterday';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @returns {boolean}\n */\nexport function condition(dataRow) {\n  const date = moment(dataRow.value, dataRow.meta.dateFormat);\n  if (!date.isValid()) {\n    return false;\n  }\n  return date.isSame(moment().subtract(1, 'days').startOf('day'), 'd');\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: C.FILTERS_CONDITIONS_YESTERDAY,\n  inputsCount: 0\n});","import \"core-js/modules/es.array.push.js\";\nimport { clone } from \"../../helpers/object.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport { getConditionDescriptor } from \"./conditionRegisterer.mjs\";\nimport { CONDITION_NAME as CONDITION_NONE } from \"./condition/none.mjs\";\nimport { CONDITION_NAME as CONDITION_EMPTY } from \"./condition/empty.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_EMPTY } from \"./condition/notEmpty.mjs\";\nimport { CONDITION_NAME as CONDITION_EQUAL } from \"./condition/equal.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_EQUAL } from \"./condition/notEqual.mjs\";\nimport { CONDITION_NAME as CONDITION_GREATER_THAN } from \"./condition/greaterThan.mjs\";\nimport { CONDITION_NAME as CONDITION_GREATER_THAN_OR_EQUAL } from \"./condition/greaterThanOrEqual.mjs\";\nimport { CONDITION_NAME as CONDITION_LESS_THAN } from \"./condition/lessThan.mjs\";\nimport { CONDITION_NAME as CONDITION_LESS_THAN_OR_EQUAL } from \"./condition/lessThanOrEqual.mjs\";\nimport { CONDITION_NAME as CONDITION_BETWEEN } from \"./condition/between.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_BETWEEN } from \"./condition/notBetween.mjs\";\nimport { CONDITION_NAME as CONDITION_BEGINS_WITH } from \"./condition/beginsWith.mjs\";\nimport { CONDITION_NAME as CONDITION_ENDS_WITH } from \"./condition/endsWith.mjs\";\nimport { CONDITION_NAME as CONDITION_CONTAINS } from \"./condition/contains.mjs\";\nimport { CONDITION_NAME as CONDITION_NOT_CONTAINS } from \"./condition/notContains.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_BEFORE } from \"./condition/date/before.mjs\";\nimport { CONDITION_NAME as CONDITION_DATE_AFTER } from \"./condition/date/after.mjs\";\nimport { CONDITION_NAME as CONDITION_TOMORROW } from \"./condition/date/tomorrow.mjs\";\nimport { CONDITION_NAME as CONDITION_TODAY } from \"./condition/date/today.mjs\";\nimport { CONDITION_NAME as CONDITION_YESTERDAY } from \"./condition/date/yesterday.mjs\";\nimport { CONDITION_NAME as CONDITION_BY_VALUE } from \"./condition/byValue.mjs\";\nimport { CONDITION_NAME as CONDITION_TRUE } from \"./condition/true.mjs\";\nimport { CONDITION_NAME as CONDITION_FALSE } from \"./condition/false.mjs\";\nimport { OPERATION_ID as OPERATION_AND } from \"./logicalOperations/conjunction.mjs\";\nimport { OPERATION_ID as OPERATION_OR } from \"./logicalOperations/disjunction.mjs\";\nimport { OPERATION_ID as OPERATION_OR_THEN_VARIABLE } from \"./logicalOperations/disjunctionWithExtraCondition.mjs\";\nexport { CONDITION_NONE, CONDITION_EMPTY, CONDITION_NOT_EMPTY, CONDITION_EQUAL, CONDITION_NOT_EQUAL, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY, CONDITION_BY_VALUE, CONDITION_TRUE, CONDITION_FALSE, OPERATION_AND, OPERATION_OR, OPERATION_OR_THEN_VARIABLE };\nexport const TYPE_NUMERIC = 'numeric';\nexport const TYPE_TEXT = 'text';\nexport const TYPE_DATE = 'date';\n/**\n * Default types and order for filter conditions.\n *\n * @type {object}\n */\nexport const TYPES = {\n  [TYPE_NUMERIC]: [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_GREATER_THAN, CONDITION_GREATER_THAN_OR_EQUAL, CONDITION_LESS_THAN, CONDITION_LESS_THAN_OR_EQUAL, CONDITION_BETWEEN, CONDITION_NOT_BETWEEN],\n  [TYPE_TEXT]: [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_BEGINS_WITH, CONDITION_ENDS_WITH, SEPARATOR, CONDITION_CONTAINS, CONDITION_NOT_CONTAINS],\n  [TYPE_DATE]: [CONDITION_NONE, SEPARATOR, CONDITION_EMPTY, CONDITION_NOT_EMPTY, SEPARATOR, CONDITION_EQUAL, CONDITION_NOT_EQUAL, SEPARATOR, CONDITION_DATE_BEFORE, CONDITION_DATE_AFTER, CONDITION_BETWEEN, SEPARATOR, CONDITION_TOMORROW, CONDITION_TODAY, CONDITION_YESTERDAY]\n};\n\n/**\n * Get options list for conditional filter by data type (e.q: `'text'`, `'numeric'`, `'date'`).\n *\n * @private\n * @param {string} type The data type.\n * @returns {object}\n */\nexport default function getOptionsList(type) {\n  const items = [];\n  let typeName = type;\n  if (!TYPES[typeName]) {\n    typeName = TYPE_TEXT;\n  }\n  arrayEach(TYPES[typeName], typeValue => {\n    let option;\n    if (typeValue === SEPARATOR) {\n      option = {\n        name: SEPARATOR\n      };\n    } else {\n      option = clone(getConditionDescriptor(typeValue));\n    }\n    items.push(option);\n  });\n  return items;\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { clone, extend, mixin, objectEach } from \"../../../helpers/object.mjs\";\nimport localHooks from \"../../../mixins/localHooks.mjs\";\nimport EventManager from \"../../../eventManager.mjs\";\nimport { addClass } from \"../../../helpers/dom/element.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nconst STATE_BUILT = 'built';\nconst STATE_BUILDING = 'building';\nconst EVENTS_TO_REGISTER = ['click', 'input', 'keydown', 'keypress', 'keyup', 'focus', 'blur', 'change'];\n\n/**\n * @private\n */\nexport class BaseUI {\n  static get DEFAULTS() {\n    return clone({\n      className: '',\n      value: '',\n      tagName: 'div',\n      children: [],\n      wrapIt: true\n    });\n  }\n\n  /**\n   * Instance of Handsontable.\n   *\n   * @type {Core}\n   */\n\n  constructor(hotInstance, options) {\n    _defineProperty(this, \"hot\", void 0);\n    /**\n     * Instance of EventManager.\n     *\n     * @type {EventManager}\n     */\n    _defineProperty(this, \"eventManager\", new EventManager(this));\n    /**\n     * List of element options.\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"options\", void 0);\n    /**\n     * Build root DOM element.\n     *\n     * @type {Element}\n     * @private\n     */\n    _defineProperty(this, \"_element\", void 0);\n    /**\n     * Flag which determines build state of element.\n     *\n     * @type {string}\n     */\n    _defineProperty(this, \"buildState\", void 0);\n    this.hot = hotInstance;\n    this.options = extend(BaseUI.DEFAULTS, options);\n    this._element = this.hot.rootDocument.createElement(this.options.wrapIt ? 'div' : this.options.tagName);\n  }\n\n  /**\n   * Set the element value.\n   *\n   * @param {*} value Set the component value.\n   */\n  setValue(value) {\n    this.options.value = value;\n    this.update();\n  }\n\n  /**\n   * Get the element value.\n   *\n   * @returns {*}\n   */\n  getValue() {\n    return this.options.value;\n  }\n\n  /**\n   * Get element as a DOM object.\n   *\n   * @returns {Element}\n   */\n  get element() {\n    if (this.buildState === STATE_BUILDING) {\n      return this._element;\n    }\n    if (this.buildState === STATE_BUILT) {\n      this.update();\n      return this._element;\n    }\n    this.buildState = STATE_BUILDING;\n    this.build();\n    this.buildState = STATE_BUILT;\n    return this._element;\n  }\n\n  /**\n   * Check if element was built (built whole DOM structure).\n   *\n   * @returns {boolean}\n   */\n  isBuilt() {\n    return this.buildState === STATE_BUILT;\n  }\n\n  /**\n   * Translate value if it is possible. It's checked if value belongs to namespace of translated phrases.\n   *\n   * @param {*} value Value which will may be translated.\n   * @returns {*} Translated value if translation was possible, original value otherwise.\n   */\n  translateIfPossible(value) {\n    if (typeof value === 'string' && value.startsWith(C.FILTERS_NAMESPACE)) {\n      return this.hot.getTranslatedPhrase(value);\n    }\n    return value;\n  }\n\n  /**\n   * Build DOM structure.\n   */\n  build() {\n    const registerEvent = (element, eventName) => {\n      this.eventManager.addEventListener(element, eventName, event => this.runLocalHooks(eventName, event, this));\n    };\n    if (!this.buildState) {\n      this.buildState = STATE_BUILDING;\n    }\n\n    // prevents \"hot.unlisten()\" call when clicked\n    // (https://github.com/handsontable/handsontable/blob/master/handsontable/src/tableView.js#L317-L321)\n    this._element.setAttribute('data-hot-input', true);\n    if (this.options.tabIndex !== undefined) {\n      this._element.setAttribute('tabindex', this.options.tabIndex);\n    }\n    if (this.options.role !== undefined) {\n      this._element.setAttribute('role', this.options.role);\n    }\n    if (this.options.className) {\n      addClass(this._element, this.options.className);\n    }\n    if (this.options.children.length) {\n      arrayEach(this.options.children, element => this._element.appendChild(element.element));\n    } else if (this.options.wrapIt) {\n      const element = this.hot.rootDocument.createElement(this.options.tagName);\n\n      // prevents \"hot.unlisten()\" call when clicked\n      // (https://github.com/handsontable/handsontable/blob/master/handsontable/src/tableView.js#L317-L321)\n      element.setAttribute('data-hot-input', true);\n      objectEach(this.options, (value, key) => {\n        if (element[key] !== void 0 && key !== 'className' && key !== 'tagName' && key !== 'children') {\n          element[key] = this.translateIfPossible(value);\n        }\n      });\n      this._element.appendChild(element);\n      arrayEach(EVENTS_TO_REGISTER, eventName => registerEvent(element, eventName));\n    } else {\n      arrayEach(EVENTS_TO_REGISTER, eventName => registerEvent(this._element, eventName));\n    }\n  }\n\n  /**\n   * Update DOM structure.\n   */\n  update() {}\n\n  /**\n   * Reset to initial state.\n   */\n  reset() {\n    this.options.value = '';\n    this.update();\n  }\n\n  /**\n   * Show element.\n   */\n  show() {\n    this.element.style.display = '';\n  }\n\n  /**\n   * Hide element.\n   */\n  hide() {\n    this.element.style.display = 'none';\n  }\n\n  /**\n   * Focus element.\n   */\n  focus() {}\n  destroy() {\n    this.eventManager.destroy();\n    this.eventManager = null;\n    this.hot = null;\n    if (this._element.parentNode) {\n      this._element.parentNode.removeChild(this._element);\n    }\n    this._element = null;\n  }\n}\nmixin(BaseUI, localHooks);","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nimport { addClass } from \"../../../helpers/dom/element.mjs\";\nimport { clone, extend } from \"../../../helpers/object.mjs\";\nimport { BaseUI } from \"./_base.mjs\";\n/**\n * @private\n * @class InputUI\n */\nvar _input = /*#__PURE__*/new WeakMap();\nvar _onKeyup = /*#__PURE__*/new WeakSet();\nexport class InputUI extends BaseUI {\n  static get DEFAULTS() {\n    return clone({\n      placeholder: '',\n      type: 'text',\n      tagName: 'input',\n      tabIndex: -1\n    });\n  }\n\n  /**\n   * The reference to the input element.\n   *\n   * @type {HTMLInputElement}\n   */\n\n  constructor(hotInstance, options) {\n    super(hotInstance, extend(InputUI.DEFAULTS, options));\n    /**\n     * OnKeyup listener.\n     *\n     * @param {Event} event The mouse event object.\n     */\n    _classPrivateMethodInitSpec(this, _onKeyup);\n    _classPrivateFieldInitSpec(this, _input, {\n      writable: true,\n      value: void 0\n    });\n    this.registerHooks();\n  }\n\n  /**\n   * Register all necessary hooks.\n   */\n  registerHooks() {\n    this.addLocalHook('keyup', event => _classPrivateMethodGet(this, _onKeyup, _onKeyup2).call(this, event));\n  }\n\n  /**\n   * Build DOM structure.\n   */\n  build() {\n    super.build();\n    const icon = this.hot.rootDocument.createElement('div');\n    _classPrivateFieldSet(this, _input, this._element.firstChild);\n    addClass(this._element, 'htUIInput');\n    addClass(icon, 'htUIInputIcon');\n    this._element.appendChild(icon);\n    this.update();\n  }\n\n  /**\n   * Update element.\n   */\n  update() {\n    if (!this.isBuilt()) {\n      return;\n    }\n    _classPrivateFieldGet(this, _input).type = this.options.type;\n    _classPrivateFieldGet(this, _input).placeholder = this.translateIfPossible(this.options.placeholder);\n    _classPrivateFieldGet(this, _input).value = this.translateIfPossible(this.options.value);\n  }\n\n  /**\n   * Focus element.\n   */\n  focus() {\n    if (this.isBuilt()) {\n      _classPrivateFieldGet(this, _input).focus();\n    }\n  }\n}\nfunction _onKeyup2(event) {\n  this.options.value = event.target.value;\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { Menu } from \"../../../plugins/contextMenu/menu/index.mjs\";\nimport { clone, extend } from \"../../../helpers/object.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nimport { SEPARATOR } from \"../../../plugins/contextMenu/predefinedItems/index.mjs\";\nimport { BaseUI } from \"./_base.mjs\";\n/**\n * @private\n * @class SelectUI\n */\nvar _menu = /*#__PURE__*/new WeakMap();\nvar _items = /*#__PURE__*/new WeakMap();\nvar _caption = /*#__PURE__*/new WeakMap();\nvar _captionElement = /*#__PURE__*/new WeakMap();\nvar _dropdown = /*#__PURE__*/new WeakMap();\nvar _onMenuSelect = /*#__PURE__*/new WeakSet();\nvar _onMenuClosed = /*#__PURE__*/new WeakSet();\nvar _onClick = /*#__PURE__*/new WeakSet();\nexport class SelectUI extends BaseUI {\n  static get DEFAULTS() {\n    return clone({\n      className: 'htUISelect',\n      wrapIt: false,\n      tabIndex: -1\n    });\n  }\n\n  /**\n   * Instance of {@link Menu}.\n   *\n   * @type {Menu}\n   */\n\n  constructor(hotInstance, options) {\n    super(hotInstance, extend(SelectUI.DEFAULTS, options));\n    /**\n     * On element click listener.\n     *\n     * @private\n     */\n    _classPrivateMethodInitSpec(this, _onClick);\n    /**\n     * On menu closed listener.\n     */\n    _classPrivateMethodInitSpec(this, _onMenuClosed);\n    /**\n     * On menu selected listener.\n     *\n     * @param {object} command Selected item.\n     */\n    _classPrivateMethodInitSpec(this, _onMenuSelect);\n    _classPrivateFieldInitSpec(this, _menu, {\n      writable: true,\n      value: null\n    });\n    /**\n     * List of available select options.\n     *\n     * @type {Array}\n     */\n    _classPrivateFieldInitSpec(this, _items, {\n      writable: true,\n      value: []\n    });\n    /**\n     * The reference to the BaseUI instance of the caption.\n     *\n     * @type {BaseUI}\n     */\n    _classPrivateFieldInitSpec(this, _caption, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The reference to the table caption element.\n     *\n     * @type {HTMLTableCaptionElement}\n     */\n    _classPrivateFieldInitSpec(this, _captionElement, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The reference to the BaseUI instance of the dropdown.\n     *\n     * @type {BaseUI}\n     */\n    _classPrivateFieldInitSpec(this, _dropdown, {\n      writable: true,\n      value: void 0\n    });\n    this.registerHooks();\n  }\n\n  /**\n   * Gets the instance of the Menu.\n   *\n   * @returns {Menu}\n   */\n  getMenu() {\n    return _classPrivateFieldGet(this, _menu);\n  }\n\n  /**\n   * Register all necessary hooks.\n   */\n  registerHooks() {\n    this.addLocalHook('click', () => _classPrivateMethodGet(this, _onClick, _onClick2).call(this));\n  }\n\n  /**\n   * Set options which can be selected in the list.\n   *\n   * @param {Array} items Array of objects with required keys `key` and `name`.\n   */\n  setItems(items) {\n    _classPrivateFieldSet(this, _items, this.translateNames(items));\n    if (_classPrivateFieldGet(this, _menu)) {\n      _classPrivateFieldGet(this, _menu).setMenuItems(_classPrivateFieldGet(this, _items));\n    }\n  }\n\n  /**\n   * Translate names of menu items.\n   *\n   * @param {Array} items Array of objects with required keys `key` and `name`.\n   * @returns {Array} Items with translated `name` keys.\n   */\n  translateNames(items) {\n    arrayEach(items, item => {\n      item.name = this.translateIfPossible(item.name);\n    });\n    return items;\n  }\n\n  /**\n   * Build DOM structure.\n   */\n  build() {\n    super.build();\n    _classPrivateFieldSet(this, _menu, new Menu(this.hot, {\n      className: 'htSelectUI htFiltersConditionsMenu',\n      keepInViewport: false,\n      standalone: true,\n      container: this.options.menuContainer\n    }));\n    _classPrivateFieldGet(this, _menu).setMenuItems(_classPrivateFieldGet(this, _items));\n    const caption = new BaseUI(this.hot, {\n      className: 'htUISelectCaption'\n    });\n    const dropdown = new BaseUI(this.hot, {\n      className: 'htUISelectDropdown'\n    });\n    _classPrivateFieldSet(this, _caption, caption);\n    _classPrivateFieldSet(this, _captionElement, caption.element);\n    _classPrivateFieldSet(this, _dropdown, dropdown);\n    arrayEach([caption, dropdown], element => this._element.appendChild(element.element));\n    _classPrivateFieldGet(this, _menu).addLocalHook('select', command => _classPrivateMethodGet(this, _onMenuSelect, _onMenuSelect2).call(this, command));\n    _classPrivateFieldGet(this, _menu).addLocalHook('afterClose', () => _classPrivateMethodGet(this, _onMenuClosed, _onMenuClosed2).call(this));\n    this.update();\n  }\n\n  /**\n   * Update DOM structure.\n   */\n  update() {\n    if (!this.isBuilt()) {\n      return;\n    }\n    let conditionName;\n    if (this.options.value) {\n      conditionName = this.options.value.name;\n    } else {\n      conditionName = _classPrivateFieldGet(this, _menu).hot.getTranslatedPhrase(C.FILTERS_CONDITIONS_NONE);\n    }\n    _classPrivateFieldGet(this, _captionElement).textContent = conditionName;\n    super.update();\n  }\n\n  /**\n   * Open select dropdown menu with available options.\n   */\n  openOptions() {\n    const rect = this.element.getBoundingClientRect();\n    if (_classPrivateFieldGet(this, _menu)) {\n      _classPrivateFieldGet(this, _menu).open();\n      _classPrivateFieldGet(this, _menu).setPosition({\n        left: this.hot.isLtr() ? rect.left - 5 : rect.left - 31,\n        top: rect.top - 1,\n        width: rect.width,\n        height: rect.height\n      });\n      _classPrivateFieldGet(this, _menu).getNavigator().toFirstItem();\n      _classPrivateFieldGet(this, _menu).getKeyboardShortcutsCtrl().addCustomShortcuts([{\n        keys: [['Tab'], ['Shift', 'Tab']],\n        callback: event => {\n          this.closeOptions();\n          this.runLocalHooks('tabKeydown', event);\n        }\n      }, {\n        keys: [['Control/Meta', 'A']],\n        callback: () => false\n      }]);\n    }\n  }\n\n  /**\n   * Close select dropdown menu.\n   */\n  closeOptions() {\n    if (_classPrivateFieldGet(this, _menu)) {\n      _classPrivateFieldGet(this, _menu).close();\n    }\n  }\n\n  /**\n   * Focus element.\n   */\n  focus() {\n    if (this.isBuilt()) {\n      this.element.focus();\n    }\n  }\n  /**\n   * Destroy instance.\n   */\n  destroy() {\n    if (_classPrivateFieldGet(this, _menu)) {\n      _classPrivateFieldGet(this, _menu).destroy();\n      _classPrivateFieldSet(this, _menu, null);\n    }\n    if (_classPrivateFieldGet(this, _caption)) {\n      _classPrivateFieldGet(this, _caption).destroy();\n    }\n    if (_classPrivateFieldGet(this, _dropdown)) {\n      _classPrivateFieldGet(this, _dropdown).destroy();\n    }\n    super.destroy();\n  }\n}\nfunction _onMenuSelect2(command) {\n  if (command.name !== SEPARATOR) {\n    this.options.value = command;\n    this.update();\n    this.runLocalHooks('select', this.options.value);\n  }\n}\nfunction _onMenuClosed2() {\n  this.runLocalHooks('afterClose');\n}\nfunction _onClick2() {\n  this.openOptions();\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nimport { addClass } from \"../../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../../helpers/dom/event.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport { isKey } from \"../../../helpers/unicode.mjs\";\nimport { clone } from \"../../../helpers/object.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nimport { BaseComponent } from \"./_base.mjs\";\nimport getOptionsList, { CONDITION_NONE } from \"../constants.mjs\";\nimport { InputUI } from \"../ui/input.mjs\";\nimport { SelectUI } from \"../ui/select.mjs\";\nimport { getConditionDescriptor } from \"../conditionRegisterer.mjs\";\n/**\n * @private\n * @class ConditionComponent\n */\nvar _onConditionSelect = /*#__PURE__*/new WeakSet();\nvar _onInputKeyDown = /*#__PURE__*/new WeakSet();\nexport class ConditionComponent extends BaseComponent {\n  constructor(hotInstance, options) {\n    super(hotInstance, {\n      id: options.id,\n      stateless: false\n    });\n    /**\n     * Key down listener.\n     *\n     * @param {Event} event The DOM event object.\n     */\n    _classPrivateMethodInitSpec(this, _onInputKeyDown);\n    /**\n     * On condition select listener.\n     *\n     * @param {object} command Menu item object (command).\n     */\n    _classPrivateMethodInitSpec(this, _onConditionSelect);\n    this.name = options.name;\n    this.addSeparator = options.addSeparator;\n    this.elements.push(new SelectUI(this.hot, {\n      menuContainer: options.menuContainer\n    }));\n    this.elements.push(new InputUI(this.hot, {\n      placeholder: C.FILTERS_BUTTONS_PLACEHOLDER_VALUE\n    }));\n    this.elements.push(new InputUI(this.hot, {\n      placeholder: C.FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE\n    }));\n    this.registerHooks();\n  }\n\n  /**\n   * Register all necessary hooks.\n   *\n   * @private\n   */\n  registerHooks() {\n    this.getSelectElement().addLocalHook('select', command => _classPrivateMethodGet(this, _onConditionSelect, _onConditionSelect2).call(this, command)).addLocalHook('afterClose', () => this.runLocalHooks('afterClose')).addLocalHook('tabKeydown', event => this.runLocalHooks('selectTabKeydown', event));\n    arrayEach(this.getInputElements(), input => {\n      input.addLocalHook('keydown', event => _classPrivateMethodGet(this, _onInputKeyDown, _onInputKeyDown2).call(this, event));\n    });\n  }\n\n  /**\n   * Set state of the component.\n   *\n   * @param {object} value State to restore.\n   */\n  setState(value) {\n    this.reset();\n    if (!value) {\n      return;\n    }\n    const copyOfCommand = clone(value.command);\n    if (copyOfCommand.name.startsWith(C.FILTERS_CONDITIONS_NAMESPACE)) {\n      copyOfCommand.name = this.hot.getTranslatedPhrase(copyOfCommand.name);\n    }\n    this.getSelectElement().setValue(copyOfCommand);\n    arrayEach(value.args, (arg, index) => {\n      if (index > copyOfCommand.inputsCount - 1) {\n        return false;\n      }\n      const element = this.getInputElement(index);\n      element.setValue(arg);\n      element[copyOfCommand.inputsCount > index ? 'show' : 'hide']();\n      if (!index) {\n        this.hot._registerTimeout(() => element.focus(), 10);\n      }\n    });\n  }\n\n  /**\n   * Export state of the component (get selected filter and filter arguments).\n   *\n   * @returns {object} Returns object where `command` key keeps used condition filter and `args` key its arguments.\n   */\n  getState() {\n    const command = this.getSelectElement().getValue() || getConditionDescriptor(CONDITION_NONE);\n    const args = [];\n    arrayEach(this.getInputElements(), (element, index) => {\n      if (command.inputsCount > index) {\n        args.push(element.getValue());\n      }\n    });\n    return {\n      command,\n      args\n    };\n  }\n\n  /**\n   * Update state of component.\n   *\n   * @param {object} condition The condition object.\n   * @param {object} condition.command The command object with condition name as `key` property.\n   * @param {Array} condition.args An array of values to compare.\n   * @param {number} column Physical column index.\n   */\n  updateState(condition, column) {\n    const command = condition ? getConditionDescriptor(condition.name) : getConditionDescriptor(CONDITION_NONE);\n    this.state.setValueAtIndex(column, {\n      command,\n      args: condition ? condition.args : []\n    });\n    if (!condition) {\n      arrayEach(this.getInputElements(), element => element.setValue(null));\n    }\n  }\n\n  /**\n   * Get select element.\n   *\n   * @returns {SelectUI}\n   */\n  getSelectElement() {\n    return this.elements.filter(element => element instanceof SelectUI)[0];\n  }\n\n  /**\n   * Get input element.\n   *\n   * @param {number} index Index an array of elements.\n   * @returns {InputUI}\n   */\n  getInputElement() {\n    let index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return this.getInputElements()[index];\n  }\n\n  /**\n   * Get input elements.\n   *\n   * @returns {Array}\n   */\n  getInputElements() {\n    return this.elements.filter(element => element instanceof InputUI);\n  }\n\n  /**\n   * Get menu object descriptor.\n   *\n   * @returns {object}\n   */\n  getMenuItemDescriptor() {\n    return {\n      key: this.id,\n      name: this.name,\n      isCommand: false,\n      disableSelection: true,\n      hidden: () => this.isHidden(),\n      renderer: (hot, wrapper, row, col, prop, value) => {\n        addClass(wrapper.parentNode, 'htFiltersMenuCondition');\n        if (this.addSeparator) {\n          addClass(wrapper.parentNode, 'border');\n        }\n        const label = this.hot.rootDocument.createElement('div');\n        addClass(label, 'htFiltersMenuLabel');\n        label.textContent = value;\n        wrapper.appendChild(label);\n        arrayEach(this.elements, ui => wrapper.appendChild(ui.element));\n        return wrapper;\n      }\n    };\n  }\n\n  /**\n   * Reset elements to their initial state.\n   */\n  reset() {\n    const selectedColumn = this.hot.getPlugin('filters').getSelectedColumn();\n    let items = [getConditionDescriptor(CONDITION_NONE)];\n    if (selectedColumn !== null) {\n      const {\n        visualIndex\n      } = selectedColumn;\n      items = getOptionsList(this.hot.getDataType(0, visualIndex, this.hot.countRows(), visualIndex));\n    }\n    arrayEach(this.getInputElements(), element => element.hide());\n    this.getSelectElement().setItems(items);\n    super.reset();\n    // Select element as default 'None'\n    this.getSelectElement().setValue(items[0]);\n  }\n}\nfunction _onConditionSelect2(command) {\n  arrayEach(this.getInputElements(), (element, index) => {\n    element[command.inputsCount > index ? 'show' : 'hide']();\n    if (index === 0) {\n      this.hot._registerTimeout(() => element.focus(), 10);\n    }\n  });\n  this.runLocalHooks('change', command);\n}\nfunction _onInputKeyDown2(event) {\n  if (isKey(event.keyCode, 'ESCAPE')) {\n    this.runLocalHooks('cancel');\n    stopImmediatePropagation(event);\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nexport const operations = {};\n\n/**\n * Get operation closure with pre-bound arguments.\n *\n * @param {string} id Operator `id`.\n * @returns {Function}\n */\nexport function getOperationFunc(id) {\n  if (!operations[id]) {\n    throw Error(`Operation with id \"${id}\" does not exist.`);\n  }\n  const func = operations[id].func;\n  return function (conditions, value) {\n    return func(conditions, value);\n  };\n}\n\n/**\n * Return name of operation which is displayed inside UI component, basing on it's `id`.\n *\n * @param {string} id `Id` of operation.\n * @returns {string}\n */\nexport function getOperationName(id) {\n  return operations[id].name;\n}\n\n/**\n * Operator registerer.\n *\n * @param {string} id Operation `id`.\n * @param {string} name Operation name which is displayed inside UI component.\n * @param {Function} func Operation function.\n */\nexport function registerOperation(id, name, func) {\n  operations[id] = {\n    name,\n    func\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerOperation } from \"../logicalOperationRegisterer.mjs\";\nexport const OPERATION_ID = 'conjunction';\nexport const SHORT_NAME_FOR_COMPONENT = C.FILTERS_LABELS_CONJUNCTION;\n// p AND q AND w AND x AND... === TRUE?\n\n/**\n * @param {Array} conditions An array with values to check.\n * @param {*} value The comparable value.\n * @returns {boolean}\n */\nexport function operationResult(conditions, value) {\n  return conditions.every(condition => condition.func(value));\n}\nregisterOperation(OPERATION_ID, SHORT_NAME_FOR_COMPONENT, operationResult);","import * as C from \"../../../i18n/constants.mjs\";\nimport { registerOperation } from \"../logicalOperationRegisterer.mjs\";\nexport const OPERATION_ID = 'disjunction';\nexport const SHORT_NAME_FOR_COMPONENT = C.FILTERS_LABELS_DISJUNCTION;\n// (p OR q OR w OR x OR...) === TRUE?\n\n/**\n * @param {Array} conditions An array with values to check.\n * @param {*} value The comparable value.\n * @returns {boolean}\n */\nexport function operationResult(conditions, value) {\n  return conditions.some(condition => condition.func(value));\n}\nregisterOperation(OPERATION_ID, SHORT_NAME_FOR_COMPONENT, operationResult);","import \"core-js/modules/es.error.cause.js\";\nimport * as C from \"../../../i18n/constants.mjs\";\nimport { registerOperation } from \"../logicalOperationRegisterer.mjs\";\nexport const OPERATION_ID = 'disjunctionWithExtraCondition';\nexport const SHORT_NAME_FOR_COMPONENT = C.FILTERS_LABELS_DISJUNCTION;\n// ((p OR q OR w OR x OR...) AND z) === TRUE?\n\n/**\n * @param {Array} conditions An array with values to check.\n * @param {*} value The comparable value.\n * @returns {boolean}\n */\nexport function operationResult(conditions, value) {\n  if (conditions.length < 3) {\n    throw Error('Operation doesn\\'t work on less then three conditions.');\n  }\n  return conditions.slice(0, conditions.length - 1).some(condition => condition.func(value)) && conditions[conditions.length - 1].func(value);\n}\nregisterOperation(OPERATION_ID, SHORT_NAME_FOR_COMPONENT, operationResult);","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { clone, extend } from \"../../../helpers/object.mjs\";\nimport { BaseUI } from \"./_base.mjs\";\n/**\n * @private\n * @class RadioInputUI\n */\nvar _input = /*#__PURE__*/new WeakMap();\nvar _label = /*#__PURE__*/new WeakMap();\nexport class RadioInputUI extends BaseUI {\n  static get DEFAULTS() {\n    return clone({\n      type: 'radio',\n      tagName: 'input',\n      className: 'htUIRadio',\n      label: {}\n    });\n  }\n\n  /**\n   * The reference to the input element.\n   *\n   * @type {HTMLInputElement}\n   */\n\n  constructor(hotInstance, options) {\n    super(hotInstance, extend(RadioInputUI.DEFAULTS, options));\n    _classPrivateFieldInitSpec(this, _input, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The reference to the label element.\n     *\n     * @type {HTMLLabelElement}\n     */\n    _classPrivateFieldInitSpec(this, _label, {\n      writable: true,\n      value: void 0\n    });\n  }\n\n  /**\n   * Build DOM structure.\n   */\n  build() {\n    super.build();\n    const label = this.hot.rootDocument.createElement('label');\n    label.textContent = this.translateIfPossible(this.options.label.textContent);\n    label.htmlFor = this.translateIfPossible(this.options.label.htmlFor);\n    _classPrivateFieldSet(this, _label, label);\n    _classPrivateFieldSet(this, _input, this._element.firstChild);\n    _classPrivateFieldGet(this, _input).checked = this.options.checked;\n    this._element.appendChild(label);\n    this.update();\n  }\n\n  /**\n   * Update element.\n   */\n  update() {\n    if (!this.isBuilt()) {\n      return;\n    }\n    _classPrivateFieldGet(this, _label).textContent = this.translateIfPossible(this.options.label.textContent);\n  }\n\n  /**\n   * Check if radio button is checked.\n   *\n   * @returns {boolean}\n   */\n  isChecked() {\n    return _classPrivateFieldGet(this, _input).checked;\n  }\n\n  /**\n   * Set input checked attribute.\n   *\n   * @param {boolean} value Set the component state.\n   */\n  setChecked() {\n    let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (this.isBuilt()) {\n      _classPrivateFieldGet(this, _input).checked = value;\n    }\n  }\n\n  /**\n   * Focus element.\n   */\n  focus() {\n    if (this.isBuilt()) {\n      _classPrivateFieldGet(this, _input).focus();\n    }\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nimport { addClass } from \"../../../helpers/dom/element.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport { toSingleLine } from \"../../../helpers/templateLiteralTag.mjs\";\nimport { BaseComponent } from \"./_base.mjs\";\nimport { getOperationName } from \"../logicalOperationRegisterer.mjs\";\nimport { OPERATION_ID as OPERATION_AND } from \"../logicalOperations/conjunction.mjs\";\nimport { OPERATION_ID as OPERATION_OR } from \"../logicalOperations/disjunction.mjs\";\nimport { OPERATION_ID as OPERATION_OR_THEN_VARIABLE } from \"../logicalOperations/disjunctionWithExtraCondition.mjs\";\nimport { RadioInputUI } from \"../ui/radioInput.mjs\";\nconst SELECTED_AT_START_ELEMENT_INDEX = 0;\n\n/**\n * @private\n * @class OperatorsComponent\n */\nvar _onRadioInputChange = /*#__PURE__*/new WeakSet();\nexport class OperatorsComponent extends BaseComponent {\n  constructor(hotInstance, options) {\n    super(hotInstance, {\n      id: options.id,\n      stateless: false\n    });\n    /**\n     * OnChange listener.\n     *\n     * @param {Event} event The DOM event object.\n     */\n    _classPrivateMethodInitSpec(this, _onRadioInputChange);\n    this.name = options.name;\n    this.buildOperatorsElement();\n  }\n\n  /**\n   * Get menu object descriptor.\n   *\n   * @returns {object}\n   */\n  getMenuItemDescriptor() {\n    return {\n      key: this.id,\n      name: this.name,\n      isCommand: false,\n      disableSelection: true,\n      hidden: () => this.isHidden(),\n      renderer: (hot, wrapper) => {\n        addClass(wrapper.parentNode, 'htFiltersMenuOperators');\n        arrayEach(this.elements, ui => wrapper.appendChild(ui.element));\n        return wrapper;\n      }\n    };\n  }\n\n  /**\n   * Add RadioInputUI elements to component.\n   *\n   * @private\n   */\n  buildOperatorsElement() {\n    const operationKeys = [OPERATION_AND, OPERATION_OR];\n    arrayEach(operationKeys, operation => {\n      const radioInput = new RadioInputUI(this.hot, {\n        name: 'operator',\n        label: {\n          htmlFor: operation,\n          textContent: getOperationName(operation)\n        },\n        value: operation,\n        checked: operation === operationKeys[SELECTED_AT_START_ELEMENT_INDEX],\n        id: operation\n      });\n      radioInput.addLocalHook('change', event => _classPrivateMethodGet(this, _onRadioInputChange, _onRadioInputChange2).call(this, event));\n      this.elements.push(radioInput);\n    });\n  }\n\n  /**\n   * Set state of operators component to check radio input at specific `index`.\n   *\n   * @param {number} searchedIndex Index of radio input to check.\n   */\n  setChecked(searchedIndex) {\n    if (this.elements.length < searchedIndex) {\n      throw Error(toSingleLine`Radio button with index ${searchedIndex} doesn't exist.`);\n    }\n    arrayEach(this.elements, (element, index) => {\n      element.setChecked(index === searchedIndex);\n    });\n  }\n\n  /**\n   * Get `id` of active operator.\n   *\n   * @returns {string}\n   */\n  getActiveOperationId() {\n    const operationElement = this.elements.find(element => element instanceof RadioInputUI && element.isChecked());\n    if (operationElement) {\n      return operationElement.getValue();\n    }\n    return OPERATION_AND;\n  }\n\n  /**\n   * Export state of the component (get selected operator).\n   *\n   * @returns {string} Returns `id` of selected operator.\n   */\n  getState() {\n    return this.getActiveOperationId();\n  }\n\n  /**\n   * Set state of the component.\n   *\n   * @param {object} value State to restore.\n   */\n  setState(value) {\n    this.reset();\n    if (value && this.getActiveOperationId() !== value) {\n      arrayEach(this.elements, element => {\n        element.setChecked(element.getValue() === value);\n      });\n    }\n  }\n\n  /**\n   * Update state of component.\n   *\n   * @param {string} [operationId='conjunction'] Id of selected operation.\n   * @param {number} column Physical column index.\n   */\n  updateState() {\n    let operationId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : OPERATION_AND;\n    let column = arguments.length > 1 ? arguments[1] : undefined;\n    let selectedOperationId = operationId;\n    if (selectedOperationId === OPERATION_OR_THEN_VARIABLE) {\n      selectedOperationId = OPERATION_OR;\n    }\n    this.state.setValueAtIndex(column, selectedOperationId);\n  }\n\n  /**\n   * Reset elements to their initial state.\n   */\n  reset() {\n    this.setChecked(SELECTED_AT_START_ELEMENT_INDEX);\n  }\n}\nfunction _onRadioInputChange2(event) {\n  this.setState(event.target.value);\n}","import \"core-js/modules/es.array.push.js\";\nimport { getComparisonFunction } from \"../../helpers/feature.mjs\";\nimport { arrayUnique, arrayEach } from \"../../helpers/array.mjs\";\nconst sortCompare = getComparisonFunction();\n\n/**\n * Comparison function for sorting purposes.\n *\n * @param {*} a The first value to compare.\n * @param {*} b The second value to compare.\n * @returns {number} Returns number from -1 to 1.\n */\nexport function sortComparison(a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  }\n  return sortCompare(a, b);\n}\n\n/**\n * Convert raw value into visual value.\n *\n * @param {*} value The value to convert.\n * @param {string} defaultEmptyValue Default value for empty cells.\n * @returns {*}\n */\nexport function toVisualValue(value, defaultEmptyValue) {\n  let visualValue = value;\n  if (visualValue === '') {\n    visualValue = `(${defaultEmptyValue})`;\n  }\n  return visualValue;\n}\nconst SUPPORT_SET_CONSTRUCTOR = new Set([1]).has(1);\nconst SUPPORT_FAST_DEDUPE = SUPPORT_SET_CONSTRUCTOR && typeof Array.from === 'function';\n\n/**\n * Create an array assertion to compare if an element exists in that array (in a more efficient way than .indexOf).\n *\n * @param {Array} initialData Values to compare.\n * @returns {Function}\n */\nexport function createArrayAssertion(initialData) {\n  let dataset = initialData;\n  if (SUPPORT_SET_CONSTRUCTOR) {\n    dataset = new Set(dataset);\n  }\n  return function (value) {\n    let result;\n    if (SUPPORT_SET_CONSTRUCTOR) {\n      result = dataset.has(value);\n    } else {\n      /* eslint-disable no-bitwise */\n      result = !!~dataset.indexOf(value);\n    }\n    return result;\n  };\n}\n\n/**\n * Convert empty-ish values like null and undefined to an empty string.\n *\n * @param {*} value Value to check.\n * @returns {string}\n */\nexport function toEmptyString(value) {\n  return value === null || value === void 0 ? '' : value;\n}\n\n/**\n * Unify column values (replace `null` and `undefined` values into empty string, unique values and sort them).\n *\n * @param {Array} values An array of values.\n * @returns {Array}\n */\nexport function unifyColumnValues(values) {\n  let unifiedValues = values;\n  if (SUPPORT_FAST_DEDUPE) {\n    unifiedValues = Array.from(new Set(unifiedValues));\n  } else {\n    unifiedValues = arrayUnique(unifiedValues);\n  }\n  unifiedValues = unifiedValues.sort((a, b) => {\n    if (typeof a === 'number' && typeof b === 'number') {\n      return a - b;\n    }\n    if (a === b) {\n      return 0;\n    }\n    return a > b ? 1 : -1;\n  });\n  return unifiedValues;\n}\n\n/**\n * Intersect 'base' values with 'selected' values and return an array of object.\n *\n * @param {Array} base An array of base values.\n * @param {Array} selected An array of selected values.\n * @param {string} defaultEmptyValue Default value for empty cells.\n * @param {Function} [callback] A callback function which is invoked for every item in an array.\n * @returns {Array}\n */\nexport function intersectValues(base, selected, defaultEmptyValue, callback) {\n  const result = [];\n  const same = base === selected;\n  let selectedItemsAssertion;\n  if (!same) {\n    selectedItemsAssertion = createArrayAssertion(selected);\n  }\n  arrayEach(base, value => {\n    let checked = false;\n    if (same || selectedItemsAssertion(value)) {\n      checked = true;\n    }\n    const item = {\n      checked,\n      value,\n      visualValue: toVisualValue(value, defaultEmptyValue)\n    };\n    if (callback) {\n      callback(item);\n    }\n    result.push(item);\n  });\n  return result;\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { clone, extend } from \"../../../helpers/object.mjs\";\nimport { BaseUI } from \"./_base.mjs\";\n/**\n * @private\n * @class LinkUI\n */\nvar _link = /*#__PURE__*/new WeakMap();\nexport class LinkUI extends BaseUI {\n  static get DEFAULTS() {\n    return clone({\n      href: '#',\n      tagName: 'a',\n      tabIndex: -1,\n      role: 'button'\n    });\n  }\n\n  /**\n   * The reference to the link element.\n   *\n   * @type {HTMLLinkElement}\n   */\n\n  constructor(hotInstance, options) {\n    super(hotInstance, extend(LinkUI.DEFAULTS, options));\n    _classPrivateFieldInitSpec(this, _link, {\n      writable: true,\n      value: void 0\n    });\n  }\n\n  /**\n   * Build DOM structure.\n   */\n  build() {\n    super.build();\n    _classPrivateFieldSet(this, _link, this._element.firstChild);\n  }\n\n  /**\n   * Update element.\n   */\n  update() {\n    if (!this.isBuilt()) {\n      return;\n    }\n    _classPrivateFieldGet(this, _link).textContent = this.translateIfPossible(this.options.textContent);\n  }\n\n  /**\n   * Focus element.\n   */\n  focus() {\n    if (this.isBuilt()) {\n      _classPrivateFieldGet(this, _link).focus();\n    }\n  }\n\n  /**\n   * Activate the element.\n   */\n  activate() {\n    _classPrivateFieldGet(this, _link).click();\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { addClass, getScrollbarWidth } from \"../../../helpers/dom/element.mjs\";\nimport { clone, extend } from \"../../../helpers/object.mjs\";\nimport { arrayFilter, arrayMap, arrayEach } from \"../../../helpers/array.mjs\";\nimport { isKey } from \"../../../helpers/unicode.mjs\";\nimport { partial } from \"../../../helpers/function.mjs\";\nimport { dataRowToChangesArray } from \"../../../helpers/data.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nimport { stopImmediatePropagation } from \"../../../helpers/dom/event.mjs\";\nimport { BaseUI } from \"./_base.mjs\";\nimport { InputUI } from \"./input.mjs\";\nimport { LinkUI } from \"./link.mjs\";\nimport { createArrayAssertion } from \"../utils.mjs\";\nconst SHORTCUTS_GROUP = 'multipleSelect.itemBox';\n\n/**\n * @private\n * @class MultipleSelectUI\n */\nvar _items = /*#__PURE__*/new WeakMap();\nvar _itemsBox = /*#__PURE__*/new WeakMap();\nvar _locale = /*#__PURE__*/new WeakMap();\nvar _searchInput = /*#__PURE__*/new WeakMap();\nvar _selectAllUI = /*#__PURE__*/new WeakMap();\nvar _clearAllUI = /*#__PURE__*/new WeakMap();\nvar _onInput = /*#__PURE__*/new WeakSet();\nvar _onInputKeyDown = /*#__PURE__*/new WeakSet();\nvar _onSelectAllClick = /*#__PURE__*/new WeakSet();\nvar _onClearAllClick = /*#__PURE__*/new WeakSet();\nexport class MultipleSelectUI extends BaseUI {\n  static get DEFAULTS() {\n    return clone({\n      className: 'htUIMultipleSelect',\n      value: []\n    });\n  }\n\n  /**\n   * List of available select options.\n   *\n   * @type {Array}\n   */\n\n  constructor(hotInstance, options) {\n    super(hotInstance, extend(MultipleSelectUI.DEFAULTS, options));\n    /**\n     * On click listener for \"Clear\" link.\n     *\n     * @param {DOMEvent} event The mouse event object.\n     */\n    _classPrivateMethodInitSpec(this, _onClearAllClick);\n    /**\n     * On click listener for \"Select all\" link.\n     *\n     * @param {DOMEvent} event The mouse event object.\n     */\n    _classPrivateMethodInitSpec(this, _onSelectAllClick);\n    /**\n     * 'keydown' event listener for input element.\n     *\n     * @param {Event} event DOM event.\n     */\n    _classPrivateMethodInitSpec(this, _onInputKeyDown);\n    /**\n     * 'input' event listener for input element.\n     *\n     * @param {Event} event DOM event.\n     */\n    _classPrivateMethodInitSpec(this, _onInput);\n    _classPrivateFieldInitSpec(this, _items, {\n      writable: true,\n      value: []\n    });\n    /**\n     * Handsontable instance used as items list element.\n     *\n     * @type {Handsontable}\n     */\n    _classPrivateFieldInitSpec(this, _itemsBox, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * A locale for the component used to compare filtered values.\n     *\n     * @type {string}\n     */\n    _classPrivateFieldInitSpec(this, _locale, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Input element.\n     *\n     * @type {InputUI}\n     */\n    _classPrivateFieldInitSpec(this, _searchInput, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * \"Select all\" UI element.\n     *\n     * @type {LinkUI}\n     */\n    _classPrivateFieldInitSpec(this, _selectAllUI, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * \"Clear\" UI element.\n     *\n     * @type {LinkUI}\n     */\n    _classPrivateFieldInitSpec(this, _clearAllUI, {\n      writable: true,\n      value: void 0\n    });\n    _classPrivateFieldSet(this, _searchInput, new InputUI(this.hot, {\n      placeholder: C.FILTERS_BUTTONS_PLACEHOLDER_SEARCH,\n      className: 'htUIMultipleSelectSearch'\n    }));\n    _classPrivateFieldSet(this, _selectAllUI, new LinkUI(this.hot, {\n      textContent: C.FILTERS_BUTTONS_SELECT_ALL,\n      className: 'htUISelectAll'\n    }));\n    _classPrivateFieldSet(this, _clearAllUI, new LinkUI(this.hot, {\n      textContent: C.FILTERS_BUTTONS_CLEAR,\n      className: 'htUIClearAll'\n    }));\n    this.registerHooks();\n  }\n\n  /**\n   * Gets the instance of the internal Handsontable that acts here as a listbox component.\n   *\n   * @returns {Handsontable}\n   */\n  getItemsBox() {\n    return _classPrivateFieldGet(this, _itemsBox);\n  }\n\n  /**\n   * Register all necessary hooks.\n   */\n  registerHooks() {\n    _classPrivateFieldGet(this, _searchInput).addLocalHook('keydown', event => _classPrivateMethodGet(this, _onInputKeyDown, _onInputKeyDown2).call(this, event));\n    _classPrivateFieldGet(this, _searchInput).addLocalHook('input', event => _classPrivateMethodGet(this, _onInput, _onInput2).call(this, event));\n    _classPrivateFieldGet(this, _selectAllUI).addLocalHook('click', event => _classPrivateMethodGet(this, _onSelectAllClick, _onSelectAllClick2).call(this, event));\n    _classPrivateFieldGet(this, _clearAllUI).addLocalHook('click', event => _classPrivateMethodGet(this, _onClearAllClick, _onClearAllClick2).call(this, event));\n  }\n\n  /**\n   * Set available options.\n   *\n   * @param {Array} items Array of objects with `checked` and `label` property.\n   */\n  setItems(items) {\n    _classPrivateFieldSet(this, _items, items);\n    if (_classPrivateFieldGet(this, _itemsBox)) {\n      _classPrivateFieldGet(this, _itemsBox).loadData(_classPrivateFieldGet(this, _items));\n    }\n  }\n\n  /**\n   * Set a locale for the component.\n   *\n   * @param {string} locale Locale used for filter actions performed on data, ie. `en-US`.\n   */\n  setLocale(locale) {\n    _classPrivateFieldSet(this, _locale, locale);\n  }\n\n  /**\n   * Get a locale for the component.\n   *\n   * @returns {string}\n   */\n  getLocale() {\n    return _classPrivateFieldGet(this, _locale);\n  }\n\n  /**\n   * Get all available options.\n   *\n   * @returns {Array}\n   */\n  getItems() {\n    return [..._classPrivateFieldGet(this, _items)];\n  }\n\n  /**\n   * Get element value.\n   *\n   * @returns {Array} Array of selected values.\n   */\n  getValue() {\n    return itemsToValue(_classPrivateFieldGet(this, _items));\n  }\n\n  /**\n   * Gets the instance of the search input element.\n   *\n   * @returns {InputUI}\n   */\n  getSearchInputElement() {\n    return _classPrivateFieldGet(this, _searchInput);\n  }\n\n  /**\n   * Gets the instance of the \"select all\" link element.\n   *\n   * @returns {LinkUI}\n   */\n  getSelectAllElement() {\n    return _classPrivateFieldGet(this, _selectAllUI);\n  }\n\n  /**\n   * Gets the instance of the \"clear\" link element.\n   *\n   * @returns {LinkUI}\n   */\n  getClearAllElement() {\n    return _classPrivateFieldGet(this, _clearAllUI);\n  }\n\n  /**\n   * Check if all values listed in element are selected.\n   *\n   * @returns {boolean}\n   */\n  isSelectedAllValues() {\n    return _classPrivateFieldGet(this, _items).length === this.getValue().length;\n  }\n\n  /**\n   * Build DOM structure.\n   */\n  build() {\n    super.build();\n    const {\n      rootDocument\n    } = this.hot;\n    const itemsBoxWrapper = rootDocument.createElement('div');\n    const selectionControl = new BaseUI(this.hot, {\n      className: 'htUISelectionControls',\n      children: [_classPrivateFieldGet(this, _selectAllUI), _classPrivateFieldGet(this, _clearAllUI)]\n    });\n    this._element.appendChild(_classPrivateFieldGet(this, _searchInput).element);\n    this._element.appendChild(selectionControl.element);\n    this._element.appendChild(itemsBoxWrapper);\n    const hotInitializer = wrapper => {\n      if (!this._element) {\n        return;\n      }\n      if (_classPrivateFieldGet(this, _itemsBox)) {\n        _classPrivateFieldGet(this, _itemsBox).destroy();\n      }\n      addClass(wrapper, 'htUIMultipleSelectHot');\n      // Constructs and initializes a new Handsontable instance\n      _classPrivateFieldSet(this, _itemsBox, new this.hot.constructor(wrapper, {\n        data: _classPrivateFieldGet(this, _items),\n        columns: [{\n          data: 'checked',\n          type: 'checkbox',\n          label: {\n            property: 'visualValue',\n            position: 'after'\n          }\n        }],\n        beforeRenderer: (TD, row, col, prop, value, cellProperties) => {\n          TD.title = cellProperties.instance.getDataAtRowProp(row, cellProperties.label.property);\n        },\n        afterListen: () => {\n          this.runLocalHooks('focus', this);\n        },\n        beforeOnCellMouseUp: () => {\n          _classPrivateFieldGet(this, _itemsBox).listen();\n        },\n        maxCols: 1,\n        autoWrapCol: true,\n        height: 110,\n        // Workaround for #151.\n        colWidths: () => _classPrivateFieldGet(this, _itemsBox).container.scrollWidth - getScrollbarWidth(rootDocument),\n        copyPaste: false,\n        disableVisualSelection: 'area',\n        fillHandle: false,\n        fragmentSelection: 'cell',\n        tabMoves: {\n          row: 1,\n          col: 0\n        },\n        layoutDirection: this.hot.isRtl() ? 'rtl' : 'ltr'\n      }));\n      _classPrivateFieldGet(this, _itemsBox).init();\n      const shortcutManager = _classPrivateFieldGet(this, _itemsBox).getShortcutManager();\n      const gridContext = shortcutManager.getContext('grid');\n      gridContext.removeShortcutsByKeys(['Tab']);\n      gridContext.removeShortcutsByKeys(['Shift', 'Tab']);\n      gridContext.addShortcut({\n        keys: [['Escape']],\n        callback: event => {\n          this.runLocalHooks('keydown', event, this);\n        },\n        group: SHORTCUTS_GROUP\n      });\n      gridContext.addShortcut({\n        keys: [['Tab'], ['Shift', 'Tab']],\n        callback: event => {\n          _classPrivateFieldGet(this, _itemsBox).deselectCell();\n          this.runLocalHooks('keydown', event, this);\n          this.runLocalHooks('listTabKeydown', event, this);\n        },\n        group: SHORTCUTS_GROUP\n      });\n    };\n    hotInitializer(itemsBoxWrapper);\n    this.hot._registerTimeout(() => hotInitializer(itemsBoxWrapper), 100);\n  }\n\n  /**\n   * Focus element.\n   */\n  focus() {\n    if (this.isBuilt()) {\n      _classPrivateFieldGet(this, _itemsBox).listen();\n    }\n  }\n\n  /**\n   * Reset DOM structure.\n   */\n  reset() {\n    _classPrivateFieldGet(this, _searchInput).reset();\n    _classPrivateFieldGet(this, _selectAllUI).reset();\n    _classPrivateFieldGet(this, _clearAllUI).reset();\n  }\n\n  /**\n   * Update DOM structure.\n   */\n  update() {\n    if (!this.isBuilt()) {\n      return;\n    }\n    _classPrivateFieldGet(this, _itemsBox).loadData(valueToItems(_classPrivateFieldGet(this, _items), this.options.value));\n    super.update();\n  }\n\n  /**\n   * Destroy instance.\n   */\n  destroy() {\n    if (_classPrivateFieldGet(this, _itemsBox)) {\n      _classPrivateFieldGet(this, _itemsBox).destroy();\n    }\n    _classPrivateFieldGet(this, _searchInput).destroy();\n    _classPrivateFieldGet(this, _clearAllUI).destroy();\n    _classPrivateFieldGet(this, _selectAllUI).destroy();\n    _classPrivateFieldSet(this, _searchInput, null);\n    _classPrivateFieldSet(this, _clearAllUI, null);\n    _classPrivateFieldSet(this, _selectAllUI, null);\n    _classPrivateFieldSet(this, _itemsBox, null);\n    _classPrivateFieldSet(this, _items, null);\n    super.destroy();\n  }\n}\nfunction _onInput2(event) {\n  const value = event.target.value.toLocaleLowerCase(this.getLocale());\n  let filteredItems;\n  if (value === '') {\n    filteredItems = [..._classPrivateFieldGet(this, _items)];\n  } else {\n    filteredItems = arrayFilter(_classPrivateFieldGet(this, _items), item => `${item.value}`.toLocaleLowerCase(this.getLocale()).indexOf(value) >= 0);\n  }\n  _classPrivateFieldGet(this, _itemsBox).loadData(filteredItems);\n}\nfunction _onInputKeyDown2(event) {\n  this.runLocalHooks('keydown', event, this);\n  const isKeyCode = partial(isKey, event.keyCode);\n  if (isKeyCode('ARROW_DOWN')) {\n    event.preventDefault();\n    stopImmediatePropagation(event);\n    _classPrivateFieldGet(this, _itemsBox).listen();\n    _classPrivateFieldGet(this, _itemsBox).selectCell(0, 0);\n  }\n}\nfunction _onSelectAllClick2(event) {\n  const changes = [];\n  event.preventDefault();\n  arrayEach(_classPrivateFieldGet(this, _itemsBox).getSourceData(), (row, rowIndex) => {\n    row.checked = true;\n    changes.push(dataRowToChangesArray(row, rowIndex)[0]);\n  });\n  _classPrivateFieldGet(this, _itemsBox).setSourceDataAtCell(changes);\n}\nfunction _onClearAllClick2(event) {\n  const changes = [];\n  event.preventDefault();\n  arrayEach(_classPrivateFieldGet(this, _itemsBox).getSourceData(), (row, rowIndex) => {\n    row.checked = false;\n    changes.push(dataRowToChangesArray(row, rowIndex)[0]);\n  });\n  _classPrivateFieldGet(this, _itemsBox).setSourceDataAtCell(changes);\n}\nexport default MultipleSelectUI;\n\n/**\n * Pick up object items based on selected values.\n *\n * @param {Array} availableItems Base collection to compare values.\n * @param {Array} selectedValue Flat array with selected values.\n * @returns {Array}\n */\nfunction valueToItems(availableItems, selectedValue) {\n  const arrayAssertion = createArrayAssertion(selectedValue);\n  return arrayMap(availableItems, item => {\n    item.checked = arrayAssertion(item.value);\n    return item;\n  });\n}\n\n/**\n * Convert all checked items into flat array.\n *\n * @param {Array} availableItems Base collection.\n * @returns {Array}\n */\nfunction itemsToValue(availableItems) {\n  const items = [];\n  arrayEach(availableItems, item => {\n    if (item.checked) {\n      items.push(item.value);\n    }\n  });\n  return items;\n}","import { registerCondition } from \"../conditionRegisterer.mjs\";\nimport { createArrayAssertion } from \"../utils.mjs\";\nexport const CONDITION_NAME = 'by_value';\n\n/**\n * @param {object} dataRow The object which holds and describes the single cell value.\n * @param {Array} inputValues An array of values to compare with.\n * @param {Function} inputValues.\"0\" A function to compare row's data.\n * @returns {boolean}\n */\nexport function condition(dataRow, _ref) {\n  let [value] = _ref;\n  return value(dataRow.value);\n}\nregisterCondition(CONDITION_NAME, condition, {\n  name: 'By value',\n  inputsCount: 0,\n  inputValuesDecorator(_ref2) {\n    let [data] = _ref2;\n    return [createArrayAssertion(data)];\n  },\n  showOperators: false\n});","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nimport { addClass } from \"../../../helpers/dom/element.mjs\";\nimport { stopImmediatePropagation } from \"../../../helpers/dom/event.mjs\";\nimport { arrayEach, arrayFilter, arrayMap } from \"../../../helpers/array.mjs\";\nimport { isKey } from \"../../../helpers/unicode.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nimport { unifyColumnValues, intersectValues, toEmptyString } from \"../utils.mjs\";\nimport { BaseComponent } from \"./_base.mjs\";\nimport { MultipleSelectUI } from \"../ui/multipleSelect.mjs\";\nimport { CONDITION_BY_VALUE, CONDITION_NONE } from \"../constants.mjs\";\nimport { getConditionDescriptor } from \"../conditionRegisterer.mjs\";\n/**\n * @private\n * @class ValueComponent\n */\nvar _onInputKeyDown = /*#__PURE__*/new WeakSet();\nexport class ValueComponent extends BaseComponent {\n  constructor(hotInstance, options) {\n    super(hotInstance, {\n      id: options.id,\n      stateless: false\n    });\n    /**\n     * Key down listener.\n     *\n     * @param {Event} event The DOM event object.\n     */\n    _classPrivateMethodInitSpec(this, _onInputKeyDown);\n    this.name = options.name;\n    this.elements.push(new MultipleSelectUI(this.hot));\n    this.registerHooks();\n  }\n\n  /**\n   * Register all necessary hooks.\n   *\n   * @private\n   */\n  registerHooks() {\n    this.getMultipleSelectElement().addLocalHook('keydown', event => _classPrivateMethodGet(this, _onInputKeyDown, _onInputKeyDown2).call(this, event)).addLocalHook('listTabKeydown', event => this.runLocalHooks('listTabKeydown', event));\n  }\n\n  /**\n   * Gets the list of elements from which the component is built.\n   *\n   * @returns {BaseUI[]}\n   */\n  getElements() {\n    const selectElement = this.getMultipleSelectElement();\n    return [selectElement.getSearchInputElement(), selectElement.getSelectAllElement(), selectElement.getClearAllElement(), this.getMultipleSelectElement()];\n  }\n\n  /**\n   * Set state of the component.\n   *\n   * @param {object} value The component value.\n   */\n  setState(value) {\n    this.reset();\n    if (value && value.command.key === CONDITION_BY_VALUE) {\n      const select = this.getMultipleSelectElement();\n      select.setItems(value.itemsSnapshot);\n      select.setValue(value.args[0]);\n      select.setLocale(value.locale);\n    }\n  }\n\n  /**\n   * Export state of the component (get selected filter and filter arguments).\n   *\n   * @returns {object} Returns object where `command` key keeps used condition filter and `args` key its arguments.\n   */\n  getState() {\n    const select = this.getMultipleSelectElement();\n    const availableItems = select.getItems();\n    return {\n      command: {\n        key: select.isSelectedAllValues() || !availableItems.length ? CONDITION_NONE : CONDITION_BY_VALUE\n      },\n      args: [select.getValue()],\n      itemsSnapshot: availableItems\n    };\n  }\n\n  /**\n   * Update state of component.\n   *\n   * @param {object} stateInfo Information about state containing stack of edited column,\n   * stack of dependent conditions, data factory and optional condition arguments change. It's described by object containing keys:\n   * `editedConditionStack`, `dependentConditionStacks`, `visibleDataFactory` and `conditionArgsChange`.\n   */\n  updateState(stateInfo) {\n    const updateColumnState = (physicalColumn, conditions, conditionArgsChange, filteredRowsFactory, conditionsStack) => {\n      const [firstByValueCondition] = arrayFilter(conditions, condition => condition.name === CONDITION_BY_VALUE);\n      const state = {};\n      const defaultBlankCellValue = this.hot.getTranslatedPhrase(C.FILTERS_VALUES_BLANK_CELLS);\n      if (firstByValueCondition) {\n        const rowValues = unifyColumnValues(arrayMap(filteredRowsFactory(physicalColumn, conditionsStack), row => row.value));\n        if (conditionArgsChange) {\n          firstByValueCondition.args[0] = conditionArgsChange;\n        }\n        const selectedValues = [];\n        const itemsSnapshot = intersectValues(rowValues, firstByValueCondition.args[0], defaultBlankCellValue, item => {\n          if (item.checked) {\n            selectedValues.push(item.value);\n          }\n        });\n        const column = stateInfo.editedConditionStack.column;\n        state.locale = this.hot.getCellMeta(0, column).locale;\n        state.args = [selectedValues];\n        state.command = getConditionDescriptor(CONDITION_BY_VALUE);\n        state.itemsSnapshot = itemsSnapshot;\n      } else {\n        state.args = [];\n        state.command = getConditionDescriptor(CONDITION_NONE);\n      }\n      this.state.setValueAtIndex(physicalColumn, state);\n    };\n    updateColumnState(stateInfo.editedConditionStack.column, stateInfo.editedConditionStack.conditions, stateInfo.conditionArgsChange, stateInfo.filteredRowsFactory);\n\n    // Update the next \"by_value\" component (filter column conditions added after this condition).\n    // Its list of values has to be updated. As the new values by default are unchecked,\n    // the further component update is unnecessary.\n    if (stateInfo.dependentConditionStacks.length) {\n      updateColumnState(stateInfo.dependentConditionStacks[0].column, stateInfo.dependentConditionStacks[0].conditions, stateInfo.conditionArgsChange, stateInfo.filteredRowsFactory, stateInfo.editedConditionStack);\n    }\n  }\n\n  /**\n   * Get multiple select element.\n   *\n   * @returns {MultipleSelectUI}\n   */\n  getMultipleSelectElement() {\n    return this.elements.filter(element => element instanceof MultipleSelectUI)[0];\n  }\n\n  /**\n   * Get object descriptor for menu item entry.\n   *\n   * @returns {object}\n   */\n  getMenuItemDescriptor() {\n    return {\n      key: this.id,\n      name: this.name,\n      isCommand: false,\n      disableSelection: true,\n      hidden: () => this.isHidden(),\n      renderer: (hot, wrapper, row, col, prop, value) => {\n        addClass(wrapper.parentNode, 'htFiltersMenuValue');\n        const label = this.hot.rootDocument.createElement('div');\n        addClass(label, 'htFiltersMenuLabel');\n        label.textContent = value;\n        wrapper.appendChild(label);\n        arrayEach(this.elements, ui => wrapper.appendChild(ui.element));\n        return wrapper;\n      }\n    };\n  }\n\n  /**\n   * Reset elements to their initial state.\n   */\n  reset() {\n    const defaultBlankCellValue = this.hot.getTranslatedPhrase(C.FILTERS_VALUES_BLANK_CELLS);\n    const values = unifyColumnValues(this._getColumnVisibleValues());\n    const items = intersectValues(values, values, defaultBlankCellValue);\n    this.getMultipleSelectElement().setItems(items);\n    super.reset();\n    this.getMultipleSelectElement().setValue(values);\n    const selectedColumn = this.hot.getPlugin('filters').getSelectedColumn();\n    if (selectedColumn !== null) {\n      this.getMultipleSelectElement().setLocale(this.hot.getCellMeta(0, selectedColumn.visualIndex).locale);\n    }\n  }\n  /**\n   * Get data for currently selected column.\n   *\n   * @returns {Array}\n   * @private\n   */\n  _getColumnVisibleValues() {\n    const selectedColumn = this.hot.getPlugin('filters').getSelectedColumn();\n    if (selectedColumn === null) {\n      return [];\n    }\n    return arrayMap(this.hot.getDataAtCol(selectedColumn.visualIndex), v => toEmptyString(v));\n  }\n}\nfunction _onInputKeyDown2(event) {\n  if (isKey(event.keyCode, 'ESCAPE')) {\n    this.runLocalHooks('cancel');\n    stopImmediatePropagation(event);\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nvar _class;\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError(\"attempted to get private field on non-instance\"); } return fn; }\nimport { addClass } from \"../../../helpers/dom/element.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nimport { BaseComponent } from \"./_base.mjs\";\nimport { InputUI } from \"../ui/input.mjs\";\n/**\n * @private\n * @class ActionBarComponent\n */\nvar _onButtonClick = /*#__PURE__*/new WeakSet();\nexport class ActionBarComponent extends BaseComponent {\n  static get BUTTON_OK() {\n    return 'ok';\n  }\n  static get BUTTON_CANCEL() {\n    return 'cancel';\n  }\n  constructor(hotInstance, options) {\n    super(hotInstance, {\n      id: options.id,\n      stateless: true\n    });\n    /**\n     * On button click listener.\n     *\n     * @param {Event} event DOM event.\n     * @param {InputUI} button InputUI object.\n     */\n    _classPrivateMethodInitSpec(this, _onButtonClick);\n    this.name = options.name;\n    this.elements.push(new InputUI(this.hot, {\n      type: 'button',\n      value: C.FILTERS_BUTTONS_OK,\n      className: 'htUIButton htUIButtonOK',\n      identifier: ActionBarComponent.BUTTON_OK\n    }));\n    this.elements.push(new InputUI(this.hot, {\n      type: 'button',\n      value: C.FILTERS_BUTTONS_CANCEL,\n      className: 'htUIButton htUIButtonCancel',\n      identifier: ActionBarComponent.BUTTON_CANCEL\n    }));\n    this.registerHooks();\n  }\n\n  /**\n   * Register all necessary hooks.\n   *\n   * @private\n   */\n  registerHooks() {\n    arrayEach(this.elements, element => {\n      element.addLocalHook('click', (event, button) => _classPrivateMethodGet(this, _onButtonClick, _onButtonClick2).call(this, event, button));\n    });\n  }\n\n  /**\n   * Get menu object descriptor.\n   *\n   * @returns {object}\n   */\n  getMenuItemDescriptor() {\n    return {\n      key: this.id,\n      name: this.name,\n      isCommand: false,\n      disableSelection: true,\n      hidden: () => this.isHidden(),\n      renderer: (hot, wrapper) => {\n        addClass(wrapper.parentNode, 'htFiltersMenuActionBar');\n        arrayEach(this.elements, ui => wrapper.appendChild(ui.element));\n        return wrapper;\n      }\n    };\n  }\n\n  /**\n   * Fire accept event.\n   */\n  accept() {\n    this.runLocalHooks('accept');\n  }\n\n  /**\n   * Fire cancel event.\n   */\n  cancel() {\n    this.runLocalHooks('cancel');\n  }\n}\n_class = ActionBarComponent;\nfunction _onButtonClick2(event, button) {\n  if (button.options.identifier === _class.BUTTON_OK) {\n    this.accept();\n  } else {\n    this.cancel();\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { mixin } from \"../../helpers/object.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport { getCondition } from \"./conditionRegisterer.mjs\";\nimport { OPERATION_ID as OPERATION_AND } from \"./logicalOperations/conjunction.mjs\";\nimport { operations, getOperationFunc } from \"./logicalOperationRegisterer.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { LinkedPhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nconst MAP_NAME = 'ConditionCollection.filteringStates';\n\n/**\n * @private\n * @class ConditionCollection\n */\nclass ConditionCollection {\n  constructor(hot) {\n    let isMapRegistrable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hot;\n    /**\n     * Indicates whether the internal IndexMap should be registered or not. Generally,\n     * registered Maps responds to the index changes. Within that collection, sometimes\n     * this is not necessary.\n     *\n     * @type {boolean}\n     */\n    this.isMapRegistrable = isMapRegistrable;\n    /**\n     * Index map storing filtering states for every column. ConditionCollection write and read to/from this element.\n     *\n     * @type {LinkedPhysicalIndexToValueMap}\n     */\n    this.filteringStates = new IndexToValueMap();\n    if (this.isMapRegistrable === true) {\n      this.hot.columnIndexMapper.registerMap(MAP_NAME, this.filteringStates);\n    } else {\n      this.filteringStates.init(this.hot.columnIndexMapper.getNumberOfIndexes());\n    }\n  }\n\n  /**\n   * Check if condition collection is empty (so no needed to filter data).\n   *\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return this.getFilteredColumns().length === 0;\n  }\n\n  /**\n   * Check if value is matched to the criteria of conditions chain.\n   *\n   * @param {object} value Object with `value` and `meta` keys.\n   * @param {number} column The physical column index.\n   * @returns {boolean}\n   */\n  isMatch(value, column) {\n    var _stateForColumn$condi;\n    const stateForColumn = this.filteringStates.getValueAtIndex(column);\n    const conditions = (_stateForColumn$condi = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.conditions) !== null && _stateForColumn$condi !== void 0 ? _stateForColumn$condi : [];\n    const operation = stateForColumn === null || stateForColumn === void 0 ? void 0 : stateForColumn.operation;\n    return this.isMatchInConditions(conditions, value, operation);\n  }\n\n  /**\n   * Check if the value is matches the conditions.\n   *\n   * @param {Array} conditions List of conditions.\n   * @param {object} value Object with `value` and `meta` keys.\n   * @param {string} [operationType='conjunction'] Type of conditions operation.\n   * @returns {boolean}\n   */\n  isMatchInConditions(conditions, value) {\n    let operationType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n    if (conditions.length) {\n      return getOperationFunc(operationType)(conditions, value);\n    }\n    return true;\n  }\n\n  /**\n   * Add condition to the collection.\n   *\n   * @param {number} column The physical column index.\n   * @param {object} conditionDefinition Object with keys:\n   *  * `command` Object, Command object with condition name as `key` property.\n   *  * `args` Array, Condition arguments.\n   * @param {string} [operation='conjunction'] Type of conditions operation.\n   * @param {number} [position] Position to which condition will be added. When argument is undefined\n   * the condition will be processed as the last condition.\n   * @fires ConditionCollection#beforeAdd\n   * @fires ConditionCollection#afterAdd\n   */\n  addCondition(column, conditionDefinition) {\n    let operation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : OPERATION_AND;\n    let position = arguments.length > 3 ? arguments[3] : undefined;\n    const localeForColumn = this.hot.getCellMeta(0, column).locale;\n    const args = arrayMap(conditionDefinition.args, v => typeof v === 'string' ? v.toLocaleLowerCase(localeForColumn) : v);\n    const name = conditionDefinition.name || conditionDefinition.command.key;\n    this.runLocalHooks('beforeAdd', column);\n    const columnType = this.getOperation(column);\n    if (columnType) {\n      if (columnType !== operation) {\n        throw Error(toSingleLine`The column of index ${column} has been already applied with a \\`${columnType}\\`\\x20\n        filter operation. Use \\`removeConditions\\` to clear the current conditions and then add new ones.\\x20\n        Mind that you cannot mix different types of operations (for instance, if you use \\`conjunction\\`,\\x20\n        use it consequently for a particular column).`);\n      }\n    } else if (isUndefined(operations[operation])) {\n      throw new Error(toSingleLine`Unexpected operation named \\`${operation}\\`. Possible ones are\\x20\n        \\`disjunction\\` and \\`conjunction\\`.`);\n    }\n    const conditionsForColumn = this.getConditions(column);\n    if (conditionsForColumn.length === 0) {\n      // Create first condition for particular column.\n      this.filteringStates.setValueAtIndex(column, {\n        operation,\n        conditions: [{\n          name,\n          args,\n          func: getCondition(name, args)\n        }]\n      }, position);\n    } else {\n      // Add next condition for particular column (by reference).\n      conditionsForColumn.push({\n        name,\n        args,\n        func: getCondition(name, args)\n      });\n    }\n    this.runLocalHooks('afterAdd', column);\n  }\n\n  /**\n   * Get all added conditions from the collection at specified column index.\n   *\n   * @param {number} column The physical column index.\n   * @returns {Array} Returns conditions collection as an array.\n   */\n  getConditions(column) {\n    var _this$filteringStates, _this$filteringStates2;\n    return (_this$filteringStates = (_this$filteringStates2 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates2 === void 0 ? void 0 : _this$filteringStates2.conditions) !== null && _this$filteringStates !== void 0 ? _this$filteringStates : [];\n  }\n\n  /**\n   * Get operation for particular column.\n   *\n   * @param {number} column The physical column index.\n   * @returns {string|undefined}\n   */\n  getOperation(column) {\n    var _this$filteringStates3;\n    return (_this$filteringStates3 = this.filteringStates.getValueAtIndex(column)) === null || _this$filteringStates3 === void 0 ? void 0 : _this$filteringStates3.operation;\n  }\n\n  /**\n   * Get all filtered physical columns in the order in which actions are performed.\n   *\n   * @returns {Array}\n   */\n  getFilteredColumns() {\n    return this.filteringStates.getEntries().map(_ref => {\n      let [physicalColumn] = _ref;\n      return physicalColumn;\n    });\n  }\n\n  /**\n   * Gets position in the filtering states stack for the specific column.\n   *\n   * @param {number} column The physical column index.\n   * @returns {number} Returns -1 when the column doesn't exist in the stack.\n   */\n  getColumnStackPosition(column) {\n    return this.getFilteredColumns().indexOf(column);\n  }\n\n  /**\n   * Export all previously added conditions.\n   *\n   * @returns {Array}\n   */\n  exportAllConditions() {\n    return arrayReduce(this.filteringStates.getEntries(), (allConditions, _ref2) => {\n      let [column, {\n        operation,\n        conditions\n      }] = _ref2;\n      allConditions.push({\n        column,\n        operation,\n        conditions: arrayMap(conditions, _ref3 => {\n          let {\n            name,\n            args\n          } = _ref3;\n          return {\n            name,\n            args\n          };\n        })\n      });\n      return allConditions;\n    }, []);\n  }\n\n  /**\n   * Import conditions to the collection.\n   *\n   * @param {Array} conditions The collection of the conditions.\n   */\n  importAllConditions(conditions) {\n    this.clean();\n    arrayEach(conditions, stack => {\n      arrayEach(stack.conditions, condition => this.addCondition(stack.column, condition));\n    });\n  }\n\n  /**\n   * Remove conditions at given column index.\n   *\n   * @param {number} column The physical column index.\n   * @fires ConditionCollection#beforeRemove\n   * @fires ConditionCollection#afterRemove\n   */\n  removeConditions(column) {\n    this.runLocalHooks('beforeRemove', column);\n    this.filteringStates.clearValue(column);\n    this.runLocalHooks('afterRemove', column);\n  }\n\n  /**\n   * Clean all conditions collection and reset order stack.\n   *\n   * @fires ConditionCollection#beforeClean\n   * @fires ConditionCollection#afterClean\n   */\n  clean() {\n    this.runLocalHooks('beforeClean');\n    this.filteringStates.clear();\n    this.runLocalHooks('afterClean');\n  }\n\n  /**\n   * Check if at least one condition was added at specified column index. And if second parameter is passed then additionally\n   * check if condition exists under its name.\n   *\n   * @param {number} column The physical column index.\n   * @param {string} [name] Condition name.\n   * @returns {boolean}\n   */\n  hasConditions(column, name) {\n    const conditions = this.getConditions(column);\n    if (name) {\n      return conditions.some(condition => condition.name === name);\n    }\n    return conditions.length > 0;\n  }\n\n  /**\n   * Destroy object.\n   */\n  destroy() {\n    if (this.isMapRegistrable) {\n      this.hot.columnIndexMapper.unregisterMap(MAP_NAME);\n    }\n    this.filteringStates = null;\n    this.clearLocalHooks();\n  }\n}\nmixin(ConditionCollection, localHooks);\nexport default ConditionCollection;","import \"core-js/modules/es.array.push.js\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\n/**\n * @private\n * @class DataFilter\n */\nclass DataFilter {\n  constructor(conditionCollection) {\n    let columnDataFactory = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => [];\n    /**\n     * Reference to the instance of {ConditionCollection}.\n     *\n     * @type {ConditionCollection}\n     */\n    this.conditionCollection = conditionCollection;\n    /**\n     * Function which provide source data factory for specified column.\n     *\n     * @type {Function}\n     */\n    this.columnDataFactory = columnDataFactory;\n  }\n\n  /**\n   * Filter data based on the conditions collection.\n   *\n   * @returns {Array}\n   */\n  filter() {\n    let filteredData = [];\n    arrayEach(this.conditionCollection.getFilteredColumns(), (physicalColumn, index) => {\n      let columnData = this.columnDataFactory(physicalColumn);\n      if (index) {\n        columnData = this._getIntersectData(columnData, filteredData);\n      }\n      filteredData = this.filterByColumn(physicalColumn, columnData);\n    });\n    return filteredData;\n  }\n\n  /**\n   * Filter data based on specified physical column index.\n   *\n   * @param {number} column The physical column index.\n   * @param {Array} [dataSource] Data source as array of objects with `value` and `meta` keys (e.g. `{value: 'foo', meta: {}}`).\n   * @returns {Array} Returns filtered data.\n   */\n  filterByColumn(column) {\n    let dataSource = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const filteredData = [];\n    arrayEach(dataSource, dataRow => {\n      if (dataRow !== void 0 && this.conditionCollection.isMatch(dataRow, column)) {\n        filteredData.push(dataRow);\n      }\n    });\n    return filteredData;\n  }\n\n  /**\n   * Intersect data.\n   *\n   * @private\n   * @param {Array} data The data to intersect.\n   * @param {Array} needles The collection intersected rows with the data.\n   * @returns {Array}\n   */\n  _getIntersectData(data, needles) {\n    const result = [];\n    arrayEach(needles, needleRow => {\n      const row = needleRow.meta.visualRow;\n      if (data[row] !== void 0) {\n        result[row] = data[row];\n      }\n    });\n    return result;\n  }\n}\nexport default DataFilter;","import \"core-js/modules/es.array.push.js\";\nimport { arrayEach, arrayMap, arrayFilter } from \"../../helpers/array.mjs\";\nimport { mixin, objectEach } from \"../../helpers/object.mjs\";\nimport { curry } from \"../../helpers/function.mjs\";\nimport localHooks from \"../../mixins/localHooks.mjs\";\nimport ConditionCollection from \"./conditionCollection.mjs\";\nimport DataFilter from \"./dataFilter.mjs\";\nimport { createArrayAssertion } from \"./utils.mjs\";\n/**\n * Class which is designed for observing changes in condition collection. When condition is changed by user at specified\n * column it's necessary to update all conditions defined after this edited one.\n *\n * Object fires `update` hook for every column conditions change.\n *\n * @private\n * @class ConditionUpdateObserver\n */\nclass ConditionUpdateObserver {\n  constructor(hot, conditionCollection) {\n    let columnDataFactory = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => [];\n    /**\n     * Handsontable instance.\n     *\n     * @type {Core}\n     */\n    this.hot = hot;\n    /**\n     * Reference to the instance of {@link ConditionCollection}.\n     *\n     * @type {ConditionCollection}\n     */\n    this.conditionCollection = conditionCollection;\n    /**\n     * Function which provide source data factory for specified column.\n     *\n     * @type {Function}\n     */\n    this.columnDataFactory = columnDataFactory;\n    /**\n     * Collected changes when grouping is enabled.\n     *\n     * @type {Array}\n     * @default []\n     */\n    this.changes = [];\n    /**\n     * Flag which determines if grouping events is enabled.\n     *\n     * @type {boolean}\n     */\n    this.grouping = false;\n    /**\n     * The latest known position of edited conditions at specified column index.\n     *\n     * @type {number}\n     * @default -1\n     */\n    this.latestEditedColumnPosition = -1;\n    /**\n     * The latest known order of conditions stack.\n     *\n     * @type {Array}\n     */\n    this.latestOrderStack = [];\n    this.conditionCollection.addLocalHook('beforeRemove', column => this._onConditionBeforeModify(column));\n    this.conditionCollection.addLocalHook('afterRemove', column => this.updateStatesAtColumn(column));\n    this.conditionCollection.addLocalHook('afterAdd', column => this.updateStatesAtColumn(column));\n    this.conditionCollection.addLocalHook('beforeClean', () => this._onConditionBeforeClean());\n    this.conditionCollection.addLocalHook('afterClean', () => this._onConditionAfterClean());\n  }\n\n  /**\n   * Enable grouping changes. Grouping is helpful in situations when a lot of conditions is added in one moment. Instead of\n   * trigger `update` hook for every condition by adding/removing you can group this changes and call `flush` method to trigger\n   * it once.\n   */\n  groupChanges() {\n    this.grouping = true;\n  }\n\n  /**\n   * Flush all collected changes. This trigger `update` hook for every previously collected change from condition collection.\n   */\n  flush() {\n    this.grouping = false;\n    arrayEach(this.changes, column => {\n      this.updateStatesAtColumn(column);\n    });\n    this.changes.length = 0;\n  }\n\n  /**\n   * On before modify condition (add or remove from collection),.\n   *\n   * @param {number} column Column index.\n   * @private\n   */\n  _onConditionBeforeModify(column) {\n    this.latestEditedColumnPosition = this.conditionCollection.getColumnStackPosition(column);\n  }\n\n  /**\n   * Update all related states which should be changed after invoking changes applied to current column.\n   *\n   * @param {number} column The column index.\n   * @param {object} conditionArgsChange Object describing condition changes which can be handled by filters on `update` hook.\n   * It contains keys `conditionKey` and `conditionValue` which refers to change specified key of condition to specified value\n   * based on referred keys.\n   */\n  updateStatesAtColumn(column, conditionArgsChange) {\n    var _this = this;\n    if (this.grouping) {\n      if (this.changes.indexOf(column) === -1) {\n        this.changes.push(column);\n      }\n      return;\n    }\n    const allConditions = this.conditionCollection.exportAllConditions();\n    let editedColumnPosition = this.conditionCollection.getColumnStackPosition(column);\n    if (editedColumnPosition === -1) {\n      editedColumnPosition = this.latestEditedColumnPosition;\n    }\n\n    // Collection of all conditions defined before currently edited `column` (without edited one)\n    const conditionsBefore = allConditions.slice(0, editedColumnPosition);\n    // Collection of all conditions defined after currently edited `column` (with edited one)\n    const conditionsAfter = allConditions.slice(editedColumnPosition);\n\n    // Make sure that conditionAfter doesn't contain edited column conditions\n    if (conditionsAfter.length && conditionsAfter[0].column === column) {\n      conditionsAfter.shift();\n    }\n    const visibleDataFactory = curry(function (curriedConditionsBefore, curriedColumn) {\n      let conditionsStack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n      const splitConditionCollection = new ConditionCollection(_this.hot, false);\n      const curriedConditionsBeforeArray = [].concat(curriedConditionsBefore, conditionsStack);\n\n      // Create new condition collection to determine what rows should be visible in \"filter by value\" box\n      // in the next conditions in the chain\n      splitConditionCollection.importAllConditions(curriedConditionsBeforeArray);\n      const allRows = _this.columnDataFactory(curriedColumn);\n      let visibleRows;\n      if (splitConditionCollection.isEmpty()) {\n        visibleRows = allRows;\n      } else {\n        visibleRows = new DataFilter(splitConditionCollection, columnData => _this.columnDataFactory(columnData)).filter();\n      }\n      visibleRows = arrayMap(visibleRows, rowData => rowData.meta.visualRow);\n      const visibleRowsAssertion = createArrayAssertion(visibleRows);\n      splitConditionCollection.destroy();\n      return arrayFilter(allRows, rowData => visibleRowsAssertion(rowData.meta.visualRow));\n    })(conditionsBefore);\n    const editedConditions = [].concat(this.conditionCollection.getConditions(column));\n    this.runLocalHooks('update', {\n      editedConditionStack: {\n        column,\n        conditions: editedConditions\n      },\n      dependentConditionStacks: conditionsAfter,\n      filteredRowsFactory: visibleDataFactory,\n      conditionArgsChange\n    });\n  }\n\n  /**\n   * On before conditions clean listener.\n   *\n   * @private\n   */\n  _onConditionBeforeClean() {\n    this.latestOrderStack = this.conditionCollection.getFilteredColumns();\n  }\n\n  /**\n   * On after conditions clean listener.\n   *\n   * @private\n   */\n  _onConditionAfterClean() {\n    arrayEach(this.latestOrderStack, column => {\n      this.updateStatesAtColumn(column);\n    });\n  }\n\n  /**\n   * Destroy instance.\n   */\n  destroy() {\n    this.clearLocalHooks();\n    objectEach(this, (value, property) => {\n      this[property] = null;\n    });\n  }\n}\nmixin(ConditionUpdateObserver, localHooks);\nexport default ConditionUpdateObserver;","import { createPaginator } from \"../../../utils/paginator.mjs\";\nimport { isVisible } from \"../../../helpers/dom/element.mjs\";\nimport { MultipleSelectUI } from \"../ui/multipleSelect.mjs\";\n/**\n * Creates navigator for switching the focus of the filter's elements.\n *\n * @param {BaseUI[]} elements The elements to paginate to.\n * @returns {Paginator}\n */\nexport function createFocusNavigator(elements) {\n  const navigator = createPaginator({\n    initialPage: 0,\n    size: () => elements.length,\n    onItemSelect: (currentIndex, directItemChange) => {\n      const element = elements[currentIndex];\n      if (element instanceof MultipleSelectUI) {\n        return directItemChange;\n      }\n      if (element.element && !isVisible(element.element)) {\n        return false;\n      }\n      element.focus();\n    }\n  });\n  return navigator;\n}","import { createFocusNavigator } from \"./focusNavigator.mjs\";\nimport { SelectUI } from \"../ui/select.mjs\";\nimport { BaseUI } from \"../ui/_base.mjs\";\nimport { LinkUI } from \"../ui/link.mjs\";\nconst SHORTCUTS_MENU_CONTEXT = 'filters';\n\n/**\n * @typedef MenuFocusNavigator\n * @property {function(number): void} setCurrentPage Sets the current index of the selected focus.\n * @property {function(): number} getCurrentPage Gets the index of currently focus element.\n * @property {function(): void} toFirstItem Move the focus index to the first element in the list.\n * @property {function(): void} toLastItem Move the focus index to the last element in the list.\n * @property {function(): void} toNextItem Move the focus index to the next element in the list.\n * @property {function(): void} toPreviousItem Move the focus index to the previous element in the list.\n * @property {function(): void} clear Clear the internal state of the navigator.\n * @property {function(): void} listen Activate the navigator by listening the keyboard shortcuts.\n */\n/**\n * Creates navigator controller for filter subcomponents in the menu.\n *\n * @param {Menu} mainMenu The main Menu instance.\n * @param {BaseUI[]} menuItems The list of the component's elements to paginate to.\n * @returns {Paginator}\n */\nexport function createMenuFocusController(mainMenu, menuItems) {\n  const navigator = createFocusNavigator(menuItems);\n  const updateNavigatorPosition = element => () => {\n    if (mainMenu.isOpened()) {\n      mainMenu.getKeyboardShortcutsCtrl().listen(SHORTCUTS_MENU_CONTEXT);\n    }\n    navigator.setCurrentPage(menuItems.indexOf(element));\n  };\n\n  // update navigator position (internal state) to element that was recently clicked or focused\n  menuItems.forEach(element => {\n    if (element instanceof BaseUI) {\n      element.addLocalHook('click', updateNavigatorPosition(element));\n      element.addLocalHook('focus', updateNavigatorPosition(element));\n      element.addLocalHook('afterClose', updateNavigatorPosition(element));\n    }\n  });\n  mainMenu.addLocalHook('afterSelectionChange', selectedItem => {\n    if (!selectedItem.key.startsWith('filter_')) {\n      navigator.clear();\n    }\n  });\n\n  /**\n   * Extends the menu and submenus with new keyboard shortcuts.\n   *\n   * @param {*} menu The menu (as main menu or submenu) instance.\n   */\n  function addKeyboardShortcuts(menu) {\n    const mainMenuShortcutsCtrl = mainMenu.getKeyboardShortcutsCtrl();\n    const currentMenuShortcutsCtrl = menu.getKeyboardShortcutsCtrl();\n    navigator.clear();\n    currentMenuShortcutsCtrl.addCustomShortcuts([{\n      keys: [['Tab'], ['Shift', 'Tab']],\n      forwardToContext: mainMenuShortcutsCtrl.getContext(SHORTCUTS_MENU_CONTEXT),\n      callback: () => {\n        if (menu.isSubMenu()) {\n          menu.close();\n        }\n        mainMenuShortcutsCtrl.listen(SHORTCUTS_MENU_CONTEXT);\n      }\n    }]);\n    if (menu.isSubMenu()) {\n      return;\n    }\n    mainMenuShortcutsCtrl.addCustomShortcuts([{\n      keys: [['Tab'], ['Shift', 'Tab']],\n      callback: event => {\n        mainMenu.getNavigator().clear();\n        if (event.shiftKey) {\n          navigator.toPreviousItem();\n        } else {\n          navigator.toNextItem();\n        }\n      }\n    }, {\n      keys: [['Escape']],\n      callback: () => {\n        mainMenu.close();\n      }\n    }, {\n      keys: [['Enter'], ['Space']],\n      preventDefault: false,\n      callback: event => {\n        const element = menuItems[navigator.getCurrentPage()];\n        if (element instanceof SelectUI) {\n          element.openOptions();\n          event.preventDefault();\n        }\n        if (element instanceof LinkUI) {\n          element.activate();\n          event.preventDefault();\n        }\n        if (!(element instanceof BaseUI)) {\n          event.preventDefault();\n        }\n      }\n    }], SHORTCUTS_MENU_CONTEXT);\n  }\n  mainMenu.addLocalHook('afterSubmenuOpen', addKeyboardShortcuts);\n  mainMenu.addLocalHook('afterOpen', addKeyboardShortcuts);\n\n  /**\n   * Focuses the menu and switches its shortcut context to that one which controls\n   * the focus navigation.\n   */\n  function listen() {\n    mainMenu.focus();\n    mainMenu.getKeyboardShortcutsCtrl().listen(SHORTCUTS_MENU_CONTEXT);\n  }\n  return {\n    ...navigator,\n    listen\n  };\n}","import \"core-js/modules/es.array.unscopables.flat.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { arrayEach, arrayMap } from \"../../helpers/array.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\nimport { warn } from \"../../helpers/console.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { addClass, removeClass } from \"../../helpers/dom/element.mjs\";\nimport { isKey } from \"../../helpers/unicode.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport * as constants from \"../../i18n/constants.mjs\";\nimport { ConditionComponent } from \"./component/condition.mjs\";\nimport { OperatorsComponent } from \"./component/operators.mjs\";\nimport { ValueComponent } from \"./component/value.mjs\";\nimport { ActionBarComponent } from \"./component/actionBar.mjs\";\nimport ConditionCollection from \"./conditionCollection.mjs\";\nimport DataFilter from \"./dataFilter.mjs\";\nimport ConditionUpdateObserver from \"./conditionUpdateObserver.mjs\";\nimport { createArrayAssertion, toEmptyString, unifyColumnValues } from \"./utils.mjs\";\nimport { createMenuFocusController } from \"./menu/focusController.mjs\";\nimport { CONDITION_NONE, CONDITION_BY_VALUE, OPERATION_AND, OPERATION_OR, OPERATION_OR_THEN_VARIABLE } from \"./constants.mjs\";\nimport { TrimmingMap } from \"../../translations/index.mjs\";\nexport const PLUGIN_KEY = 'filters';\nexport const PLUGIN_PRIORITY = 250;\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\n\n/**\n * @plugin Filters\n * @class Filters\n *\n * @description\n * The plugin allows filtering the table data either by the built-in component or with the API.\n *\n * See [the filtering demo](@/guides/columns/column-filter.md) for examples.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   colHeaders: true,\n *   rowHeaders: true,\n *   dropdownMenu: true,\n *   filters: true\n * });\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={getData()}\n *   colHeaders={true}\n *   rowHeaders={true}\n *   dropdownMenu={true}\n *   filters={true}\n * />\n * ```\n * :::\n */\nvar _menuFocusNavigator = /*#__PURE__*/new WeakMap();\nexport class Filters extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get PLUGIN_DEPS() {\n    return ['plugin:DropdownMenu', 'plugin:HiddenRows', 'cell-type:checkbox'];\n  }\n\n  /**\n   * Instance of {@link DropdownMenu}.\n   *\n   * @private\n   * @type {DropdownMenu}\n   */\n\n  constructor(hotInstance) {\n    super(hotInstance);\n    // One listener for the enable/disable functionality\n    _defineProperty(this, \"dropdownMenuPlugin\", null);\n    /**\n     * Instance of {@link ConditionCollection}.\n     *\n     * @private\n     * @type {ConditionCollection}\n     */\n    _defineProperty(this, \"conditionCollection\", null);\n    /**\n     * Instance of {@link ConditionUpdateObserver}.\n     *\n     * @private\n     * @type {ConditionUpdateObserver}\n     */\n    _defineProperty(this, \"conditionUpdateObserver\", null);\n    /**\n     * Map, where key is component identifier and value represent `BaseComponent` element or it derivatives.\n     *\n     * @private\n     * @type {Map}\n     */\n    _defineProperty(this, \"components\", new Map([['filter_by_condition', null], ['filter_operators', null], ['filter_by_condition2', null], ['filter_by_value', null], ['filter_action_bar', null]]));\n    /**\n     * Map of skipped rows by plugin.\n     *\n     * @private\n     * @type {null|TrimmingMap}\n     */\n    _defineProperty(this, \"filtersRowsMap\", null);\n    /**\n     * Menu focus navigator allows switching the focus position through Tab and Shift Tab keys.\n     *\n     * @type {MenuFocusNavigator|undefined}\n     */\n    _classPrivateFieldInitSpec(this, _menuFocusNavigator, {\n      writable: true,\n      value: void 0\n    });\n    this.hot.addHook('afterGetColHeader', (col, TH) => this.onAfterGetColHeader(col, TH));\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link Filters#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    /* eslint-disable no-unneeded-ternary */\n    return this.hot.getSettings()[PLUGIN_KEY] ? true : false;\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    this.filtersRowsMap = this.hot.rowIndexMapper.registerMap(this.pluginName, new TrimmingMap());\n    this.dropdownMenuPlugin = this.hot.getPlugin('dropdownMenu');\n    const dropdownSettings = this.hot.getSettings().dropdownMenu;\n    const menuContainer = dropdownSettings && dropdownSettings.uiContainer || this.hot.rootDocument.body;\n    const addConfirmationHooks = component => {\n      component.addLocalHook('accept', () => this.onActionBarSubmit('accept'));\n      component.addLocalHook('cancel', () => this.onActionBarSubmit('cancel'));\n      component.addLocalHook('change', command => this.onComponentChange(component, command));\n      return component;\n    };\n    const filterByConditionLabel = () => `${this.hot.getTranslatedPhrase(constants.FILTERS_DIVS_FILTER_BY_CONDITION)}:`;\n    const filterValueLabel = () => `${this.hot.getTranslatedPhrase(constants.FILTERS_DIVS_FILTER_BY_VALUE)}:`;\n    if (!this.components.get('filter_by_condition')) {\n      const conditionComponent = new ConditionComponent(this.hot, {\n        id: 'filter_by_condition',\n        name: filterByConditionLabel,\n        addSeparator: false,\n        menuContainer\n      });\n      conditionComponent.addLocalHook('afterClose', () => this.onSelectUIClosed());\n      this.components.set('filter_by_condition', addConfirmationHooks(conditionComponent));\n    }\n    if (!this.components.get('filter_operators')) {\n      this.components.set('filter_operators', new OperatorsComponent(this.hot, {\n        id: 'filter_operators',\n        name: 'Operators'\n      }));\n    }\n    if (!this.components.get('filter_by_condition2')) {\n      const conditionComponent = new ConditionComponent(this.hot, {\n        id: 'filter_by_condition2',\n        name: '',\n        addSeparator: true,\n        menuContainer\n      });\n      conditionComponent.addLocalHook('afterClose', () => this.onSelectUIClosed());\n      this.components.set('filter_by_condition2', addConfirmationHooks(conditionComponent));\n    }\n    if (!this.components.get('filter_by_value')) {\n      this.components.set('filter_by_value', addConfirmationHooks(new ValueComponent(this.hot, {\n        id: 'filter_by_value',\n        name: filterValueLabel\n      })));\n    }\n    if (!this.components.get('filter_action_bar')) {\n      this.components.set('filter_action_bar', addConfirmationHooks(new ActionBarComponent(this.hot, {\n        id: 'filter_action_bar',\n        name: 'Action bar'\n      })));\n    }\n    if (!this.conditionCollection) {\n      this.conditionCollection = new ConditionCollection(this.hot);\n    }\n    if (!this.conditionUpdateObserver) {\n      this.conditionUpdateObserver = new ConditionUpdateObserver(this.hot, this.conditionCollection, physicalColumn => this.getDataMapAtColumn(physicalColumn));\n      this.conditionUpdateObserver.addLocalHook('update', conditionState => this.updateComponents(conditionState));\n    }\n    this.components.forEach(component => component.show());\n    this.addHook('afterDropdownMenuDefaultOptions', defaultOptions => this.onAfterDropdownMenuDefaultOptions(defaultOptions));\n    this.addHook('afterDropdownMenuShow', () => this.onAfterDropdownMenuShow());\n    this.addHook('afterDropdownMenuHide', () => this.onAfterDropdownMenuHide());\n    this.addHook('afterChange', changes => this.onAfterChange(changes));\n\n    // Temp. solution (extending menu items bug in contextMenu/dropdownMenu)\n    if (this.hot.getSettings().dropdownMenu && this.dropdownMenuPlugin) {\n      this.dropdownMenuPlugin.disablePlugin();\n      this.dropdownMenuPlugin.enablePlugin();\n    }\n    if (!_classPrivateFieldGet(this, _menuFocusNavigator) && this.dropdownMenuPlugin.enabled) {\n      const mainMenu = this.dropdownMenuPlugin.menu;\n      const focusableItems = [\n      // A fake menu item that once focused allows escaping from the focus navigation (using Tab keys)\n      // to the menu navigation using arrow keys.\n      {\n        focus: () => mainMenu.focus()\n      }, ...Array.from(this.components).map(_ref => {\n        let [, component] = _ref;\n        return component.getElements();\n      }).flat()];\n      _classPrivateFieldSet(this, _menuFocusNavigator, createMenuFocusController(mainMenu, focusableItems));\n      const forwardToFocusNavigation = event => {\n        _classPrivateFieldGet(this, _menuFocusNavigator).listen();\n        event.preventDefault();\n        if (isKey(event.keyCode, 'TAB')) {\n          if (event.shiftKey) {\n            _classPrivateFieldGet(this, _menuFocusNavigator).toPreviousItem();\n          } else {\n            _classPrivateFieldGet(this, _menuFocusNavigator).toNextItem();\n          }\n        }\n      };\n      this.components.get('filter_by_value').addLocalHook('listTabKeydown', forwardToFocusNavigation);\n      this.components.get('filter_by_condition').addLocalHook('selectTabKeydown', forwardToFocusNavigation);\n    }\n    this.registerShortcuts();\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    if (this.enabled) {\n      var _this$dropdownMenuPlu;\n      if ((_this$dropdownMenuPlu = this.dropdownMenuPlugin) !== null && _this$dropdownMenuPlu !== void 0 && _this$dropdownMenuPlu.enabled) {\n        this.dropdownMenuPlugin.menu.clearLocalHooks();\n      }\n      this.components.forEach((component, key) => {\n        component.destroy();\n        this.components.set(key, null);\n      });\n      this.conditionCollection.destroy();\n      this.conditionCollection = null;\n      this.hot.rowIndexMapper.unregisterMap(this.pluginName);\n    }\n    this.unregisterShortcuts();\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for clearing the filters.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Alt', 'A']],\n      stopPropagation: true,\n      callback: () => {\n        this.clearConditions();\n        this.filter();\n      },\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for clearing the filters.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * @memberof Filters#\n   * @function addCondition\n   * @description\n   * Adds condition to the conditions collection at specified column index.\n   *\n   * Possible predefined conditions:\n   *  * `begins_with` - Begins with\n   *  * `between` - Between\n   *  * `by_value` - By value\n   *  * `contains` - Contains\n   *  * `date_after` - After a date\n   *  * `date_before` - Before a date\n   *  * `date_today` - Today\n   *  * `date_tomorrow` - Tomorrow\n   *  * `date_yesterday` - Yesterday\n   *  * `empty` - Empty\n   *  * `ends_with` - Ends with\n   *  * `eq` - Equal\n   *  * `gt` - Greater than\n   *  * `gte` - Greater than or equal\n   *  * `lt` - Less than\n   *  * `lte` - Less than or equal\n   *  * `none` - None (no filter)\n   *  * `not_between` - Not between\n   *  * `not_contains` - Not contains\n   *  * `not_empty` - Not empty\n   *  * `neq` - Not equal.\n   *\n   * Possible operations on collection of conditions:\n   *  * `conjunction` - [**Conjunction**](https://en.wikipedia.org/wiki/Logical_conjunction) on conditions collection (by default), i.e. for such operation: <br/> c1 AND c2 AND c3 AND c4 ... AND cn === TRUE, where c1 ... cn are conditions.\n   *  * `disjunction` - [**Disjunction**](https://en.wikipedia.org/wiki/Logical_disjunction) on conditions collection, i.e. for such operation: <br/> c1 OR c2 OR c3 OR c4 ... OR cn === TRUE, where c1, c2, c3, c4 ... cn are conditions.\n   *  * `disjunctionWithExtraCondition` - **Disjunction** on first `n - 1`\\* conditions from collection with an extra requirement computed from the last condition, i.e. for such operation: <br/> c1 OR c2 OR c3 OR c4 ... OR cn-1 AND cn === TRUE, where c1, c2, c3, c4 ... cn are conditions.\n   *\n   * \\* when `n` is collection size; it's used i.e. for one operation introduced from UI (when choosing from filter's drop-down menu two conditions with OR operator between them, mixed with choosing values from the multiple choice select)\n   *\n   * **Note**: Mind that you cannot mix different types of operations (for instance, if you use `conjunction`, use it consequently for a particular column).\n   *\n   * @example\n   * ::: only-for javascript\n   * ```js\n   * const container = document.getElementById('example');\n   * const hot = new Handsontable(container, {\n   *   data: getData(),\n   *   filters: true\n   * });\n   *\n   * // access to filters plugin instance\n   * const filtersPlugin = hot.getPlugin('filters');\n   *\n   * // add filter \"Greater than\" 95 to column at index 1\n   * filtersPlugin.addCondition(1, 'gt', [95]);\n   * filtersPlugin.filter();\n   *\n   * // add filter \"By value\" to column at index 1\n   * // in this case all value's that don't match will be filtered.\n   * filtersPlugin.addCondition(1, 'by_value', [['ing', 'ed', 'as', 'on']]);\n   * filtersPlugin.filter();\n   *\n   * // add filter \"Begins with\" with value \"de\" AND \"Not contains\" with value \"ing\"\n   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'conjunction');\n   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'conjunction');\n   * filtersPlugin.filter();\n   *\n   * // add filter \"Begins with\" with value \"de\" OR \"Not contains\" with value \"ing\"\n   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'disjunction');\n   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'disjunction');\n   * filtersPlugin.filter();\n   * ```\n   * :::\n   *\n   * ::: only-for react\n   * ```jsx\n   * const hotRef = useRef(null);\n   *\n   * ...\n   *\n   * <HotTable\n   *   ref={hotRef}\n   *   data={getData()}\n   *   filters={true}\n   * />\n   *\n   * // access to filters plugin instance\n   * const hot = hotRef.current.hotInstance;\n   * const filtersPlugin = hot.getPlugin('filters');\n   *\n   * // add filter \"Greater than\" 95 to column at index 1\n   * filtersPlugin.addCondition(1, 'gt', [95]);\n   * filtersPlugin.filter();\n   *\n   * // add filter \"By value\" to column at index 1\n   * // in this case all value's that don't match will be filtered.\n   * filtersPlugin.addCondition(1, 'by_value', [['ing', 'ed', 'as', 'on']]);\n   * filtersPlugin.filter();\n   *\n   * // add filter \"Begins with\" with value \"de\" AND \"Not contains\" with value \"ing\"\n   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'conjunction');\n   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'conjunction');\n   * filtersPlugin.filter();\n   *\n   * // add filter \"Begins with\" with value \"de\" OR \"Not contains\" with value \"ing\"\n   * filtersPlugin.addCondition(1, 'begins_with', ['de'], 'disjunction');\n   * filtersPlugin.addCondition(1, 'not_contains', ['ing'], 'disjunction');\n   * filtersPlugin.filter();\n   * ```\n   * :::\n   *\n   * @param {number} column Visual column index.\n   * @param {string} name Condition short name.\n   * @param {Array} args Condition arguments.\n   * @param {string} [operationId=conjunction] `id` of operation which is performed on the column.\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  addCondition(column, name, args) {\n    let operationId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : OPERATION_AND;\n    const physicalColumn = this.hot.toPhysicalColumn(column);\n    this.conditionCollection.addCondition(physicalColumn, {\n      command: {\n        key: name\n      },\n      args\n    }, operationId);\n  }\n\n  /**\n   * Removes conditions at specified column index.\n   *\n   * @param {number} column Visual column index.\n   */\n  removeConditions(column) {\n    const physicalColumn = this.hot.toPhysicalColumn(column);\n    this.conditionCollection.removeConditions(physicalColumn);\n  }\n\n  /**\n   * Clears all conditions previously added to the collection for the specified column index or, if the column index\n   * was not passed, clear the conditions for all columns.\n   *\n   * @param {number} [column] Visual column index.\n   */\n  clearConditions(column) {\n    if (column === void 0) {\n      this.conditionCollection.clean();\n    } else {\n      const physicalColumn = this.hot.toPhysicalColumn(column);\n      this.conditionCollection.removeConditions(physicalColumn);\n    }\n  }\n\n  /**\n   * Filters data based on added filter conditions.\n   *\n   * @fires Hooks#beforeFilter\n   * @fires Hooks#afterFilter\n   */\n  filter() {\n    const dataFilter = this._createDataFilter();\n    const needToFilter = !this.conditionCollection.isEmpty();\n    let visibleVisualRows = [];\n    const conditions = this.conditionCollection.exportAllConditions();\n    const allowFiltering = this.hot.runHooks('beforeFilter', conditions);\n    if (allowFiltering !== false) {\n      if (needToFilter) {\n        const trimmedRows = [];\n        this.hot.batchExecution(() => {\n          this.filtersRowsMap.clear();\n          visibleVisualRows = arrayMap(dataFilter.filter(), rowData => rowData.meta.visualRow);\n          const visibleVisualRowsAssertion = createArrayAssertion(visibleVisualRows);\n          rangeEach(this.hot.countSourceRows() - 1, row => {\n            if (!visibleVisualRowsAssertion(row)) {\n              trimmedRows.push(row);\n            }\n          });\n          arrayEach(trimmedRows, physicalRow => {\n            this.filtersRowsMap.setValueAtIndex(physicalRow, true);\n          });\n        }, true);\n        if (!visibleVisualRows.length) {\n          this.hot.deselectCell();\n        }\n      } else {\n        this.filtersRowsMap.clear();\n      }\n    }\n    this.hot.runHooks('afterFilter', conditions);\n    this.hot.view.adjustElementsSize(true);\n    this.hot.render();\n  }\n\n  /**\n   * Gets last selected column index.\n   *\n   * @returns {{visualIndex: number, physicalIndex: number} | null} Returns `null` when a column is\n   * not selected. Otherwise, returns an object with `visualIndex` and `physicalIndex` properties containing\n   * the index of the column.\n   */\n  getSelectedColumn() {\n    var _this$hot$getSelected;\n    const highlight = (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight;\n    if (!highlight) {\n      return null;\n    }\n    return {\n      visualIndex: highlight.col,\n      physicalIndex: this.hot.toPhysicalColumn(highlight.col)\n    };\n  }\n\n  /**\n   * Returns handsontable source data with cell meta based on current selection.\n   *\n   * @param {number} [column] The physical column index. By default column index accept the value of the selected column.\n   * @returns {Array} Returns array of objects where keys as row index.\n   */\n  getDataMapAtColumn(column) {\n    const visualColumn = this.hot.toVisualColumn(column);\n    const data = [];\n    arrayEach(this.hot.getSourceDataAtCol(visualColumn), (value, rowIndex) => {\n      var _this$hot$getDataAtCe;\n      const {\n        row,\n        col,\n        visualCol,\n        visualRow,\n        type,\n        instance,\n        dateFormat,\n        locale\n      } = this.hot.getCellMeta(rowIndex, visualColumn);\n      const dataValue = (_this$hot$getDataAtCe = this.hot.getDataAtCell(this.hot.toVisualRow(rowIndex), visualColumn)) !== null && _this$hot$getDataAtCe !== void 0 ? _this$hot$getDataAtCe : value;\n      data.push({\n        meta: {\n          row,\n          col,\n          visualCol,\n          visualRow,\n          type,\n          instance,\n          dateFormat,\n          locale\n        },\n        value: toEmptyString(dataValue)\n      });\n    });\n    return data;\n  }\n\n  /**\n   * `afterChange` listener.\n   *\n   * @private\n   * @param {Array} changes Array of changes.\n   */\n  onAfterChange(changes) {\n    if (changes) {\n      arrayEach(changes, change => {\n        const [, prop] = change;\n        const columnIndex = this.hot.propToCol(prop);\n        if (this.conditionCollection.hasConditions(columnIndex)) {\n          this.updateValueComponentCondition(columnIndex);\n        }\n      });\n    }\n  }\n\n  /**\n   * Update the condition of ValueComponent, based on the handled changes.\n   *\n   * @private\n   * @param {number} columnIndex Column index of handled ValueComponent condition.\n   */\n  updateValueComponentCondition(columnIndex) {\n    const dataAtCol = this.hot.getDataAtCol(columnIndex);\n    const selectedValues = unifyColumnValues(dataAtCol);\n    this.conditionUpdateObserver.updateStatesAtColumn(columnIndex, selectedValues);\n  }\n\n  /**\n   * Restores components to its saved state.\n   *\n   * @private\n   * @param {Array} components List of components.\n   */\n  restoreComponents(components) {\n    var _this$getSelectedColu;\n    const physicalIndex = (_this$getSelectedColu = this.getSelectedColumn()) === null || _this$getSelectedColu === void 0 ? void 0 : _this$getSelectedColu.physicalIndex;\n    components.forEach(component => {\n      if (component.isHidden()) {\n        return;\n      }\n      component.restoreState(physicalIndex);\n    });\n    this.updateDependentComponentsVisibility();\n  }\n\n  /**\n   * After dropdown menu show listener.\n   *\n   * @private\n   */\n  onAfterDropdownMenuShow() {\n    this.restoreComponents(Array.from(this.components.values()));\n  }\n\n  /**\n   * After dropdown menu hide listener.\n   *\n   * @private\n   */\n  onAfterDropdownMenuHide() {\n    this.components.get('filter_by_condition').getSelectElement().closeOptions();\n    this.components.get('filter_by_condition2').getSelectElement().closeOptions();\n  }\n\n  /**\n   * After dropdown menu default options listener.\n   *\n   * @private\n   * @param {object} defaultOptions ContextMenu default item options.\n   */\n  onAfterDropdownMenuDefaultOptions(defaultOptions) {\n    defaultOptions.items.push({\n      name: SEPARATOR\n    });\n    this.components.forEach(component => {\n      defaultOptions.items.push(component.getMenuItemDescriptor());\n    });\n  }\n\n  /**\n   * Get an operation, based on the number and types of arguments (where arguments are states of components).\n   *\n   * @param {string} suggestedOperation Operation which was chosen by user from UI.\n   * @param {object} byConditionState1 State of first condition component.\n   * @param {object} byConditionState2 State of second condition component.\n   * @param {object} byValueState State of value component.\n   * @private\n   * @returns {string}\n   */\n  getOperationBasedOnArguments(suggestedOperation, byConditionState1, byConditionState2, byValueState) {\n    let operation = suggestedOperation;\n    if (operation === OPERATION_OR && byConditionState1.command.key !== CONDITION_NONE && byConditionState2.command.key !== CONDITION_NONE && byValueState.command.key !== CONDITION_NONE) {\n      operation = OPERATION_OR_THEN_VARIABLE;\n    } else if (byValueState.command.key !== CONDITION_NONE) {\n      if (byConditionState1.command.key === CONDITION_NONE || byConditionState2.command.key === CONDITION_NONE) {\n        operation = OPERATION_AND;\n      }\n    }\n    return operation;\n  }\n\n  /**\n   * On action bar submit listener.\n   *\n   * @private\n   * @param {string} submitType The submit type.\n   */\n  onActionBarSubmit(submitType) {\n    var _this$dropdownMenuPlu3;\n    if (submitType === 'accept') {\n      const selectedColumn = this.getSelectedColumn();\n      if (selectedColumn === null) {\n        var _this$dropdownMenuPlu2;\n        (_this$dropdownMenuPlu2 = this.dropdownMenuPlugin) === null || _this$dropdownMenuPlu2 === void 0 || _this$dropdownMenuPlu2.close();\n        return;\n      }\n      const {\n        physicalIndex\n      } = selectedColumn;\n      const byConditionState1 = this.components.get('filter_by_condition').getState();\n      const byConditionState2 = this.components.get('filter_by_condition2').getState();\n      const byValueState = this.components.get('filter_by_value').getState();\n      const operation = this.getOperationBasedOnArguments(this.components.get('filter_operators').getActiveOperationId(), byConditionState1, byConditionState2, byValueState);\n      this.conditionUpdateObserver.groupChanges();\n      let columnStackPosition = this.conditionCollection.getColumnStackPosition(physicalIndex);\n      if (columnStackPosition === -1) {\n        columnStackPosition = void 0;\n      }\n      this.conditionCollection.removeConditions(physicalIndex);\n      if (byConditionState1.command.key !== CONDITION_NONE) {\n        this.conditionCollection.addCondition(physicalIndex, byConditionState1, operation, columnStackPosition);\n        if (byConditionState2.command.key !== CONDITION_NONE) {\n          this.conditionCollection.addCondition(physicalIndex, byConditionState2, operation, columnStackPosition);\n        }\n      }\n      if (byValueState.command.key !== CONDITION_NONE) {\n        this.conditionCollection.addCondition(physicalIndex, byValueState, operation, columnStackPosition);\n      }\n      this.conditionUpdateObserver.flush();\n      this.components.forEach(component => component.saveState(physicalIndex));\n      this.filtersRowsMap.clear();\n      this.filter();\n      this.hot.selectCell(0, selectedColumn.visualIndex);\n    }\n    (_this$dropdownMenuPlu3 = this.dropdownMenuPlugin) === null || _this$dropdownMenuPlu3 === void 0 || _this$dropdownMenuPlu3.close();\n  }\n\n  /**\n   * On component change listener.\n   *\n   * @private\n   * @param {BaseComponent} component Component inheriting BaseComponent.\n   * @param {object} command Menu item object (command).\n   */\n  onComponentChange(component, command) {\n    this.updateDependentComponentsVisibility();\n    if (component.constructor === ConditionComponent && !command.inputsCount) {\n      this.setListeningDropdownMenu();\n    }\n  }\n\n  /**\n   * On component SelectUI closed listener.\n   *\n   * @private\n   */\n  onSelectUIClosed() {\n    this.setListeningDropdownMenu();\n  }\n\n  /**\n   * Listen to the keyboard input on document body and forward events to instance of Handsontable\n   * created by DropdownMenu plugin.\n   *\n   * @private\n   */\n  setListeningDropdownMenu() {\n    if (this.dropdownMenuPlugin) {\n      this.dropdownMenuPlugin.setListening();\n    }\n  }\n\n  /**\n   * Updates visibility of some of the components, based on the state of the parent component.\n   *\n   * @private\n   */\n  updateDependentComponentsVisibility() {\n    const component = this.components.get('filter_by_condition');\n    const {\n      command\n    } = component.getState();\n    const componentsToShow = [this.components.get('filter_by_condition2'), this.components.get('filter_operators')];\n    if (command.showOperators) {\n      this.showComponents(...componentsToShow);\n    } else {\n      this.hideComponents(...componentsToShow);\n    }\n  }\n\n  /**\n   * On after get column header listener.\n   *\n   * @private\n   * @param {number} col Visual column index.\n   * @param {HTMLTableCellElement} TH Header's TH element.\n   */\n  onAfterGetColHeader(col, TH) {\n    const physicalColumn = this.hot.toPhysicalColumn(col);\n    if (this.enabled && this.conditionCollection.hasConditions(physicalColumn)) {\n      addClass(TH, 'htFiltersActive');\n    } else {\n      removeClass(TH, 'htFiltersActive');\n    }\n  }\n\n  /**\n   * Creates DataFilter instance based on condition collection.\n   *\n   * @private\n   * @param {ConditionCollection} conditionCollection Condition collection object.\n   * @returns {DataFilter}\n   */\n  _createDataFilter() {\n    let conditionCollection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.conditionCollection;\n    return new DataFilter(conditionCollection, physicalColumn => this.getDataMapAtColumn(physicalColumn));\n  }\n\n  /**\n   * It updates the components state. The state is triggered by ConditionUpdateObserver, which\n   * reacts to any condition added to the condition collection. It may be added through the UI\n   * components or by API call.\n   *\n   * @private\n   * @param {object} conditionsState An object with the state generated by UI components.\n   */\n  updateComponents(conditionsState) {\n    var _this$dropdownMenuPlu4;\n    if (!((_this$dropdownMenuPlu4 = this.dropdownMenuPlugin) !== null && _this$dropdownMenuPlu4 !== void 0 && _this$dropdownMenuPlu4.enabled)) {\n      return;\n    }\n    const {\n      editedConditionStack: {\n        conditions,\n        column\n      }\n    } = conditionsState;\n    const conditionsByValue = conditions.filter(condition => condition.name === CONDITION_BY_VALUE);\n    const conditionsWithoutByValue = conditions.filter(condition => condition.name !== CONDITION_BY_VALUE);\n    if (conditionsByValue.length >= 2 || conditionsWithoutByValue.length >= 3) {\n      warn(toSingleLine`The filter conditions have been applied properly, but couldn’t be displayed visually.\\x20\n        The overall amount of conditions exceed the capability of the dropdown menu.\\x20\n        For more details see the documentation.`);\n    } else {\n      const operationType = this.conditionCollection.getOperation(column);\n      this.components.get('filter_by_condition').updateState(conditionsWithoutByValue[0], column);\n      this.components.get('filter_by_condition2').updateState(conditionsWithoutByValue[1], column);\n      this.components.get('filter_operators').updateState(operationType, column);\n      this.components.get('filter_by_value').updateState(conditionsState);\n    }\n  }\n\n  /**\n   * Returns indexes of passed components inside list of `dropdownMenu` items.\n   *\n   * @private\n   * @param {...BaseComponent} components List of components.\n   * @returns {Array}\n   */\n  getIndexesOfComponents() {\n    const indexes = [];\n    if (!this.dropdownMenuPlugin) {\n      return indexes;\n    }\n    const menu = this.dropdownMenuPlugin.menu;\n    for (var _len = arguments.length, components = new Array(_len), _key = 0; _key < _len; _key++) {\n      components[_key] = arguments[_key];\n    }\n    arrayEach(components, component => {\n      arrayEach(menu.menuItems, (item, index) => {\n        if (item.key === component.getMenuItemDescriptor().key) {\n          indexes.push(index);\n        }\n      });\n    });\n    return indexes;\n  }\n\n  /**\n   * Changes visibility of component.\n   *\n   * @private\n   * @param {boolean} visible Determine if components should be visible.\n   * @param {...BaseComponent} components List of components.\n   */\n  changeComponentsVisibility() {\n    let visible = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (!this.dropdownMenuPlugin) {\n      return;\n    }\n    const menu = this.dropdownMenuPlugin.menu;\n    const hotMenu = menu.hotMenu;\n    const hiddenRows = hotMenu.getPlugin('hiddenRows');\n    for (var _len2 = arguments.length, components = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      components[_key2 - 1] = arguments[_key2];\n    }\n    const indexes = this.getIndexesOfComponents(...components);\n    if (visible) {\n      hiddenRows.showRows(indexes);\n    } else {\n      hiddenRows.hideRows(indexes);\n    }\n    hotMenu.render();\n  }\n\n  /**\n   * Hides components of filters `dropdownMenu`.\n   *\n   * @private\n   * @param {...BaseComponent} components List of components.\n   */\n  hideComponents() {\n    for (var _len3 = arguments.length, components = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      components[_key3] = arguments[_key3];\n    }\n    this.changeComponentsVisibility(false, ...components);\n  }\n\n  /**\n   * Shows components of filters `dropdownMenu`.\n   *\n   * @private\n   * @param {...BaseComponent} components List of components.\n   */\n  showComponents() {\n    for (var _len4 = arguments.length, components = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      components[_key4] = arguments[_key4];\n    }\n    this.changeComponentsVisibility(true, ...components);\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    if (this.enabled) {\n      this.components.forEach((component, key) => {\n        if (component !== null) {\n          component.destroy();\n          this.components.set(key, null);\n        }\n      });\n      this.conditionCollection.destroy();\n      this.conditionUpdateObserver.destroy();\n      this.hot.rowIndexMapper.unregisterMap(this.pluginName);\n    }\n    super.destroy();\n  }\n}","import { PLUGIN_KEY } from \"../formulas.mjs\";\nexport const DEFAULT_LICENSE_KEY = 'internal-use-in-handsontable';\nexport const DEFAULT_SETTINGS = {\n  licenseKey: DEFAULT_LICENSE_KEY,\n  useArrayArithmetic: true,\n  useColumnIndex: false,\n  useStats: false,\n  evaluateNullToZero: true,\n  precisionEpsilon: 1e-13,\n  precisionRounding: 14,\n  smartRounding: true,\n  leapYear1900: false,\n  nullDate: {\n    year: 1899,\n    month: 12,\n    day: 30\n  },\n  nullYear: 30,\n  dateFormats: ['DD/MM/YYYY', 'DD/MM/YY'],\n  timeFormats: ['hh:mm', 'hh:mm:ss.sss'],\n  matchWholeCell: true,\n  useRegularExpressions: false,\n  useWildcards: true,\n  functionArgSeparator: ',',\n  thousandSeparator: '',\n  decimalSeparator: '.',\n  language: 'enGB'\n};\n\n/**\n * Gets a set of engine settings to be applied on top of the provided settings, based on user's Handsontable settings.\n *\n * @param {object} hotSettings Handsontable settings object.\n * @returns {object} Object containing the overriding options.\n */\nexport function getEngineSettingsOverrides(hotSettings) {\n  var _hotSettings$PLUGIN_K;\n  return {\n    maxColumns: hotSettings.maxColumns,\n    maxRows: hotSettings.maxRows,\n    language: (_hotSettings$PLUGIN_K = hotSettings[PLUGIN_KEY]) === null || _hotSettings$PLUGIN_K === void 0 || (_hotSettings$PLUGIN_K = _hotSettings$PLUGIN_K.language) === null || _hotSettings$PLUGIN_K === void 0 ? void 0 : _hotSettings$PLUGIN_K.langCode\n  };\n}\n\n/**\n * Drop `hyperformula` key from object if it exists.\n *\n * @param {object} pluginSettings Formulas plugin settings.\n * @returns {object}\n */\nfunction cleanEngineSettings(pluginSettings) {\n  return Object.keys(pluginSettings).reduce((obj, key) => {\n    if (key !== 'hyperformula') {\n      obj[key] = pluginSettings[key];\n    }\n    return obj;\n  }, {});\n}\n\n/**\n * Takes the default, user and overriding settings and merges them into a single object to be passed to the engine.\n *\n * The final object gets its parameters in the following order,\n * with properties attached to objects listed in the lower levels of the list overriding the\n * ones above them:\n *\n * 1. Default settings\n * 2. User settings\n * 3. Overrides.\n *\n * Meant to be used during *initialization* of the engine.\n *\n * @param {object} hotSettings The Handsontable settings.\n * @returns {object} The final engine settings.\n */\nexport function getEngineSettingsWithDefaultsAndOverrides(hotSettings) {\n  var _pluginSettings$engin;\n  const pluginSettings = hotSettings[PLUGIN_KEY];\n  const userSettings = cleanEngineSettings(pluginSettings !== null && pluginSettings !== void 0 && (_pluginSettings$engin = pluginSettings.engine) !== null && _pluginSettings$engin !== void 0 && _pluginSettings$engin.hyperformula ? pluginSettings.engine : {});\n  const overrides = getEngineSettingsOverrides(hotSettings);\n  return {\n    ...DEFAULT_SETTINGS,\n    ...userSettings,\n    ...overrides\n  };\n}\n\n/**\n * Get engine settings from a Handsontable settings object with overrides.\n *\n * @param {object} hotSettings Handsontable settings object.\n * @returns {object}\n */\nexport function getEngineSettingsWithOverrides(hotSettings) {\n  var _pluginSettings$engin2;\n  const pluginSettings = hotSettings[PLUGIN_KEY];\n  const userSettings = cleanEngineSettings(pluginSettings !== null && pluginSettings !== void 0 && (_pluginSettings$engin2 = pluginSettings.engine) !== null && _pluginSettings$engin2 !== void 0 && _pluginSettings$engin2.hyperformula ? pluginSettings.engine : {});\n  const overrides = getEngineSettingsOverrides(hotSettings);\n  return {\n    ...userSettings,\n    ...overrides\n  };\n}\n\n/**\n * Check if the new settings are defined and are different from the ones currently used by the engine.\n *\n * @param {object} currentEngineSettings Currently used engine settings.\n * @param {object} newEngineSettings New engine settings.\n * @returns {boolean}\n */\nexport function haveEngineSettingsChanged(currentEngineSettings, newEngineSettings) {\n  return Object.keys(newEngineSettings).some(settingOption => {\n    return newEngineSettings[settingOption] !== void 0 && newEngineSettings[settingOption] !== currentEngineSettings[settingOption];\n  });\n}","import \"core-js/modules/es.array.push.js\";\nimport staticRegister from \"../../../utils/staticRegister.mjs\";\nimport { isUndefined } from \"../../../helpers/mixed.mjs\";\nimport { toSingleLine } from \"../../../helpers/templateLiteralTag.mjs\";\nimport { warn } from \"../../../helpers/console.mjs\";\nimport { isObjectEqual } from \"../../../helpers/object.mjs\";\nimport { PLUGIN_KEY } from \"../formulas.mjs\";\nimport { DEFAULT_LICENSE_KEY, DEFAULT_SETTINGS, getEngineSettingsWithDefaultsAndOverrides } from \"./settings.mjs\";\n/**\n * Prepares and returns the collection for the engine relationship with the HoT instances.\n *\n * @returns {Map}\n */\nfunction getEngineRelationshipRegistry() {\n  const registryKey = 'engine_relationship';\n  const pluginStaticRegistry = staticRegister(PLUGIN_KEY);\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\n    pluginStaticRegistry.register(registryKey, new Map());\n  }\n  return pluginStaticRegistry.getItem(registryKey);\n}\n\n/**\n * Prepares and returns the collection for the engine shared usage.\n *\n * @returns {Map}\n */\nfunction getSharedEngineUsageRegistry() {\n  const registryKey = 'shared_engine_usage';\n  const pluginStaticRegistry = staticRegister(PLUGIN_KEY);\n  if (!pluginStaticRegistry.hasItem(registryKey)) {\n    pluginStaticRegistry.register(registryKey, new Map());\n  }\n  return pluginStaticRegistry.getItem(registryKey);\n}\n\n/**\n * Setups the engine instance. It either creates a new (possibly shared) engine instance, or attaches\n * the plugin to an already-existing instance.\n *\n * @param {Handsontable} hotInstance Handsontable instance.\n * @returns {null|object} Returns the engine instance if everything worked right and `null` otherwise.\n */\nexport function setupEngine(hotInstance) {\n  const hotSettings = hotInstance.getSettings();\n  const pluginSettings = hotSettings[PLUGIN_KEY];\n  const engineConfigItem = pluginSettings === null || pluginSettings === void 0 ? void 0 : pluginSettings.engine;\n  if (pluginSettings === true) {\n    return null;\n  }\n  if (isUndefined(engineConfigItem)) {\n    return null;\n  }\n\n  // `engine.hyperformula` or `engine` is the engine class\n  if (typeof engineConfigItem.hyperformula === 'function' || typeof engineConfigItem === 'function') {\n    var _engineConfigItem$hyp;\n    return registerEngine((_engineConfigItem$hyp = engineConfigItem.hyperformula) !== null && _engineConfigItem$hyp !== void 0 ? _engineConfigItem$hyp : engineConfigItem, hotSettings, hotInstance);\n\n    // `engine` is the engine instance\n  } else if (typeof engineConfigItem === 'object' && isUndefined(engineConfigItem.hyperformula)) {\n    const engineRelationship = getEngineRelationshipRegistry();\n    const sharedEngineUsage = getSharedEngineUsageRegistry().get(engineConfigItem);\n    if (!engineRelationship.has(engineConfigItem)) {\n      engineRelationship.set(engineConfigItem, []);\n    }\n    engineRelationship.get(engineConfigItem).push(hotInstance);\n    if (sharedEngineUsage) {\n      sharedEngineUsage.push(hotInstance.guid);\n    }\n    if (!engineConfigItem.getConfig().licenseKey) {\n      engineConfigItem.updateConfig({\n        licenseKey: DEFAULT_LICENSE_KEY\n      });\n    }\n    if (engineConfigItem.getConfig().leapYear1900 !== DEFAULT_SETTINGS.leapYear1900 || isObjectEqual(engineConfigItem.getConfig().nullDate, DEFAULT_SETTINGS.nullDate) === false) {\n      warn(toSingleLine`If you use HyperFormula with Handsontable, keep the default \\`leapYear1900\\` and \\`nullDate\\` \n      settings. Otherwise, HyperFormula's dates may not sync correctly with Handsontable's dates.`);\n    }\n    return engineConfigItem;\n  }\n  return null;\n}\n\n/**\n * Registers the engine in the global register and attaches the needed event listeners.\n *\n * @param {Function} engineClass The engine class.\n * @param {object} hotSettings The Handsontable settings.\n * @param {Handsontable} hotInstance Handsontable instance.\n * @returns {object} Returns the engine instance.\n */\nexport function registerEngine(engineClass, hotSettings, hotInstance) {\n  const pluginSettings = hotSettings[PLUGIN_KEY];\n  const engineSettings = getEngineSettingsWithDefaultsAndOverrides(hotSettings);\n  const engineRegistry = getEngineRelationshipRegistry();\n  const sharedEngineRegistry = getSharedEngineUsageRegistry();\n  registerCustomFunctions(engineClass, pluginSettings.functions);\n  registerLanguage(engineClass, pluginSettings.language);\n\n  // Create instance\n  const engineInstance = engineClass.buildEmpty(engineSettings);\n\n  // Add it to global registry\n  engineRegistry.set(engineInstance, [hotInstance]);\n  sharedEngineRegistry.set(engineInstance, [hotInstance.guid]);\n  registerNamedExpressions(engineInstance, pluginSettings.namedExpressions);\n\n  // Add hooks needed for cross-referencing sheets\n  engineInstance.on('sheetAdded', () => {\n    engineInstance.rebuildAndRecalculate();\n  });\n  engineInstance.on('sheetRemoved', () => {\n    engineInstance.rebuildAndRecalculate();\n  });\n  return engineInstance;\n}\n\n/**\n * Returns the list of the Handsontable instances linked to the specific engine instance.\n *\n * @param {object} engine The engine instance.\n * @returns {Map<number, Handsontable>} Returns Map with Handsontable instances.\n */\nexport function getRegisteredHotInstances(engine) {\n  var _engineRegistry$get;\n  const engineRegistry = getEngineRelationshipRegistry();\n  const hotInstances = engineRegistry.size === 0 ? [] : Array.from((_engineRegistry$get = engineRegistry.get(engine)) !== null && _engineRegistry$get !== void 0 ? _engineRegistry$get : []);\n  return new Map(hotInstances.map(hot => [hot.getPlugin('formulas').sheetId, hot]));\n}\n\n/**\n * Removes the HOT instance from the global register's engine usage array, and if there are no HOT instances left,\n * unregisters the engine itself.\n *\n * @param {object} engine The engine instance.\n * @param {string} hotInstance The Handsontable instance.\n */\nexport function unregisterEngine(engine, hotInstance) {\n  if (engine) {\n    const engineRegistry = getEngineRelationshipRegistry();\n    const engineHotRelationship = engineRegistry.get(engine);\n    const sharedEngineRegistry = getSharedEngineUsageRegistry();\n    const sharedEngineUsage = sharedEngineRegistry.get(engine);\n    if (engineHotRelationship && engineHotRelationship.includes(hotInstance)) {\n      engineHotRelationship.splice(engineHotRelationship.indexOf(hotInstance), 1);\n      if (engineHotRelationship.length === 0) {\n        engineRegistry.delete(engine);\n      }\n    }\n    if (sharedEngineUsage && sharedEngineUsage.includes(hotInstance.guid)) {\n      sharedEngineUsage.splice(sharedEngineUsage.indexOf(hotInstance.guid), 1);\n      if (sharedEngineUsage.length === 0) {\n        sharedEngineRegistry.delete(engine);\n        engine.destroy();\n      }\n    }\n  }\n}\n\n/**\n * Registers the custom functions for the engine.\n *\n * @param {Function} engineClass The engine class.\n * @param {Array} customFunctions The custom functions array.\n */\nexport function registerCustomFunctions(engineClass, customFunctions) {\n  if (customFunctions) {\n    customFunctions.forEach(func => {\n      const {\n        name,\n        plugin,\n        translations\n      } = func;\n      try {\n        engineClass.registerFunction(name, plugin, translations);\n      } catch (e) {\n        warn(e.message);\n      }\n    });\n  }\n}\n\n/**\n * Registers the provided language for the engine.\n *\n * @param {Function} engineClass The engine class.\n * @param {object} languageSetting The engine's language object.\n */\nexport function registerLanguage(engineClass, languageSetting) {\n  if (languageSetting) {\n    const {\n      langCode\n    } = languageSetting;\n    try {\n      engineClass.registerLanguage(langCode, languageSetting);\n    } catch (e) {\n      warn(e.message);\n    }\n  }\n}\n\n/**\n * Registers the provided named expressions in the engine instance.\n *\n * @param {object} engineInstance The engine instance.\n * @param {Array} namedExpressions Array of the named expressions to be registered.\n */\nexport function registerNamedExpressions(engineInstance, namedExpressions) {\n  if (namedExpressions) {\n    engineInstance.suspendEvaluation();\n    namedExpressions.forEach(namedExp => {\n      const {\n        name,\n        expression,\n        scope,\n        options\n      } = namedExp;\n      try {\n        engineInstance.addNamedExpression(name, expression, scope, options);\n      } catch (e) {\n        warn(e.message);\n      }\n    });\n    engineInstance.resumeEvaluation();\n  }\n}\n\n/**\n * Sets up a new sheet.\n *\n * @param {object} engineInstance The engine instance.\n * @param {string} sheetName The new sheet name.\n * @returns {*}\n */\nexport function setupSheet(engineInstance, sheetName) {\n  if (isUndefined(sheetName) || !engineInstance.doesSheetExist(sheetName)) {\n    sheetName = engineInstance.addSheet(sheetName);\n  }\n  return sheetName;\n}","import moment from 'moment';\nconst DEFAULT_DATE_FORMAT_HYPERFORMULA = 'DD/MM/YYYY';\n\n/**\n * Checks if provided formula expression is escaped.\n *\n * @param {*} expression Expression to check.\n * @returns {boolean}\n */\nexport function isEscapedFormulaExpression(expression) {\n  return typeof expression === 'string' && expression.charAt(0) === '\\'' && expression.charAt(1) === '=';\n}\n\n/**\n * Replaces escaped formula expression into valid non-unescaped string.\n *\n * @param {string} expression Expression to process.\n * @returns {string}\n */\nexport function unescapeFormulaExpression(expression) {\n  return isEscapedFormulaExpression(expression) ? expression.substr(1) : expression;\n}\n\n/**\n * Checks whether string looks like formula or not. Corresponds to {@link https://hyperformula.handsontable.com/api/globals.html#isformula|HyperFormula's implementation}.\n *\n * @param {string} value Checked value.\n * @returns {boolean}\n */\nexport function isFormula(value) {\n  return typeof value === 'string' && value.startsWith('=');\n}\n\n/**\n * Checks if provided value is a date according to cell meta.\n *\n * @param {*} value Checked value.\n * @param {string} cellType Type of a cell.\n * @returns {boolean}\n */\nexport function isDate(value, cellType) {\n  return typeof value === 'string' && cellType === 'date';\n}\n\n/**\n * Checks if provided date is a valid date according to cell date format.\n *\n * @param {*} date Checked date.\n * @param {object} dateFormat Handled format for a date.\n * @returns {boolean}\n */\nexport function isDateValid(date, dateFormat) {\n  return moment(date, dateFormat, true).isValid();\n}\n\n/**\n * Returns date formatted in HF's default format.\n *\n * @param {string} date Date formatted according to Handsontable cell date format.\n * @param {string} dateFormat The format used for the date passed.\n * @returns {string}\n */\nexport function getDateInHfFormat(date, dateFormat) {\n  return moment(date, dateFormat, true).format(DEFAULT_DATE_FORMAT_HYPERFORMULA);\n}\n\n/**\n * Returns date formatted in HF's default format.\n *\n * @param {string} date Date formatted according to Handsontable cell date format.\n * @param {string} dateFormat The format used for the date passed.\n * @returns {string}\n */\nexport function getDateInHotFormat(date, dateFormat) {\n  return moment(date, DEFAULT_DATE_FORMAT_HYPERFORMULA, true).format(dateFormat);\n}\n\n/**\n * Converts Excel-like dates into strings and formats them based on the handled date format.\n *\n * @param {number} numericDate An integer representing numbers of days from January 1, 1900.\n * @param {string} dateFormat The format used for parsing an output.\n * @returns {string}\n */\nexport function getDateFromExcelDate(numericDate, dateFormat) {\n  // To replicate the behavior from the HyperFormula. UTC starts from 31/12/1899, while HF from 30/12/1899.\n  const dateOffset = -1;\n\n  // Based on solution from: https://stackoverflow.com/a/67130235.\n  const dateForFormatting = new Date(Date.UTC(0, 0, numericDate + dateOffset));\n  return moment(dateForFormatting).format(dateFormat);\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { toUpperCaseFirst } from \"../../../helpers/string.mjs\";\n/**\n * @private\n * @class IndexSyncer\n * @description\n *\n * Indexes synchronizer responsible for providing logic for particular axis. It respects an idea to represent trimmed\n * elements in HF's engine to perform formulas calculations on them. It also provides method for translation from visual\n * row/column indexes to HF's row/column indexes.\n */\nvar _axis = /*#__PURE__*/new WeakMap();\nvar _indexMapper = /*#__PURE__*/new WeakMap();\nvar _indexSyncer = /*#__PURE__*/new WeakMap();\nvar _indexesSequence = /*#__PURE__*/new WeakMap();\nvar _movedIndexes = /*#__PURE__*/new WeakMap();\nvar _finalIndex = /*#__PURE__*/new WeakMap();\nvar _removedIndexes = /*#__PURE__*/new WeakMap();\nclass AxisSyncer {\n  constructor(axis, indexMapper, indexSyncer) {\n    /**\n     * The axis for which the actions are performed.\n     *\n     * @private\n     * @type {'row'|'column'}\n     */\n    _classPrivateFieldInitSpec(this, _axis, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Reference to index mapper.\n     *\n     * @private\n     * @type {IndexMapper}\n     */\n    _classPrivateFieldInitSpec(this, _indexMapper, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * The index synchronizer for both axis (is storing some more general information).\n     *\n     * @private\n     * @type {IndexSyncer}\n     */\n    _classPrivateFieldInitSpec(this, _indexSyncer, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Sequence of physical indexes stored for watching changes and calculating some transformations.\n     *\n     * @private\n     * @type {Array<number>}\n     */\n    _classPrivateFieldInitSpec(this, _indexesSequence, {\n      writable: true,\n      value: []\n    });\n    /**\n     * List of moved HF indexes, stored before performing move on HOT to calculate transformation needed on HF's engine.\n     *\n     * @private\n     * @type {Array<number>}\n     */\n    _classPrivateFieldInitSpec(this, _movedIndexes, {\n      writable: true,\n      value: []\n    });\n    /**\n     * Final HF's place where to move indexes, stored before performing move on HOT to calculate transformation needed on HF's engine.\n     *\n     * @private\n     * @type {number|undefined}\n     */\n    _classPrivateFieldInitSpec(this, _finalIndex, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * List of removed HF indexes, stored before performing removal on HOT to calculate transformation needed on HF's engine.\n     *\n     * @private\n     * @type {Array<number>}\n     */\n    _classPrivateFieldInitSpec(this, _removedIndexes, {\n      writable: true,\n      value: []\n    });\n    _classPrivateFieldSet(this, _axis, axis);\n    _classPrivateFieldSet(this, _indexMapper, indexMapper);\n    _classPrivateFieldSet(this, _indexSyncer, indexSyncer);\n  }\n\n  /**\n   * Sets removed HF indexes (it should be done right before performing move on HOT).\n   *\n   * @param {Array<number>} removedIndexes List of removed physical indexes.\n   * @returns {Array<number>} List of removed visual indexes.\n   */\n  setRemovedHfIndexes(removedIndexes) {\n    _classPrivateFieldSet(this, _removedIndexes, removedIndexes.map(physicalIndex => {\n      const visualIndex = _classPrivateFieldGet(this, _indexMapper).getVisualFromPhysicalIndex(physicalIndex);\n      return this.getHfIndexFromVisualIndex(visualIndex);\n    }));\n    return _classPrivateFieldGet(this, _removedIndexes);\n  }\n\n  /**\n   * Gets removed HF indexes (right before performing removal on HOT).\n   *\n   * @returns {Array<number>} List of removed HF indexes.\n   */\n  getRemovedHfIndexes() {\n    return _classPrivateFieldGet(this, _removedIndexes);\n  }\n\n  /**\n   * Gets corresponding HyperFormula index for particular visual index. It's respecting the idea that HF's engine\n   * is fed also with trimmed indexes (business requirements for formula result calculation also for trimmed elements).\n   *\n   * @param {number} visualIndex Visual index.\n   * @returns {number}\n   */\n  getHfIndexFromVisualIndex(visualIndex) {\n    const indexesSequence = _classPrivateFieldGet(this, _indexMapper).getIndexesSequence();\n    const notTrimmedIndexes = _classPrivateFieldGet(this, _indexMapper).getNotTrimmedIndexes();\n    return indexesSequence.indexOf(notTrimmedIndexes[visualIndex]);\n  }\n\n  /**\n   * Synchronizes moves done on HOT to HF engine (based on previously calculated positions).\n   *\n   * @private\n   * @param {Array<{from: number, to: number}>} moves Calculated HF's move positions.\n   */\n  syncMoves(moves) {\n    const NUMBER_OF_MOVED_INDEXES = 1;\n    const SYNC_MOVE_METHOD_NAME = `move${toUpperCaseFirst(_classPrivateFieldGet(this, _axis))}s`;\n    _classPrivateFieldGet(this, _indexSyncer).getEngine().batch(() => {\n      moves.forEach(move => {\n        const moveToTheSamePosition = move.from !== move.to;\n        // Moving from left to right (or top to bottom) to a line (drop index) right after already moved element.\n        const anotherMoveWithoutEffect = move.from + 1 !== move.to;\n        if (moveToTheSamePosition && anotherMoveWithoutEffect) {\n          _classPrivateFieldGet(this, _indexSyncer).getEngine()[SYNC_MOVE_METHOD_NAME](_classPrivateFieldGet(this, _indexSyncer).getSheetId(), move.from, NUMBER_OF_MOVED_INDEXES, move.to);\n        }\n      });\n    });\n  }\n\n  /**\n   * Stores information about performed HOT moves for purpose of calculating where to move HF elements.\n   *\n   * @param {Array<number>} movedVisualIndexes Sequence of moved visual indexes for certain axis.\n   * @param {number} visualFinalIndex Final visual place where to move HOT indexes.\n   * @param {boolean} movePossible Indicates if it's possible to move HOT indexes to the desired position.\n   */\n  storeMovesInformation(movedVisualIndexes, visualFinalIndex, movePossible) {\n    if (movePossible === false) {\n      return;\n    }\n    _classPrivateFieldSet(this, _movedIndexes, movedVisualIndexes.map(index => this.getHfIndexFromVisualIndex(index)));\n    _classPrivateFieldSet(this, _finalIndex, this.getHfIndexFromVisualIndex(visualFinalIndex));\n  }\n\n  /**\n   * Gets first position where to move element (respecting the fact that some element will be sooner or later\n   * taken out of the dataset in order to move them).\n   *\n   * @param {Array<number>} movedHfIndexes Sequence of moved HF indexes for certain axis.\n   * @param {number} finalHfIndex Final HF place where to move rows.\n   * @returns {number} HF's index informing where to move the first element.\n   * @private\n   */\n  getMoveLine(movedHfIndexes, finalHfIndex) {\n    const numberOfElements = _classPrivateFieldGet(this, _indexMapper).getNumberOfIndexes();\n    const notMovedElements = Array.from(Array(numberOfElements).keys()).filter(index => movedHfIndexes.includes(index) === false);\n    if (finalHfIndex === 0) {\n      var _notMovedElements$fin;\n      return (_notMovedElements$fin = notMovedElements[finalHfIndex]) !== null && _notMovedElements$fin !== void 0 ? _notMovedElements$fin : 0; // Moving before the first dataset's element.\n    }\n\n    return notMovedElements[finalHfIndex - 1] + 1; // Moving before another element.\n  }\n\n  /**\n   * Gets initially calculated HF's move positions.\n   *\n   * @private\n   * @param {Array<number>} movedHfIndexes Sequence of moved HF indexes for certain axis.\n   * @param {number} finalHfIndex Final HF place where to move rows.\n   * @returns {Array<{from: number, to: number}>} Initially calculated HF's move positions.\n   */\n  getInitiallyCalculatedMoves(movedHfIndexes, finalHfIndex) {\n    let moveLine = this.getMoveLine(movedHfIndexes, finalHfIndex);\n    const moves = [];\n    movedHfIndexes.forEach(movedHfIndex => {\n      const move = {\n        from: movedHfIndex,\n        to: moveLine\n      };\n      moves.forEach(previouslyMovedIndex => {\n        const isMovingFromEndToStart = previouslyMovedIndex.from > previouslyMovedIndex.to;\n        const isMovingElementBefore = previouslyMovedIndex.to <= move.from;\n        const isMovingAfterElement = previouslyMovedIndex.from > move.from;\n        if (isMovingAfterElement && isMovingElementBefore && isMovingFromEndToStart) {\n          move.from += 1;\n        }\n      });\n\n      // Moved element from right to left (or bottom to top).\n      if (move.from >= moveLine) {\n        moveLine += 1;\n      }\n      moves.push(move);\n    });\n    return moves;\n  }\n\n  /**\n   * Gets finally calculated HF's move positions (after adjusting).\n   *\n   * @private\n   * @param {Array<{from: number, to: number}>} moves Initially calculated HF's move positions.\n   * @returns {Array<{from: number, to: number}>} Finally calculated HF's move positions (after adjusting).\n   */\n  adjustedCalculatedMoves(moves) {\n    moves.forEach((move, index) => {\n      const nextMoved = moves.slice(index + 1);\n      nextMoved.forEach(nextMovedIndex => {\n        const isMovingFromStartToEnd = nextMovedIndex.from < nextMovedIndex.to;\n        if (nextMovedIndex.from > move.from && isMovingFromStartToEnd) {\n          nextMovedIndex.from -= 1;\n        }\n      });\n    });\n    return moves;\n  }\n\n  /**\n   * Calculating where to move HF elements and performing already calculated moves.\n   *\n   * @param {boolean} movePossible Indicates if it was possible to move HOT indexes to the desired position.\n   * @param {boolean} orderChanged Indicates if order of HOT indexes was changed by move.\n   */\n  calculateAndSyncMoves(movePossible, orderChanged) {\n    if (_classPrivateFieldGet(this, _indexSyncer).isPerformingUndoRedo()) {\n      return;\n    }\n    if (movePossible === false || orderChanged === false) {\n      return;\n    }\n    const calculatedMoves = this.adjustedCalculatedMoves(this.getInitiallyCalculatedMoves(_classPrivateFieldGet(this, _movedIndexes), _classPrivateFieldGet(this, _finalIndex)));\n    if (_classPrivateFieldGet(this, _indexSyncer).getSheetId() === null) {\n      _classPrivateFieldGet(this, _indexSyncer).getPostponeAction(() => this.syncMoves(calculatedMoves));\n    } else {\n      this.syncMoves(calculatedMoves);\n    }\n  }\n\n  /**\n   * Gets callback for hook triggered after performing change of indexes order.\n   *\n   * @returns {Function}\n   */\n  getIndexesChangeSyncMethod() {\n    const SYNC_ORDER_CHANGE_METHOD_NAME = `set${toUpperCaseFirst(_classPrivateFieldGet(this, _axis))}Order`;\n    return source => {\n      if (_classPrivateFieldGet(this, _indexSyncer).isPerformingUndoRedo()) {\n        return;\n      }\n      const newSequence = _classPrivateFieldGet(this, _indexMapper).getIndexesSequence();\n      if (source === 'update') {\n        const relativeTransformation = _classPrivateFieldGet(this, _indexesSequence).map(index => newSequence.indexOf(index));\n        const sheetDimensions = _classPrivateFieldGet(this, _indexSyncer).getEngine().getSheetDimensions(_classPrivateFieldGet(this, _indexSyncer).getSheetId());\n        let sizeForAxis;\n        if (_classPrivateFieldGet(this, _axis) === 'row') {\n          sizeForAxis = sheetDimensions.height;\n        } else {\n          sizeForAxis = sheetDimensions.width;\n        }\n        const numberOfReorganisedIndexes = relativeTransformation.length;\n\n        // Sheet dimension can be changed by HF's engine for purpose of calculating values. It extends dependency\n        // graph to calculate values outside of a defined dataset. This part of code could be removed after resolving\n        // feature request from HF issue board (handsontable/hyperformula#1179).\n        for (let i = numberOfReorganisedIndexes; i < sizeForAxis; i += 1) {\n          relativeTransformation.push(i);\n        }\n        _classPrivateFieldGet(this, _indexSyncer).getEngine()[SYNC_ORDER_CHANGE_METHOD_NAME](_classPrivateFieldGet(this, _indexSyncer).getSheetId(), relativeTransformation);\n      }\n      _classPrivateFieldSet(this, _indexesSequence, newSequence);\n    };\n  }\n\n  /**\n   * Initialize the AxisSyncer.\n   */\n  init() {\n    _classPrivateFieldSet(this, _indexesSequence, _classPrivateFieldGet(this, _indexMapper).getIndexesSequence());\n  }\n}\nexport default AxisSyncer;","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport AxisSyncer from \"./axisSyncer.mjs\";\n/**\n * @private\n * @class IndexSyncer\n * @description\n *\n * Indexes synchronizer responsible for providing logic for syncing actions done on indexes for HOT to actions performed\n * on HF's.\n *\n */\nvar _rowIndexSyncer = /*#__PURE__*/new WeakMap();\nvar _columnIndexSyncer = /*#__PURE__*/new WeakMap();\nvar _postponeAction = /*#__PURE__*/new WeakMap();\nvar _isPerformingUndo = /*#__PURE__*/new WeakMap();\nvar _isPerformingRedo = /*#__PURE__*/new WeakMap();\nvar _engine = /*#__PURE__*/new WeakMap();\nvar _sheetId = /*#__PURE__*/new WeakMap();\nclass IndexSyncer {\n  constructor(rowIndexMapper, columnIndexMapper, postponeAction) {\n    /**\n     * Indexes synchronizer for the axis of the rows.\n     *\n     * @private\n     * @type {AxisSyncer}\n     */\n    _classPrivateFieldInitSpec(this, _rowIndexSyncer, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Indexes synchronizer for the axis of the columns.\n     *\n     * @private\n     * @type {AxisSyncer}\n     */\n    _classPrivateFieldInitSpec(this, _columnIndexSyncer, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Method which will postpone execution of some action (needed when synchronization endpoint isn't setup yet).\n     *\n     * @private\n     * @type {Function}\n     */\n    _classPrivateFieldInitSpec(this, _postponeAction, {\n      writable: true,\n      value: void 0\n    });\n    /**\n     * Flag informing whether undo is already performed (we don't perform synchronization in such case).\n     *\n     * @private\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isPerformingUndo, {\n      writable: true,\n      value: false\n    });\n    /**\n     * Flag informing whether redo is already performed (we don't perform synchronization in such case).\n     *\n     * @private\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isPerformingRedo, {\n      writable: true,\n      value: false\n    });\n    /**\n     * The HF's engine instance which will be synced.\n     *\n     * @private\n     * @type {HyperFormula|null}\n     */\n    _classPrivateFieldInitSpec(this, _engine, {\n      writable: true,\n      value: null\n    });\n    /**\n     * HyperFormula's sheet name.\n     *\n     * @private\n     * @type {string|null}\n     */\n    _classPrivateFieldInitSpec(this, _sheetId, {\n      writable: true,\n      value: null\n    });\n    _classPrivateFieldSet(this, _rowIndexSyncer, new AxisSyncer('row', rowIndexMapper, this));\n    _classPrivateFieldSet(this, _columnIndexSyncer, new AxisSyncer('column', columnIndexMapper, this));\n    _classPrivateFieldSet(this, _postponeAction, postponeAction);\n  }\n\n  /**\n   * Gets index synchronizer for a particular axis.\n   *\n   * @param {'row'|'column'} indexType Type of indexes.\n   * @returns {AxisSyncer}\n   */\n  getForAxis(indexType) {\n    if (indexType === 'row') {\n      return _classPrivateFieldGet(this, _rowIndexSyncer);\n    }\n    return _classPrivateFieldGet(this, _columnIndexSyncer);\n  }\n\n  /**\n   * Sets flag informing whether an undo action is already performed (we don't execute synchronization in such case).\n   *\n   * @param {boolean} flagValue Boolean value for the flag.\n   */\n  setPerformUndo(flagValue) {\n    _classPrivateFieldSet(this, _isPerformingUndo, flagValue);\n  }\n\n  /**\n   * Sets flag informing whether a redo action is already performed (we don't execute synchronization in such case).\n   *\n   * @param {boolean} flagValue Boolean value for the flag.\n   */\n  setPerformRedo(flagValue) {\n    _classPrivateFieldSet(this, _isPerformingRedo, flagValue);\n  }\n\n  /**\n   * Gets information whether redo or undo action is already performed (we don't execute synchronization in such case).\n   *\n   * @private\n   * @returns {boolean}\n   */\n  isPerformingUndoRedo() {\n    return _classPrivateFieldGet(this, _isPerformingUndo) || _classPrivateFieldGet(this, _isPerformingRedo);\n  }\n\n  /**\n   * Gets HyperFormula's sheet id.\n   *\n   * @returns {string|null}\n   */\n  getSheetId() {\n    return _classPrivateFieldGet(this, _sheetId);\n  }\n\n  /**\n   * Gets engine instance that will be used for handled instance of Handsontable.\n   *\n   * @type {HyperFormula|null}\n   */\n  getEngine() {\n    return _classPrivateFieldGet(this, _engine);\n  }\n\n  /**\n   * Gets method which will postpone execution of some action (needed when synchronization endpoint isn't setup yet).\n   *\n   * @returns {Function}\n   */\n  getPostponeAction() {\n    return _classPrivateFieldGet(this, _postponeAction);\n  }\n\n  /**\n   * Setups a synchronization endpoint.\n   *\n   * @param {HyperFormula|null} engine The HF's engine instance which will be synced.\n   * @param {string|null} sheetId HyperFormula's sheet name.\n   */\n  setupSyncEndpoint(engine, sheetId) {\n    _classPrivateFieldSet(this, _engine, engine);\n    _classPrivateFieldSet(this, _sheetId, sheetId);\n    _classPrivateFieldGet(this, _rowIndexSyncer).init();\n    _classPrivateFieldGet(this, _columnIndexSyncer).init();\n  }\n}\nexport default IndexSyncer;","import \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport staticRegister from \"../../utils/staticRegister.mjs\";\nimport { error, warn } from \"../../helpers/console.mjs\";\nimport { isNumeric } from \"../../helpers/number.mjs\";\nimport { isDefined, isUndefined } from \"../../helpers/mixed.mjs\";\nimport { setupEngine, setupSheet, unregisterEngine, getRegisteredHotInstances } from \"./engine/register.mjs\";\nimport { isEscapedFormulaExpression, unescapeFormulaExpression, isDate, isDateValid, getDateInHfFormat, getDateFromExcelDate, getDateInHotFormat, isFormula } from \"./utils.mjs\";\nimport { getEngineSettingsWithOverrides, haveEngineSettingsChanged } from \"./engine/settings.mjs\";\nimport { isArrayOfArrays } from \"../../helpers/data.mjs\";\nimport { toUpperCaseFirst } from \"../../helpers/string.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport IndexSyncer from \"./indexSyncer/index.mjs\";\nexport const PLUGIN_KEY = 'formulas';\nexport const SETTING_KEYS = ['maxRows', 'maxColumns', 'language'];\nexport const PLUGIN_PRIORITY = 260;\nHooks.getSingleton().register('afterNamedExpressionAdded');\nHooks.getSingleton().register('afterNamedExpressionRemoved');\nHooks.getSingleton().register('afterSheetAdded');\nHooks.getSingleton().register('afterSheetRemoved');\nHooks.getSingleton().register('afterSheetRenamed');\nHooks.getSingleton().register('afterFormulasValuesUpdate');\n\n// This function will be used for detecting changes coming from the `UndoRedo` plugin. This kind of change won't be\n// handled by whole body of listeners and therefore won't change undo/redo stack inside engine provided by HyperFormula.\n// HyperFormula's `undo` and `redo` methods will do it instead. Please keep in mind that undo/redo stacks inside\n// instances of Handsontable and HyperFormula should be synced (number of actions should be the same).\nconst isBlockedSource = source => source === 'UndoRedo.undo' || source === 'UndoRedo.redo' || source === 'auto';\n\n/**\n * This plugin allows you to perform Excel-like calculations in your business applications. It does it by an\n * integration with our other product, [HyperFormula](https://github.com/handsontable/hyperformula/), which is a\n * powerful calculation engine with an extensive number of features.\n *\n * To test out HyperFormula, see [this guide](@/guides/formulas/formula-calculation.md#available-functions).\n *\n * @plugin Formulas\n * @class Formulas\n */\nvar _internalOperationPending = /*#__PURE__*/new WeakMap();\nvar _hotWasInitializedWithEmptyData = /*#__PURE__*/new WeakMap();\nvar _engineListeners = /*#__PURE__*/new WeakMap();\nexport class Formulas extends BasePlugin {\n  constructor() {\n    var _this;\n    super(...arguments);\n    _this = this;\n    /**\n     * Flag used to bypass hooks in internal operations.\n     *\n     * @private\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _internalOperationPending, {\n      writable: true,\n      value: false\n    });\n    /**\n     * Flag needed to mark if Handsontable was initialized with no data.\n     * (Required to work around the fact, that Handsontable auto-generates sample data, when no data is provided).\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _hotWasInitializedWithEmptyData, {\n      writable: true,\n      value: false\n    });\n    /**\n     * The list of the HyperFormula listeners.\n     *\n     * @type {Array}\n     */\n    _classPrivateFieldInitSpec(this, _engineListeners, {\n      writable: true,\n      value: [['valuesUpdated', function () {\n        return _this.onEngineValuesUpdated(...arguments);\n      }], ['namedExpressionAdded', function () {\n        return _this.onEngineNamedExpressionsAdded(...arguments);\n      }], ['namedExpressionRemoved', function () {\n        return _this.onEngineNamedExpressionsRemoved(...arguments);\n      }], ['sheetAdded', function () {\n        return _this.onEngineSheetAdded(...arguments);\n      }], ['sheetRenamed', function () {\n        return _this.onEngineSheetRenamed(...arguments);\n      }], ['sheetRemoved', function () {\n        return _this.onEngineSheetRemoved(...arguments);\n      }]]\n    });\n    /**\n     * Static register used to set up one global HyperFormula instance.\n     * TODO: currently used in tests, might be removed later.\n     *\n     * @private\n     * @type {object}\n     */\n    _defineProperty(this, \"staticRegister\", staticRegister('formulas'));\n    /**\n     * The engine instance that will be used for this instance of Handsontable.\n     *\n     * @type {HyperFormula|null}\n     */\n    _defineProperty(this, \"engine\", null);\n    /**\n     * HyperFormula's sheet name.\n     *\n     * @type {string|null}\n     */\n    _defineProperty(this, \"sheetName\", null);\n    /**\n     * Index synchronizer responsible for manipulating with some general options related to indexes synchronization.\n     *\n     * @type {IndexSyncer|null}\n     */\n    _defineProperty(this, \"indexSyncer\", null);\n    /**\n     * Index synchronizer responsible for syncing the order of HOT and HF's data for the axis of the rows.\n     *\n     * @type {AxisSyncer|null}\n     */\n    _defineProperty(this, \"rowAxisSyncer\", null);\n    /**\n     * Index synchronizer responsible for syncing the order of HOT and HF's data for the axis of the columns.\n     *\n     * @type {AxisSyncer|null}\n     */\n    _defineProperty(this, \"columnAxisSyncer\", null);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get SETTING_KEYS() {\n    return [PLUGIN_KEY, ...SETTING_KEYS];\n  }\n  /**\n   * HyperFormula's sheet id.\n   *\n   * @type {number|null}\n   */\n  get sheetId() {\n    return this.sheetName === null ? null : this.engine.getSheetId(this.sheetName);\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link Formulas#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    /* eslint-disable no-unneeded-ternary */\n    return this.hot.getSettings()[PLUGIN_KEY] ? true : false;\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _setupEngine,\n      _this2 = this;\n    if (this.enabled) {\n      return;\n    }\n    this.engine = (_setupEngine = setupEngine(this.hot)) !== null && _setupEngine !== void 0 ? _setupEngine : this.engine;\n    if (!this.engine) {\n      warn('Missing the required `engine` key in the Formulas settings. Please fill it with either an' + ' engine class or an engine instance.');\n      return;\n    }\n\n    // Useful for disabling -> enabling the plugin using `updateSettings` or the API.\n    if (this.sheetName !== null && !this.engine.doesSheetExist(this.sheetName)) {\n      const newSheetName = this.addSheet(this.sheetName, this.hot.getSourceDataArray());\n      if (newSheetName !== false) {\n        this.sheetName = newSheetName;\n      }\n    }\n    this.addHook('beforeLoadData', function () {\n      return _this2.onBeforeLoadData(...arguments);\n    });\n    this.addHook('afterLoadData', function () {\n      return _this2.onAfterLoadData(...arguments);\n    });\n\n    // The `updateData` hooks utilize the same logic as the `loadData` hooks.\n    this.addHook('beforeUpdateData', function () {\n      return _this2.onBeforeLoadData(...arguments);\n    });\n    this.addHook('afterUpdateData', function () {\n      return _this2.onAfterLoadData(...arguments);\n    });\n    this.addHook('modifyData', function () {\n      return _this2.onModifyData(...arguments);\n    });\n    this.addHook('modifySourceData', function () {\n      return _this2.onModifySourceData(...arguments);\n    });\n    this.addHook('beforeValidate', function () {\n      return _this2.onBeforeValidate(...arguments);\n    });\n    this.addHook('afterSetSourceDataAtCell', function () {\n      return _this2.onAfterSetSourceDataAtCell(...arguments);\n    });\n    this.addHook('afterSetDataAtCell', function () {\n      return _this2.onAfterSetDataAtCell(...arguments);\n    });\n    this.addHook('afterSetDataAtRowProp', function () {\n      return _this2.onAfterSetDataAtCell(...arguments);\n    });\n    this.addHook('beforeCreateRow', function () {\n      return _this2.onBeforeCreateRow(...arguments);\n    });\n    this.addHook('beforeCreateCol', function () {\n      return _this2.onBeforeCreateCol(...arguments);\n    });\n    this.addHook('afterCreateRow', function () {\n      return _this2.onAfterCreateRow(...arguments);\n    });\n    this.addHook('afterCreateCol', function () {\n      return _this2.onAfterCreateCol(...arguments);\n    });\n    this.addHook('beforeRemoveRow', function () {\n      return _this2.onBeforeRemoveRow(...arguments);\n    });\n    this.addHook('beforeRemoveCol', function () {\n      return _this2.onBeforeRemoveCol(...arguments);\n    });\n    this.addHook('afterRemoveRow', function () {\n      return _this2.onAfterRemoveRow(...arguments);\n    });\n    this.addHook('afterRemoveCol', function () {\n      return _this2.onAfterRemoveCol(...arguments);\n    });\n    this.indexSyncer = new IndexSyncer(this.hot.rowIndexMapper, this.hot.columnIndexMapper, postponedAction => {\n      this.hot.addHookOnce('init', () => {\n        // Engine is initialized after executing callback to `afterLoadData` hook. Thus, some actions on indexes should\n        // be postponed.\n        postponedAction();\n      });\n    });\n    this.rowAxisSyncer = this.indexSyncer.getForAxis('row');\n    this.columnAxisSyncer = this.indexSyncer.getForAxis('column');\n    this.hot.addHook('afterRowSequenceChange', this.rowAxisSyncer.getIndexesChangeSyncMethod());\n    this.hot.addHook('afterColumnSequenceChange', this.columnAxisSyncer.getIndexesChangeSyncMethod());\n    this.hot.addHook('beforeRowMove', (movedRows, finalIndex, _, movePossible) => {\n      this.rowAxisSyncer.storeMovesInformation(movedRows, finalIndex, movePossible);\n    });\n    this.hot.addHook('beforeColumnMove', (movedColumns, finalIndex, _, movePossible) => {\n      this.columnAxisSyncer.storeMovesInformation(movedColumns, finalIndex, movePossible);\n    });\n    this.hot.addHook('afterRowMove', (movedRows, finalIndex, dropIndex, movePossible, orderChanged) => {\n      this.rowAxisSyncer.calculateAndSyncMoves(movePossible, orderChanged);\n    });\n    this.hot.addHook('afterColumnMove', (movedColumns, finalIndex, dropIndex, movePossible, orderChanged) => {\n      this.columnAxisSyncer.calculateAndSyncMoves(movePossible, orderChanged);\n    });\n    this.hot.addHook('beforeColumnFreeze', (column, freezePerformed) => {\n      this.columnAxisSyncer.storeMovesInformation([column], this.hot.getSettings().fixedColumnsStart, freezePerformed);\n    });\n    this.hot.addHook('afterColumnFreeze', (_, freezePerformed) => {\n      this.columnAxisSyncer.calculateAndSyncMoves(freezePerformed, freezePerformed);\n    });\n    this.hot.addHook('beforeColumnUnfreeze', (column, unfreezePerformed) => {\n      this.columnAxisSyncer.storeMovesInformation([column], this.hot.getSettings().fixedColumnsStart - 1, unfreezePerformed);\n    });\n    this.hot.addHook('afterColumnUnfreeze', (_, unfreezePerformed) => {\n      this.columnAxisSyncer.calculateAndSyncMoves(unfreezePerformed, unfreezePerformed);\n    });\n\n    // TODO: Actions related to overwriting dates from HOT format to HF default format are done as callback to this\n    // hook, because some hooks, such as `afterLoadData` doesn't have information about composed cell properties.\n    // Another hooks are triggered to late for setting HF's engine data needed for some actions.\n    this.addHook('afterCellMetaReset', function () {\n      return _this2.onAfterCellMetaReset(...arguments);\n    });\n\n    // Handling undo actions on data just using HyperFormula's UndoRedo mechanism\n    this.addHook('beforeUndo', () => {\n      this.indexSyncer.setPerformUndo(true);\n      this.engine.undo();\n    });\n\n    // Handling redo actions on data just using HyperFormula's UndoRedo mechanism\n    this.addHook('beforeRedo', () => {\n      this.indexSyncer.setPerformRedo(true);\n      this.engine.redo();\n    });\n    this.addHook('afterUndo', () => {\n      this.indexSyncer.setPerformUndo(false);\n    });\n    this.addHook('afterUndo', () => {\n      this.indexSyncer.setPerformRedo(false);\n    });\n    this.addHook('afterDetachChild', function () {\n      return _this2.onAfterDetachChild(...arguments);\n    });\n    this.addHook('beforeAutofill', function () {\n      return _this2.onBeforeAutofill(...arguments);\n    });\n    _classPrivateFieldGet(this, _engineListeners).forEach(_ref => {\n      let [eventName, listener] = _ref;\n      return this.engine.on(eventName, listener);\n    });\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    _classPrivateFieldGet(this, _engineListeners).forEach(_ref2 => {\n      let [eventName, listener] = _ref2;\n      return this.engine.off(eventName, listener);\n    });\n    unregisterEngine(this.engine, this.hot);\n    this.engine = null;\n    super.disablePlugin();\n  }\n\n  /**\n   * Triggered on `updateSettings`.\n   *\n   * @private\n   * @param {object} newSettings New set of settings passed to the `updateSettings` method.\n   */\n  updatePlugin(newSettings) {\n    const newEngineSettings = getEngineSettingsWithOverrides(this.hot.getSettings());\n    if (haveEngineSettingsChanged(this.engine.getConfig(), newEngineSettings)) {\n      this.engine.updateConfig(newEngineSettings);\n    }\n    const pluginSettings = this.hot.getSettings()[PLUGIN_KEY];\n    if (isDefined(pluginSettings) && isDefined(pluginSettings.sheetName) && pluginSettings.sheetName !== this.sheetName) {\n      this.switchSheet(pluginSettings.sheetName);\n    }\n\n    // If no data was passed to the `updateSettings` method and no sheet is connected to the instance -> create a\n    // new sheet using the currently used data. Otherwise, it will be handled by the `afterLoadData` call.\n    if (!newSettings.data && this.sheetName === null) {\n      const sheetName = this.hot.getSettings()[PLUGIN_KEY].sheetName;\n      if (sheetName && this.engine.doesSheetExist(sheetName)) {\n        this.switchSheet(this.sheetName);\n      } else {\n        this.sheetName = this.addSheet(sheetName !== null && sheetName !== void 0 ? sheetName : void 0, this.hot.getSourceDataArray());\n      }\n    }\n    super.updatePlugin(newSettings);\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldGet(this, _engineListeners).forEach(_ref3 => {\n      var _this$engine;\n      let [eventName, listener] = _ref3;\n      return (_this$engine = this.engine) === null || _this$engine === void 0 ? void 0 : _this$engine.off(eventName, listener);\n    });\n    _classPrivateFieldSet(this, _engineListeners, null);\n    unregisterEngine(this.engine, this.hot);\n    this.engine = null;\n    super.destroy();\n  }\n\n  /**\n   * Add a sheet to the shared HyperFormula instance.\n   *\n   * @param {string|null} [sheetName] The new sheet name. If not provided (or a null is passed), will be\n   * auto-generated by HyperFormula.\n   * @param {Array} [sheetData] Data passed to the shared HyperFormula instance. Has to be declared as an array of\n   * arrays - array of objects is not supported in this scenario.\n   * @returns {boolean|string} `false` if the data format is unusable or it is impossible to add a new sheet to the\n   * engine, the created sheet name otherwise.\n   */\n  addSheet(sheetName, sheetData) {\n    if (isDefined(sheetData) && !isArrayOfArrays(sheetData)) {\n      warn('The provided data should be an array of arrays.');\n      return false;\n    }\n    if (sheetName !== void 0 && sheetName !== null && this.engine.doesSheetExist(sheetName)) {\n      warn('Sheet with the provided name already exists.');\n      return false;\n    }\n    try {\n      const actualSheetName = this.engine.addSheet(sheetName !== null && sheetName !== void 0 ? sheetName : void 0);\n      if (sheetData) {\n        this.engine.setSheetContent(this.engine.getSheetId(actualSheetName), sheetData);\n      }\n      return actualSheetName;\n    } catch (e) {\n      warn(e.message);\n      return false;\n    }\n  }\n\n  /**\n   * Switch the sheet used as data in the Handsontable instance (it loads the data from the shared HyperFormula\n   * instance).\n   *\n   * @param {string} sheetName Sheet name used in the shared HyperFormula instance.\n   */\n  switchSheet(sheetName) {\n    if (!this.engine.doesSheetExist(sheetName)) {\n      error(`The sheet named \\`${sheetName}\\` does not exist, switch aborted.`);\n      return;\n    }\n    this.sheetName = sheetName;\n    const serialized = this.engine.getSheetSerialized(this.sheetId);\n    if (serialized.length > 0) {\n      this.hot.loadData(serialized, `${toUpperCaseFirst(PLUGIN_KEY)}.switchSheet`);\n    }\n  }\n\n  /**\n   * Get the cell type under specified visual coordinates.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {number} [sheet] The target sheet id, defaults to the current sheet.\n   * @returns {string} Possible values: 'FORMULA' | 'VALUE' | 'ARRAYFORMULA' | 'EMPTY'.\n   */\n  getCellType(row, column) {\n    let sheet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.sheetId;\n    const physicalRow = this.hot.toPhysicalRow(row);\n    const physicalColumn = this.hot.toPhysicalColumn(column);\n    if (physicalRow !== null && physicalColumn !== null) {\n      return this.engine.getCellType({\n        sheet,\n        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(row),\n        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(column)\n      });\n    } else {\n      // Should return `EMPTY` when out of bounds (according to the test cases).\n      return 'EMPTY';\n    }\n  }\n\n  /**\n   * Returns `true` if under specified visual coordinates is formula.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {number} [sheet] The target sheet id, defaults to the current sheet.\n   * @returns {boolean}\n   */\n  isFormulaCellType(row, column) {\n    let sheet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.sheetId;\n    return this.engine.doesCellHaveFormula({\n      sheet,\n      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(row),\n      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(column)\n    });\n  }\n\n  /**\n   * Renders dependent sheets (handsontable instances) based on the changes - list of the\n   * recalculated dependent cells.\n   *\n   * @private\n   * @param {object[]} dependentCells The values and location of applied changes within HF engine.\n   * @param {boolean} [renderSelf] `true` if it's supposed to render itself, `false` otherwise.\n   */\n  renderDependentSheets(dependentCells) {\n    let renderSelf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const affectedSheetIds = new Set();\n    dependentCells.forEach(change => {\n      var _change$address;\n      // For the Named expression the address is empty, hence the `sheetId` is undefined.\n      const sheetId = change === null || change === void 0 || (_change$address = change.address) === null || _change$address === void 0 ? void 0 : _change$address.sheet;\n      if (sheetId !== void 0) {\n        if (!affectedSheetIds.has(sheetId)) {\n          affectedSheetIds.add(sheetId);\n        }\n      }\n    });\n    getRegisteredHotInstances(this.engine).forEach((relatedHot, sheetId) => {\n      if ((renderSelf || sheetId !== this.sheetId) && affectedSheetIds.has(sheetId)) {\n        var _relatedHot$view;\n        relatedHot.render();\n        (_relatedHot$view = relatedHot.view) === null || _relatedHot$view === void 0 || _relatedHot$view.adjustElementsSize();\n      }\n    });\n  }\n\n  /**\n   * Validates dependent cells based on the cells that are modified by the change.\n   *\n   * @private\n   * @param {object[]} dependentCells The values and location of applied changes within HF engine.\n   * @param {object[]} [changedCells] The values and location of applied changes by developer (through API or UI).\n   */\n  validateDependentCells(dependentCells) {\n    let changedCells = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    const stringifyAddress = change => {\n      var _change$address2;\n      const {\n        row,\n        col,\n        sheet\n      } = (_change$address2 = change === null || change === void 0 ? void 0 : change.address) !== null && _change$address2 !== void 0 ? _change$address2 : {};\n      return isDefined(sheet) ? `${sheet}:${row}x${col}` : '';\n    };\n    const changedCellsSet = new Set(changedCells.map(change => stringifyAddress(change)));\n    dependentCells.forEach(change => {\n      var _change$address3, _change$address4;\n      const {\n        row,\n        col\n      } = (_change$address3 = change.address) !== null && _change$address3 !== void 0 ? _change$address3 : {};\n\n      // Don't try to validate cells outside of the visual part of the table.\n      if (isDefined(row) === false || isDefined(col) === false || row >= this.hot.countRows() || col >= this.hot.countCols()) {\n        return;\n      }\n\n      // For the Named expression the address is empty, hence the `sheetId` is undefined.\n      const sheetId = change === null || change === void 0 || (_change$address4 = change.address) === null || _change$address4 === void 0 ? void 0 : _change$address4.sheet;\n      const addressId = stringifyAddress(change);\n\n      // Validate the cells that depend on the calculated formulas. Skip that cells\n      // where the user directly changes the values - the Core triggers those validators.\n      if (sheetId !== void 0 && !changedCellsSet.has(addressId)) {\n        const boundHot = getRegisteredHotInstances(this.engine).get(sheetId);\n\n        // if `sheetId` is not bound to any Handsontable instance, skip the validation process\n        if (!boundHot) {\n          return;\n        }\n\n        // It will just re-render certain cell when necessary.\n        boundHot.validateCell(boundHot.getDataAtCell(row, col), boundHot.getCellMeta(row, col), () => {});\n      }\n    });\n  }\n\n  /**\n   * Sync a change from the change-related hooks with the engine.\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {Handsontable.CellValue} newValue New value.\n   * @returns {Array} Array of changes exported from the engine.\n   */\n  syncChangeWithEngine(row, column, newValue) {\n    const address = {\n      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(row),\n      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(column),\n      sheet: this.sheetId\n    };\n    if (!this.engine.isItPossibleToSetCellContents(address)) {\n      warn(`Not possible to set cell data at ${JSON.stringify(address)}`);\n      return;\n    }\n    const cellMeta = this.hot.getCellMeta(row, column);\n    if (isDate(newValue, cellMeta.type)) {\n      if (isDateValid(newValue, cellMeta.dateFormat)) {\n        // Rewriting date in HOT format to HF format.\n        newValue = getDateInHfFormat(newValue, cellMeta.dateFormat);\n      } else if (isFormula(newValue) === false) {\n        // Escaping value from date parsing using \"'\" sign (HF feature).\n        newValue = `'${newValue}`;\n      }\n    }\n    return this.engine.setCellContents(address, newValue);\n  }\n\n  /**\n   * The hook allows to translate the formula value to calculated value before it goes to the\n   * validator function.\n   *\n   * @private\n   * @param {*} value The cell value to validate.\n   * @param {number} visualRow The visual row index.\n   * @param {number|string} prop The visual column index or property name of the column.\n   * @returns {*} Returns value to validate.\n   */\n  onBeforeValidate(value, visualRow, prop) {\n    const visualColumn = this.hot.propToCol(prop);\n    if (this.isFormulaCellType(visualRow, visualColumn)) {\n      const address = {\n        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow),\n        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn),\n        sheet: this.sheetId\n      };\n      const cellMeta = this.hot.getCellMeta(visualRow, visualColumn);\n      let cellValue = this.engine.getCellValue(address); // Date as an integer (Excel-like date).\n\n      if (cellMeta.type === 'date' && isNumeric(cellValue)) {\n        cellValue = getDateFromExcelDate(cellValue, cellMeta.dateFormat);\n      }\n\n      // If `cellValue` is an object it is expected to be an error\n      return typeof cellValue === 'object' && cellValue !== null ? cellValue.value : cellValue;\n    }\n    return value;\n  }\n\n  /**\n   * `onBeforeAutofill` hook callback.\n   *\n   * @private\n   * @param {Array[]} fillData The data that was used to fill the `targetRange`. If `beforeAutofill` was used\n   * and returned `[[]]`, this will be the same object that was returned from `beforeAutofill`.\n   * @param {CellRange} sourceRange The range values will be filled from.\n   * @param {CellRange} targetRange The range new values will be filled into.\n   * @returns {boolean|*}\n   */\n  onBeforeAutofill(fillData, sourceRange, targetRange) {\n    const {\n      row: sourceTopStartRow,\n      col: sourceTopStartColumn\n    } = sourceRange.getTopStartCorner();\n    const {\n      row: sourceBottomEndRow,\n      col: sourceBottomEndColumn\n    } = sourceRange.getBottomEndCorner();\n    const {\n      row: targetTopStartRow,\n      col: targetTopStartColumn\n    } = targetRange.getTopStartCorner();\n    const {\n      row: targetBottomEndRow,\n      col: targetBottomEndColumn\n    } = targetRange.getBottomEndCorner();\n    const engineSourceRange = {\n      start: {\n        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(sourceTopStartRow),\n        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(sourceTopStartColumn),\n        sheet: this.sheetId\n      },\n      end: {\n        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(sourceBottomEndRow),\n        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(sourceBottomEndColumn),\n        sheet: this.sheetId\n      }\n    };\n    const engineTargetRange = {\n      start: {\n        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(targetTopStartRow),\n        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(targetTopStartColumn),\n        sheet: this.sheetId\n      },\n      end: {\n        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(targetBottomEndRow),\n        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(targetBottomEndColumn),\n        sheet: this.sheetId\n      }\n    };\n\n    // Blocks the autofill operation if HyperFormula says that at least one of\n    // the underlying cell's contents cannot be set.\n    if (this.engine.isItPossibleToSetCellContents(engineTargetRange) === false) {\n      return false;\n    }\n    const fillRangeData = this.engine.getFillRangeData(engineSourceRange, engineTargetRange);\n    const {\n      row: sourceStartRow,\n      col: sourceStartColumn\n    } = engineSourceRange.start;\n    const {\n      row: sourceEndRow,\n      col: sourceEndColumn\n    } = engineSourceRange.end;\n    const populationRowLength = sourceEndRow - sourceStartRow + 1;\n    const populationColumnLength = sourceEndColumn - sourceStartColumn + 1;\n    for (let populatedRowIndex = 0; populatedRowIndex < fillRangeData.length; populatedRowIndex += 1) {\n      for (let populatedColumnIndex = 0; populatedColumnIndex < fillRangeData[populatedRowIndex].length; populatedColumnIndex += 1) {\n        const populatedValue = fillRangeData[populatedRowIndex][populatedColumnIndex];\n        const sourceRow = populatedRowIndex % populationRowLength;\n        const sourceColumn = populatedColumnIndex % populationColumnLength;\n        const sourceCellMeta = this.hot.getCellMeta(sourceRow, sourceColumn);\n        if (isDate(populatedValue, sourceCellMeta.type)) {\n          if (populatedValue.startsWith('\\'')) {\n            // Populating values on HOT side without apostrophe.\n            fillRangeData[populatedRowIndex][populatedColumnIndex] = populatedValue.slice(1);\n          } else if (this.isFormulaCellType(sourceRow, sourceColumn, this.sheetId) === false) {\n            // Populating date in proper format, coming from the source cell.\n            fillRangeData[populatedRowIndex][populatedColumnIndex] = getDateInHotFormat(populatedValue, sourceCellMeta.dateFormat);\n          }\n        }\n      }\n    }\n    return fillRangeData;\n  }\n\n  /**\n   * `beforeLoadData` hook callback.\n   *\n   * @param {Array} sourceData Array of arrays or array of objects containing data.\n   * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\n   * @param {string} [source] Source of the call.\n   * @private\n   */\n  onBeforeLoadData(sourceData, initialLoad) {\n    let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    if (source.includes(toUpperCaseFirst(PLUGIN_KEY))) {\n      return;\n    }\n\n    // This flag needs to be defined, because not passing data to HOT results in HOT auto-generating a `null`-filled\n    // initial dataset.\n    _classPrivateFieldSet(this, _hotWasInitializedWithEmptyData, isUndefined(this.hot.getSettings().data));\n  }\n\n  /**\n   * Callback to `afterCellMetaReset` hook which is triggered after setting cell meta.\n   *\n   * @private\n   */\n  onAfterCellMetaReset() {\n    const sourceDataArray = this.hot.getSourceDataArray();\n    let valueChanged = false;\n    sourceDataArray.forEach((rowData, rowIndex) => {\n      rowData.forEach((cellValue, columnIndex) => {\n        const cellMeta = this.hot.getCellMeta(rowIndex, columnIndex);\n        const dateFormat = cellMeta.dateFormat;\n        if (isDate(cellValue, cellMeta.type)) {\n          valueChanged = true;\n          if (isDateValid(cellValue, dateFormat)) {\n            // Rewriting date in HOT format to HF format.\n            sourceDataArray[rowIndex][columnIndex] = getDateInHfFormat(cellValue, dateFormat);\n          } else if (this.isFormulaCellType(rowIndex, columnIndex) === false) {\n            // Escaping value from date parsing using \"'\" sign (HF feature).\n            sourceDataArray[rowIndex][columnIndex] = `'${cellValue}`;\n          }\n        }\n      });\n    });\n    if (valueChanged === true) {\n      _classPrivateFieldSet(this, _internalOperationPending, true);\n      this.engine.setSheetContent(this.sheetId, sourceDataArray);\n      _classPrivateFieldSet(this, _internalOperationPending, false);\n    }\n  }\n\n  /**\n   * `afterLoadData` hook callback.\n   *\n   * @param {Array} sourceData Array of arrays or array of objects containing data.\n   * @param {boolean} initialLoad Flag that determines whether the data has been loaded during the initialization.\n   * @param {string} [source] Source of the call.\n   * @private\n   */\n  onAfterLoadData(sourceData, initialLoad) {\n    let source = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n    if (source.includes(toUpperCaseFirst(PLUGIN_KEY))) {\n      return;\n    }\n    this.sheetName = setupSheet(this.engine, this.hot.getSettings()[PLUGIN_KEY].sheetName);\n    if (!_classPrivateFieldGet(this, _hotWasInitializedWithEmptyData)) {\n      const sourceDataArray = this.hot.getSourceDataArray();\n      if (this.engine.isItPossibleToReplaceSheetContent(this.sheetId, sourceDataArray)) {\n        _classPrivateFieldSet(this, _internalOperationPending, true);\n        const dependentCells = this.engine.setSheetContent(this.sheetId, sourceDataArray);\n        this.indexSyncer.setupSyncEndpoint(this.engine, this.sheetId);\n        this.renderDependentSheets(dependentCells);\n        _classPrivateFieldSet(this, _internalOperationPending, false);\n      }\n    } else {\n      this.switchSheet(this.sheetName);\n    }\n  }\n\n  /**\n   * `modifyData` hook callback.\n   *\n   * @private\n   * @param {number} physicalRow Physical row index.\n   * @param {number} visualColumn Visual column index.\n   * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value`\n   *   property.\n   * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).\n   */\n  onModifyData(physicalRow, visualColumn, valueHolder, ioMode) {\n    if (ioMode !== 'get' || _classPrivateFieldGet(this, _internalOperationPending) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName)) {\n      return;\n    }\n    const visualRow = this.hot.toVisualRow(physicalRow);\n    if (visualRow === null || visualColumn === null) {\n      return;\n    }\n\n    // `column` is here as visual index because of inconsistencies related to hook execution in `src/dataMap`.\n    const isFormulaCellType = this.isFormulaCellType(visualRow, visualColumn);\n    if (!isFormulaCellType) {\n      const cellType = this.getCellType(visualRow, visualColumn);\n      if (cellType !== 'ARRAY') {\n        if (isEscapedFormulaExpression(valueHolder.value)) {\n          valueHolder.value = unescapeFormulaExpression(valueHolder.value);\n        }\n        return;\n      }\n    }\n    const address = {\n      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow),\n      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn),\n      sheet: this.sheetId\n    };\n    let cellValue = this.engine.getCellValue(address); // Date as an integer (Excel like date).\n    const cellMeta = this.hot.getCellMeta(visualRow, visualColumn);\n    if (cellMeta.type === 'date' && isNumeric(cellValue)) {\n      cellValue = getDateFromExcelDate(cellValue, cellMeta.dateFormat);\n    }\n\n    // If `cellValue` is an object it is expected to be an error\n    const value = typeof cellValue === 'object' && cellValue !== null ? cellValue.value : cellValue;\n    valueHolder.value = value;\n  }\n\n  /**\n   * `modifySourceData` hook callback.\n   *\n   * @private\n   * @param {number} row Physical row index.\n   * @param {number|string} columnOrProp Physical column index or prop.\n   * @param {object} valueHolder Object which contains original value which can be modified by overwriting `.value`\n   *   property.\n   * @param {string} ioMode String which indicates for what operation hook is fired (`get` or `set`).\n   */\n  onModifySourceData(row, columnOrProp, valueHolder, ioMode) {\n    if (ioMode !== 'get' || _classPrivateFieldGet(this, _internalOperationPending) || this.sheetName === null || !this.engine.doesSheetExist(this.sheetName)) {\n      return;\n    }\n    const visualRow = this.hot.toVisualRow(row);\n    const visualColumn = this.hot.propToCol(columnOrProp);\n    if (visualRow === null || visualColumn === null) {\n      return;\n    }\n\n    // `column` is here as visual index because of inconsistencies related to hook execution in `src/dataMap`.\n    const isFormulaCellType = this.isFormulaCellType(visualRow, visualColumn);\n    if (!isFormulaCellType) {\n      const cellType = this.getCellType(visualRow, visualColumn);\n      if (cellType !== 'ARRAY') {\n        return;\n      }\n    }\n    const dimensions = this.engine.getSheetDimensions(this.engine.getSheetId(this.sheetName));\n\n    // Don't actually change the source data if HyperFormula is not\n    // initialized yet. This is done to allow the `afterLoadData` hook to\n    // load the existing source data with `Handsontable#getSourceDataArray`\n    // properly.\n    if (dimensions.width === 0 && dimensions.height === 0) {\n      return;\n    }\n    const address = {\n      row: this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow),\n      col: this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn),\n      sheet: this.sheetId\n    };\n    valueHolder.value = this.engine.getCellSerialized(address);\n  }\n\n  /**\n   * `onAfterSetDataAtCell` hook callback.\n   *\n   * @private\n   * @param {Array[]} changes An array of changes in format [[row, prop, oldValue, value], ...].\n   * @param {string} [source] String that identifies source of hook call\n   *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).\n   */\n  onAfterSetDataAtCell(changes, source) {\n    if (isBlockedSource(source)) {\n      return;\n    }\n    const outOfBoundsChanges = [];\n    const changedCells = [];\n    const dependentCells = this.engine.batch(() => {\n      changes.forEach(_ref4 => {\n        let [visualRow, prop,, newValue] = _ref4;\n        const visualColumn = this.hot.propToCol(prop);\n        const physicalRow = this.hot.toPhysicalRow(visualRow);\n        const physicalColumn = this.hot.toPhysicalColumn(visualColumn);\n        const address = {\n          row: this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow),\n          col: this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn),\n          sheet: this.sheetId\n        };\n        if (physicalRow !== null && physicalColumn !== null) {\n          this.syncChangeWithEngine(visualRow, visualColumn, newValue);\n        } else {\n          outOfBoundsChanges.push([visualRow, visualColumn, newValue]);\n        }\n        changedCells.push({\n          address\n        });\n      });\n    });\n    if (outOfBoundsChanges.length) {\n      // Workaround for rows/columns being created two times (by HOT and the engine).\n      // (unfortunately, this requires an extra re-render)\n      this.hot.addHookOnce('afterChange', () => {\n        const outOfBoundsDependentCells = this.engine.batch(() => {\n          outOfBoundsChanges.forEach(_ref5 => {\n            let [row, column, newValue] = _ref5;\n            this.syncChangeWithEngine(row, column, newValue);\n          });\n        });\n        this.renderDependentSheets(outOfBoundsDependentCells, true);\n      });\n    }\n    this.renderDependentSheets(dependentCells);\n    this.validateDependentCells(dependentCells, changedCells);\n  }\n\n  /**\n   * `onAfterSetSourceDataAtCell` hook callback.\n   *\n   * @private\n   * @param {Array[]} changes An array of changes in format [[row, column, oldValue, value], ...].\n   * @param {string} [source] String that identifies source of hook call\n   *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).\n   */\n  onAfterSetSourceDataAtCell(changes, source) {\n    if (isBlockedSource(source)) {\n      return;\n    }\n    const dependentCells = [];\n    const changedCells = [];\n    changes.forEach(_ref6 => {\n      let [visualRow, prop,, newValue] = _ref6;\n      const visualColumn = this.hot.propToCol(prop);\n      if (!isNumeric(visualColumn)) {\n        return;\n      }\n      const address = {\n        row: this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow),\n        col: this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn),\n        sheet: this.sheetId\n      };\n      if (!this.engine.isItPossibleToSetCellContents(address)) {\n        warn(`Not possible to set source cell data at ${JSON.stringify(address)}`);\n        return;\n      }\n      changedCells.push({\n        address\n      });\n      dependentCells.push(...this.engine.setCellContents(address, newValue));\n    });\n    this.renderDependentSheets(dependentCells);\n    this.validateDependentCells(dependentCells, changedCells);\n  }\n\n  /**\n   * `beforeCreateRow` hook callback.\n   *\n   * @private\n   * @param {number} visualRow Represents the visual index of first newly created row in the data source array.\n   * @param {number} amount Number of newly created rows in the data source array.\n   * @returns {*|boolean} If false is returned the action is canceled.\n   */\n  onBeforeCreateRow(visualRow, amount) {\n    let hfRowIndex = this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow);\n    if (visualRow >= this.hot.countRows()) {\n      hfRowIndex = visualRow; // Row beyond the table boundaries.\n    }\n\n    if (this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddRows(this.sheetId, [hfRowIndex, amount])) {\n      return false;\n    }\n  }\n\n  /**\n   * `beforeCreateCol` hook callback.\n   *\n   * @private\n   * @param {number} visualColumn Represents the visual index of first newly created column in the data source.\n   * @param {number} amount Number of newly created columns in the data source.\n   * @returns {*|boolean} If false is returned the action is canceled.\n   */\n  onBeforeCreateCol(visualColumn, amount) {\n    let hfColumnIndex = this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn);\n    if (visualColumn >= this.hot.countCols()) {\n      hfColumnIndex = visualColumn; // Column beyond the table boundaries.\n    }\n\n    if (this.sheetId === null || !this.engine.doesSheetExist(this.sheetName) || !this.engine.isItPossibleToAddColumns(this.sheetId, [hfColumnIndex, amount])) {\n      return false;\n    }\n  }\n\n  /**\n   * `beforeRemoveRow` hook callback.\n   *\n   * @private\n   * @param {number} row Visual index of starter row.\n   * @param {number} amount Amount of rows to be removed.\n   * @param {number[]} physicalRows An array of physical rows removed from the data source.\n   * @returns {*|boolean} If false is returned the action is canceled.\n   */\n  onBeforeRemoveRow(row, amount, physicalRows) {\n    const hfRows = this.rowAxisSyncer.setRemovedHfIndexes(physicalRows);\n    const possible = hfRows.every(hfRow => {\n      return this.engine.isItPossibleToRemoveRows(this.sheetId, [hfRow, 1]);\n    });\n    return possible === false ? false : void 0;\n  }\n\n  /**\n   * `beforeRemoveCol` hook callback.\n   *\n   * @private\n   * @param {number} col Visual index of starter column.\n   * @param {number} amount Amount of columns to be removed.\n   * @param {number[]} physicalColumns An array of physical columns removed from the data source.\n   * @returns {*|boolean} If false is returned the action is canceled.\n   */\n  onBeforeRemoveCol(col, amount, physicalColumns) {\n    const hfColumns = this.columnAxisSyncer.setRemovedHfIndexes(physicalColumns);\n    const possible = hfColumns.every(hfColumn => {\n      return this.engine.isItPossibleToRemoveColumns(this.sheetId, [hfColumn, 1]);\n    });\n    return possible === false ? false : void 0;\n  }\n\n  /**\n   * `afterCreateRow` hook callback.\n   *\n   * @private\n   * @param {number} visualRow Represents the visual index of first newly created row in the data source array.\n   * @param {number} amount Number of newly created rows in the data source array.\n   * @param {string} [source] String that identifies source of hook call\n   *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).\n   */\n  onAfterCreateRow(visualRow, amount, source) {\n    if (isBlockedSource(source)) {\n      return;\n    }\n    const changes = this.engine.addRows(this.sheetId, [this.rowAxisSyncer.getHfIndexFromVisualIndex(visualRow), amount]);\n    this.renderDependentSheets(changes);\n  }\n\n  /**\n   * `afterCreateCol` hook callback.\n   *\n   * @private\n   * @param {number} visualColumn Represents the visual index of first newly created column in the data source.\n   * @param {number} amount Number of newly created columns in the data source.\n   * @param {string} [source] String that identifies source of hook call\n   *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).\n   */\n  onAfterCreateCol(visualColumn, amount, source) {\n    if (isBlockedSource(source)) {\n      return;\n    }\n    const changes = this.engine.addColumns(this.sheetId, [this.columnAxisSyncer.getHfIndexFromVisualIndex(visualColumn), amount]);\n    this.renderDependentSheets(changes);\n  }\n\n  /**\n   * `afterRemoveRow` hook callback.\n   *\n   * @private\n   * @param {number} row Visual index of starter row.\n   * @param {number} amount An amount of removed rows.\n   * @param {number[]} physicalRows An array of physical rows removed from the data source.\n   * @param {string} [source] String that identifies source of hook call\n   *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).\n   */\n  onAfterRemoveRow(row, amount, physicalRows, source) {\n    if (isBlockedSource(source)) {\n      return;\n    }\n    const descendingHfRows = this.rowAxisSyncer.getRemovedHfIndexes().sort().reverse();\n    const changes = this.engine.batch(() => {\n      descendingHfRows.forEach(hfRow => {\n        this.engine.removeRows(this.sheetId, [hfRow, 1]);\n      });\n    });\n    this.renderDependentSheets(changes);\n  }\n\n  /**\n   * `afterRemoveCol` hook callback.\n   *\n   * @private\n   * @param {number} col Visual index of starter column.\n   * @param {number} amount An amount of removed columns.\n   * @param {number[]} physicalColumns An array of physical columns removed from the data source.\n   * @param {string} [source] String that identifies source of hook call\n   *                          ([list of all available sources]{@link https://handsontable.com/docs/javascript-data-grid/events-and-hooks/#handsontable-hooks}).\n   */\n  onAfterRemoveCol(col, amount, physicalColumns, source) {\n    if (isBlockedSource(source)) {\n      return;\n    }\n    const descendingHfColumns = this.columnAxisSyncer.getRemovedHfIndexes().sort().reverse();\n    const changes = this.engine.batch(() => {\n      descendingHfColumns.forEach(hfColumn => {\n        this.engine.removeColumns(this.sheetId, [hfColumn, 1]);\n      });\n    });\n    this.renderDependentSheets(changes);\n  }\n\n  /**\n   * `afterDetachChild` hook callback.\n   * Used to sync the data of the rows detached in the Nested Rows plugin with the engine's dataset.\n   *\n   * @private\n   * @param {object} parent An object representing the parent from which the element was detached.\n   * @param {object} element The detached element.\n   * @param {number} finalElementRowIndex The final row index of the detached element.\n   */\n  onAfterDetachChild(parent, element, finalElementRowIndex) {\n    var _element$__children;\n    _classPrivateFieldSet(this, _internalOperationPending, true);\n    const rowsData = this.hot.getSourceDataArray(finalElementRowIndex, 0, finalElementRowIndex + (((_element$__children = element.__children) === null || _element$__children === void 0 ? void 0 : _element$__children.length) || 0), this.hot.countSourceCols());\n    _classPrivateFieldSet(this, _internalOperationPending, false);\n    rowsData.forEach((row, relativeRowIndex) => {\n      row.forEach((value, colIndex) => {\n        this.engine.setCellContents({\n          col: colIndex,\n          row: finalElementRowIndex + relativeRowIndex,\n          sheet: this.sheetId\n        }, [[value]]);\n      });\n    });\n  }\n\n  /**\n   * Called when a value is updated in the engine.\n   *\n   * @private\n   * @fires Hooks#afterFormulasValuesUpdate\n   * @param {Array} changes The values and location of applied changes.\n   */\n  onEngineValuesUpdated(changes) {\n    this.hot.runHooks('afterFormulasValuesUpdate', changes);\n  }\n\n  /**\n   * Called when a named expression is added to the engine instance.\n   *\n   * @private\n   * @fires Hooks#afterNamedExpressionAdded\n   * @param {string} namedExpressionName The name of the added expression.\n   * @param {Array} changes The values and location of applied changes.\n   */\n  onEngineNamedExpressionsAdded(namedExpressionName, changes) {\n    this.hot.runHooks('afterNamedExpressionAdded', namedExpressionName, changes);\n  }\n\n  /**\n   * Called when a named expression is removed from the engine instance.\n   *\n   * @private\n   * @fires Hooks#afterNamedExpressionRemoved\n   * @param {string} namedExpressionName The name of the removed expression.\n   * @param {Array} changes The values and location of applied changes.\n   */\n  onEngineNamedExpressionsRemoved(namedExpressionName, changes) {\n    this.hot.runHooks('afterNamedExpressionRemoved', namedExpressionName, changes);\n  }\n\n  /**\n   * Called when a new sheet is added to the engine instance.\n   *\n   * @private\n   * @fires Hooks#afterSheetAdded\n   * @param {string} addedSheetDisplayName The name of the added sheet.\n   */\n  onEngineSheetAdded(addedSheetDisplayName) {\n    this.hot.runHooks('afterSheetAdded', addedSheetDisplayName);\n  }\n\n  /**\n   * Called when a sheet in the engine instance is renamed.\n   *\n   * @private\n   * @fires Hooks#afterSheetRenamed\n   * @param {string} oldDisplayName The old name of the sheet.\n   * @param {string} newDisplayName The new name of the sheet.\n   */\n  onEngineSheetRenamed(oldDisplayName, newDisplayName) {\n    this.hot.runHooks('afterSheetRenamed', oldDisplayName, newDisplayName);\n  }\n\n  /**\n   * Called when a sheet is removed from the engine instance.\n   *\n   * @private\n   * @fires Hooks#afterSheetRemoved\n   * @param {string} removedSheetDisplayName The removed sheet name.\n   * @param {Array} changes The values and location of applied changes.\n   */\n  onEngineSheetRemoved(removedSheetDisplayName, changes) {\n    this.hot.runHooks('afterSheetRemoved', removedSheetDisplayName, changes);\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {HiddenColumns} hiddenColumnsPlugin The plugin instance.\n * @returns {object}\n */\nexport default function hideColumnItem(hiddenColumnsPlugin) {\n  return {\n    key: 'hidden_columns_hide',\n    name() {\n      const selection = this.getSelectedLast();\n      let pluralForm = 0;\n      if (Array.isArray(selection)) {\n        const [, fromColumn,, toColumn] = selection;\n        if (fromColumn - toColumn !== 0) {\n          pluralForm = 1;\n        }\n      }\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_HIDE_COLUMN, pluralForm);\n    },\n    callback() {\n      const {\n        from,\n        to\n      } = this.getSelectedRangeLast();\n      const start = Math.max(Math.min(from.col, to.col), 0);\n      const end = Math.max(from.col, to.col);\n      const columnsToHide = [];\n      for (let visualColumn = start; visualColumn <= end; visualColumn += 1) {\n        columnsToHide.push(visualColumn);\n      }\n      hiddenColumnsPlugin.hideColumns(columnsToHide);\n      const lastHiddenColumn = columnsToHide[columnsToHide.length - 1];\n      const columnToSelect = this.columnIndexMapper.getNearestNotHiddenIndex(lastHiddenColumn, 1, true);\n      if (Number.isInteger(columnToSelect) && columnToSelect >= 0) {\n        this.selectColumns(columnToSelect);\n      } else {\n        this.deselectCell();\n      }\n      this.render();\n      this.view.adjustElementsSize(true);\n    },\n    disabled: false,\n    hidden() {\n      return !(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner());\n    }\n  };\n}","import \"core-js/modules/es.array.push.js\";\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {HiddenColumns} hiddenColumnsPlugin The plugin instance.\n * @returns {object}\n */\nexport default function showColumnItem(hiddenColumnsPlugin) {\n  const columns = [];\n  return {\n    key: 'hidden_columns_show',\n    name() {\n      const pluralForm = columns.length > 1 ? 1 : 0;\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_SHOW_COLUMN, pluralForm);\n    },\n    callback() {\n      var _this$columnIndexMapp, _this$columnIndexMapp2;\n      if (columns.length === 0) {\n        return;\n      }\n      let startVisualColumn = columns[0];\n      let endVisualColumn = columns[columns.length - 1];\n\n      // Add to the selection one more visual column on the left.\n      startVisualColumn = (_this$columnIndexMapp = this.columnIndexMapper.getNearestNotHiddenIndex(startVisualColumn - 1, -1)) !== null && _this$columnIndexMapp !== void 0 ? _this$columnIndexMapp : 0;\n      // Add to the selection one more visual column on the right.\n      endVisualColumn = (_this$columnIndexMapp2 = this.columnIndexMapper.getNearestNotHiddenIndex(endVisualColumn + 1, 1)) !== null && _this$columnIndexMapp2 !== void 0 ? _this$columnIndexMapp2 : this.countCols() - 1;\n      hiddenColumnsPlugin.showColumns(columns);\n\n      // We render columns at first. It was needed for getting fixed columns.\n      // Please take a look at #6864 for broader description.\n      this.render();\n      this.view.adjustElementsSize(true);\n      const allColumnsSelected = endVisualColumn - startVisualColumn + 1 === this.countCols();\n\n      // When all headers needs to be selected then do nothing. The header selection is\n      // automatically handled by corner click.\n      if (!allColumnsSelected) {\n        this.selectColumns(startVisualColumn, endVisualColumn);\n      }\n    },\n    disabled: false,\n    hidden() {\n      const hiddenPhysicalColumns = arrayMap(hiddenColumnsPlugin.getHiddenColumns(), visualColumnIndex => {\n        return this.toPhysicalColumn(visualColumnIndex);\n      });\n      if (!(this.selection.isSelectedByColumnHeader() || this.selection.isSelectedByCorner()) || hiddenPhysicalColumns.length < 1) {\n        return true;\n      }\n      columns.length = 0;\n      const selectedRangeLast = this.getSelectedRangeLast();\n      const visualStartColumn = selectedRangeLast.getTopStartCorner().col;\n      const visualEndColumn = selectedRangeLast.getBottomEndCorner().col;\n      const columnIndexMapper = this.columnIndexMapper;\n      const renderableStartColumn = columnIndexMapper.getRenderableFromVisualIndex(visualStartColumn);\n      const renderableEndColumn = columnIndexMapper.getRenderableFromVisualIndex(visualEndColumn);\n      const notTrimmedColumnIndexes = columnIndexMapper.getNotTrimmedIndexes();\n      const physicalColumnIndexes = [];\n      if (visualStartColumn !== visualEndColumn) {\n        const visualColumnsInRange = visualEndColumn - visualStartColumn + 1;\n        const renderedColumnsInRange = renderableEndColumn - renderableStartColumn + 1;\n\n        // Collect not trimmed columns if there are some hidden columns in the selection range.\n        if (visualColumnsInRange > renderedColumnsInRange) {\n          const physicalIndexesInRange = notTrimmedColumnIndexes.slice(visualStartColumn, visualEndColumn + 1);\n          physicalColumnIndexes.push(...physicalIndexesInRange.filter(physicalIndex => hiddenPhysicalColumns.includes(physicalIndex)));\n        }\n\n        // Handled column is the first rendered index and there are some visual indexes before it.\n      } else if (renderableStartColumn === 0 && renderableStartColumn < visualStartColumn) {\n        // not trimmed indexes -> array of mappings from visual (native array's index) to physical indexes (value).\n        physicalColumnIndexes.push(...notTrimmedColumnIndexes.slice(0, visualStartColumn)); // physical indexes\n\n        // When all columns are hidden and the context menu is triggered using top-left corner.\n      } else if (renderableStartColumn === null) {\n        // Show all hidden columns.\n        physicalColumnIndexes.push(...notTrimmedColumnIndexes.slice(0, this.countCols()));\n      } else {\n        const lastVisualIndex = this.countCols() - 1;\n        const lastRenderableIndex = columnIndexMapper.getRenderableFromVisualIndex(columnIndexMapper.getNearestNotHiddenIndex(lastVisualIndex, -1));\n\n        // Handled column is the last rendered index and there are some visual indexes after it.\n        if (renderableEndColumn === lastRenderableIndex && lastVisualIndex > visualEndColumn) {\n          physicalColumnIndexes.push(...notTrimmedColumnIndexes.slice(visualEndColumn + 1));\n        }\n      }\n      arrayEach(physicalColumnIndexes, physicalColumnIndex => {\n        columns.push(this.toVisualColumn(physicalColumnIndex));\n      });\n      return columns.length === 0;\n    }\n  };\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport hideColumnItem from \"./contextMenuItem/hideColumn.mjs\";\nimport showColumnItem from \"./contextMenuItem/showColumn.mjs\";\nimport { HidingMap } from \"../../translations/index.mjs\";\nHooks.getSingleton().register('beforeHideColumns');\nHooks.getSingleton().register('afterHideColumns');\nHooks.getSingleton().register('beforeUnhideColumns');\nHooks.getSingleton().register('afterUnhideColumns');\nexport const PLUGIN_KEY = 'hiddenColumns';\nexport const PLUGIN_PRIORITY = 310;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin HiddenColumns\n * @class HiddenColumns\n *\n * @description\n * The `HiddenColumns` plugin lets you [hide specified columns](@/guides/columns/column-hiding.md).\n *\n * \"Hiding a column\" means that the hidden column doesn't get rendered as a DOM element.\n *\n * The `HiddenColumns` plugin doesn't modify the source data,\n * and doesn't participate in data transformation\n * (the shape of the data returned by the [`getData*()` methods](@/api/core.md#getdata) stays intact).\n *\n * You can set the following configuration options:\n *\n * | Option | Required | Type | Default | Description |\n * |---|---|---|---|---|\n * | `columns` | No | Array | - | [Hides specified columns by default](@/guides/columns/column-hiding.md#step-1-specify-columns-hidden-by-default) |\n * | `indicators` | No | Boolean | `false` | [Shows UI indicators](@/guides/columns/column-hiding.md#step-2-show-ui-indicators) |\n * | `copyPasteEnabled` | No | Boolean | `true` | [Sets up copy/paste behavior](@/guides/columns/column-hiding.md#step-4-set-up-copy-and-paste-behavior) |\n *\n * @example\n *\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   hiddenColumns: {\n *     copyPasteEnabled: true,\n *     indicators: true,\n *     columns: [1, 2, 5]\n *   }\n * });\n *\n * // access the `HiddenColumns` plugin's instance\n * const hiddenColumnsPlugin = hot.getPlugin('hiddenColumns');\n *\n * // hide a single column\n * hiddenColumnsPlugin.hideColumn(1);\n *\n * // hide multiple columns\n * hiddenColumnsPlugin.hideColumn(1, 2, 9);\n *\n * // hide multiple columns as an array\n * hiddenColumnsPlugin.hideColumns([1, 2, 9]);\n *\n * // unhide a single column\n * hiddenColumnsPlugin.showColumn(1);\n *\n * // unhide multiple columns\n * hiddenColumnsPlugin.showColumn(1, 2, 9);\n *\n * // unhide multiple columns as an array\n * hiddenColumnsPlugin.showColumns([1, 2, 9]);\n *\n * // to see your changes, re-render your Handsontable instance\n * hot.render();\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n *   hiddenColumns={{\n *     copyPasteEnabled: true,\n *     indicators: true,\n *     columns: [1, 2, 5]\n *   }}\n * />\n *\n * // access the `HiddenColumns` plugin's instance\n * const hot = hotRef.current.hotInstance;\n * const hiddenColumnsPlugin = hot.getPlugin('hiddenColumns');\n *\n * // hide a single column\n * hiddenColumnsPlugin.hideColumn(1);\n *\n * // hide multiple columns\n * hiddenColumnsPlugin.hideColumn(1, 2, 9);\n *\n * // hide multiple columns as an array\n * hiddenColumnsPlugin.hideColumns([1, 2, 9]);\n *\n * // unhide a single column\n * hiddenColumnsPlugin.showColumn(1);\n *\n * // unhide multiple columns\n * hiddenColumnsPlugin.showColumn(1, 2, 9);\n *\n * // unhide multiple columns as an array\n * hiddenColumnsPlugin.showColumns([1, 2, 9]);\n *\n * // to see your changes, re-render your Handsontable instance\n * hot.render();\n * ```\n * :::\n */\nvar _settings = /*#__PURE__*/new WeakMap();\nvar _hiddenColumnsMap = /*#__PURE__*/new WeakMap();\nexport class HiddenColumns extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Cached plugin settings.\n     *\n     * @private\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _settings, {\n      writable: true,\n      value: {}\n    });\n    /**\n     * Map of hidden columns by the plugin.\n     *\n     * @private\n     * @type {null|HidingMap}\n     */\n    _classPrivateFieldInitSpec(this, _hiddenColumnsMap, {\n      writable: true,\n      value: null\n    });\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link HiddenColumns#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const pluginSettings = this.hot.getSettings()[PLUGIN_KEY];\n    if (isObject(pluginSettings)) {\n      _classPrivateFieldSet(this, _settings, pluginSettings);\n      if (isUndefined(pluginSettings.copyPasteEnabled)) {\n        pluginSettings.copyPasteEnabled = true;\n      }\n    }\n    _classPrivateFieldSet(this, _hiddenColumnsMap, new HidingMap());\n    _classPrivateFieldGet(this, _hiddenColumnsMap).addLocalHook('init', () => this.onMapInit());\n    this.hot.columnIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet(this, _hiddenColumnsMap));\n    this.addHook('afterContextMenuDefaultOptions', function () {\n      return _this.onAfterContextMenuDefaultOptions(...arguments);\n    });\n    this.addHook('afterGetCellMeta', (row, col, cellProperties) => this.onAfterGetCellMeta(row, col, cellProperties));\n    this.addHook('modifyColWidth', (width, col) => this.onModifyColWidth(width, col));\n    this.addHook('afterGetColHeader', function () {\n      return _this.onAfterGetColHeader(...arguments);\n    });\n    this.addHook('modifyCopyableRange', ranges => this.onModifyCopyableRange(ranges));\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`hiddenColumns`](@/api/options.md#hiddencolumns)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.columnIndexMapper.unregisterMap(this.pluginName);\n    _classPrivateFieldSet(this, _settings, {});\n    super.disablePlugin();\n    this.resetCellsMeta();\n  }\n\n  /**\n   * Shows the provided columns.\n   *\n   * @param {number[]} columns Array of visual column indexes.\n   */\n  showColumns(columns) {\n    const currentHideConfig = this.getHiddenColumns();\n    const isValidConfig = this.isValidConfig(columns);\n    let destinationHideConfig = currentHideConfig;\n    const hidingMapValues = _classPrivateFieldGet(this, _hiddenColumnsMap).getValues().slice();\n    const isAnyColumnShowed = columns.length > 0;\n    if (isValidConfig && isAnyColumnShowed) {\n      const physicalColumns = columns.map(visualColumn => this.hot.toPhysicalColumn(visualColumn));\n\n      // Preparing new values for hiding map.\n      arrayEach(physicalColumns, physicalColumn => {\n        hidingMapValues[physicalColumn] = false;\n      });\n\n      // Preparing new hiding config.\n      destinationHideConfig = arrayReduce(hidingMapValues, (hiddenIndexes, isHidden, physicalIndex) => {\n        if (isHidden) {\n          hiddenIndexes.push(this.hot.toVisualColumn(physicalIndex));\n        }\n        return hiddenIndexes;\n      }, []);\n    }\n    const continueHiding = this.hot.runHooks('beforeUnhideColumns', currentHideConfig, destinationHideConfig, isValidConfig && isAnyColumnShowed);\n    if (continueHiding === false) {\n      return;\n    }\n    if (isValidConfig && isAnyColumnShowed) {\n      _classPrivateFieldGet(this, _hiddenColumnsMap).setValues(hidingMapValues);\n    }\n\n    // @TODO Should call once per render cycle, currently fired separately in different plugins\n    this.hot.view.adjustElementsSize();\n    this.hot.runHooks('afterUnhideColumns', currentHideConfig, destinationHideConfig, isValidConfig && isAnyColumnShowed, isValidConfig && destinationHideConfig.length < currentHideConfig.length);\n  }\n\n  /**\n   * Shows a single column.\n   *\n   * @param {...number} column Visual column index.\n   */\n  showColumn() {\n    for (var _len = arguments.length, column = new Array(_len), _key = 0; _key < _len; _key++) {\n      column[_key] = arguments[_key];\n    }\n    this.showColumns(column);\n  }\n\n  /**\n   * Hides the columns provided in the array.\n   *\n   * @param {number[]} columns Array of visual column indexes.\n   */\n  hideColumns(columns) {\n    const currentHideConfig = this.getHiddenColumns();\n    const isConfigValid = this.isValidConfig(columns);\n    let destinationHideConfig = currentHideConfig;\n    if (isConfigValid) {\n      destinationHideConfig = Array.from(new Set(currentHideConfig.concat(columns)));\n    }\n    const continueHiding = this.hot.runHooks('beforeHideColumns', currentHideConfig, destinationHideConfig, isConfigValid);\n    if (continueHiding === false) {\n      return;\n    }\n    if (isConfigValid) {\n      this.hot.batchExecution(() => {\n        arrayEach(columns, visualColumn => {\n          _classPrivateFieldGet(this, _hiddenColumnsMap).setValueAtIndex(this.hot.toPhysicalColumn(visualColumn), true);\n        });\n      }, true);\n    }\n    this.hot.runHooks('afterHideColumns', currentHideConfig, destinationHideConfig, isConfigValid, isConfigValid && destinationHideConfig.length > currentHideConfig.length);\n  }\n\n  /**\n   * Hides a single column.\n   *\n   * @param {...number} column Visual column index.\n   */\n  hideColumn() {\n    for (var _len2 = arguments.length, column = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      column[_key2] = arguments[_key2];\n    }\n    this.hideColumns(column);\n  }\n\n  /**\n   * Returns an array of visual indexes of hidden columns.\n   *\n   * @returns {number[]}\n   */\n  getHiddenColumns() {\n    return arrayMap(_classPrivateFieldGet(this, _hiddenColumnsMap).getHiddenIndexes(), physicalColumnIndex => {\n      return this.hot.toVisualColumn(physicalColumnIndex);\n    });\n  }\n\n  /**\n   * Checks if the provided column is hidden.\n   *\n   * @param {number} column Visual column index.\n   * @returns {boolean}\n   */\n  isHidden(column) {\n    return _classPrivateFieldGet(this, _hiddenColumnsMap).getValueAtIndex(this.hot.toPhysicalColumn(column)) || false;\n  }\n\n  /**\n   * Get if trim config is valid. Check whether all of the provided column indexes are within the bounds of the table.\n   *\n   * @param {Array} hiddenColumns List of hidden column indexes.\n   * @returns {boolean}\n   */\n  isValidConfig(hiddenColumns) {\n    const nrOfColumns = this.hot.countCols();\n    if (Array.isArray(hiddenColumns) && hiddenColumns.length > 0) {\n      return hiddenColumns.every(visualColumn => Number.isInteger(visualColumn) && visualColumn >= 0 && visualColumn < nrOfColumns);\n    }\n    return false;\n  }\n\n  /**\n   * Reset all rendered cells meta.\n   *\n   * @private\n   */\n  resetCellsMeta() {\n    arrayEach(this.hot.getCellsMeta(), meta => {\n      if (meta) {\n        meta.skipColumnOnPaste = false;\n      }\n    });\n  }\n\n  /**\n   * Adds the additional column width for the hidden column indicators.\n   *\n   * @private\n   * @param {number|undefined} width Column width.\n   * @param {number} column Visual column index.\n   * @returns {number}\n   */\n  onModifyColWidth(width, column) {\n    // Hook is triggered internally only for the visible columns. Conditional will be handled for the API\n    // calls of the `getColWidth` function on not visible indexes.\n    if (this.isHidden(column)) {\n      return 0;\n    }\n    if (_classPrivateFieldGet(this, _settings).indicators && (this.isHidden(column + 1) || this.isHidden(column - 1))) {\n      // Add additional space for hidden column indicator.\n      if (typeof width === 'number' && this.hot.hasColHeaders()) {\n        return width + 15;\n      }\n    }\n  }\n\n  /**\n   * Sets the copy-related cell meta.\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {object} cellProperties Object containing the cell properties.\n   */\n  onAfterGetCellMeta(row, column, cellProperties) {\n    if (_classPrivateFieldGet(this, _settings).copyPasteEnabled === false && this.isHidden(column)) {\n      // Cell property handled by the `Autofill` and the `CopyPaste` plugins.\n      cellProperties.skipColumnOnPaste = true;\n    }\n    if (this.isHidden(column - 1)) {\n      cellProperties.className = cellProperties.className || '';\n      if (cellProperties.className.indexOf('afterHiddenColumn') === -1) {\n        cellProperties.className += ' afterHiddenColumn';\n      }\n    } else if (cellProperties.className) {\n      const classArr = cellProperties.className.split(' ');\n      if (classArr.length > 0) {\n        const containAfterHiddenColumn = classArr.indexOf('afterHiddenColumn');\n        if (containAfterHiddenColumn > -1) {\n          classArr.splice(containAfterHiddenColumn, 1);\n        }\n        cellProperties.className = classArr.join(' ');\n      }\n    }\n  }\n\n  /**\n   * Modifies the copyable range, accordingly to the provided config.\n   *\n   * @private\n   * @param {Array} ranges An array of objects defining copyable cells.\n   * @returns {Array}\n   */\n  onModifyCopyableRange(ranges) {\n    // Ranges shouldn't be modified when `copyPasteEnabled` option is set to `true` (by default).\n    if (_classPrivateFieldGet(this, _settings).copyPasteEnabled) {\n      return ranges;\n    }\n    const newRanges = [];\n    const pushRange = (startRow, endRow, startCol, endCol) => {\n      newRanges.push({\n        startRow,\n        endRow,\n        startCol,\n        endCol\n      });\n    };\n    arrayEach(ranges, range => {\n      let isHidden = true;\n      let rangeStart = 0;\n      rangeEach(range.startCol, range.endCol, visualColumn => {\n        if (this.isHidden(visualColumn)) {\n          if (!isHidden) {\n            pushRange(range.startRow, range.endRow, rangeStart, visualColumn - 1);\n          }\n          isHidden = true;\n        } else {\n          if (isHidden) {\n            rangeStart = visualColumn;\n          }\n          if (visualColumn === range.endCol) {\n            pushRange(range.startRow, range.endRow, rangeStart, visualColumn);\n          }\n          isHidden = false;\n        }\n      });\n    });\n    return newRanges;\n  }\n\n  /**\n   * Adds the needed classes to the headers.\n   *\n   * @private\n   * @param {number} column Visual column index.\n   * @param {HTMLElement} TH Header's TH element.\n   */\n  onAfterGetColHeader(column, TH) {\n    if (!_classPrivateFieldGet(this, _settings).indicators || column < 0) {\n      return;\n    }\n    const classList = [];\n    if (column >= 1 && this.isHidden(column - 1)) {\n      classList.push('afterHiddenColumn');\n    }\n    if (column < this.hot.countCols() - 1 && this.isHidden(column + 1)) {\n      classList.push('beforeHiddenColumn');\n    }\n    addClass(TH, classList);\n  }\n\n  /**\n   * Add Show-hide columns to context menu.\n   *\n   * @private\n   * @param {object} options An array of objects containing information about the pre-defined Context Menu items.\n   */\n  onAfterContextMenuDefaultOptions(options) {\n    options.items.push({\n      name: SEPARATOR\n    }, hideColumnItem(this), showColumnItem(this));\n  }\n\n  /**\n   * On map initialized hook callback.\n   *\n   * @private\n   */\n  onMapInit() {\n    if (Array.isArray(_classPrivateFieldGet(this, _settings).columns)) {\n      this.hideColumns(_classPrivateFieldGet(this, _settings).columns);\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldSet(this, _settings, null);\n    _classPrivateFieldSet(this, _hiddenColumnsMap, null);\n    super.destroy();\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {HiddenRows} hiddenRowsPlugin The plugin instance.\n * @returns {object}\n */\nexport default function hideRowItem(hiddenRowsPlugin) {\n  return {\n    key: 'hidden_rows_hide',\n    name() {\n      const selection = this.getSelectedLast();\n      let pluralForm = 0;\n      if (Array.isArray(selection)) {\n        const [fromRow,, toRow] = selection;\n        if (fromRow - toRow !== 0) {\n          pluralForm = 1;\n        }\n      }\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_HIDE_ROW, pluralForm);\n    },\n    callback() {\n      const {\n        from,\n        to\n      } = this.getSelectedRangeLast();\n      const start = Math.max(Math.min(from.row, to.row), 0);\n      const end = Math.max(from.row, to.row);\n      const rowsToHide = [];\n      for (let visualRow = start; visualRow <= end; visualRow += 1) {\n        rowsToHide.push(visualRow);\n      }\n      hiddenRowsPlugin.hideRows(rowsToHide);\n      const lastHiddenRow = rowsToHide[rowsToHide.length - 1];\n      const rowToSelect = this.rowIndexMapper.getNearestNotHiddenIndex(lastHiddenRow, 1, true);\n      if (Number.isInteger(rowToSelect) && rowToSelect >= 0) {\n        this.selectRows(rowToSelect);\n      } else {\n        this.deselectCell();\n      }\n      this.render();\n      this.view.adjustElementsSize(true);\n    },\n    disabled: false,\n    hidden() {\n      return !(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner());\n    }\n  };\n}","import \"core-js/modules/es.array.push.js\";\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {HiddenRows} hiddenRowsPlugin The plugin instance.\n * @returns {object}\n */\nexport default function showRowItem(hiddenRowsPlugin) {\n  const rows = [];\n  return {\n    key: 'hidden_rows_show',\n    name() {\n      const pluralForm = rows.length > 1 ? 1 : 0;\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_SHOW_ROW, pluralForm);\n    },\n    callback() {\n      var _this$rowIndexMapper$, _this$rowIndexMapper$2;\n      if (rows.length === 0) {\n        return;\n      }\n      let startVisualRow = rows[0];\n      let endVisualRow = rows[rows.length - 1];\n\n      // Add to the selection one more visual row on the top.\n      startVisualRow = (_this$rowIndexMapper$ = this.rowIndexMapper.getNearestNotHiddenIndex(startVisualRow - 1, -1)) !== null && _this$rowIndexMapper$ !== void 0 ? _this$rowIndexMapper$ : 0;\n      // Add to the selection one more visual row on the bottom.\n      endVisualRow = (_this$rowIndexMapper$2 = this.rowIndexMapper.getNearestNotHiddenIndex(endVisualRow + 1, 1)) !== null && _this$rowIndexMapper$2 !== void 0 ? _this$rowIndexMapper$2 : this.countRows() - 1;\n      hiddenRowsPlugin.showRows(rows);\n\n      // We render rows at first. It was needed for getting fixed rows.\n      // Please take a look at #6864 for broader description.\n      this.render();\n      this.view.adjustElementsSize(true);\n      const allRowsSelected = endVisualRow - startVisualRow + 1 === this.countRows();\n\n      // When all headers needs to be selected then do nothing. The header selection is\n      // automatically handled by corner click.\n      if (!allRowsSelected) {\n        this.selectRows(startVisualRow, endVisualRow);\n      }\n    },\n    disabled: false,\n    hidden() {\n      const hiddenPhysicalRows = arrayMap(hiddenRowsPlugin.getHiddenRows(), visualRowIndex => {\n        return this.toPhysicalRow(visualRowIndex);\n      });\n      if (!(this.selection.isSelectedByRowHeader() || this.selection.isSelectedByCorner()) || hiddenPhysicalRows.length < 1) {\n        return true;\n      }\n      rows.length = 0;\n      const selectedRangeLast = this.getSelectedRangeLast();\n      const visualStartRow = selectedRangeLast.getTopStartCorner().row;\n      const visualEndRow = selectedRangeLast.getBottomEndCorner().row;\n      const rowIndexMapper = this.rowIndexMapper;\n      const renderableStartRow = rowIndexMapper.getRenderableFromVisualIndex(visualStartRow);\n      const renderableEndRow = rowIndexMapper.getRenderableFromVisualIndex(visualEndRow);\n      const notTrimmedRowIndexes = rowIndexMapper.getNotTrimmedIndexes();\n      const physicalRowIndexes = [];\n      if (visualStartRow !== visualEndRow) {\n        const visualRowsInRange = visualEndRow - visualStartRow + 1;\n        const renderedRowsInRange = renderableEndRow - renderableStartRow + 1;\n\n        // Collect not trimmed rows if there are some hidden rows in the selection range.\n        if (visualRowsInRange > renderedRowsInRange) {\n          const physicalIndexesInRange = notTrimmedRowIndexes.slice(visualStartRow, visualEndRow + 1);\n          physicalRowIndexes.push(...physicalIndexesInRange.filter(physicalIndex => hiddenPhysicalRows.includes(physicalIndex)));\n        }\n\n        // Handled row is the first rendered index and there are some visual indexes before it.\n      } else if (renderableStartRow === 0 && renderableStartRow < visualStartRow) {\n        // not trimmed indexes -> array of mappings from visual (native array's index) to physical indexes (value).\n        physicalRowIndexes.push(...notTrimmedRowIndexes.slice(0, visualStartRow)); // physical indexes\n\n        // When all rows are hidden and the context menu is triggered using top-left corner.\n      } else if (renderableStartRow === null) {\n        // Show all hidden rows.\n        physicalRowIndexes.push(...notTrimmedRowIndexes.slice(0, this.countRows()));\n      } else {\n        const lastVisualIndex = this.countRows() - 1;\n        const lastRenderableIndex = rowIndexMapper.getRenderableFromVisualIndex(rowIndexMapper.getNearestNotHiddenIndex(lastVisualIndex, -1));\n\n        // Handled row is the last rendered index and there are some visual indexes after it.\n        if (renderableEndRow === lastRenderableIndex && lastVisualIndex > visualEndRow) {\n          physicalRowIndexes.push(...notTrimmedRowIndexes.slice(visualEndRow + 1));\n        }\n      }\n      arrayEach(physicalRowIndexes, physicalRowIndex => {\n        rows.push(this.toVisualRow(physicalRowIndex));\n      });\n      return rows.length === 0;\n    }\n  };\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { arrayEach, arrayMap, arrayReduce } from \"../../helpers/array.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nimport { SEPARATOR } from \"../contextMenu/predefinedItems/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport hideRowItem from \"./contextMenuItem/hideRow.mjs\";\nimport showRowItem from \"./contextMenuItem/showRow.mjs\";\nimport { HidingMap } from \"../../translations/index.mjs\";\nHooks.getSingleton().register('beforeHideRows');\nHooks.getSingleton().register('afterHideRows');\nHooks.getSingleton().register('beforeUnhideRows');\nHooks.getSingleton().register('afterUnhideRows');\nexport const PLUGIN_KEY = 'hiddenRows';\nexport const PLUGIN_PRIORITY = 320;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin HiddenRows\n * @class HiddenRows\n *\n * @description\n * The `HiddenRows` plugin lets you [hide specified rows](@/guides/rows/row-hiding.md).\n *\n * \"Hiding a row\" means that the hidden row doesn't get rendered as a DOM element.\n *\n * The `HiddenRows` plugin doesn't modify the source data,\n * and doesn't participate in data transformation\n * (the shape of the data returned by the [`getData*()` methods](@/api/core.md#getdata) stays intact).\n *\n * You can set the following configuration options:\n *\n * | Option | Required | Type | Default | Description |\n * |---|---|---|---|---|\n * | `rows` | No | Array | - | [Hides specified rows by default](@/guides/rows/row-hiding.md#step-1-specify-rows-hidden-by-default) |\n * | `indicators` | No | Boolean | `false` | [Shows UI indicators](@/guides/rows/row-hiding.md#step-2-show-ui-indicators) |\n * | `copyPasteEnabled` | No | Boolean | `true` | [Sets up copy/paste behavior](@/guides/rows/row-hiding.md#step-4-set-up-copy-and-paste-behavior) |\n *\n * @example\n *\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   hiddenRows: {\n *     copyPasteEnabled: true,\n *     indicators: true,\n *     rows: [1, 2, 5]\n *   }\n * });\n *\n * // access the `HiddenRows` plugin's instance\n * const hiddenRowsPlugin = hot.getPlugin('hiddenRows');\n *\n * // hide a single row\n * hiddenRowsPlugin.hideRow(1);\n *\n * // hide multiple rows\n * hiddenRowsPlugin.hideRow(1, 2, 9);\n *\n * // hide multiple rows as an array\n * hiddenRowsPlugin.hideRows([1, 2, 9]);\n *\n * // unhide a single row\n * hiddenRowsPlugin.showRow(1);\n *\n * // unhide multiple rows\n * hiddenRowsPlugin.showRow(1, 2, 9);\n *\n * // unhide multiple rows as an array\n * hiddenRowsPlugin.showRows([1, 2, 9]);\n *\n * // to see your changes, re-render your Handsontable instance\n * hot.render();\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n *   hiddenRows={{\n *     copyPasteEnabled: true,\n *     indicators: true,\n *     rows: [1, 2, 5]\n *   }}\n * />\n *\n * // access the `HiddenRows` plugin's instance\n * const hot = hotRef.current.hotInstance;\n * const hiddenRowsPlugin = hot.getPlugin('hiddenRows');\n *\n * // hide a single row\n * hiddenRowsPlugin.hideRow(1);\n *\n * // hide multiple rows\n * hiddenRowsPlugin.hideRow(1, 2, 9);\n *\n * // hide multiple rows as an array\n * hiddenRowsPlugin.hideRows([1, 2, 9]);\n *\n * // unhide a single row\n * hiddenRowsPlugin.showRow(1);\n *\n * // unhide multiple rows\n * hiddenRowsPlugin.showRow(1, 2, 9);\n *\n * // unhide multiple rows as an array\n * hiddenRowsPlugin.showRows([1, 2, 9]);\n *\n * // to see your changes, re-render your Handsontable instance\n * hot.render();\n * ```\n * :::\n */\nvar _settings = /*#__PURE__*/new WeakMap();\nvar _hiddenRowsMap = /*#__PURE__*/new WeakMap();\nexport class HiddenRows extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * Cached settings from Handsontable settings.\n     *\n     * @private\n     * @type {object}\n     */\n    _classPrivateFieldInitSpec(this, _settings, {\n      writable: true,\n      value: {}\n    });\n    /**\n     * Map of hidden rows by the plugin.\n     *\n     * @private\n     * @type {HidingMap|null}\n     */\n    _classPrivateFieldInitSpec(this, _hiddenRowsMap, {\n      writable: true,\n      value: null\n    });\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link HiddenRows#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const pluginSettings = this.hot.getSettings()[PLUGIN_KEY];\n    if (isObject(pluginSettings)) {\n      _classPrivateFieldSet(this, _settings, pluginSettings);\n      if (isUndefined(pluginSettings.copyPasteEnabled)) {\n        pluginSettings.copyPasteEnabled = true;\n      }\n    }\n    _classPrivateFieldSet(this, _hiddenRowsMap, new HidingMap());\n    _classPrivateFieldGet(this, _hiddenRowsMap).addLocalHook('init', () => this.onMapInit());\n    this.hot.rowIndexMapper.registerMap(this.pluginName, _classPrivateFieldGet(this, _hiddenRowsMap));\n    this.addHook('afterContextMenuDefaultOptions', function () {\n      return _this.onAfterContextMenuDefaultOptions(...arguments);\n    });\n    this.addHook('afterGetCellMeta', (row, col, cellProperties) => this.onAfterGetCellMeta(row, col, cellProperties));\n    this.addHook('modifyRowHeight', (height, row) => this.onModifyRowHeight(height, row));\n    this.addHook('afterGetRowHeader', function () {\n      return _this.onAfterGetRowHeader(...arguments);\n    });\n    this.addHook('modifyCopyableRange', ranges => this.onModifyCopyableRange(ranges));\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`hiddenRows`](@/api/options.md#hiddenrows)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.rowIndexMapper.unregisterMap(this.pluginName);\n    _classPrivateFieldSet(this, _settings, {});\n    super.disablePlugin();\n    this.resetCellsMeta();\n  }\n\n  /**\n   * Shows the rows provided in the array.\n   *\n   * @param {number[]} rows Array of visual row indexes.\n   */\n  showRows(rows) {\n    const currentHideConfig = this.getHiddenRows();\n    const isValidConfig = this.isValidConfig(rows);\n    let destinationHideConfig = currentHideConfig;\n    const hidingMapValues = _classPrivateFieldGet(this, _hiddenRowsMap).getValues().slice();\n    const isAnyRowShowed = rows.length > 0;\n    if (isValidConfig && isAnyRowShowed) {\n      const physicalRows = rows.map(visualRow => this.hot.toPhysicalRow(visualRow));\n\n      // Preparing new values for hiding map.\n      arrayEach(physicalRows, physicalRow => {\n        hidingMapValues[physicalRow] = false;\n      });\n\n      // Preparing new hiding config.\n      destinationHideConfig = arrayReduce(hidingMapValues, (hiddenIndexes, isHidden, physicalIndex) => {\n        if (isHidden) {\n          hiddenIndexes.push(this.hot.toVisualRow(physicalIndex));\n        }\n        return hiddenIndexes;\n      }, []);\n    }\n    const continueHiding = this.hot.runHooks('beforeUnhideRows', currentHideConfig, destinationHideConfig, isValidConfig && isAnyRowShowed);\n    if (continueHiding === false) {\n      return;\n    }\n    if (isValidConfig && isAnyRowShowed) {\n      _classPrivateFieldGet(this, _hiddenRowsMap).setValues(hidingMapValues);\n    }\n    this.hot.runHooks('afterUnhideRows', currentHideConfig, destinationHideConfig, isValidConfig && isAnyRowShowed, isValidConfig && destinationHideConfig.length < currentHideConfig.length);\n  }\n\n  /**\n   * Shows the row provided as row index (counting from 0).\n   *\n   * @param {...number} row Visual row index.\n   */\n  showRow() {\n    for (var _len = arguments.length, row = new Array(_len), _key = 0; _key < _len; _key++) {\n      row[_key] = arguments[_key];\n    }\n    this.showRows(row);\n  }\n\n  /**\n   * Hides the rows provided in the array.\n   *\n   * @param {number[]} rows Array of visual row indexes.\n   */\n  hideRows(rows) {\n    const currentHideConfig = this.getHiddenRows();\n    const isConfigValid = this.isValidConfig(rows);\n    let destinationHideConfig = currentHideConfig;\n    if (isConfigValid) {\n      destinationHideConfig = Array.from(new Set(currentHideConfig.concat(rows)));\n    }\n    const continueHiding = this.hot.runHooks('beforeHideRows', currentHideConfig, destinationHideConfig, isConfigValid);\n    if (continueHiding === false) {\n      return;\n    }\n    if (isConfigValid) {\n      this.hot.batchExecution(() => {\n        arrayEach(rows, visualRow => {\n          _classPrivateFieldGet(this, _hiddenRowsMap).setValueAtIndex(this.hot.toPhysicalRow(visualRow), true);\n        });\n      }, true);\n    }\n    this.hot.runHooks('afterHideRows', currentHideConfig, destinationHideConfig, isConfigValid, isConfigValid && destinationHideConfig.length > currentHideConfig.length);\n  }\n\n  /**\n   * Hides the row provided as row index (counting from 0).\n   *\n   * @param {...number} row Visual row index.\n   */\n  hideRow() {\n    for (var _len2 = arguments.length, row = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      row[_key2] = arguments[_key2];\n    }\n    this.hideRows(row);\n  }\n\n  /**\n   * Returns an array of visual indexes of hidden rows.\n   *\n   * @returns {number[]}\n   */\n  getHiddenRows() {\n    return arrayMap(_classPrivateFieldGet(this, _hiddenRowsMap).getHiddenIndexes(), physicalRowIndex => {\n      return this.hot.toVisualRow(physicalRowIndex);\n    });\n  }\n\n  /**\n   * Checks if the provided row is hidden.\n   *\n   * @param {number} row Visual row index.\n   * @returns {boolean}\n   */\n  isHidden(row) {\n    return _classPrivateFieldGet(this, _hiddenRowsMap).getValueAtIndex(this.hot.toPhysicalRow(row)) || false;\n  }\n\n  /**\n   * Checks whether all of the provided row indexes are within the bounds of the table.\n   *\n   * @param {Array} hiddenRows List of hidden visual row indexes.\n   * @returns {boolean}\n   */\n  isValidConfig(hiddenRows) {\n    const nrOfRows = this.hot.countRows();\n    if (Array.isArray(hiddenRows) && hiddenRows.length > 0) {\n      return hiddenRows.every(visualRow => Number.isInteger(visualRow) && visualRow >= 0 && visualRow < nrOfRows);\n    }\n    return false;\n  }\n\n  /**\n   * Resets all rendered cells meta.\n   *\n   * @private\n   */\n  resetCellsMeta() {\n    arrayEach(this.hot.getCellsMeta(), meta => {\n      if (meta) {\n        meta.skipRowOnPaste = false;\n      }\n    });\n  }\n\n  /**\n   * Adds the additional row height for the hidden row indicators.\n   *\n   * @private\n   * @param {number|undefined} height Row height.\n   * @param {number} row Visual row index.\n   * @returns {number}\n   */\n  onModifyRowHeight(height, row) {\n    // Hook is triggered internally only for the visible rows. Conditional will be handled for the API\n    // calls of the `getRowHeight` function on not visible indexes.\n    if (this.isHidden(row)) {\n      return 0;\n    }\n    return height;\n  }\n\n  /**\n   * Sets the copy-related cell meta.\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @param {object} cellProperties Object containing the cell properties.\n   */\n  onAfterGetCellMeta(row, column, cellProperties) {\n    if (_classPrivateFieldGet(this, _settings).copyPasteEnabled === false && this.isHidden(row)) {\n      // Cell property handled by the `Autofill` and the `CopyPaste` plugins.\n      cellProperties.skipRowOnPaste = true;\n    }\n    if (this.isHidden(row - 1)) {\n      cellProperties.className = cellProperties.className || '';\n      if (cellProperties.className.indexOf('afterHiddenRow') === -1) {\n        cellProperties.className += ' afterHiddenRow';\n      }\n    } else if (cellProperties.className) {\n      const classArr = cellProperties.className.split(' ');\n      if (classArr.length > 0) {\n        const containAfterHiddenRow = classArr.indexOf('afterHiddenRow');\n        if (containAfterHiddenRow > -1) {\n          classArr.splice(containAfterHiddenRow, 1);\n        }\n        cellProperties.className = classArr.join(' ');\n      }\n    }\n  }\n\n  /**\n   * Modifies the copyable range, accordingly to the provided config.\n   *\n   * @private\n   * @param {Array} ranges An array of objects defining copyable cells.\n   * @returns {Array}\n   */\n  onModifyCopyableRange(ranges) {\n    // Ranges shouldn't be modified when `copyPasteEnabled` option is set to `true` (by default).\n    if (_classPrivateFieldGet(this, _settings).copyPasteEnabled) {\n      return ranges;\n    }\n    const newRanges = [];\n    const pushRange = (startRow, endRow, startCol, endCol) => {\n      newRanges.push({\n        startRow,\n        endRow,\n        startCol,\n        endCol\n      });\n    };\n    arrayEach(ranges, range => {\n      let isHidden = true;\n      let rangeStart = 0;\n      rangeEach(range.startRow, range.endRow, visualRow => {\n        if (this.isHidden(visualRow)) {\n          if (!isHidden) {\n            pushRange(rangeStart, visualRow - 1, range.startCol, range.endCol);\n          }\n          isHidden = true;\n        } else {\n          if (isHidden) {\n            rangeStart = visualRow;\n          }\n          if (visualRow === range.endRow) {\n            pushRange(rangeStart, visualRow, range.startCol, range.endCol);\n          }\n          isHidden = false;\n        }\n      });\n    });\n    return newRanges;\n  }\n\n  /**\n   * Adds the needed classes to the headers.\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @param {HTMLElement} TH Header's TH element.\n   */\n  onAfterGetRowHeader(row, TH) {\n    if (!_classPrivateFieldGet(this, _settings).indicators || row < 0) {\n      return;\n    }\n    const classList = [];\n    if (row >= 1 && this.isHidden(row - 1)) {\n      classList.push('afterHiddenRow');\n    }\n    if (row < this.hot.countRows() - 1 && this.isHidden(row + 1)) {\n      classList.push('beforeHiddenRow');\n    }\n    addClass(TH, classList);\n  }\n\n  /**\n   * Add Show-hide rows to context menu.\n   *\n   * @private\n   * @param {object} options An array of objects containing information about the pre-defined Context Menu items.\n   */\n  onAfterContextMenuDefaultOptions(options) {\n    options.items.push({\n      name: SEPARATOR\n    }, hideRowItem(this), showRowItem(this));\n  }\n\n  /**\n   * On map initialized hook callback.\n   *\n   * @private\n   */\n  onMapInit() {\n    if (Array.isArray(_classPrivateFieldGet(this, _settings).rows)) {\n      this.hideRows(_classPrivateFieldGet(this, _settings).rows);\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldSet(this, _settings, null);\n    _classPrivateFieldSet(this, _hiddenRowsMap, null);\n    super.destroy();\n  }\n}","import * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {ManualColumnFreeze} manualColumnFreezePlugin The plugin instance.\n * @returns {object}\n */\nexport default function freezeColumnItem(manualColumnFreezePlugin) {\n  return {\n    key: 'freeze_column',\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_FREEZE_COLUMN);\n    },\n    callback(key, selected) {\n      const [{\n        start: {\n          col: selectedColumn\n        }\n      }] = selected;\n      manualColumnFreezePlugin.freezeColumn(selectedColumn);\n      this.render();\n      this.view.adjustElementsSize(true);\n    },\n    hidden() {\n      const selection = this.getSelectedRange();\n      let hide = false;\n      if (selection === void 0) {\n        hide = true;\n      } else if (selection.length > 1) {\n        hide = true;\n      } else if (selection[0].from.col !== selection[0].to.col || selection[0].from.col <= this.getSettings().fixedColumnsStart - 1) {\n        hide = true;\n      }\n      return hide;\n    }\n  };\n}","import * as C from \"../../../i18n/constants.mjs\";\n/**\n * @param {ManualColumnFreeze} manualColumnFreezePlugin The plugin instance.\n * @returns {object}\n */\nexport default function unfreezeColumnItem(manualColumnFreezePlugin) {\n  return {\n    key: 'unfreeze_column',\n    name() {\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_UNFREEZE_COLUMN);\n    },\n    callback(key, selected) {\n      const [{\n        start: {\n          col: selectedColumn\n        }\n      }] = selected;\n      manualColumnFreezePlugin.unfreezeColumn(selectedColumn);\n      this.render();\n      this.view.adjustElementsSize(true);\n    },\n    hidden() {\n      const selection = this.getSelectedRange();\n      let hide = false;\n      if (selection === void 0) {\n        hide = true;\n      } else if (selection.length > 1) {\n        hide = true;\n      } else if (selection[0].from.col !== selection[0].to.col || selection[0].from.col >= this.getSettings().fixedColumnsStart) {\n        hide = true;\n      }\n      return hide;\n    }\n  };\n}","import \"core-js/modules/es.array.push.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport freezeColumnItem from \"./contextMenuItem/freezeColumn.mjs\";\nimport unfreezeColumnItem from \"./contextMenuItem/unfreezeColumn.mjs\";\nHooks.getSingleton().register('beforeColumnFreeze');\nHooks.getSingleton().register('afterColumnFreeze');\nHooks.getSingleton().register('beforeColumnUnfreeze');\nHooks.getSingleton().register('afterColumnUnfreeze');\nexport const PLUGIN_KEY = 'manualColumnFreeze';\nexport const PLUGIN_PRIORITY = 110;\nconst privatePool = new WeakMap();\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualColumnFreeze\n * @class ManualColumnFreeze\n *\n * @description\n * This plugin allows to manually \"freeze\" and \"unfreeze\" a column using an entry in the Context Menu or using API.\n * You can turn it on by setting a {@link Options#manualColumnFreeze} property to `true`.\n *\n * @example\n * ```js\n * // Enables the plugin\n * manualColumnFreeze: true,\n * ```\n */\nexport class ManualColumnFreeze extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    privatePool.set(this, {\n      afterFirstUse: false\n    });\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualColumnFreeze#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    this.addHook('afterContextMenuDefaultOptions', options => this.addContextMenuEntry(options));\n    this.addHook('beforeColumnMove', (columns, finalIndex) => this.onBeforeColumnMove(columns, finalIndex));\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    const priv = privatePool.get(this);\n    priv.afterFirstUse = false;\n    super.disablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualColumnFreeze`](@/api/options.md#manualcolumnfreeze)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Freezes the specified column (adds it to fixed columns).\n   *\n   * `freezeColumn()` doesn't re-render the table,\n   * so you need to call the `render()` method afterward.\n   *\n   * @param {number} column Visual column index.\n   */\n  freezeColumn(column) {\n    const priv = privatePool.get(this);\n    const settings = this.hot.getSettings();\n    // columns are already fixed (frozen)\n    const freezePerformed = settings.fixedColumnsStart < this.hot.countCols() && column > settings.fixedColumnsStart - 1;\n    if (!priv.afterFirstUse) {\n      priv.afterFirstUse = true;\n    }\n    const beforeColumnFreezeHook = this.hot.runHooks('beforeColumnFreeze', column, freezePerformed);\n    if (beforeColumnFreezeHook === false) {\n      return;\n    }\n    if (freezePerformed) {\n      this.hot.columnIndexMapper.moveIndexes(column, settings.fixedColumnsStart);\n\n      // Since 12.0.0, the \"fixedColumnsLeft\" is replaced with the \"fixedColumnsStart\" option.\n      // However, keeping the old name still in effect. When both option names are used together,\n      // the error is thrown. To prevent that, the plugin needs to modify the original option key\n      // to bypass the validation.\n      settings._fixedColumnsStart += 1;\n    }\n    this.hot.runHooks('afterColumnFreeze', column, freezePerformed);\n  }\n\n  /**\n   * Unfreezes the given column (remove it from fixed columns and bring to it's previous position).\n   *\n   * @param {number} column Visual column index.\n   */\n  unfreezeColumn(column) {\n    const priv = privatePool.get(this);\n    const settings = this.hot.getSettings();\n    // columns are not fixed (not frozen)\n    const unfreezePerformed = settings.fixedColumnsStart > 0 && column <= settings.fixedColumnsStart - 1;\n    if (!priv.afterFirstUse) {\n      priv.afterFirstUse = true;\n    }\n    const beforeColumnUnfreezeHook = this.hot.runHooks('beforeColumnUnfreeze', column, unfreezePerformed);\n    if (beforeColumnUnfreezeHook === false) {\n      return;\n    }\n    if (unfreezePerformed) {\n      // Since 12.0.0, the \"fixedColumnsLeft\" is replaced with the \"fixedColumnsStart\" option.\n      // However, keeping the old name still in effect. When both option names are used together,\n      // the error is thrown. To prevent that, the plugin needs to modify the original option key\n      // to bypass the validation.\n      settings._fixedColumnsStart -= 1;\n      this.hot.columnIndexMapper.moveIndexes(column, settings.fixedColumnsStart);\n    }\n    this.hot.runHooks('afterColumnUnfreeze', column, unfreezePerformed);\n  }\n\n  /**\n   * Adds the manualColumnFreeze context menu entries.\n   *\n   * @private\n   * @param {object} options Context menu options.\n   */\n  addContextMenuEntry(options) {\n    options.items.push({\n      name: '---------'\n    }, freezeColumnItem(this), unfreezeColumnItem(this));\n  }\n\n  /**\n   * Prevents moving the columns from/to fixed area.\n   *\n   * @private\n   * @param {Array} columns Array of visual column indexes to be moved.\n   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.\n   * @returns {boolean|undefined}\n   */\n  onBeforeColumnMove(columns, finalIndex) {\n    const priv = privatePool.get(this);\n    if (priv.afterFirstUse) {\n      const freezeLine = this.hot.getSettings().fixedColumnsStart;\n\n      // Moving any column before the \"freeze line\" isn't possible.\n      if (finalIndex < freezeLine) {\n        return false;\n      }\n\n      // Moving frozen column isn't possible.\n      if (columns.some(column => column < freezeLine)) {\n        return false;\n      }\n    }\n  }\n}","import { isNumeric } from \"../../../helpers/number.mjs\";\nimport { toUpperCaseFirst } from \"../../../helpers/string.mjs\";\nconst STATE_INITIALIZED = 0;\nconst STATE_BUILT = 1;\nconst STATE_APPENDED = 2;\nconst UNIT = 'px';\n\n/**\n * @class\n * @private\n */\nclass BaseUI {\n  constructor(hotInstance) {\n    /**\n     * Instance of Handsontable.\n     *\n     * @type {Core}\n     */\n    this.hot = hotInstance;\n    /**\n     * DOM element representing the ui element.\n     *\n     * @type {HTMLElement}\n     * @private\n     */\n    this._element = null;\n    /**\n     * Flag which determines build state of element.\n     *\n     * @type {number}\n     */\n    this.state = STATE_INITIALIZED;\n    /**\n     * Defines the \"start\" physical CSS property name used within the class depending on what document\n     * layout direction the library runs.\n     *\n     * @type {string}\n     */\n    this.inlineProperty = hotInstance.isRtl() ? 'right' : 'left';\n  }\n\n  /**\n   * Add created UI elements to table.\n   *\n   * @param {HTMLElement} wrapper Element which are parent for our UI element.\n   */\n  appendTo(wrapper) {\n    wrapper.appendChild(this._element);\n    this.state = STATE_APPENDED;\n  }\n\n  /**\n   * Method for create UI element. Only create, without append to table.\n   */\n  build() {\n    if (this.state !== STATE_INITIALIZED) {\n      return;\n    }\n    this._element = this.hot.rootDocument.createElement('div');\n    this.state = STATE_BUILT;\n  }\n\n  /**\n   * Method for remove UI element.\n   */\n  destroy() {\n    if (this.isAppended()) {\n      this._element.parentElement.removeChild(this._element);\n    }\n    this._element = null;\n    this.state = STATE_INITIALIZED;\n  }\n\n  /**\n   * Check if UI element are appended.\n   *\n   * @returns {boolean}\n   */\n  isAppended() {\n    return this.state === STATE_APPENDED;\n  }\n\n  /**\n   * Check if UI element are built.\n   *\n   * @returns {boolean}\n   */\n  isBuilt() {\n    return this.state >= STATE_BUILT;\n  }\n\n  /**\n   * Setter for position.\n   *\n   * @param {number} top New top position of the element.\n   * @param {number} inlinePosition New left/right (depends on LTR/RTL document mode) position of the element.\n   */\n  setPosition(top, inlinePosition) {\n    if (isNumeric(top)) {\n      this._element.style.top = top + UNIT;\n    }\n    if (isNumeric(inlinePosition)) {\n      this._element.style[this.inlineProperty] = inlinePosition + UNIT;\n    }\n  }\n\n  /**\n   * Getter for the element position.\n   *\n   * @returns {object} Object contains left and top position of the element.\n   */\n  getPosition() {\n    const style = this._element.style;\n    return {\n      top: style.top ? parseInt(style.top, 10) : 0,\n      start: style[this.inlineProperty] ? parseInt(style[this.inlineProperty], 10) : 0\n    };\n  }\n\n  /**\n   * Setter for the element size.\n   *\n   * @param {number} width New width of the element.\n   * @param {number} height New height of the element.\n   */\n  setSize(width, height) {\n    if (isNumeric(width)) {\n      this._element.style.width = width + UNIT;\n    }\n    if (isNumeric(height)) {\n      this._element.style.height = height + UNIT;\n    }\n  }\n\n  /**\n   * Getter for the element position.\n   *\n   * @returns {object} Object contains height and width of the element.\n   */\n  getSize() {\n    return {\n      width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,\n      height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0\n    };\n  }\n\n  /**\n   * Setter for the element offset. Offset means marginTop and marginLeft of the element.\n   *\n   * @param {number} top New margin top of the element.\n   * @param {number} inlineOffset New margin left/right (depends on LTR/RTL document mode) of the element.\n   */\n  setOffset(top, inlineOffset) {\n    if (isNumeric(top)) {\n      this._element.style.marginTop = top + UNIT;\n    }\n    if (isNumeric(inlineOffset)) {\n      this._element.style[`margin${toUpperCaseFirst(this.inlineProperty)}`] = inlineOffset + UNIT;\n    }\n  }\n\n  /**\n   * Getter for the element offset.\n   *\n   * @returns {object} Object contains top and left offset of the element.\n   */\n  getOffset() {\n    const style = this._element.style;\n    const inlineProp = `margin${toUpperCaseFirst(this.inlineProperty)}`;\n    return {\n      top: style.marginTop ? parseInt(style.marginTop, 10) : 0,\n      start: style[inlineProp] ? parseInt(style[inlineProp], 10) : 0\n    };\n  }\n}\nexport default BaseUI;","import BaseUI from \"./_base.mjs\";\nimport { addClass } from \"../../../helpers/dom/element.mjs\";\nconst CSS_CLASSNAME = 'ht__manualColumnMove--backlight';\n\n/**\n * @class BacklightUI\n * @util\n */\nclass BacklightUI extends BaseUI {\n  /**\n   * Custom className on build process.\n   */\n  build() {\n    super.build();\n    addClass(this._element, CSS_CLASSNAME);\n  }\n}\nexport default BacklightUI;","import BaseUI from \"./_base.mjs\";\nimport { addClass } from \"../../../helpers/dom/element.mjs\";\nconst CSS_CLASSNAME = 'ht__manualColumnMove--guideline';\n\n/**\n * @class GuidelineUI\n * @util\n */\nclass GuidelineUI extends BaseUI {\n  /**\n   * Custom className on build process.\n   */\n  build() {\n    super.build();\n    addClass(this._element, CSS_CLASSNAME);\n  }\n}\nexport default GuidelineUI;","import \"core-js/modules/es.array.push.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { arrayReduce } from \"../../helpers/array.mjs\";\nimport { addClass, removeClass, offset, hasClass, outerWidth } from \"../../helpers/dom/element.mjs\";\nimport { offsetRelativeTo } from \"../../helpers/dom/event.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport BacklightUI from \"./ui/backlight.mjs\";\nimport GuidelineUI from \"./ui/guideline.mjs\";\nHooks.getSingleton().register('beforeColumnMove');\nHooks.getSingleton().register('afterColumnMove');\nexport const PLUGIN_KEY = 'manualColumnMove';\nexport const PLUGIN_PRIORITY = 120;\nconst privatePool = new WeakMap();\nconst CSS_PLUGIN = 'ht__manualColumnMove';\nconst CSS_SHOW_UI = 'show-ui';\nconst CSS_ON_MOVING = 'on-moving--columns';\nconst CSS_AFTER_SELECTION = 'after-selection--columns';\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualColumnMove\n * @class ManualColumnMove\n *\n * @description\n * This plugin allows to change columns order. To make columns order persistent the {@link Options#persistentState}\n * plugin should be enabled.\n *\n * API:\n * - `moveColumn` - move single column to the new position.\n * - `moveColumns` - move many columns (as an array of indexes) to the new position.\n * - `dragColumn` - drag single column to the new position.\n * - `dragColumns` - drag many columns (as an array of indexes) to the new position.\n *\n * [Documentation](@/guides/columns/column-moving.md) explain differences between drag and move actions.\n * Please keep in mind that if you want apply visual changes,\n * you have to call manually the `render` method on the instance of Handsontable.\n *\n * The plugin creates additional components to make moving possibly using user interface:\n * - backlight - highlight of selected columns.\n * - guideline - line which shows where columns has been moved.\n *\n * @class ManualColumnMove\n * @plugin ManualColumnMove\n */\nexport class ManualColumnMove extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n\n    /**\n     * Set up WeakMap of plugin to sharing private parameters;.\n     */\n    privatePool.set(this, {\n      columnsToMove: [],\n      countCols: 0,\n      fixedColumns: 0,\n      pressed: void 0,\n      target: {\n        eventPageX: void 0,\n        coords: void 0,\n        TD: void 0,\n        col: void 0\n      },\n      cachedDropIndex: void 0\n    });\n\n    /**\n     * Event Manager object.\n     *\n     * @private\n     * @type {object}\n     */\n    this.eventManager = new EventManager(this);\n    /**\n     * Backlight UI object.\n     *\n     * @private\n     * @type {object}\n     */\n    this.backlight = new BacklightUI(hotInstance);\n    /**\n     * Guideline UI object.\n     *\n     * @private\n     * @type {object}\n     */\n    this.guideline = new GuidelineUI(hotInstance);\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualColumnMove#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    this.addHook('beforeOnCellMouseDown', function () {\n      return _this.onBeforeOnCellMouseDown(...arguments);\n    });\n    this.addHook('beforeOnCellMouseOver', function () {\n      return _this.onBeforeOnCellMouseOver(...arguments);\n    });\n    this.addHook('afterScrollVertically', () => this.onAfterScrollVertically());\n    this.addHook('afterLoadData', function () {\n      return _this.onAfterLoadData(...arguments);\n    });\n    this.buildPluginUI();\n    this.registerEvents();\n\n    // TODO: move adding plugin classname to BasePlugin.\n    addClass(this.hot.rootElement, CSS_PLUGIN);\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualColumnMove`](@/api/options.md#manualcolumnmove)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    this.moveBySettingsOrLoad();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    removeClass(this.hot.rootElement, CSS_PLUGIN);\n    this.unregisterEvents();\n    this.backlight.destroy();\n    this.guideline.destroy();\n    super.disablePlugin();\n  }\n\n  /**\n   * Moves a single column.\n   *\n   * @param {number} column Visual column index to be moved.\n   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.\n   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).\n   * @fires Hooks#beforeColumnMove\n   * @fires Hooks#afterColumnMove\n   * @returns {boolean}\n   */\n  moveColumn(column, finalIndex) {\n    return this.moveColumns([column], finalIndex);\n  }\n\n  /**\n   * Moves a multiple columns.\n   *\n   * @param {Array} columns Array of visual column indexes to be moved.\n   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.\n   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).\n   * @fires Hooks#beforeColumnMove\n   * @fires Hooks#afterColumnMove\n   * @returns {boolean}\n   */\n  moveColumns(columns, finalIndex) {\n    const priv = privatePool.get(this);\n    const dropIndex = priv.cachedDropIndex;\n    const movePossible = this.isMovePossible(columns, finalIndex);\n    const beforeMoveHook = this.hot.runHooks('beforeColumnMove', columns, finalIndex, dropIndex, movePossible);\n    priv.cachedDropIndex = void 0;\n    if (beforeMoveHook === false) {\n      return;\n    }\n    if (movePossible) {\n      this.hot.columnIndexMapper.moveIndexes(columns, finalIndex);\n    }\n    const movePerformed = movePossible && this.isColumnOrderChanged(columns, finalIndex);\n    this.hot.runHooks('afterColumnMove', columns, finalIndex, dropIndex, movePossible, movePerformed);\n    return movePerformed;\n  }\n\n  /**\n   * Drag a single column to drop index position.\n   *\n   * @param {number} column Visual column index to be dragged.\n   * @param {number} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements.\n   * To check visualization of drop index please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).\n   * @fires Hooks#beforeColumnMove\n   * @fires Hooks#afterColumnMove\n   * @returns {boolean}\n   */\n  dragColumn(column, dropIndex) {\n    return this.dragColumns([column], dropIndex);\n  }\n\n  /**\n   * Drag multiple columns to drop index position.\n   *\n   * @param {Array} columns Array of visual column indexes to be dragged.\n   * @param {number} dropIndex Visual column index, being a drop index for the moved columns. Points to where we are going to drop the moved elements.\n   * To check visualization of drop index please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).\n   * @fires Hooks#beforeColumnMove\n   * @fires Hooks#afterColumnMove\n   * @returns {boolean}\n   */\n  dragColumns(columns, dropIndex) {\n    const finalIndex = this.countFinalIndex(columns, dropIndex);\n    const priv = privatePool.get(this);\n    priv.cachedDropIndex = dropIndex;\n    return this.moveColumns(columns, finalIndex);\n  }\n\n  /**\n   * Indicates if it's possible to move columns to the desired position. Some of the actions aren't\n   * possible, i.e. You can’t move more than one element to the last position.\n   *\n   * @param {Array} movedColumns Array of visual column indexes to be moved.\n   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.\n   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).\n   * @returns {boolean}\n   */\n  isMovePossible(movedColumns, finalIndex) {\n    const length = this.hot.columnIndexMapper.getNotTrimmedIndexesLength();\n\n    // An attempt to transfer more columns to start destination than is possible (only when moving from the top to the bottom).\n    const tooHighDestinationIndex = movedColumns.length + finalIndex > length;\n    const tooLowDestinationIndex = finalIndex < 0;\n    const tooLowMovedColumnIndex = movedColumns.some(movedColumn => movedColumn < 0);\n    const tooHighMovedColumnIndex = movedColumns.some(movedColumn => movedColumn >= length);\n    if (tooHighDestinationIndex || tooLowDestinationIndex || tooLowMovedColumnIndex || tooHighMovedColumnIndex) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Indicates if order of columns was changed.\n   *\n   * @private\n   * @param {Array} movedColumns Array of visual column indexes to be moved.\n   * @param {number} finalIndex Visual column index, being a start index for the moved columns. Points to where the elements will be placed after the moving action.\n   * To check the visualization of the final index, please take a look at [documentation](@/guides/columns/column-moving.md#drag-and-move-actions-of-manualcolumnmove-plugin).\n   * @returns {boolean}\n   */\n  isColumnOrderChanged(movedColumns, finalIndex) {\n    return movedColumns.some((column, nrOfMovedElement) => column - nrOfMovedElement !== finalIndex);\n  }\n\n  /**\n   * Count the final column index from the drop index.\n   *\n   * @private\n   * @param {Array} movedColumns Array of visual column indexes to be moved.\n   * @param {number} dropIndex Visual column index, being a drop index for the moved columns.\n   * @returns {number} Visual column index, being a start index for the moved columns.\n   */\n  countFinalIndex(movedColumns, dropIndex) {\n    const numberOfColumnsLowerThanDropIndex = arrayReduce(movedColumns, (numberOfColumns, currentColumnIndex) => {\n      if (currentColumnIndex < dropIndex) {\n        numberOfColumns += 1;\n      }\n      return numberOfColumns;\n    }, 0);\n    return dropIndex - numberOfColumnsLowerThanDropIndex;\n  }\n\n  /**\n   * Gets the sum of the widths of columns in the provided range.\n   *\n   * @private\n   * @param {number} fromColumn Visual column index.\n   * @param {number} toColumn Visual column index.\n   * @returns {number}\n   */\n  getColumnsWidth(fromColumn, toColumn) {\n    const columnMapper = this.hot.columnIndexMapper;\n    let columnsWidth = 0;\n    for (let visualColumnIndex = fromColumn; visualColumnIndex <= toColumn; visualColumnIndex += 1) {\n      // We can't use just `getColWidth` (even without indexes translation) as it doesn't return proper values\n      // when column is stretched.\n      const renderableIndex = columnMapper.getRenderableFromVisualIndex(visualColumnIndex);\n      if (visualColumnIndex < 0) {\n        columnsWidth += this.hot.view._wt.wtViewport.getRowHeaderWidth() || 0;\n      } else if (renderableIndex !== null) {\n        columnsWidth += this.hot.view._wt.wtTable.getStretchedColumnWidth(renderableIndex) || 0;\n      }\n    }\n    return columnsWidth;\n  }\n\n  /**\n   * Loads initial settings when persistent state is saved or when plugin was initialized as an array.\n   *\n   * @private\n   */\n  moveBySettingsOrLoad() {\n    const pluginSettings = this.hot.getSettings()[PLUGIN_KEY];\n    if (Array.isArray(pluginSettings)) {\n      this.moveColumns(pluginSettings, 0);\n    } else if (pluginSettings !== void 0) {\n      const persistentState = this.persistentStateLoad();\n      if (persistentState.length) {\n        this.moveColumns(persistentState, 0);\n      }\n    }\n  }\n\n  /**\n   * Checks if the provided column is in the fixedColumnsTop section.\n   *\n   * @private\n   * @param {number} column Visual column index to check.\n   * @returns {boolean}\n   */\n  isFixedColumnsStart(column) {\n    return column < this.hot.getSettings().fixedColumnsStart;\n  }\n\n  /**\n   * Saves the manual column positions to the persistent state (the {@link Options#persistentState} option has to be enabled).\n   *\n   * @private\n   * @fires Hooks#persistentStateSave\n   */\n  persistentStateSave() {\n    this.hot.runHooks('persistentStateSave', 'manualColumnMove', this.hot.columnIndexMapper.getIndexesSequence()); // The `PersistentState` plugin should be refactored.\n  }\n\n  /**\n   * Loads the manual column positions from the persistent state (the {@link Options#persistentState} option has to be enabled).\n   *\n   * @private\n   * @fires Hooks#persistentStateLoad\n   * @returns {Array} Stored state.\n   */\n  persistentStateLoad() {\n    const storedState = {};\n    this.hot.runHooks('persistentStateLoad', 'manualColumnMove', storedState);\n    return storedState.value ? storedState.value : [];\n  }\n\n  /**\n   * Prepares an array of indexes based on actual selection.\n   *\n   * @private\n   * @param {number} start The start index.\n   * @param {number} end The end index.\n   * @returns {Array}\n   */\n  prepareColumnsToMoving(start, end) {\n    const selectedColumns = [];\n    rangeEach(start, end, i => {\n      selectedColumns.push(i);\n    });\n    return selectedColumns;\n  }\n\n  /**\n   * Update the UI visual position.\n   *\n   * @private\n   */\n  refreshPositions() {\n    const priv = privatePool.get(this);\n    const firstVisible = this.hot.view.getFirstFullyVisibleColumn();\n    if (this.isFixedColumnsStart(priv.hoveredColumn) && firstVisible > 0) {\n      this.hot.scrollViewportTo({\n        col: this.hot.columnIndexMapper.getNearestNotHiddenIndex(firstVisible - 1, -1)\n      });\n    }\n    const wtTable = this.hot.view._wt.wtTable;\n    const scrollableElement = this.hot.view._wt.wtOverlays.scrollableElement;\n    const scrollStart = typeof scrollableElement.scrollX === 'number' ? scrollableElement.scrollX : scrollableElement.scrollLeft;\n    let tdOffsetStart = this.hot.view.THEAD.offsetLeft + this.getColumnsWidth(0, priv.hoveredColumn - 1);\n    const hiderWidth = wtTable.hider.offsetWidth;\n    const tbodyOffsetLeft = wtTable.TBODY.offsetLeft;\n    const backlightElemMarginStart = this.backlight.getOffset().start;\n    const backlightElemWidth = this.backlight.getSize().width;\n    let rowHeaderWidth = 0;\n    let mouseOffsetStart = 0;\n    if (this.hot.isRtl()) {\n      const rootWindow = this.hot.rootWindow;\n      const containerWidth = outerWidth(this.hot.rootElement);\n      const gridMostRightPos = rootWindow.innerWidth - priv.rootElementOffset - containerWidth;\n      mouseOffsetStart = rootWindow.innerWidth - priv.target.eventPageX - gridMostRightPos - (scrollableElement.scrollX === void 0 ? scrollStart : 0);\n    } else {\n      mouseOffsetStart = priv.target.eventPageX - (priv.rootElementOffset - (scrollableElement.scrollX === void 0 ? scrollStart : 0));\n    }\n    if (priv.hasRowHeaders) {\n      rowHeaderWidth = this.hot.view._wt.wtOverlays.inlineStartOverlay.clone.wtTable.getColumnHeader(-1).offsetWidth;\n    }\n    if (this.isFixedColumnsStart(priv.hoveredColumn)) {\n      tdOffsetStart += scrollStart;\n    }\n    tdOffsetStart += rowHeaderWidth;\n    if (priv.hoveredColumn < 0) {\n      // if hover on rowHeader\n      if (priv.fixedColumnsStart > 0) {\n        priv.target.col = 0;\n      } else {\n        priv.target.col = firstVisible > 0 ? firstVisible - 1 : firstVisible;\n      }\n    } else if (priv.target.TD.offsetWidth / 2 + tdOffsetStart <= mouseOffsetStart) {\n      const newCoordsCol = priv.hoveredColumn >= priv.countCols ? priv.countCols - 1 : priv.hoveredColumn;\n\n      // if hover on right part of TD\n      priv.target.col = newCoordsCol + 1;\n      // unfortunately first column is bigger than rest\n      tdOffsetStart += priv.target.TD.offsetWidth;\n    } else {\n      // elsewhere on table\n      priv.target.col = priv.hoveredColumn;\n    }\n    let backlightStart = mouseOffsetStart;\n    let guidelineStart = tdOffsetStart;\n    if (mouseOffsetStart + backlightElemWidth + backlightElemMarginStart >= hiderWidth) {\n      // prevent display backlight on the right side of the table\n      backlightStart = hiderWidth - backlightElemWidth - backlightElemMarginStart;\n    } else if (mouseOffsetStart + backlightElemMarginStart < tbodyOffsetLeft + rowHeaderWidth) {\n      // prevent display backlight on the left side of the table\n      backlightStart = tbodyOffsetLeft + rowHeaderWidth + Math.abs(backlightElemMarginStart);\n    }\n    if (tdOffsetStart >= hiderWidth - 1) {\n      // prevent display guideline outside the table\n      guidelineStart = hiderWidth - 1;\n    } else if (guidelineStart === 0) {\n      // guideline has got `margin-left: -1px` as default\n      guidelineStart = 1;\n    } else if (scrollableElement.scrollX !== void 0 && priv.hoveredColumn < priv.fixedColumnsStart) {\n      guidelineStart -= priv.rootElementOffset <= scrollableElement.scrollX ? priv.rootElementOffset : 0;\n    }\n    this.backlight.setPosition(null, backlightStart);\n    this.guideline.setPosition(null, guidelineStart);\n  }\n\n  /**\n   * Binds the events used by the plugin.\n   *\n   * @private\n   */\n  registerEvents() {\n    const {\n      documentElement\n    } = this.hot.rootDocument;\n    this.eventManager.addEventListener(documentElement, 'mousemove', event => this.onMouseMove(event));\n    this.eventManager.addEventListener(documentElement, 'mouseup', () => this.onMouseUp());\n  }\n\n  /**\n   * Unbinds the events used by the plugin.\n   *\n   * @private\n   */\n  unregisterEvents() {\n    this.eventManager.clear();\n  }\n\n  /**\n   * Change the behavior of selection / dragging.\n   *\n   * @private\n   * @param {MouseEvent} event `mousedown` event properties.\n   * @param {CellCoords} coords Visual cell coordinates where was fired event.\n   * @param {HTMLElement} TD Cell represented as HTMLElement.\n   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n   *                            a boolean value that allows or disallows changing the selection for that particular area.\n   */\n  onBeforeOnCellMouseDown(event, coords, TD, controller) {\n    const wtTable = this.hot.view._wt.wtTable;\n    const isHeaderSelection = this.hot.selection.isSelectedByColumnHeader();\n    const selection = this.hot.getSelectedRangeLast();\n    const priv = privatePool.get(this);\n    // This block action shouldn't be handled below.\n    const isSortingElement = hasClass(event.target, 'sortAction');\n    if (!selection || !isHeaderSelection || priv.pressed || event.button !== 0 || isSortingElement) {\n      priv.pressed = false;\n      priv.columnsToMove.length = 0;\n      removeClass(this.hot.rootElement, [CSS_ON_MOVING, CSS_SHOW_UI]);\n      return;\n    }\n    const guidelineIsNotReady = this.guideline.isBuilt() && !this.guideline.isAppended();\n    const backlightIsNotReady = this.backlight.isBuilt() && !this.backlight.isAppended();\n    if (guidelineIsNotReady && backlightIsNotReady) {\n      this.guideline.appendTo(wtTable.hider);\n      this.backlight.appendTo(wtTable.hider);\n    }\n    const {\n      from,\n      to\n    } = selection;\n    const start = Math.min(from.col, to.col);\n    const end = Math.max(from.col, to.col);\n    if (coords.row < 0 && coords.col >= start && coords.col <= end) {\n      controller.column = true;\n      priv.pressed = true;\n      const eventOffsetX = TD.firstChild ? offsetRelativeTo(event, TD.firstChild).x : event.offsetX;\n      priv.target.eventPageX = event.pageX;\n      priv.hoveredColumn = coords.col;\n      priv.target.TD = TD;\n      priv.target.col = coords.col;\n      priv.columnsToMove = this.prepareColumnsToMoving(start, end);\n      priv.hasRowHeaders = !!this.hot.getSettings().rowHeaders;\n      priv.countCols = this.hot.countCols();\n      priv.fixedColumnsStart = this.hot.getSettings().fixedColumnsStart;\n      priv.rootElementOffset = offset(this.hot.rootElement).left;\n      const countColumnsFrom = priv.hasRowHeaders ? -1 : 0;\n      const topPos = wtTable.holder.scrollTop + wtTable.getColumnHeaderHeight(0) + 1;\n      const fixedColumnsStart = coords.col < priv.fixedColumnsStart;\n      const horizontalScrollPosition = this.hot.view._wt.wtOverlays.inlineStartOverlay.getOverlayOffset();\n      const offsetX = Math.abs(eventOffsetX - (this.hot.isRtl() ? TD.offsetWidth : 0));\n      const inlineOffset = this.getColumnsWidth(start, coords.col - 1) + offsetX;\n      const inlinePos = this.getColumnsWidth(countColumnsFrom, start - 1) + (fixedColumnsStart ? horizontalScrollPosition : 0) + inlineOffset;\n      this.backlight.setPosition(topPos, inlinePos);\n      this.backlight.setSize(this.getColumnsWidth(start, end), wtTable.hider.offsetHeight - topPos);\n      this.backlight.setOffset(null, -inlineOffset);\n      addClass(this.hot.rootElement, CSS_ON_MOVING);\n    } else {\n      removeClass(this.hot.rootElement, CSS_AFTER_SELECTION);\n      priv.pressed = false;\n      priv.columnsToMove.length = 0;\n    }\n  }\n\n  /**\n   * 'mouseMove' event callback. Fired when pointer move on document.documentElement.\n   *\n   * @private\n   * @param {MouseEvent} event `mousemove` event properties.\n   */\n  onMouseMove(event) {\n    const priv = privatePool.get(this);\n    if (!priv.pressed) {\n      return;\n    }\n    priv.target.eventPageX = event.pageX;\n    this.refreshPositions();\n  }\n\n  /**\n   * 'beforeOnCellMouseOver' hook callback. Fired when pointer was over cell.\n   *\n   * @private\n   * @param {MouseEvent} event `mouseover` event properties.\n   * @param {CellCoords} coords Visual cell coordinates where was fired event.\n   * @param {HTMLElement} TD Cell represented as HTMLElement.\n   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n   *                            a boolean value that allows or disallows changing the selection for that particular area.\n   */\n  onBeforeOnCellMouseOver(event, coords, TD, controller) {\n    const selectedRange = this.hot.getSelectedRangeLast();\n    const priv = privatePool.get(this);\n    if (!selectedRange || !priv.pressed) {\n      return;\n    }\n    if (priv.columnsToMove.indexOf(coords.col) > -1) {\n      removeClass(this.hot.rootElement, CSS_SHOW_UI);\n    } else {\n      addClass(this.hot.rootElement, CSS_SHOW_UI);\n    }\n    controller.row = true;\n    controller.column = true;\n    controller.cell = true;\n    priv.hoveredColumn = coords.col;\n    priv.target.TD = TD;\n  }\n\n  /**\n   * `onMouseUp` hook callback.\n   *\n   * @private\n   */\n  onMouseUp() {\n    const priv = privatePool.get(this);\n    const target = priv.target.col;\n    const columnsLen = priv.columnsToMove.length;\n    priv.hoveredColumn = void 0;\n    priv.pressed = false;\n    priv.backlightWidth = 0;\n    removeClass(this.hot.rootElement, [CSS_ON_MOVING, CSS_SHOW_UI, CSS_AFTER_SELECTION]);\n    if (this.hot.selection.isSelectedByColumnHeader()) {\n      addClass(this.hot.rootElement, CSS_AFTER_SELECTION);\n    }\n    if (columnsLen < 1 || target === void 0) {\n      return;\n    }\n    const firstMovedVisualColumn = priv.columnsToMove[0];\n    const firstMovedPhysicalColumn = this.hot.toPhysicalColumn(firstMovedVisualColumn);\n    const movePerformed = this.dragColumns(priv.columnsToMove, target);\n    priv.columnsToMove.length = 0;\n    if (movePerformed === true) {\n      this.persistentStateSave();\n      this.hot.render();\n      this.hot.view.adjustElementsSize(true);\n      const selectionStart = this.hot.toVisualColumn(firstMovedPhysicalColumn);\n      const selectionEnd = selectionStart + columnsLen - 1;\n      this.hot.selectColumns(selectionStart, selectionEnd);\n    }\n  }\n\n  /**\n   * `afterScrollHorizontally` hook callback. Fired the table was scrolled horizontally.\n   *\n   * @private\n   */\n  onAfterScrollVertically() {\n    const wtTable = this.hot.view._wt.wtTable;\n    const headerHeight = wtTable.getColumnHeaderHeight(0) + 1;\n    const scrollTop = wtTable.holder.scrollTop;\n    const posTop = headerHeight + scrollTop;\n    this.backlight.setPosition(posTop);\n    this.backlight.setSize(null, wtTable.hider.offsetHeight - posTop);\n  }\n\n  /**\n   * Builds the plugin's UI.\n   *\n   * @private\n   */\n  buildPluginUI() {\n    this.backlight.build();\n    this.guideline.build();\n  }\n\n  /**\n   * Callback for the `afterLoadData` hook.\n   *\n   * @private\n   */\n  onAfterLoadData() {\n    this.moveBySettingsOrLoad();\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    this.backlight.destroy();\n    this.guideline.destroy();\n    super.destroy();\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass, closest, hasClass, removeClass, outerHeight, isDetached } from \"../../helpers/dom/element.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\"; // Developer note! Whenever you make a change in this file, make an analogous change in manualRowResize.js\nexport const PLUGIN_KEY = 'manualColumnResize';\nexport const PLUGIN_PRIORITY = 130;\nconst PERSISTENT_STATE_KEY = 'manualColumnWidths';\nconst privatePool = new WeakMap();\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualColumnResize\n * @class ManualColumnResize\n *\n * @description\n * This plugin allows to change columns width. To make columns width persistent the {@link Options#persistentState}\n * plugin should be enabled.\n *\n * The plugin creates additional components to make resizing possibly using user interface:\n * - handle - the draggable element that sets the desired width of the column.\n * - guide - the helper guide that shows the desired width as a vertical guide.\n */\nexport class ManualColumnResize extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    const {\n      rootDocument\n    } = this.hot;\n    this.currentTH = null;\n    this.currentCol = null;\n    this.selectedCols = [];\n    this.currentWidth = null;\n    this.newSize = null;\n    this.startY = null;\n    this.startWidth = null;\n    this.startOffset = null;\n    this.handle = rootDocument.createElement('DIV');\n    this.guide = rootDocument.createElement('DIV');\n    this.eventManager = new EventManager(this);\n    this.pressed = null;\n    this.isTriggeredByRMB = false;\n    this.dblclick = 0;\n    this.autoresizeTimeout = null;\n\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical column indexes.\n     *\n     * @private\n     * @type {PhysicalIndexToValueMap}\n     */\n    this.columnWidthsMap = void 0;\n    /**\n     * Private pool to save configuration from updateSettings.\n     */\n    privatePool.set(this, {\n      config: void 0\n    });\n    addClass(this.handle, 'manualColumnResizer');\n    addClass(this.guide, 'manualColumnResizerGuide');\n  }\n\n  /**\n   * @private\n   * @returns {string}\n   */\n  get inlineDir() {\n    return this.hot.isRtl() ? 'right' : 'left';\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualColumnResize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    this.columnWidthsMap = new IndexToValueMap();\n    this.columnWidthsMap.addLocalHook('init', () => this.onMapInit());\n    this.hot.columnIndexMapper.registerMap(this.pluginName, this.columnWidthsMap);\n    this.addHook('modifyColWidth', (width, col) => this.onModifyColWidth(width, col));\n    this.addHook('beforeStretchingColumnWidth', (stretchedWidth, column) => this.onBeforeStretchingColumnWidth(stretchedWidth, column));\n    this.addHook('beforeColumnResize', (newSize, column, isDoubleClick) => this.onBeforeColumnResize(newSize, column, isDoubleClick));\n    this.bindEvents();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualColumnResize`](@/api/options.md#manualcolumnresize)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    const priv = privatePool.get(this);\n    priv.config = this.columnWidthsMap.getValues();\n    this.hot.columnIndexMapper.unregisterMap(this.pluginName);\n    super.disablePlugin();\n  }\n\n  /**\n   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).\n   *\n   * @fires Hooks#persistentStateSave\n   */\n  saveManualColumnWidths() {\n    this.hot.runHooks('persistentStateSave', PERSISTENT_STATE_KEY, this.columnWidthsMap.getValues());\n  }\n\n  /**\n   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option has to be enabled).\n   *\n   * @returns {Array}\n   * @fires Hooks#persistentStateLoad\n   */\n  loadManualColumnWidths() {\n    const storedState = {};\n    this.hot.runHooks('persistentStateLoad', PERSISTENT_STATE_KEY, storedState);\n    return storedState.value;\n  }\n\n  /**\n   * Sets the new width for specified column index.\n   *\n   * @param {number} column Visual column index.\n   * @param {number} width Column width (no less than 20px).\n   * @returns {number} Returns new width.\n   */\n  setManualSize(column, width) {\n    const newWidth = Math.max(width, 20);\n    const physicalColumn = this.hot.toPhysicalColumn(column);\n    this.columnWidthsMap.setValueAtIndex(physicalColumn, newWidth);\n    return newWidth;\n  }\n\n  /**\n   * Clears the cache for the specified column index.\n   *\n   * @param {number} column Visual column index.\n   */\n  clearManualSize(column) {\n    const physicalColumn = this.hot.toPhysicalColumn(column);\n    this.columnWidthsMap.setValueAtIndex(physicalColumn, null);\n  }\n\n  /**\n   * Callback to call on map's `init` local hook.\n   *\n   * @private\n   */\n  onMapInit() {\n    const priv = privatePool.get(this);\n    const initialSetting = this.hot.getSettings()[PLUGIN_KEY];\n    const loadedManualColumnWidths = this.loadManualColumnWidths();\n    if (typeof loadedManualColumnWidths !== 'undefined') {\n      this.hot.batchExecution(() => {\n        loadedManualColumnWidths.forEach((width, physicalIndex) => {\n          this.columnWidthsMap.setValueAtIndex(physicalIndex, width);\n        });\n      }, true);\n    } else if (Array.isArray(initialSetting)) {\n      this.hot.batchExecution(() => {\n        initialSetting.forEach((width, physicalIndex) => {\n          this.columnWidthsMap.setValueAtIndex(physicalIndex, width);\n        });\n      }, true);\n      priv.config = initialSetting;\n    } else if (initialSetting === true && Array.isArray(priv.config)) {\n      this.hot.batchExecution(() => {\n        priv.config.forEach((width, physicalIndex) => {\n          this.columnWidthsMap.setValueAtIndex(physicalIndex, width);\n        });\n      }, true);\n    }\n  }\n\n  /**\n   * Set the resize handle position.\n   *\n   * @private\n   * @param {HTMLCellElement} TH TH HTML element.\n   */\n  setupHandlePosition(TH) {\n    if (!TH.parentNode) {\n      return;\n    }\n    this.currentTH = TH;\n    const {\n      _wt: wt\n    } = this.hot.view;\n    const cellCoords = wt.wtTable.getCoords(this.currentTH);\n    const col = cellCoords.col;\n\n    // Ignore column headers.\n    if (col < 0) {\n      return;\n    }\n    const headerHeight = outerHeight(this.currentTH);\n    const box = this.currentTH.getBoundingClientRect();\n    // Read \"fixedColumnsStart\" through the Walkontable as in that context, the fixed columns\n    // are modified (reduced by the number of hidden columns) by TableView module.\n    const fixedColumn = col < wt.getSetting('fixedColumnsStart');\n    let relativeHeaderPosition;\n    if (fixedColumn) {\n      relativeHeaderPosition = wt.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(this.currentTH, cellCoords.row, cellCoords.col);\n    }\n\n    // If the TH is not a child of the top-left overlay, recalculate using\n    // the top overlay - as this overlay contains the rest of the headers.\n    if (!relativeHeaderPosition) {\n      relativeHeaderPosition = wt.wtOverlays.topOverlay.getRelativeCellPosition(this.currentTH, cellCoords.row, cellCoords.col);\n    }\n    this.currentCol = this.hot.columnIndexMapper.getVisualFromRenderableIndex(col);\n    this.selectedCols = [];\n    const isFullColumnSelected = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByColumnHeader();\n    if (this.hot.selection.isSelected() && isFullColumnSelected) {\n      const selectionRanges = this.hot.getSelectedRange();\n      arrayEach(selectionRanges, selectionRange => {\n        const fromColumn = selectionRange.getTopStartCorner().col;\n        const toColumn = selectionRange.getBottomEndCorner().col;\n\n        // Add every selected column for resize action.\n        rangeEach(fromColumn, toColumn, columnIndex => {\n          if (!this.selectedCols.includes(columnIndex)) {\n            this.selectedCols.push(columnIndex);\n          }\n        });\n      });\n    }\n\n    // Resizing element beyond the current selection (also when there is no selection).\n    if (!this.selectedCols.includes(this.currentCol)) {\n      this.selectedCols = [this.currentCol];\n    }\n    this.startOffset = relativeHeaderPosition.start - 6;\n    this.startWidth = parseInt(box.width, 10);\n    this.handle.style.top = `${relativeHeaderPosition.top}px`;\n    this.handle.style[this.inlineDir] = `${this.startOffset + this.startWidth}px`;\n    this.handle.style.height = `${headerHeight}px`;\n    this.hot.rootElement.appendChild(this.handle);\n  }\n\n  /**\n   * Refresh the resize handle position.\n   *\n   * @private\n   */\n  refreshHandlePosition() {\n    this.handle.style[this.inlineDir] = `${this.startOffset + this.currentWidth}px`;\n  }\n\n  /**\n   * Sets the resize guide position.\n   *\n   * @private\n   */\n  setupGuidePosition() {\n    const handleHeight = parseInt(outerHeight(this.handle), 10);\n    const handleBottomPosition = parseInt(this.handle.style.top, 10) + handleHeight;\n    const maximumVisibleElementHeight = parseInt(this.hot.view.maximumVisibleElementHeight(0), 10);\n    addClass(this.handle, 'active');\n    addClass(this.guide, 'active');\n    this.guide.style.top = `${handleBottomPosition}px`;\n    this.refreshGuidePosition();\n    this.guide.style.height = `${maximumVisibleElementHeight - handleHeight}px`;\n    this.hot.rootElement.appendChild(this.guide);\n  }\n\n  /**\n   * Refresh the resize guide position.\n   *\n   * @private\n   */\n  refreshGuidePosition() {\n    this.guide.style[this.inlineDir] = this.handle.style[this.inlineDir];\n  }\n\n  /**\n   * Hides both the resize handle and resize guide.\n   *\n   * @private\n   */\n  hideHandleAndGuide() {\n    removeClass(this.handle, 'active');\n    removeClass(this.guide, 'active');\n  }\n\n  /**\n   * Checks if provided element is considered a column header.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {boolean}\n   */\n  checkIfColumnHeader(element) {\n    return !!closest(element, ['THEAD'], this.hot.rootElement);\n  }\n\n  /**\n   * Gets the TH element from the provided element.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {HTMLElement}\n   */\n  getClosestTHParent(element) {\n    if (element.tagName !== 'TABLE') {\n      if (element.tagName === 'TH') {\n        return element;\n      }\n      return this.getClosestTHParent(element.parentNode);\n    }\n    return null;\n  }\n\n  /**\n   * 'mouseover' event callback - set the handle position.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event.\n   */\n  onMouseOver(event) {\n    // Workaround for #6926 - if the `event.target` is temporarily detached, we can skip this callback and wait for\n    // the next `onmouseover`.\n    if (isDetached(event.target)) {\n      return;\n    }\n\n    // A \"mouseover\" action is triggered right after executing \"contextmenu\" event. It should be ignored.\n    if (this.isTriggeredByRMB === true) {\n      return;\n    }\n    if (this.checkIfColumnHeader(event.target)) {\n      const th = this.getClosestTHParent(event.target);\n      if (!th) {\n        return;\n      }\n      const colspan = th.getAttribute('colspan');\n      if (th && (colspan === null || colspan === '1')) {\n        if (!this.pressed) {\n          this.setupHandlePosition(th);\n        }\n      }\n    }\n  }\n\n  /**\n   * Auto-size row after doubleclick - callback.\n   *\n   * @private\n   * @fires Hooks#beforeColumnResize\n   * @fires Hooks#afterColumnResize\n   */\n  afterMouseDownTimeout() {\n    const render = () => {\n      this.hot.forceFullRender = true;\n      this.hot.view.render(); // updates all\n      this.hot.view.adjustElementsSize(true);\n    };\n    const resize = (column, forceRender) => {\n      const hookNewSize = this.hot.runHooks('beforeColumnResize', this.newSize, column, true);\n      if (hookNewSize !== void 0) {\n        this.newSize = hookNewSize;\n      }\n      if (this.hot.getSettings().stretchH === 'all') {\n        this.clearManualSize(column);\n      } else {\n        this.setManualSize(column, this.newSize); // double click sets by auto row size plugin\n      }\n\n      this.saveManualColumnWidths();\n      this.hot.runHooks('afterColumnResize', this.newSize, column, true);\n      if (forceRender) {\n        render();\n      }\n    };\n    if (this.dblclick >= 2) {\n      const selectedColsLength = this.selectedCols.length;\n      if (selectedColsLength > 1) {\n        arrayEach(this.selectedCols, selectedCol => {\n          resize(selectedCol);\n        });\n        render();\n      } else {\n        arrayEach(this.selectedCols, selectedCol => {\n          resize(selectedCol, true);\n        });\n      }\n    }\n    this.dblclick = 0;\n    this.autoresizeTimeout = null;\n  }\n\n  /**\n   * 'mousedown' event callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event.\n   */\n  onMouseDown(event) {\n    if (hasClass(event.target, 'manualColumnResizer')) {\n      this.setupHandlePosition(this.currentTH);\n      this.setupGuidePosition();\n      this.pressed = true;\n      if (this.autoresizeTimeout === null) {\n        this.autoresizeTimeout = setTimeout(() => this.afterMouseDownTimeout(), 500);\n        this.hot._registerTimeout(this.autoresizeTimeout);\n      }\n      this.dblclick += 1;\n      this.startX = event.pageX;\n      this.newSize = this.startWidth;\n    }\n  }\n\n  /**\n   * 'mousemove' event callback - refresh the handle and guide positions, cache the new column width.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event.\n   */\n  onMouseMove(event) {\n    if (this.pressed) {\n      const change = (event.pageX - this.startX) * this.hot.getDirectionFactor();\n      this.currentWidth = this.startWidth + change;\n      arrayEach(this.selectedCols, selectedCol => {\n        this.newSize = this.setManualSize(selectedCol, this.currentWidth);\n      });\n      this.refreshHandlePosition();\n      this.refreshGuidePosition();\n    }\n  }\n\n  /**\n   * 'mouseup' event callback - apply the column resizing.\n   *\n   * @private\n   *\n   * @fires Hooks#beforeColumnResize\n   * @fires Hooks#afterColumnResize\n   */\n  onMouseUp() {\n    const render = () => {\n      this.hot.forceFullRender = true;\n      this.hot.view.render(); // updates all\n      this.hot.view.adjustElementsSize(true);\n    };\n    const resize = (column, forceRender) => {\n      this.hot.runHooks('beforeColumnResize', this.newSize, column, false);\n      if (forceRender) {\n        render();\n      }\n      this.saveManualColumnWidths();\n      this.hot.runHooks('afterColumnResize', this.newSize, column, false);\n    };\n    if (this.pressed) {\n      this.hideHandleAndGuide();\n      this.pressed = false;\n      if (this.newSize !== this.startWidth) {\n        const selectedColsLength = this.selectedCols.length;\n        if (selectedColsLength > 1) {\n          arrayEach(this.selectedCols, selectedCol => {\n            resize(selectedCol);\n          });\n          render();\n        } else {\n          arrayEach(this.selectedCols, selectedCol => {\n            resize(selectedCol, true);\n          });\n        }\n      }\n      this.setupHandlePosition(this.currentTH);\n    }\n  }\n\n  /**\n   * Callback for \"contextmenu\" event triggered on element showing move handle. It removes handle and guide elements.\n   *\n   * @private\n   */\n  onContextMenu() {\n    this.hideHandleAndGuide();\n    this.hot.rootElement.removeChild(this.handle);\n    this.hot.rootElement.removeChild(this.guide);\n    this.pressed = false;\n    this.isTriggeredByRMB = true;\n\n    // There is thrown \"mouseover\" event right after opening a context menu. This flag inform that handle\n    // shouldn't be drawn just after removing it.\n    this.hot._registerImmediate(() => {\n      this.isTriggeredByRMB = false;\n    });\n  }\n\n  /**\n   * Binds the mouse events.\n   *\n   * @private\n   */\n  bindEvents() {\n    const {\n      rootWindow,\n      rootElement\n    } = this.hot;\n    this.eventManager.addEventListener(rootElement, 'mouseover', e => this.onMouseOver(e));\n    this.eventManager.addEventListener(rootElement, 'mousedown', e => this.onMouseDown(e));\n    this.eventManager.addEventListener(rootWindow, 'mousemove', e => this.onMouseMove(e));\n    this.eventManager.addEventListener(rootWindow, 'mouseup', () => this.onMouseUp());\n    this.eventManager.addEventListener(this.handle, 'contextmenu', () => this.onContextMenu());\n  }\n\n  /**\n   * Modifies the provided column width, based on the plugin settings.\n   *\n   * @private\n   * @param {number} width Column width.\n   * @param {number} column Visual column index.\n   * @returns {number}\n   */\n  onModifyColWidth(width, column) {\n    let newWidth = width;\n    if (this.enabled) {\n      const physicalColumn = this.hot.toPhysicalColumn(column);\n      const columnWidth = this.columnWidthsMap.getValueAtIndex(physicalColumn);\n      if (this.hot.getSettings()[PLUGIN_KEY] && columnWidth) {\n        newWidth = columnWidth;\n      }\n    }\n    return newWidth;\n  }\n\n  /**\n   * Modifies the provided column stretched width. This hook decides if specified column should be stretched or not.\n   *\n   * @private\n   * @param {number} stretchedWidth Stretched width.\n   * @param {number} column Visual column index.\n   * @returns {number}\n   */\n  onBeforeStretchingColumnWidth(stretchedWidth, column) {\n    let width = this.columnWidthsMap.getValueAtIndex(column);\n    if (width === null) {\n      width = stretchedWidth;\n    }\n    return width;\n  }\n\n  /**\n   * `beforeColumnResize` hook callback.\n   *\n   * @private\n   */\n  onBeforeColumnResize() {\n    // clear the header height cache information\n    this.hot.view._wt.wtViewport.resetHasOversizedColumnHeadersMarked();\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}","const STATE_INITIALIZED = 0;\nconst STATE_BUILT = 1;\nconst STATE_APPENDED = 2;\nconst UNIT = 'px';\n\n/**\n * @private\n */\nclass BaseUI {\n  constructor(hotInstance) {\n    /**\n     * Instance of Handsontable.\n     *\n     * @type {Core}\n     */\n    this.hot = hotInstance;\n    /**\n     * DOM element representing the ui element.\n     *\n     * @type {HTMLElement}\n     * @private\n     */\n    this._element = null;\n    /**\n     * Flag which determines build state of element.\n     *\n     * @type {number}\n     */\n    this.state = STATE_INITIALIZED;\n  }\n\n  /**\n   * Add created UI elements to table.\n   *\n   * @param {HTMLElement} wrapper Element which are parent for our UI element.\n   */\n  appendTo(wrapper) {\n    wrapper.appendChild(this._element);\n    this.state = STATE_APPENDED;\n  }\n\n  /**\n   * Method for create UI element. Only create, without append to table.\n   */\n  build() {\n    if (this.state !== STATE_INITIALIZED) {\n      return;\n    }\n    this._element = this.hot.rootDocument.createElement('div');\n    this.state = STATE_BUILT;\n  }\n\n  /**\n   * Method for remove UI element.\n   */\n  destroy() {\n    if (this.isAppended()) {\n      this._element.parentElement.removeChild(this._element);\n    }\n    this._element = null;\n    this.state = STATE_INITIALIZED;\n  }\n\n  /**\n   * Check if UI element are appended.\n   *\n   * @returns {boolean}\n   */\n  isAppended() {\n    return this.state === STATE_APPENDED;\n  }\n\n  /**\n   * Check if UI element are built.\n   *\n   * @returns {boolean}\n   */\n  isBuilt() {\n    return this.state >= STATE_BUILT;\n  }\n\n  /**\n   * Setter for position.\n   *\n   * @param {number} top New top position of the element.\n   * @param {number} left New left position of the element.\n   */\n  setPosition(top, left) {\n    if (top !== void 0) {\n      this._element.style.top = top + UNIT;\n    }\n    if (left !== void 0) {\n      this._element.style.left = left + UNIT;\n    }\n  }\n\n  /**\n   * Getter for the element position.\n   *\n   * @returns {object} Object contains left and top position of the element.\n   */\n  getPosition() {\n    return {\n      top: this._element.style.top ? parseInt(this._element.style.top, 10) : 0,\n      left: this._element.style.left ? parseInt(this._element.style.left, 10) : 0\n    };\n  }\n\n  /**\n   * Setter for the element size.\n   *\n   * @param {number} width New width of the element.\n   * @param {number} height New height of the element.\n   */\n  setSize(width, height) {\n    if (width) {\n      this._element.style.width = width + UNIT;\n    }\n    if (height) {\n      this._element.style.height = height + UNIT;\n    }\n  }\n\n  /**\n   * Getter for the element position.\n   *\n   * @returns {object} Object contains height and width of the element.\n   */\n  getSize() {\n    return {\n      width: this._element.style.width ? parseInt(this._element.style.width, 10) : 0,\n      height: this._element.style.height ? parseInt(this._element.style.height, 10) : 0\n    };\n  }\n\n  /**\n   * Setter for the element offset. Offset means marginTop and marginLeft of the element.\n   *\n   * @param {number} top New margin top of the element.\n   * @param {number} left New margin left of the element.\n   */\n  setOffset(top, left) {\n    if (top) {\n      this._element.style.marginTop = top + UNIT;\n    }\n    if (left) {\n      this._element.style.marginLeft = left + UNIT;\n    }\n  }\n\n  /**\n   * Getter for the element offset.\n   *\n   * @returns {object} Object contains top and left offset of the element.\n   */\n  getOffset() {\n    return {\n      top: this._element.style.marginTop ? parseInt(this._element.style.marginTop, 10) : 0,\n      left: this._element.style.marginLeft ? parseInt(this._element.style.marginLeft, 10) : 0\n    };\n  }\n}\nexport default BaseUI;","import BaseUI from \"./_base.mjs\";\nimport { addClass } from \"../../../helpers/dom/element.mjs\";\nconst CSS_CLASSNAME = 'ht__manualRowMove--backlight';\n\n/**\n * @private\n * @class BacklightUI\n */\nclass BacklightUI extends BaseUI {\n  /**\n   * Custom className on build process.\n   */\n  build() {\n    super.build();\n    addClass(this._element, CSS_CLASSNAME);\n  }\n}\nexport default BacklightUI;","import BaseUI from \"./_base.mjs\";\nimport { addClass } from \"../../../helpers/dom/element.mjs\";\nconst CSS_CLASSNAME = 'ht__manualRowMove--guideline';\n\n/**\n * @private\n * @class GuidelineUI\n */\nclass GuidelineUI extends BaseUI {\n  /**\n   * Custom className on build process.\n   */\n  build() {\n    super.build();\n    addClass(this._element, CSS_CLASSNAME);\n  }\n}\nexport default GuidelineUI;","import \"core-js/modules/es.array.push.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { arrayReduce } from \"../../helpers/array.mjs\";\nimport { addClass, removeClass, offset, getTrimmingContainer } from \"../../helpers/dom/element.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport BacklightUI from \"./ui/backlight.mjs\";\nimport GuidelineUI from \"./ui/guideline.mjs\";\nHooks.getSingleton().register('beforeRowMove');\nHooks.getSingleton().register('afterRowMove');\nexport const PLUGIN_KEY = 'manualRowMove';\nexport const PLUGIN_PRIORITY = 140;\nconst privatePool = new WeakMap();\nconst CSS_PLUGIN = 'ht__manualRowMove';\nconst CSS_SHOW_UI = 'show-ui';\nconst CSS_ON_MOVING = 'on-moving--rows';\nconst CSS_AFTER_SELECTION = 'after-selection--rows';\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualRowMove\n * @class ManualRowMove\n *\n * @description\n * This plugin allows to change rows order. To make rows order persistent the {@link Options#persistentState}\n * plugin should be enabled.\n *\n * API:\n * - `moveRow` - move single row to the new position.\n * - `moveRows` - move many rows (as an array of indexes) to the new position.\n * - `dragRow` - drag single row to the new position.\n * - `dragRows` - drag many rows (as an array of indexes) to the new position.\n *\n * [Documentation](@/guides/rows/row-moving.md) explain differences between drag and move actions. Please keep in mind that if you want apply visual changes,\n * you have to call manually the `render` method on the instance of Handsontable.\n *\n * The plugin creates additional components to make moving possibly using user interface:\n * - backlight - highlight of selected rows.\n * - guideline - line which shows where rows has been moved.\n *\n * @class ManualRowMove\n * @plugin ManualRowMove\n */\nexport class ManualRowMove extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n\n    /**\n     * Set up WeakMap of plugin to sharing private parameters;.\n     */\n    privatePool.set(this, {\n      rowsToMove: [],\n      pressed: void 0,\n      target: {\n        eventPageY: void 0,\n        coords: void 0,\n        TD: void 0,\n        row: void 0\n      },\n      cachedDropIndex: void 0\n    });\n\n    /**\n     * Event Manager object.\n     *\n     * @private\n     * @type {object}\n     */\n    this.eventManager = new EventManager(this);\n    /**\n     * Backlight UI object.\n     *\n     * @private\n     * @type {object}\n     */\n    this.backlight = new BacklightUI(hotInstance);\n    /**\n     * Guideline UI object.\n     *\n     * @private\n     * @type {object}\n     */\n    this.guideline = new GuidelineUI(hotInstance);\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualRowMove#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    this.addHook('beforeOnCellMouseDown', function () {\n      return _this.onBeforeOnCellMouseDown(...arguments);\n    });\n    this.addHook('beforeOnCellMouseOver', function () {\n      return _this.onBeforeOnCellMouseOver(...arguments);\n    });\n    this.addHook('afterScrollHorizontally', () => this.onAfterScrollHorizontally());\n    this.addHook('afterLoadData', function () {\n      return _this.onAfterLoadData(...arguments);\n    });\n    this.buildPluginUI();\n    this.registerEvents();\n\n    // TODO: move adding plugin classname to BasePlugin.\n    addClass(this.hot.rootElement, CSS_PLUGIN);\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualRowMove`](@/api/options.md#manualrowmove)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    this.moveBySettingsOrLoad();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    removeClass(this.hot.rootElement, CSS_PLUGIN);\n    this.unregisterEvents();\n    this.backlight.destroy();\n    this.guideline.destroy();\n    super.disablePlugin();\n  }\n\n  /**\n   * Moves a single row.\n   *\n   * To see the outcome, rerender your grid by calling [`render()`](@/api/core.md#render).\n   *\n   * @param {number} row Visual row index to be moved.\n   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.\n   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).\n   * @fires Hooks#beforeRowMove\n   * @fires Hooks#afterRowMove\n   * @returns {boolean}\n   */\n  moveRow(row, finalIndex) {\n    return this.moveRows([row], finalIndex);\n  }\n\n  /**\n   * Moves multiple rows.\n   *\n   * To see the outcome, rerender your grid by calling [`render()`](@/api/core.md#render).\n   *\n   * @param {Array} rows Array of visual row indexes to be moved.\n   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.\n   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).\n   * @fires Hooks#beforeRowMove\n   * @fires Hooks#afterRowMove\n   * @returns {boolean}\n   */\n  moveRows(rows, finalIndex) {\n    const priv = privatePool.get(this);\n    const dropIndex = priv.cachedDropIndex;\n    const movePossible = this.isMovePossible(rows, finalIndex);\n    const beforeMoveHook = this.hot.runHooks('beforeRowMove', rows, finalIndex, dropIndex, movePossible);\n    priv.cachedDropIndex = void 0;\n    if (beforeMoveHook === false) {\n      return;\n    }\n    if (movePossible) {\n      this.hot.rowIndexMapper.moveIndexes(rows, finalIndex);\n    }\n    const movePerformed = movePossible && this.isRowOrderChanged(rows, finalIndex);\n    this.hot.runHooks('afterRowMove', rows, finalIndex, dropIndex, movePossible, movePerformed);\n    return movePerformed;\n  }\n\n  /**\n   * Drag a single row to drop index position.\n   *\n   * @param {number} row Visual row index to be dragged.\n   * @param {number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements.\n   * To check visualization of drop index please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).\n   * @fires Hooks#beforeRowMove\n   * @fires Hooks#afterRowMove\n   * @returns {boolean}\n   */\n  dragRow(row, dropIndex) {\n    return this.dragRows([row], dropIndex);\n  }\n\n  /**\n   * Drag multiple rows to drop index position.\n   *\n   * @param {Array} rows Array of visual row indexes to be dragged.\n   * @param {number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we are going to drop the moved elements.\n   * To check visualization of drop index please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).\n   * @fires Hooks#beforeRowMove\n   * @fires Hooks#afterRowMove\n   * @returns {boolean}\n   */\n  dragRows(rows, dropIndex) {\n    const finalIndex = this.countFinalIndex(rows, dropIndex);\n    const priv = privatePool.get(this);\n    priv.cachedDropIndex = dropIndex;\n    return this.moveRows(rows, finalIndex);\n  }\n\n  /**\n   * Indicates if it's possible to move rows to the desired position. Some of the actions aren't possible, i.e. You can’t move more than one element to the last position.\n   *\n   * @param {Array} movedRows Array of visual row indexes to be moved.\n   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.\n   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).\n   * @returns {boolean}\n   */\n  isMovePossible(movedRows, finalIndex) {\n    const length = this.hot.rowIndexMapper.getNotTrimmedIndexesLength();\n\n    // An attempt to transfer more rows to start destination than is possible (only when moving from the top to the bottom).\n    const tooHighDestinationIndex = movedRows.length + finalIndex > length;\n    const tooLowDestinationIndex = finalIndex < 0;\n    const tooLowMovedRowIndex = movedRows.some(movedRow => movedRow < 0);\n    const tooHighMovedRowIndex = movedRows.some(movedRow => movedRow >= length);\n    if (tooHighDestinationIndex || tooLowDestinationIndex || tooLowMovedRowIndex || tooHighMovedRowIndex) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   * Indicates if order of rows was changed.\n   *\n   * @private\n   * @param {Array} movedRows Array of visual row indexes to be moved.\n   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements will be placed after the moving action.\n   * To check the visualization of the final index, please take a look at [documentation](@/guides/rows/row-moving.md#drag-and-move-actions-of-manualrowmove-plugin).\n   * @returns {boolean}\n   */\n  isRowOrderChanged(movedRows, finalIndex) {\n    return movedRows.some((row, nrOfMovedElement) => row - nrOfMovedElement !== finalIndex);\n  }\n\n  /**\n   * Count the final row index from the drop index.\n   *\n   * @private\n   * @param {Array} movedRows Array of visual row indexes to be moved.\n   * @param {number} dropIndex Visual row index, being a drop index for the moved rows.\n   * @returns {number} Visual row index, being a start index for the moved rows.\n   */\n  countFinalIndex(movedRows, dropIndex) {\n    const numberOfRowsLowerThanDropIndex = arrayReduce(movedRows, (numberOfRows, currentRowIndex) => {\n      if (currentRowIndex < dropIndex) {\n        numberOfRows += 1;\n      }\n      return numberOfRows;\n    }, 0);\n    return dropIndex - numberOfRowsLowerThanDropIndex;\n  }\n\n  /**\n   * Gets the sum of the heights of rows in the provided range.\n   *\n   * @private\n   * @param {number} fromRow Visual row index.\n   * @param {number} toRow Visual row index.\n   * @returns {number}\n   */\n  getRowsHeight(fromRow, toRow) {\n    const rowMapper = this.hot.rowIndexMapper;\n    let rowsHeight = 0;\n    for (let visualRowIndex = fromRow; visualRowIndex <= toRow; visualRowIndex++) {\n      const renderableIndex = rowMapper.getRenderableFromVisualIndex(visualRowIndex);\n      if (renderableIndex !== null) {\n        rowsHeight += this.hot.view._wt.wtTable.getRowHeight(renderableIndex) || 23;\n      }\n    }\n    return rowsHeight;\n  }\n\n  /**\n   * Loads initial settings when persistent state is saved or when plugin was initialized as an array.\n   *\n   * @private\n   */\n  moveBySettingsOrLoad() {\n    const pluginSettings = this.hot.getSettings()[PLUGIN_KEY];\n    if (Array.isArray(pluginSettings)) {\n      this.moveRows(pluginSettings, 0);\n    } else if (pluginSettings !== void 0) {\n      const persistentState = this.persistentStateLoad();\n      if (persistentState.length) {\n        this.moveRows(persistentState, 0);\n      }\n    }\n  }\n\n  /**\n   * Checks if the provided row is in the fixedRowsTop section.\n   *\n   * @private\n   * @param {number} row Visual row index to check.\n   * @returns {boolean}\n   */\n  isFixedRowTop(row) {\n    return row < this.hot.getSettings().fixedRowsTop;\n  }\n\n  /**\n   * Checks if the provided row is in the fixedRowsBottom section.\n   *\n   * @private\n   * @param {number} row Visual row index to check.\n   * @returns {boolean}\n   */\n  isFixedRowBottom(row) {\n    return row > this.hot.countRows() - 1 - this.hot.getSettings().fixedRowsBottom;\n  }\n\n  /**\n   * Saves the manual row positions to the persistent state (the {@link Options#persistentState} option has to be enabled).\n   *\n   * @private\n   * @fires Hooks#persistentStateSave\n   */\n  persistentStateSave() {\n    // The `PersistentState` plugin should be refactored.\n    this.hot.runHooks('persistentStateSave', 'manualRowMove', this.hot.rowIndexMapper.getIndexesSequence());\n  }\n\n  /**\n   * Loads the manual row positions from the persistent state (the {@link Options#persistentState} option has to be enabled).\n   *\n   * @private\n   * @fires Hooks#persistentStateLoad\n   * @returns {Array} Stored state.\n   */\n  persistentStateLoad() {\n    const storedState = {};\n    this.hot.runHooks('persistentStateLoad', 'manualRowMove', storedState);\n    return storedState.value ? storedState.value : [];\n  }\n\n  /**\n   * Prepares an array of indexes based on actual selection.\n   *\n   * @private\n   * @returns {Array}\n   */\n  prepareRowsToMoving() {\n    const selection = this.hot.getSelectedRangeLast();\n    const selectedRows = [];\n    if (!selection) {\n      return selectedRows;\n    }\n    const {\n      from,\n      to\n    } = selection;\n    const start = Math.min(from.row, to.row);\n    const end = Math.max(from.row, to.row);\n    rangeEach(start, end, i => {\n      selectedRows.push(i);\n    });\n    return selectedRows;\n  }\n\n  /**\n   * Update the UI visual position.\n   *\n   * @private\n   */\n  refreshPositions() {\n    const priv = privatePool.get(this);\n    const coords = priv.target.coords;\n    const firstVisible = this.hot.view.getFirstFullyVisibleRow();\n    const lastVisible = this.hot.view.getLastFullyVisibleRow();\n    const countRows = this.hot.countRows();\n    if (this.isFixedRowTop(coords.row) && firstVisible > 0) {\n      this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(firstVisible - 1, -1));\n    }\n    if (this.isFixedRowBottom(coords.row) && lastVisible < countRows) {\n      this.hot.scrollViewportTo(this.hot.rowIndexMapper.getNearestNotHiddenIndex(lastVisible + 1, 1), undefined, true);\n    }\n    const wtTable = this.hot.view._wt.wtTable;\n    const TD = priv.target.TD;\n    const rootElement = this.hot.rootElement;\n    const rootElementOffset = offset(rootElement);\n    const trimmingContainer = getTrimmingContainer(rootElement);\n    const tableScroll = wtTable.holder.scrollTop;\n    const trimmingContainerScroll = this.hot.rootWindow !== trimmingContainer ? trimmingContainer.scrollTop : 0;\n    const pixelsAbove = rootElementOffset.top - trimmingContainerScroll;\n    const pixelsRelToTableStart = priv.target.eventPageY - pixelsAbove + tableScroll;\n    const hiderHeight = wtTable.hider.offsetHeight;\n    const tbodyOffsetTop = wtTable.TBODY.offsetTop;\n    const backlightElemMarginTop = this.backlight.getOffset().top;\n    const backlightElemHeight = this.backlight.getSize().height;\n    const tdMiddle = TD.offsetHeight / 2;\n    const tdHeight = TD.offsetHeight;\n    let tdStartPixel = this.hot.view.THEAD.offsetHeight + this.getRowsHeight(0, coords.row - 1);\n    const isBelowTable = pixelsRelToTableStart >= tdStartPixel + tdMiddle;\n    if (this.isFixedRowTop(coords.row)) {\n      tdStartPixel += this.hot.view._wt.wtOverlays.topOverlay.getOverlayOffset();\n    }\n    if (coords.row < 0) {\n      // if hover on colHeader\n      priv.target.row = firstVisible > 0 ? firstVisible - 1 : firstVisible;\n    } else if (isBelowTable) {\n      // if hover on lower part of TD\n      priv.target.row = coords.row + 1;\n      // unfortunately first row is bigger than rest\n      tdStartPixel += coords.row === 0 ? tdHeight - 1 : tdHeight;\n    } else {\n      // elsewhere on table\n      priv.target.row = coords.row;\n    }\n    let backlightTop = pixelsRelToTableStart;\n    let guidelineTop = tdStartPixel;\n    if (pixelsRelToTableStart + backlightElemHeight + backlightElemMarginTop >= hiderHeight) {\n      // prevent display backlight below table\n      backlightTop = hiderHeight - backlightElemHeight - backlightElemMarginTop;\n    } else if (pixelsRelToTableStart + backlightElemMarginTop < tbodyOffsetTop) {\n      // prevent display above below table\n      backlightTop = tbodyOffsetTop + Math.abs(backlightElemMarginTop);\n    }\n    if (tdStartPixel >= hiderHeight - 1) {\n      // prevent display guideline below table\n      guidelineTop = hiderHeight - 1;\n    }\n    this.backlight.setPosition(backlightTop);\n    this.guideline.setPosition(guidelineTop);\n  }\n\n  /**\n   * Binds the events used by the plugin.\n   *\n   * @private\n   */\n  registerEvents() {\n    const {\n      documentElement\n    } = this.hot.rootDocument;\n    this.eventManager.addEventListener(documentElement, 'mousemove', event => this.onMouseMove(event));\n    this.eventManager.addEventListener(documentElement, 'mouseup', () => this.onMouseUp());\n  }\n\n  /**\n   * Unbinds the events used by the plugin.\n   *\n   * @private\n   */\n  unregisterEvents() {\n    this.eventManager.clear();\n  }\n\n  /**\n   * Change the behavior of selection / dragging.\n   *\n   * @private\n   * @param {MouseEvent} event `mousedown` event properties.\n   * @param {CellCoords} coords Visual cell coordinates where was fired event.\n   * @param {HTMLElement} TD Cell represented as HTMLElement.\n   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n   *                            a boolean value that allows or disallows changing the selection for that particular area.\n   */\n  onBeforeOnCellMouseDown(event, coords, TD, controller) {\n    const {\n      wtTable,\n      wtViewport\n    } = this.hot.view._wt;\n    const isHeaderSelection = this.hot.selection.isSelectedByRowHeader();\n    const selection = this.hot.getSelectedRangeLast();\n    const priv = privatePool.get(this);\n    if (!selection || !isHeaderSelection || priv.pressed || event.button !== 0) {\n      priv.pressed = false;\n      priv.rowsToMove.length = 0;\n      removeClass(this.hot.rootElement, [CSS_ON_MOVING, CSS_SHOW_UI]);\n      return;\n    }\n    const guidelineIsNotReady = this.guideline.isBuilt() && !this.guideline.isAppended();\n    const backlightIsNotReady = this.backlight.isBuilt() && !this.backlight.isAppended();\n    if (guidelineIsNotReady && backlightIsNotReady) {\n      this.guideline.appendTo(wtTable.hider);\n      this.backlight.appendTo(wtTable.hider);\n    }\n    const {\n      from,\n      to\n    } = selection;\n    const start = Math.min(from.row, to.row);\n    const end = Math.max(from.row, to.row);\n    if (coords.col < 0 && coords.row >= start && coords.row <= end) {\n      controller.row = true;\n      priv.pressed = true;\n      priv.target.eventPageY = event.pageY;\n      priv.target.coords = coords;\n      priv.target.TD = TD;\n      priv.rowsToMove = this.prepareRowsToMoving();\n      const leftPos = wtTable.holder.scrollLeft + wtViewport.getRowHeaderWidth();\n      const topOffset = this.getRowsHeight(start, coords.row - 1) + event.offsetY;\n      this.backlight.setPosition(null, leftPos);\n      this.backlight.setSize(wtTable.hider.offsetWidth - leftPos, this.getRowsHeight(start, end));\n      this.backlight.setOffset(-topOffset, null);\n      addClass(this.hot.rootElement, CSS_ON_MOVING);\n      this.refreshPositions();\n    } else {\n      removeClass(this.hot.rootElement, CSS_AFTER_SELECTION);\n      priv.pressed = false;\n      priv.rowsToMove.length = 0;\n    }\n  }\n\n  /**\n   * 'mouseMove' event callback. Fired when pointer move on document.documentElement.\n   *\n   * @private\n   * @param {MouseEvent} event `mousemove` event properties.\n   */\n  onMouseMove(event) {\n    const priv = privatePool.get(this);\n    if (!priv.pressed) {\n      return;\n    }\n    priv.target.eventPageY = event.pageY;\n    this.refreshPositions();\n  }\n\n  /**\n   * 'beforeOnCellMouseOver' hook callback. Fired when pointer was over cell.\n   *\n   * @private\n   * @param {MouseEvent} event `mouseover` event properties.\n   * @param {CellCoords} coords Visual cell coordinates where was fired event.\n   * @param {HTMLElement} TD Cell represented as HTMLElement.\n   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n   *                            a boolean value that allows or disallows changing the selection for that particular area.\n   */\n  onBeforeOnCellMouseOver(event, coords, TD, controller) {\n    const selectedRange = this.hot.getSelectedRangeLast();\n    const priv = privatePool.get(this);\n    if (!selectedRange || !priv.pressed) {\n      return;\n    }\n    if (priv.rowsToMove.indexOf(coords.row) > -1) {\n      removeClass(this.hot.rootElement, CSS_SHOW_UI);\n    } else {\n      addClass(this.hot.rootElement, CSS_SHOW_UI);\n    }\n    controller.row = true;\n    controller.column = true;\n    controller.cell = true;\n    priv.target.coords = coords;\n    priv.target.TD = TD;\n  }\n\n  /**\n   * `onMouseUp` hook callback.\n   *\n   * @private\n   */\n  onMouseUp() {\n    const priv = privatePool.get(this);\n    const target = priv.target.row;\n    const rowsLen = priv.rowsToMove.length;\n    priv.pressed = false;\n    priv.backlightHeight = 0;\n    removeClass(this.hot.rootElement, [CSS_ON_MOVING, CSS_SHOW_UI, CSS_AFTER_SELECTION]);\n    if (this.hot.selection.isSelectedByRowHeader()) {\n      addClass(this.hot.rootElement, CSS_AFTER_SELECTION);\n    }\n    if (rowsLen < 1 || target === void 0) {\n      return;\n    }\n    const firstMovedVisualRow = priv.rowsToMove[0];\n    const firstMovedPhysicalRow = this.hot.toPhysicalRow(firstMovedVisualRow);\n    const movePerformed = this.dragRows(priv.rowsToMove, target);\n    priv.rowsToMove.length = 0;\n    if (movePerformed === true) {\n      this.persistentStateSave();\n      this.hot.render();\n      this.hot.view.adjustElementsSize(true);\n      const selectionStart = this.hot.toVisualRow(firstMovedPhysicalRow);\n      const selectionEnd = selectionStart + rowsLen - 1;\n      this.hot.selectRows(selectionStart, selectionEnd);\n    }\n  }\n\n  /**\n   * `afterScrollHorizontally` hook callback. Fired the table was scrolled horizontally.\n   *\n   * @private\n   */\n  onAfterScrollHorizontally() {\n    const wtTable = this.hot.view._wt.wtTable;\n    const headerWidth = this.hot.view._wt.wtViewport.getRowHeaderWidth();\n    const scrollLeft = wtTable.holder.scrollLeft;\n    const posLeft = headerWidth + scrollLeft;\n    this.backlight.setPosition(null, posLeft);\n    this.backlight.setSize(wtTable.hider.offsetWidth - posLeft);\n  }\n\n  /**\n   * Builds the plugin's UI.\n   *\n   * @private\n   */\n  buildPluginUI() {\n    this.backlight.build();\n    this.guideline.build();\n  }\n\n  /**\n   * Callback for the `afterLoadData` hook.\n   *\n   * @private\n   */\n  onAfterLoadData() {\n    this.moveBySettingsOrLoad();\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    this.backlight.destroy();\n    this.guideline.destroy();\n    super.destroy();\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { addClass, closest, hasClass, removeClass, outerWidth, isDetached } from \"../../helpers/dom/element.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { PhysicalIndexToValueMap as IndexToValueMap } from \"../../translations/index.mjs\";\nimport { ViewportRowsCalculator } from \"../../3rdparty/walkontable/src/index.mjs\"; // Developer note! Whenever you make a change in this file, make an analogous change in manualColumnResize.js\nexport const PLUGIN_KEY = 'manualRowResize';\nexport const PLUGIN_PRIORITY = 30;\nconst PERSISTENT_STATE_KEY = 'manualRowHeights';\nconst privatePool = new WeakMap();\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin ManualRowResize\n * @class ManualRowResize\n *\n * @description\n * This plugin allows to change rows height. To make rows height persistent the {@link Options#persistentState}\n * plugin should be enabled.\n *\n * The plugin creates additional components to make resizing possibly using user interface:\n * - handle - the draggable element that sets the desired height of the row.\n * - guide - the helper guide that shows the desired height as a horizontal guide.\n */\nexport class ManualRowResize extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    const {\n      rootDocument\n    } = this.hot;\n    this.currentTH = null;\n    this.currentRow = null;\n    this.selectedRows = [];\n    this.currentHeight = null;\n    this.newSize = null;\n    this.startY = null;\n    this.startHeight = null;\n    this.startOffset = null;\n    this.handle = rootDocument.createElement('DIV');\n    this.guide = rootDocument.createElement('DIV');\n    this.eventManager = new EventManager(this);\n    this.pressed = null;\n    this.isTriggeredByRMB = false;\n    this.dblclick = 0;\n    this.autoresizeTimeout = null;\n\n    /**\n     * PhysicalIndexToValueMap to keep and track widths for physical row indexes.\n     *\n     * @private\n     * @type {PhysicalIndexToValueMap}\n     */\n    this.rowHeightsMap = void 0;\n    /**\n     * Private pool to save configuration from updateSettings.\n     */\n    privatePool.set(this, {\n      config: void 0\n    });\n    addClass(this.handle, 'manualRowResizer');\n    addClass(this.guide, 'manualRowResizerGuide');\n  }\n\n  /**\n   * @private\n   * @returns {string}\n   */\n  get inlineDir() {\n    return this.hot.isRtl() ? 'right' : 'left';\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link ManualRowResize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    this.rowHeightsMap = new IndexToValueMap();\n    this.rowHeightsMap.addLocalHook('init', () => this.onMapInit());\n    this.hot.rowIndexMapper.registerMap(this.pluginName, this.rowHeightsMap);\n    this.addHook('modifyRowHeight', (height, row) => this.onModifyRowHeight(height, row));\n    this.bindEvents();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`manualRowResize`](@/api/options.md#manualrowresize)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    const priv = privatePool.get(this);\n    priv.config = this.rowHeightsMap.getValues();\n    this.hot.rowIndexMapper.unregisterMap(this.pluginName);\n    super.disablePlugin();\n  }\n\n  /**\n   * Saves the current sizes using the persistentState plugin (the {@link Options#persistentState} option has to be\n   * enabled).\n   *\n   * @fires Hooks#persistentStateSave\n   */\n  saveManualRowHeights() {\n    this.hot.runHooks('persistentStateSave', PERSISTENT_STATE_KEY, this.rowHeightsMap.getValues());\n  }\n\n  /**\n   * Loads the previously saved sizes using the persistentState plugin (the {@link Options#persistentState} option\n   * has be enabled).\n   *\n   * @returns {Array}\n   * @fires Hooks#persistentStateLoad\n   */\n  loadManualRowHeights() {\n    const storedState = {};\n    this.hot.runHooks('persistentStateLoad', PERSISTENT_STATE_KEY, storedState);\n    return storedState.value;\n  }\n\n  /**\n   * Sets the new height for specified row index.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} height Row height.\n   * @returns {number} Returns new height.\n   */\n  setManualSize(row, height) {\n    const physicalRow = this.hot.toPhysicalRow(row);\n    const newHeight = Math.max(height, ViewportRowsCalculator.DEFAULT_HEIGHT);\n    this.rowHeightsMap.setValueAtIndex(physicalRow, newHeight);\n    return newHeight;\n  }\n\n  /**\n   * Sets the resize handle position.\n   *\n   * @private\n   * @param {HTMLCellElement} TH TH HTML element.\n   */\n  setupHandlePosition(TH) {\n    this.currentTH = TH;\n    const {\n      view\n    } = this.hot;\n    const {\n      _wt: wt\n    } = view;\n    const cellCoords = wt.wtTable.getCoords(this.currentTH);\n    const row = cellCoords.row;\n\n    // Ignore row headers.\n    if (row < 0) {\n      return;\n    }\n    const headerWidth = outerWidth(this.currentTH);\n    const box = this.currentTH.getBoundingClientRect();\n    // Read \"fixedRowsTop\" and \"fixedRowsBottom\" through the Walkontable as in that context, the fixed\n    // rows are modified (reduced by the number of hidden rows) by TableView module.\n    const fixedRowTop = row < wt.getSetting('fixedRowsTop');\n    const fixedRowBottom = row >= view.countNotHiddenRowIndexes(0, 1) - wt.getSetting('fixedRowsBottom');\n    let relativeHeaderPosition;\n    if (fixedRowTop) {\n      relativeHeaderPosition = wt.wtOverlays.topInlineStartCornerOverlay.getRelativeCellPosition(this.currentTH, cellCoords.row, cellCoords.col);\n    } else if (fixedRowBottom) {\n      relativeHeaderPosition = wt.wtOverlays.bottomInlineStartCornerOverlay.getRelativeCellPosition(this.currentTH, cellCoords.row, cellCoords.col);\n    }\n\n    // If the TH is not a child of the top-left/bottom-left overlay, recalculate using\n    // the left overlay - as this overlay contains the rest of the headers.\n    if (!relativeHeaderPosition) {\n      relativeHeaderPosition = wt.wtOverlays.inlineStartOverlay.getRelativeCellPosition(this.currentTH, cellCoords.row, cellCoords.col);\n    }\n    this.currentRow = this.hot.rowIndexMapper.getVisualFromRenderableIndex(row);\n    this.selectedRows = [];\n    const isFullRowSelected = this.hot.selection.isSelectedByCorner() || this.hot.selection.isSelectedByRowHeader();\n    if (this.hot.selection.isSelected() && isFullRowSelected) {\n      const selectionRanges = this.hot.getSelectedRange();\n      arrayEach(selectionRanges, selectionRange => {\n        const fromRow = selectionRange.getTopStartCorner().row;\n        const toRow = selectionRange.getBottomStartCorner().row;\n\n        // Add every selected row for resize action.\n        rangeEach(fromRow, toRow, rowIndex => {\n          if (!this.selectedRows.includes(rowIndex)) {\n            this.selectedRows.push(rowIndex);\n          }\n        });\n      });\n    }\n\n    // Resizing element beyond the current selection (also when there is no selection).\n    if (!this.selectedRows.includes(this.currentRow)) {\n      this.selectedRows = [this.currentRow];\n    }\n    this.startOffset = relativeHeaderPosition.top - 6;\n    this.startHeight = parseInt(box.height, 10);\n    this.handle.style.top = `${this.startOffset + this.startHeight}px`;\n    this.handle.style[this.inlineDir] = `${relativeHeaderPosition.start}px`;\n    this.handle.style.width = `${headerWidth}px`;\n    this.hot.rootElement.appendChild(this.handle);\n  }\n\n  /**\n   * Refresh the resize handle position.\n   *\n   * @private\n   */\n  refreshHandlePosition() {\n    this.handle.style.top = `${this.startOffset + this.currentHeight}px`;\n  }\n\n  /**\n   * Sets the resize guide position.\n   *\n   * @private\n   */\n  setupGuidePosition() {\n    const handleWidth = parseInt(outerWidth(this.handle), 10);\n    const handleEndPosition = parseInt(this.handle.style[this.inlineDir], 10) + handleWidth;\n    const maximumVisibleElementWidth = parseInt(this.hot.view.maximumVisibleElementWidth(0), 10);\n    addClass(this.handle, 'active');\n    addClass(this.guide, 'active');\n    this.guide.style.top = this.handle.style.top;\n    this.guide.style[this.inlineDir] = `${handleEndPosition}px`;\n    this.guide.style.width = `${maximumVisibleElementWidth - handleWidth}px`;\n    this.hot.rootElement.appendChild(this.guide);\n  }\n\n  /**\n   * Refresh the resize guide position.\n   *\n   * @private\n   */\n  refreshGuidePosition() {\n    this.guide.style.top = this.handle.style.top;\n  }\n\n  /**\n   * Hides both the resize handle and resize guide.\n   *\n   * @private\n   */\n  hideHandleAndGuide() {\n    removeClass(this.handle, 'active');\n    removeClass(this.guide, 'active');\n  }\n\n  /**\n   * Checks if provided element is considered as a row header.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {boolean}\n   */\n  checkIfRowHeader(element) {\n    var _element$parentNode;\n    const thElement = closest(element, ['TH'], this.hot.rootElement);\n    return thElement && ((_element$parentNode = element.parentNode) === null || _element$parentNode === void 0 || (_element$parentNode = _element$parentNode.parentNode) === null || _element$parentNode === void 0 ? void 0 : _element$parentNode.tagName) === 'TBODY';\n  }\n\n  /**\n   * Gets the TH element from the provided element.\n   *\n   * @private\n   * @param {HTMLElement} element HTML element.\n   * @returns {HTMLElement}\n   */\n  getClosestTHParent(element) {\n    if (element.tagName !== 'TABLE') {\n      if (element.tagName === 'TH') {\n        return element;\n      }\n      return this.getClosestTHParent(element.parentNode);\n    }\n    return null;\n  }\n\n  /**\n   * Returns the actual height for the provided row index.\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @returns {number} Actual row height.\n   */\n  getActualRowHeight(row) {\n    // TODO: this should utilize `this.hot.getRowHeight` after it's fixed and working properly.\n    const walkontableHeight = this.hot.view._wt.wtTable.getRowHeight(row);\n    if (walkontableHeight !== void 0 && this.newSize < walkontableHeight) {\n      return walkontableHeight;\n    }\n    return this.newSize;\n  }\n\n  /**\n   * 'mouseover' event callback - set the handle position.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event.\n   */\n  onMouseOver(event) {\n    // Workaround for #6926 - if the `event.target` is temporarily detached, we can skip this callback and wait for\n    // the next `onmouseover`.\n    if (isDetached(event.target)) {\n      return;\n    }\n\n    // A \"mouseover\" action is triggered right after executing \"contextmenu\" event. It should be ignored.\n    if (this.isTriggeredByRMB === true) {\n      return;\n    }\n    if (this.checkIfRowHeader(event.target)) {\n      const th = this.getClosestTHParent(event.target);\n      if (th) {\n        if (!this.pressed) {\n          this.setupHandlePosition(th);\n        }\n      }\n    }\n  }\n\n  /**\n   * Auto-size row after doubleclick - callback.\n   *\n   * @private\n   * @fires Hooks#beforeRowResize\n   * @fires Hooks#afterRowResize\n   */\n  afterMouseDownTimeout() {\n    const render = () => {\n      this.hot.forceFullRender = true;\n      this.hot.view.render(); // updates all\n      this.hot.view.adjustElementsSize(true);\n    };\n    const resize = (row, forceRender) => {\n      const hookNewSize = this.hot.runHooks('beforeRowResize', this.getActualRowHeight(row), row, true);\n      if (hookNewSize !== void 0) {\n        this.newSize = hookNewSize;\n      }\n      this.setManualSize(row, this.newSize); // double click sets auto row size\n\n      this.hot.runHooks('afterRowResize', this.getActualRowHeight(row), row, true);\n      if (forceRender) {\n        render();\n      }\n    };\n    if (this.dblclick >= 2) {\n      const selectedRowsLength = this.selectedRows.length;\n      if (selectedRowsLength > 1) {\n        arrayEach(this.selectedRows, selectedRow => {\n          resize(selectedRow);\n        });\n        render();\n      } else {\n        arrayEach(this.selectedRows, selectedRow => {\n          resize(selectedRow, true);\n        });\n      }\n    }\n    this.dblclick = 0;\n    this.autoresizeTimeout = null;\n  }\n\n  /**\n   * 'mousedown' event callback.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event.\n   */\n  onMouseDown(event) {\n    if (hasClass(event.target, 'manualRowResizer')) {\n      this.setupHandlePosition(this.currentTH);\n      this.setupGuidePosition();\n      this.pressed = true;\n      if (this.autoresizeTimeout === null) {\n        this.autoresizeTimeout = setTimeout(() => this.afterMouseDownTimeout(), 500);\n        this.hot._registerTimeout(this.autoresizeTimeout);\n      }\n      this.dblclick += 1;\n      this.startY = event.pageY;\n      this.newSize = this.startHeight;\n    }\n  }\n\n  /**\n   * 'mousemove' event callback - refresh the handle and guide positions, cache the new row height.\n   *\n   * @private\n   * @param {MouseEvent} event The mouse event.\n   */\n  onMouseMove(event) {\n    if (this.pressed) {\n      this.currentHeight = this.startHeight + (event.pageY - this.startY);\n      arrayEach(this.selectedRows, selectedRow => {\n        this.newSize = this.setManualSize(selectedRow, this.currentHeight);\n      });\n      this.refreshHandlePosition();\n      this.refreshGuidePosition();\n    }\n  }\n\n  /**\n   * 'mouseup' event callback - apply the row resizing.\n   *\n   * @private\n   *\n   * @fires Hooks#beforeRowResize\n   * @fires Hooks#afterRowResize\n   */\n  onMouseUp() {\n    const render = () => {\n      this.hot.forceFullRender = true;\n      this.hot.view.render(); // updates all\n      this.hot.view.adjustElementsSize(true);\n    };\n    const runHooks = (row, forceRender) => {\n      this.hot.runHooks('beforeRowResize', this.getActualRowHeight(row), row, false);\n      if (forceRender) {\n        render();\n      }\n      this.saveManualRowHeights();\n      this.hot.runHooks('afterRowResize', this.getActualRowHeight(row), row, false);\n    };\n    if (this.pressed) {\n      this.hideHandleAndGuide();\n      this.pressed = false;\n      if (this.newSize !== this.startHeight) {\n        const selectedRowsLength = this.selectedRows.length;\n        if (selectedRowsLength > 1) {\n          arrayEach(this.selectedRows, selectedRow => {\n            runHooks(selectedRow);\n          });\n          render();\n        } else {\n          arrayEach(this.selectedRows, selectedRow => {\n            runHooks(selectedRow, true);\n          });\n        }\n      }\n      this.setupHandlePosition(this.currentTH);\n    }\n  }\n\n  /**\n   * Callback for \"contextmenu\" event triggered on element showing move handle. It removes handle and guide elements.\n   *\n   * @private\n   */\n  onContextMenu() {\n    this.hideHandleAndGuide();\n    this.hot.rootElement.removeChild(this.handle);\n    this.hot.rootElement.removeChild(this.guide);\n    this.pressed = false;\n    this.isTriggeredByRMB = true;\n\n    // There is thrown \"mouseover\" event right after opening a context menu. This flag inform that handle\n    // shouldn't be drawn just after removing it.\n    this.hot._registerImmediate(() => {\n      this.isTriggeredByRMB = false;\n    });\n  }\n\n  /**\n   * Binds the mouse events.\n   *\n   * @private\n   */\n  bindEvents() {\n    const {\n      rootElement,\n      rootWindow\n    } = this.hot;\n    this.eventManager.addEventListener(rootElement, 'mouseover', e => this.onMouseOver(e));\n    this.eventManager.addEventListener(rootElement, 'mousedown', e => this.onMouseDown(e));\n    this.eventManager.addEventListener(rootWindow, 'mousemove', e => this.onMouseMove(e));\n    this.eventManager.addEventListener(rootWindow, 'mouseup', () => this.onMouseUp());\n    this.eventManager.addEventListener(this.handle, 'contextmenu', () => this.onContextMenu());\n  }\n\n  /**\n   * Modifies the provided row height, based on the plugin settings.\n   *\n   * @private\n   * @param {number} height Row height.\n   * @param {number} row Visual row index.\n   * @returns {number}\n   */\n  onModifyRowHeight(height, row) {\n    let newHeight = height;\n    if (this.enabled) {\n      const physicalRow = this.hot.toPhysicalRow(row);\n      const rowHeight = this.rowHeightsMap.getValueAtIndex(physicalRow);\n      if (this.hot.getSettings()[PLUGIN_KEY] && rowHeight) {\n        newHeight = rowHeight;\n      }\n    }\n    return newHeight;\n  }\n\n  /**\n   * Callback to call on map's `init` local hook.\n   *\n   * @private\n   */\n  onMapInit() {\n    const priv = privatePool.get(this);\n    const initialSetting = this.hot.getSettings()[PLUGIN_KEY];\n    const loadedManualRowHeights = this.loadManualRowHeights();\n    this.hot.batchExecution(() => {\n      if (typeof loadedManualRowHeights !== 'undefined') {\n        loadedManualRowHeights.forEach((height, index) => {\n          this.rowHeightsMap.setValueAtIndex(index, height);\n        });\n      } else if (Array.isArray(initialSetting)) {\n        initialSetting.forEach((height, index) => {\n          this.rowHeightsMap.setValueAtIndex(index, height);\n        });\n        priv.config = initialSetting;\n      } else if (initialSetting === true && Array.isArray(priv.config)) {\n        priv.config.forEach((height, index) => {\n          this.rowHeightsMap.setValueAtIndex(index, height);\n        });\n      }\n    }, true);\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}","import { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\n/**\n * The `MergedCellCoords` class represents a single merged cell.\n *\n * @private\n * @class MergedCellCoords\n */\nclass MergedCellCoords {\n  constructor(row, column, rowspan, colspan, cellCoordsFactory, cellRangeFactory) {\n    /**\n     * The index of the topmost merged cell row.\n     *\n     * @type {number}\n     */\n    this.row = row;\n    /**\n     * The index of the leftmost column.\n     *\n     * @type {number}\n     */\n    this.col = column;\n    /**\n     * The `rowspan` value of the merged cell.\n     *\n     * @type {number}\n     */\n    this.rowspan = rowspan;\n    /**\n     * The `colspan` value of the merged cell.\n     *\n     * @type {number}\n     */\n    this.colspan = colspan;\n    /**\n     * `true` only if the merged cell is bound to be removed.\n     *\n     * @type {boolean}\n     */\n    this.removed = false;\n    /**\n     * The CellCoords function factory.\n     *\n     * @type {Function}\n     */\n    this.cellCoordsFactory = cellCoordsFactory;\n    /**\n     * The CellRange function factory.\n     *\n     * @type {Function}\n     */\n    this.cellRangeFactory = cellRangeFactory;\n  }\n\n  /**\n   * Get a warning message for when the declared merged cell data contains negative values.\n   *\n   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.\n   * @returns {string}\n   */\n  static NEGATIVE_VALUES_WARNING(newMergedCell) {\n    return toSingleLine`The merged cell declared with {row: ${newMergedCell.row}, col: ${newMergedCell.col},\\x20\n      rowspan: ${newMergedCell.rowspan}, colspan: ${newMergedCell.colspan}} contains negative values, which is\\x20\n      not supported. It will not be added to the collection.`;\n  }\n\n  /**\n   * Get a warning message for when the declared merged cell data contains values exceeding the table limits.\n   *\n   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.\n   * @returns {string}\n   */\n  static IS_OUT_OF_BOUNDS_WARNING(newMergedCell) {\n    return toSingleLine`The merged cell declared at [${newMergedCell.row}, ${newMergedCell.col}] is positioned\\x20\n      (or positioned partially) outside of the table range. It was not added to the table, please fix your setup.`;\n  }\n\n  /**\n   * Get a warning message for when the declared merged cell data represents a single cell.\n   *\n   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.\n   * @returns {string}\n   */\n  static IS_SINGLE_CELL(newMergedCell) {\n    return toSingleLine`The merged cell declared at [${newMergedCell.row}, ${newMergedCell.col}] has both \"rowspan\"\\x20\n      and \"colspan\" declared as \"1\", which makes it a single cell. It cannot be added to the collection.`;\n  }\n\n  /**\n   * Get a warning message for when the declared merged cell data contains \"colspan\" or \"rowspan\", that equals 0.\n   *\n   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.\n   * @returns {string}\n   */\n  static ZERO_SPAN_WARNING(newMergedCell) {\n    return toSingleLine`The merged cell declared at [${newMergedCell.row}, ${newMergedCell.col}] has \"rowspan\"\\x20\n      or \"colspan\" declared as \"0\", which is not supported. It cannot be added to the collection.`;\n  }\n\n  /**\n   * Check whether the values provided for a merged cell contain any negative values.\n   *\n   * @param {object} mergedCellInfo Object containing the `row`, `col`, `rowspan` and `colspan` properties.\n   * @returns {boolean}\n   */\n  static containsNegativeValues(mergedCellInfo) {\n    return mergedCellInfo.row < 0 || mergedCellInfo.col < 0 || mergedCellInfo.rowspan < 0 || mergedCellInfo.colspan < 0;\n  }\n\n  /**\n   * Check whether the provided merged cell information object represents a single cell.\n   *\n   * @private\n   * @param {object} mergedCellInfo An object with `row`, `col`, `rowspan` and `colspan` properties.\n   * @returns {boolean}\n   */\n  static isSingleCell(mergedCellInfo) {\n    return mergedCellInfo.colspan === 1 && mergedCellInfo.rowspan === 1;\n  }\n\n  /**\n   * Check whether the provided merged cell information object contains a rowspan or colspan of 0.\n   *\n   * @private\n   * @param {object} mergedCellInfo An object with `row`, `col`, `rowspan` and `colspan` properties.\n   * @returns {boolean}\n   */\n  static containsZeroSpan(mergedCellInfo) {\n    return mergedCellInfo.colspan === 0 || mergedCellInfo.rowspan === 0;\n  }\n\n  /**\n   * Check whether the provided merged cell object is to be declared out of bounds of the table.\n   *\n   * @param {object} mergeCell Object containing the `row`, `col`, `rowspan` and `colspan` properties.\n   * @param {number} rowCount Number of rows in the table.\n   * @param {number} columnCount Number of rows in the table.\n   * @returns {boolean}\n   */\n  static isOutOfBounds(mergeCell, rowCount, columnCount) {\n    return mergeCell.row < 0 || mergeCell.col < 0 || mergeCell.row >= rowCount || mergeCell.row + mergeCell.rowspan - 1 >= rowCount || mergeCell.col >= columnCount || mergeCell.col + mergeCell.colspan - 1 >= columnCount;\n  }\n\n  /**\n   * Sanitize (prevent from going outside the boundaries) the merged cell.\n   *\n   * @param {Core} hotInstance The Handsontable instance.\n   */\n  normalize(hotInstance) {\n    const totalRows = hotInstance.countRows();\n    const totalColumns = hotInstance.countCols();\n    if (this.row < 0) {\n      this.row = 0;\n    } else if (this.row > totalRows - 1) {\n      this.row = totalRows - 1;\n    }\n    if (this.col < 0) {\n      this.col = 0;\n    } else if (this.col > totalColumns - 1) {\n      this.col = totalColumns - 1;\n    }\n    if (this.row + this.rowspan > totalRows - 1) {\n      this.rowspan = totalRows - this.row;\n    }\n    if (this.col + this.colspan > totalColumns - 1) {\n      this.colspan = totalColumns - this.col;\n    }\n  }\n\n  /**\n   * Returns `true` if the provided coordinates are inside the merged cell.\n   *\n   * @param {number} row The row index.\n   * @param {number} column The column index.\n   * @returns {boolean}\n   */\n  includes(row, column) {\n    return this.row <= row && this.col <= column && this.row + this.rowspan - 1 >= row && this.col + this.colspan - 1 >= column;\n  }\n\n  /**\n   * Returns `true` if the provided `column` property is within the column span of the merged cell.\n   *\n   * @param {number} column The column index.\n   * @returns {boolean}\n   */\n  includesHorizontally(column) {\n    return this.col <= column && this.col + this.colspan - 1 >= column;\n  }\n\n  /**\n   * Returns `true` if the provided `row` property is within the row span of the merged cell.\n   *\n   * @param {number} row Row index.\n   * @returns {boolean}\n   */\n  includesVertically(row) {\n    return this.row <= row && this.row + this.rowspan - 1 >= row;\n  }\n\n  /**\n   * Shift (and possibly resize, if needed) the merged cell.\n   *\n   * @param {Array} shiftVector 2-element array containing the information on the shifting in the `x` and `y` axis.\n   * @param {number} indexOfChange Index of the preceding change.\n   * @returns {boolean} Returns `false` if the whole merged cell was removed.\n   */\n  shift(shiftVector, indexOfChange) {\n    const shiftValue = shiftVector[0] || shiftVector[1];\n    const shiftedIndex = indexOfChange + Math.abs(shiftVector[0] || shiftVector[1]) - 1;\n    const span = shiftVector[0] ? 'colspan' : 'rowspan';\n    const index = shiftVector[0] ? 'col' : 'row';\n    const changeStart = Math.min(indexOfChange, shiftedIndex);\n    const changeEnd = Math.max(indexOfChange, shiftedIndex);\n    const mergeStart = this[index];\n    const mergeEnd = this[index] + this[span] - 1;\n    if (mergeStart >= indexOfChange) {\n      this[index] += shiftValue;\n    }\n\n    // adding rows/columns\n    if (shiftValue > 0) {\n      if (indexOfChange <= mergeEnd && indexOfChange > mergeStart) {\n        this[span] += shiftValue;\n      }\n\n      // removing rows/columns\n    } else if (shiftValue < 0) {\n      // removing the whole merge\n      if (changeStart <= mergeStart && changeEnd >= mergeEnd) {\n        this.removed = true;\n        return false;\n\n        // removing the merge partially, including the beginning\n      } else if (mergeStart >= changeStart && mergeStart <= changeEnd) {\n        const removedOffset = changeEnd - mergeStart + 1;\n        const preRemovedOffset = Math.abs(shiftValue) - removedOffset;\n        this[index] -= preRemovedOffset + shiftValue;\n        this[span] -= removedOffset;\n\n        // removing the middle part of the merge\n      } else if (mergeStart <= changeStart && mergeEnd >= changeEnd) {\n        this[span] += shiftValue;\n\n        // removing the end part of the merge\n      } else if (mergeStart <= changeStart && mergeEnd >= changeStart && mergeEnd < changeEnd) {\n        const removedPart = mergeEnd - changeStart + 1;\n        this[span] -= removedPart;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Check if the second provided merged cell is \"farther\" in the provided direction.\n   *\n   * @param {MergedCellCoords} mergedCell The merged cell to check.\n   * @param {string} direction Drag direction.\n   * @returns {boolean|null} `true` if the second provided merged cell is \"farther\".\n   */\n  isFarther(mergedCell, direction) {\n    if (!mergedCell) {\n      return true;\n    }\n    if (direction === 'down') {\n      return mergedCell.row + mergedCell.rowspan - 1 < this.row + this.rowspan - 1;\n    } else if (direction === 'up') {\n      return mergedCell.row > this.row;\n    } else if (direction === 'right') {\n      return mergedCell.col + mergedCell.colspan - 1 < this.col + this.colspan - 1;\n    } else if (direction === 'left') {\n      return mergedCell.col > this.col;\n    }\n    return null;\n  }\n\n  /**\n   * Get the bottom row index of the merged cell.\n   *\n   * @returns {number}\n   */\n  getLastRow() {\n    return this.row + this.rowspan - 1;\n  }\n\n  /**\n   * Get the rightmost column index of the merged cell.\n   *\n   * @returns {number}\n   */\n  getLastColumn() {\n    return this.col + this.colspan - 1;\n  }\n\n  /**\n   * Get the range coordinates of the merged cell.\n   *\n   * @returns {CellRange}\n   */\n  getRange() {\n    return this.cellRangeFactory(this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.row, this.col), this.cellCoordsFactory(this.getLastRow(), this.getLastColumn()));\n  }\n}\nexport default MergedCellCoords;","/**\n * Apply the `colspan`/`rowspan` properties.\n *\n * @param {HTMLElement} TD The soon-to-be-modified cell.\n * @param {MergedCellCoords} mergedCellInfo The merged cell in question.\n * @param {number} row Row index.\n * @param {number} col Column index.\n */\nexport function applySpanProperties(TD, mergedCellInfo, row, col) {\n  if (mergedCellInfo) {\n    if (mergedCellInfo.row === row && mergedCellInfo.col === col) {\n      TD.setAttribute('rowspan', mergedCellInfo.rowspan.toString());\n      TD.setAttribute('colspan', mergedCellInfo.colspan.toString());\n    } else {\n      TD.removeAttribute('rowspan');\n      TD.removeAttribute('colspan');\n      TD.style.display = 'none';\n    }\n  } else {\n    TD.removeAttribute('rowspan');\n    TD.removeAttribute('colspan');\n    TD.style.display = '';\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport MergedCellCoords from \"./cellCoords.mjs\";\nimport { rangeEach, rangeEachReverse } from \"../../helpers/number.mjs\";\nimport { warn } from \"../../helpers/console.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { applySpanProperties } from \"./utils.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\n/**\n * Defines a container object for the merged cells.\n *\n * @private\n * @class MergedCellsCollection\n */\nclass MergedCellsCollection {\n  constructor(plugin) {\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n    this.plugin = plugin;\n    /**\n     * Array of merged cells.\n     *\n     * @type {Array}\n     */\n    this.mergedCells = [];\n    /**\n     * The Handsontable instance.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = plugin.hot;\n  }\n\n  /**\n   * Get a warning message for when the declared merged cell data overlaps already existing merged cells.\n   *\n   * @param {object} newMergedCell Object containg information about the merged cells that was about to be added.\n   * @returns {string}\n   */\n  static IS_OVERLAPPING_WARNING(newMergedCell) {\n    return toSingleLine`The merged cell declared at [${newMergedCell.row}, ${newMergedCell.col}], overlaps\\x20\n      with the other declared merged cell. The overlapping merged cell was not added to the table, please\\x20\n      fix your setup.`;\n  }\n\n  /**\n   * Get a merged cell from the container, based on the provided arguments. You can provide either the \"starting coordinates\"\n   * of a merged cell, or any coordinates from the body of the merged cell.\n   *\n   * @param {number} row Row index.\n   * @param {number} column Column index.\n   * @returns {MergedCellCoords|boolean} Returns a wanted merged cell on success and `false` on failure.\n   */\n  get(row, column) {\n    const mergedCells = this.mergedCells;\n    let result = false;\n    arrayEach(mergedCells, mergedCell => {\n      if (mergedCell.row <= row && mergedCell.row + mergedCell.rowspan - 1 >= row && mergedCell.col <= column && mergedCell.col + mergedCell.colspan - 1 >= column) {\n        result = mergedCell;\n        return false;\n      }\n      return true;\n    });\n    return result;\n  }\n\n  /**\n   * Get a merged cell containing the provided range.\n   *\n   * @param {CellRange|object} range The range to search merged cells for.\n   * @returns {MergedCellCoords|boolean}\n   */\n  getByRange(range) {\n    const mergedCells = this.mergedCells;\n    let result = false;\n    arrayEach(mergedCells, mergedCell => {\n      if (mergedCell.row <= range.from.row && mergedCell.row + mergedCell.rowspan - 1 >= range.to.row && mergedCell.col <= range.from.col && mergedCell.col + mergedCell.colspan - 1 >= range.to.col) {\n        result = mergedCell;\n        return result;\n      }\n      return true;\n    });\n    return result;\n  }\n\n  /**\n   * Get a merged cell contained in the provided range.\n   *\n   * @param {CellRange|object} range The range to search merged cells in.\n   * @param {boolean} [countPartials=false] If set to `true`, all the merged cells overlapping the range will be taken into calculation.\n   * @returns {Array|boolean} Array of found merged cells of `false` if none were found.\n   */\n  getWithinRange(range) {\n    let countPartials = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const mergedCells = this.mergedCells;\n    const foundMergedCells = [];\n    let testedRange = range;\n    if (!testedRange.includesRange) {\n      const from = this.hot._createCellCoords(testedRange.from.row, testedRange.from.col);\n      const to = this.hot._createCellCoords(testedRange.to.row, testedRange.to.col);\n      testedRange = this.hot._createCellRange(from, from, to);\n    }\n    arrayEach(mergedCells, mergedCell => {\n      const mergedCellTopLeft = this.hot._createCellCoords(mergedCell.row, mergedCell.col);\n      const mergedCellBottomRight = this.hot._createCellCoords(mergedCell.row + mergedCell.rowspan - 1, mergedCell.col + mergedCell.colspan - 1);\n      const mergedCellRange = this.hot._createCellRange(mergedCellTopLeft, mergedCellTopLeft, mergedCellBottomRight);\n      if (countPartials) {\n        if (testedRange.overlaps(mergedCellRange)) {\n          foundMergedCells.push(mergedCell);\n        }\n      } else if (testedRange.includesRange(mergedCellRange)) {\n        foundMergedCells.push(mergedCell);\n      }\n    });\n    return foundMergedCells.length ? foundMergedCells : false;\n  }\n\n  /**\n   * Add a merged cell to the container.\n   *\n   * @param {object} mergedCellInfo The merged cell information object. Has to contain `row`, `col`, `colspan` and `rowspan` properties.\n   * @returns {MergedCellCoords|boolean} Returns the new merged cell on success and `false` on failure.\n   */\n  add(mergedCellInfo) {\n    const mergedCells = this.mergedCells;\n    const row = mergedCellInfo.row;\n    const column = mergedCellInfo.col;\n    const rowspan = mergedCellInfo.rowspan;\n    const colspan = mergedCellInfo.colspan;\n    const newMergedCell = new MergedCellCoords(row, column, rowspan, colspan, this.hot._createCellCoords, this.hot._createCellRange);\n    const alreadyExists = this.get(row, column);\n    const isOverlapping = this.isOverlapping(newMergedCell);\n    if (!alreadyExists && !isOverlapping) {\n      if (this.hot) {\n        newMergedCell.normalize(this.hot);\n      }\n      mergedCells.push(newMergedCell);\n      return newMergedCell;\n    }\n    warn(MergedCellsCollection.IS_OVERLAPPING_WARNING(newMergedCell));\n    return false;\n  }\n\n  /**\n   * Remove a merged cell from the container. You can provide either the \"starting coordinates\"\n   * of a merged cell, or any coordinates from the body of the merged cell.\n   *\n   * @param {number} row Row index.\n   * @param {number} column Column index.\n   * @returns {MergedCellCoords|boolean} Returns the removed merged cell on success and `false` on failure.\n   */\n  remove(row, column) {\n    const mergedCells = this.mergedCells;\n    const wantedCollection = this.get(row, column);\n    const wantedCollectionIndex = wantedCollection ? this.mergedCells.indexOf(wantedCollection) : -1;\n    if (wantedCollection && wantedCollectionIndex !== -1) {\n      mergedCells.splice(wantedCollectionIndex, 1);\n      return wantedCollection;\n    }\n    return false;\n  }\n\n  /**\n   * Clear all the merged cells.\n   */\n  clear() {\n    const mergedCells = this.mergedCells;\n    const mergedCellParentsToClear = [];\n    const hiddenCollectionElements = [];\n    arrayEach(mergedCells, mergedCell => {\n      const TD = this.hot.getCell(mergedCell.row, mergedCell.col);\n      if (TD) {\n        mergedCellParentsToClear.push([TD, this.get(mergedCell.row, mergedCell.col), mergedCell.row, mergedCell.col]);\n      }\n    });\n    this.mergedCells.length = 0;\n    arrayEach(mergedCellParentsToClear, (mergedCell, i) => {\n      rangeEach(0, mergedCell.rowspan - 1, j => {\n        rangeEach(0, mergedCell.colspan - 1, k => {\n          if (k !== 0 || j !== 0) {\n            const TD = this.hot.getCell(mergedCell.row + j, mergedCell.col + k);\n            if (TD) {\n              hiddenCollectionElements.push([TD, null, null, null]);\n            }\n          }\n        });\n      });\n      mergedCellParentsToClear[i][1] = null;\n    });\n    arrayEach(mergedCellParentsToClear, mergedCellParents => {\n      applySpanProperties(...mergedCellParents);\n    });\n    arrayEach(hiddenCollectionElements, hiddenCollectionElement => {\n      applySpanProperties(...hiddenCollectionElement);\n    });\n  }\n\n  /**\n   * Check if the provided merged cell overlaps with the others in the container.\n   *\n   * @param {MergedCellCoords} mergedCell The merged cell to check against all others in the container.\n   * @returns {boolean} `true` if the provided merged cell overlaps with the others, `false` otherwise.\n   */\n  isOverlapping(mergedCell) {\n    const mergedCellRange = this.hot._createCellRange(this.hot._createCellCoords(0, 0), this.hot._createCellCoords(mergedCell.row, mergedCell.col), this.hot._createCellCoords(mergedCell.row + mergedCell.rowspan - 1, mergedCell.col + mergedCell.colspan - 1));\n    let result = false;\n    arrayEach(this.mergedCells, col => {\n      const currentRange = this.hot._createCellRange(this.hot._createCellCoords(0, 0), this.hot._createCellCoords(col.row, col.col), this.hot._createCellCoords(col.row + col.rowspan - 1, col.col + col.colspan - 1));\n      if (currentRange.overlaps(mergedCellRange)) {\n        result = true;\n        return false;\n      }\n      return true;\n    });\n    return result;\n  }\n\n  /**\n   * Check whether the provided row/col coordinates direct to a first not hidden cell within merge area.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {boolean}\n   */\n  isFirstRenderableMergedCell(row, column) {\n    const mergeParent = this.get(row, column);\n\n    // Return if row and column indexes are within merge area and if they are first rendered indexes within the area.\n    return mergeParent && this.hot.rowIndexMapper.getNearestNotHiddenIndex(mergeParent.row, 1) === row && this.hot.columnIndexMapper.getNearestNotHiddenIndex(mergeParent.col, 1) === column;\n  }\n\n  /**\n   * Get the first renderable coords of the merged cell at the provided coordinates.\n   *\n   * @param {number} row Visual row index.\n   * @param {number} column Visual column index.\n   * @returns {CellCoords} A `CellCoords` object with the coordinates to the first renderable cell within the\n   *                        merged cell.\n   */\n  getFirstRenderableCoords(row, column) {\n    const mergeParent = this.get(row, column);\n    if (!mergeParent || this.isFirstRenderableMergedCell(row, column)) {\n      return this.hot._createCellCoords(row, column);\n    }\n    const firstRenderableRow = this.hot.rowIndexMapper.getNearestNotHiddenIndex(mergeParent.row, 1);\n    const firstRenderableColumn = this.hot.columnIndexMapper.getNearestNotHiddenIndex(mergeParent.col, 1);\n    return this.hot._createCellCoords(firstRenderableRow, firstRenderableColumn);\n  }\n\n  /**\n   * Shift the merged cell in the direction and by an offset defined in the arguments.\n   *\n   * @param {string} direction `right`, `left`, `up` or `down`.\n   * @param {number} index Index where the change, which caused the shifting took place.\n   * @param {number} count Number of rows/columns added/removed in the preceding action.\n   */\n  shiftCollections(direction, index, count) {\n    const shiftVector = [0, 0];\n    switch (direction) {\n      case 'right':\n        shiftVector[0] += count;\n        break;\n      case 'left':\n        shiftVector[0] -= count;\n        break;\n      case 'down':\n        shiftVector[1] += count;\n        break;\n      case 'up':\n        shiftVector[1] -= count;\n        break;\n      default:\n    }\n    arrayEach(this.mergedCells, currentMerge => {\n      currentMerge.shift(shiftVector, index);\n    });\n    rangeEachReverse(this.mergedCells.length - 1, 0, i => {\n      const currentMerge = this.mergedCells[i];\n      if (currentMerge && currentMerge.removed) {\n        this.mergedCells.splice(this.mergedCells.indexOf(currentMerge), 1);\n      }\n    });\n  }\n}\nexport default MergedCellsCollection;","import { extend } from \"../../../helpers/object.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\n/**\n * Class responsible for all of the Autofill-related operations on merged cells.\n *\n * @private\n * @class AutofillCalculations\n */\nclass AutofillCalculations {\n  constructor(plugin) {\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n    this.plugin = plugin;\n    /**\n     * Reference to the MergedCellsCollection class instance.\n     *\n     * @type {MergedCellsCollection}\n     */\n    this.mergedCellsCollection = this.plugin.mergedCellsCollection;\n    /**\n     * Cache of the currently processed autofill data.\n     *\n     * @private\n     * @type {object}\n     */\n    this.currentFillData = null;\n  }\n\n  /**\n   * Correct the provided selection area, so it's not selecting only a part of a merged cell.\n   *\n   * @param {Array} selectionArea The selection to correct.\n   */\n  correctSelectionAreaSize(selectionArea) {\n    if (selectionArea[0] === selectionArea[2] && selectionArea[1] === selectionArea[3]) {\n      const mergedCell = this.mergedCellsCollection.get(selectionArea[0], selectionArea[1]);\n      if (mergedCell) {\n        selectionArea[2] = selectionArea[0] + mergedCell.rowspan - 1;\n        selectionArea[3] = selectionArea[1] + mergedCell.colspan - 1;\n      }\n    }\n  }\n\n  /**\n   * Get the direction of the autofill process.\n   *\n   * @param {Array} selectionArea The selection area.\n   * @param {Array} finalArea The final area (base + drag).\n   * @returns {string} `up`, `down`, `left` or `right`.\n   */\n  getDirection(selectionArea, finalArea) {\n    let direction = null;\n    if (finalArea[0] === selectionArea[0] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n      direction = 'down';\n    } else if (finalArea[2] === selectionArea[2] && finalArea[1] === selectionArea[1] && finalArea[3] === selectionArea[3]) {\n      direction = 'up';\n    } else if (finalArea[1] === selectionArea[1] && finalArea[2] === selectionArea[2]) {\n      direction = 'right';\n    } else {\n      direction = 'left';\n    }\n    return direction;\n  }\n\n  /**\n   * Snap the drag area to the farthest merged cell, so it won't clip any of the merged cells.\n   *\n   * @param {Array} baseArea The base selected area.\n   * @param {Array} dragArea The drag area.\n   * @param {string} dragDirection The autofill drag direction.\n   * @param {Array} foundMergedCells MergeCellCoords found in the base selection area.\n   * @returns {Array} The new drag area.\n   */\n  snapDragArea(baseArea, dragArea, dragDirection, foundMergedCells) {\n    const newDragArea = dragArea.slice(0);\n    const fillSize = this.getAutofillSize(baseArea, dragArea, dragDirection);\n    const [baseAreaStartRow, baseAreaStartColumn, baseAreaEndRow, baseAreaEndColumn] = baseArea;\n    const verticalDirection = ['up', 'down'].indexOf(dragDirection) > -1;\n    const fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n    const fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n    const partials = fillSize - fulls;\n    const farthestCollection = this.getFarthestCollection(baseArea, dragArea, dragDirection, foundMergedCells);\n    if (farthestCollection) {\n      if (dragDirection === 'down') {\n        const fill = farthestCollection.row + farthestCollection.rowspan - baseAreaStartRow - partials;\n        const newLimit = newDragArea[2] + fill;\n        if (newLimit >= this.plugin.hot.countRows()) {\n          newDragArea[2] -= partials;\n        } else {\n          newDragArea[2] += partials ? fill : 0;\n        }\n      } else if (dragDirection === 'right') {\n        const fill = farthestCollection.col + farthestCollection.colspan - baseAreaStartColumn - partials;\n        const newLimit = newDragArea[3] + fill;\n        if (newLimit >= this.plugin.hot.countCols()) {\n          newDragArea[3] -= partials;\n        } else {\n          newDragArea[3] += partials ? fill : 0;\n        }\n      } else if (dragDirection === 'up') {\n        const fill = baseAreaEndRow - partials - farthestCollection.row + 1;\n        const newLimit = newDragArea[0] + fill;\n        if (newLimit < 0) {\n          newDragArea[0] += partials;\n        } else {\n          newDragArea[0] -= partials ? fill : 0;\n        }\n      } else if (dragDirection === 'left') {\n        const fill = baseAreaEndColumn - partials - farthestCollection.col + 1;\n        const newLimit = newDragArea[1] + fill;\n        if (newLimit < 0) {\n          newDragArea[1] += partials;\n        } else {\n          newDragArea[1] -= partials ? fill : 0;\n        }\n      }\n    }\n    this.updateCurrentFillCache({\n      baseArea,\n      dragDirection,\n      foundMergedCells,\n      fillSize,\n      dragArea: newDragArea,\n      cycleLength: fullCycle\n    });\n    return newDragArea;\n  }\n\n  /**\n   * Update the current fill cache with the provided object.\n   *\n   * @private\n   * @param {object} updateObject The current filled object cache.\n   */\n  updateCurrentFillCache(updateObject) {\n    if (!this.currentFillData) {\n      this.currentFillData = {};\n    }\n    extend(this.currentFillData, updateObject);\n  }\n\n  /**\n   * Get the \"length\" of the drag area.\n   *\n   * @private\n   * @param {Array} baseArea The base selection area.\n   * @param {Array} dragArea The drag area (containing the base area).\n   * @param {string} direction The drag direction.\n   * @returns {number|null} The \"length\" (height or width, depending on the direction) of the drag.\n   */\n  getAutofillSize(baseArea, dragArea, direction) {\n    const [baseAreaStartRow, baseAreaStartColumn, baseAreaEndRow, baseAreaEndColumn] = baseArea;\n    const [dragAreaStartRow, dragAreaStartColumn, dragAreaEndRow, dragAreaEndColumn] = dragArea;\n    switch (direction) {\n      case 'up':\n        return baseAreaStartRow - dragAreaStartRow;\n      case 'down':\n        return dragAreaEndRow - baseAreaEndRow;\n      case 'left':\n        return baseAreaStartColumn - dragAreaStartColumn;\n      case 'right':\n        return dragAreaEndColumn - baseAreaEndColumn;\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Trim the default drag area (containing the selection area) to the drag-only area.\n   *\n   * @private\n   * @param {Array} baseArea The base selection area.\n   * @param {Array} dragArea The base selection area extended by the drag area.\n   * @param {string} direction Drag direction.\n   * @returns {Array|null} Array representing the drag area coordinates.\n   */\n  getDragArea(baseArea, dragArea, direction) {\n    const [baseAreaStartRow, baseAreaStartColumn, baseAreaEndRow, baseAreaEndColumn] = baseArea;\n    const [dragAreaStartRow, dragAreaStartColumn, dragAreaEndRow, dragAreaEndColumn] = dragArea;\n    switch (direction) {\n      case 'up':\n        return [dragAreaStartRow, dragAreaStartColumn, baseAreaStartRow - 1, baseAreaEndColumn];\n      case 'down':\n        return [baseAreaEndRow + 1, baseAreaStartColumn, dragAreaEndRow, baseAreaEndColumn];\n      case 'left':\n        return [dragAreaStartRow, dragAreaStartColumn, baseAreaEndRow, baseAreaStartColumn - 1];\n      case 'right':\n        return [baseAreaStartRow, baseAreaEndColumn + 1, dragAreaEndRow, dragAreaEndColumn];\n      default:\n        return null;\n    }\n  }\n\n  /**\n   * Get the to-be-farthest merged cell in the newly filled area.\n   *\n   * @private\n   * @param {Array} baseArea The base selection area.\n   * @param {Array} dragArea The drag area (containing the base area).\n   * @param {string} direction The drag direction.\n   * @param {Array} mergedCellArray Array of the merged cells found in the base area.\n   * @returns {MergedCellCoords|null}\n   */\n  getFarthestCollection(baseArea, dragArea, direction, mergedCellArray) {\n    const [baseAreaStartRow, baseAreaStartColumn, baseAreaEndRow, baseAreaEndColumn] = baseArea;\n    const verticalDirection = ['up', 'down'].indexOf(direction) > -1;\n    const baseEnd = verticalDirection ? baseAreaEndRow : baseAreaEndColumn;\n    const baseStart = verticalDirection ? baseAreaStartRow : baseAreaStartColumn;\n    const fillSize = this.getAutofillSize(baseArea, dragArea, direction);\n    const fullCycle = verticalDirection ? baseAreaEndRow - baseAreaStartRow + 1 : baseAreaEndColumn - baseAreaStartColumn + 1;\n    const fulls = Math.floor(fillSize / fullCycle) * fullCycle;\n    const partials = fillSize - fulls;\n    let inclusionFunctionName = null;\n    let farthestCollection = null;\n    let endOfDragRecreationIndex = null;\n    switch (direction) {\n      case 'up':\n        inclusionFunctionName = 'includesVertically';\n        endOfDragRecreationIndex = baseEnd - partials + 1;\n        break;\n      case 'left':\n        inclusionFunctionName = 'includesHorizontally';\n        endOfDragRecreationIndex = baseEnd - partials + 1;\n        break;\n      case 'down':\n        inclusionFunctionName = 'includesVertically';\n        endOfDragRecreationIndex = baseStart + partials - 1;\n        break;\n      case 'right':\n        inclusionFunctionName = 'includesHorizontally';\n        endOfDragRecreationIndex = baseStart + partials - 1;\n        break;\n      default:\n    }\n    arrayEach(mergedCellArray, currentCollection => {\n      if (currentCollection[inclusionFunctionName](endOfDragRecreationIndex) && currentCollection.isFarther(farthestCollection, direction)) {\n        farthestCollection = currentCollection;\n      }\n    });\n    return farthestCollection;\n  }\n\n  /**\n   * Recreate the merged cells after the autofill process.\n   *\n   * @param {Array} changes Changes made.\n   */\n  recreateAfterDataPopulation(changes) {\n    if (!this.currentFillData) {\n      return;\n    }\n    const fillRange = this.getRangeFromChanges(changes);\n    const foundMergedCells = this.currentFillData.foundMergedCells;\n    const dragDirection = this.currentFillData.dragDirection;\n    const inBounds = (current, offset) => {\n      switch (dragDirection) {\n        case 'up':\n          return current.row - offset >= fillRange.from.row;\n        case 'down':\n          return current.row + current.rowspan - 1 + offset <= fillRange.to.row;\n        case 'left':\n          return current.col - offset >= fillRange.from.column;\n        case 'right':\n          return current.col + current.colspan - 1 + offset <= fillRange.to.column;\n        default:\n          return null;\n      }\n    };\n    let fillOffset = 0;\n    let current = null;\n    let multiplier = 1;\n    do {\n      for (let j = 0; j < foundMergedCells.length; j += 1) {\n        current = foundMergedCells[j];\n        fillOffset = multiplier * this.currentFillData.cycleLength;\n        if (inBounds(current, fillOffset)) {\n          switch (dragDirection) {\n            case 'up':\n              this.plugin.mergedCellsCollection.add({\n                row: current.row - fillOffset,\n                rowspan: current.rowspan,\n                col: current.col,\n                colspan: current.colspan\n              });\n              break;\n            case 'down':\n              this.plugin.mergedCellsCollection.add({\n                row: current.row + fillOffset,\n                rowspan: current.rowspan,\n                col: current.col,\n                colspan: current.colspan\n              });\n              break;\n            case 'left':\n              this.plugin.mergedCellsCollection.add({\n                row: current.row,\n                rowspan: current.rowspan,\n                col: current.col - fillOffset,\n                colspan: current.colspan\n              });\n              break;\n            case 'right':\n              this.plugin.mergedCellsCollection.add({\n                row: current.row,\n                rowspan: current.rowspan,\n                col: current.col + fillOffset,\n                colspan: current.colspan\n              });\n              break;\n            default:\n          }\n        }\n        if (j === foundMergedCells.length - 1) {\n          multiplier += 1;\n        }\n      }\n    } while (inBounds(current, fillOffset));\n    this.currentFillData = null;\n    this.plugin.hot.render();\n    if (foundMergedCells.length > 0) {\n      this.plugin.ifChromeForceRepaint();\n    }\n  }\n\n  /**\n   * Get the drag range from the changes made.\n   *\n   * @private\n   * @param {Array} changes The changes made.\n   * @returns {object} Object with `from` and `to` properties, both containing `row` and `column` keys.\n   */\n  getRangeFromChanges(changes) {\n    const rows = {\n      min: null,\n      max: null\n    };\n    const columns = {\n      min: null,\n      max: null\n    };\n    arrayEach(changes, change => {\n      const rowIndex = change[0];\n      const columnIndex = this.plugin.hot.propToCol(change[1]);\n      if (rows.min === null || rowIndex < rows.min) {\n        rows.min = rowIndex;\n      }\n      if (rows.max === null || rowIndex > rows.max) {\n        rows.max = rowIndex;\n      }\n      if (columns.min === null || columnIndex < columns.min) {\n        columns.min = columnIndex;\n      }\n      if (columns.max === null || columnIndex > columns.max) {\n        columns.max = columnIndex;\n      }\n    });\n    return {\n      from: {\n        row: rows.min,\n        column: columns.min\n      },\n      to: {\n        row: rows.max,\n        column: columns.max\n      }\n    };\n  }\n\n  /**\n   * Check if the drag area contains any merged cells.\n   *\n   * @param {Array} baseArea The base selection area.\n   * @param {Array} fullArea The base area extended by the drag area.\n   * @param {string} direction Drag direction.\n   * @returns {boolean}\n   */\n  dragAreaOverlapsCollections(baseArea, fullArea, direction) {\n    const dragArea = this.getDragArea(baseArea, fullArea, direction);\n    const [dragAreaStartRow, dragAreaStartColumn, dragAreaEndRow, dragAreaEndColumn] = dragArea;\n    const topLeft = this.plugin.hot._createCellCoords(dragAreaStartRow, dragAreaStartColumn);\n    const bottomRight = this.plugin.hot._createCellCoords(dragAreaEndRow, dragAreaEndColumn);\n    const dragRange = this.plugin.hot._createCellRange(topLeft, topLeft, bottomRight);\n    return !!this.mergedCellsCollection.getWithinRange(dragRange, true);\n  }\n}\nexport default AutofillCalculations;","import \"core-js/modules/es.array.push.js\";\n/**\n * Class responsible for all of the Selection-related operations on merged cells.\n *\n * @private\n * @class SelectionCalculations\n */\nclass SelectionCalculations {\n  constructor(plugin) {\n    /**\n     * Reference to the Merge Cells plugin.\n     *\n     * @type {MergeCells}\n     */\n    this.plugin = plugin;\n    /**\n     * Reference to the Handsontable instance.\n     *\n     * @type {Handsontable}\n     */\n    this.hot = plugin.hot;\n    /**\n     * Class name used for fully selected merged cells.\n     *\n     * @type {string}\n     */\n    this.fullySelectedMergedCellClassName = 'fullySelectedMergedCell';\n  }\n\n  /**\n   * \"Snap\" the delta value according to defined merged cells. (In other words, compensate the rowspan -\n   * e.g. Going up with `delta.row = -1` over a merged cell with `rowspan = 3`, `delta.row` should change to `-3`.).\n   *\n   * @param {object} delta The delta object containing `row` and `col` properties.\n   * @param {CellRange} selectionRange The selection range.\n   * @param {object} mergedCell A merged cell object.\n   */\n  snapDelta(delta, selectionRange, mergedCell) {\n    const cellCoords = selectionRange.to;\n    const newRow = cellCoords.row + delta.row;\n    const newColumn = cellCoords.col + delta.col;\n    if (delta.row) {\n      this.jumpOverMergedCell(delta, mergedCell, newRow);\n    } else if (delta.col) {\n      this.jumpOverMergedCell(delta, mergedCell, newColumn);\n    }\n  }\n\n  /**\n   * \"Jump\" over the merged cell (compensate for the indexes within the merged cell to get past it).\n   *\n   * @private\n   * @param {object} delta The delta object.\n   * @param {MergedCellCoords} mergedCell The merge cell object.\n   * @param {number} newIndex New row/column index, created with the delta.\n   */\n  jumpOverMergedCell(delta, mergedCell, newIndex) {\n    let flatDelta = delta.row || delta.col;\n    let includesIndex = null;\n    let firstIndex = null;\n    let lastIndex = null;\n    if (delta.row) {\n      includesIndex = mergedCell.includesVertically(newIndex);\n      firstIndex = mergedCell.row;\n      lastIndex = mergedCell.getLastRow();\n    } else if (delta.col) {\n      includesIndex = mergedCell.includesHorizontally(newIndex);\n      firstIndex = mergedCell.col;\n      lastIndex = mergedCell.getLastColumn();\n    }\n    if (flatDelta === 0) {\n      return;\n    } else if (flatDelta > 0) {\n      if (includesIndex && newIndex !== firstIndex) {\n        flatDelta += lastIndex - newIndex + 1;\n      }\n    } else if (includesIndex && newIndex !== lastIndex) {\n      flatDelta -= newIndex - firstIndex + 1;\n    }\n    if (delta.row) {\n      delta.row = flatDelta;\n    } else if (delta.col) {\n      delta.col = flatDelta;\n    }\n  }\n\n  /**\n   * Get a selection range with `to` property incremented by the provided delta.\n   *\n   * @param {CellRange} oldSelectionRange The base selection range.\n   * @param {object} delta The delta object with `row` and `col` properties.\n   * @returns {CellRange} A new `CellRange` object.\n   */\n  getUpdatedSelectionRange(oldSelectionRange, delta) {\n    return this.hot._createCellRange(oldSelectionRange.highlight, oldSelectionRange.from, this.hot._createCellCoords(oldSelectionRange.to.row + delta.row, oldSelectionRange.to.col + delta.col));\n  }\n\n  /**\n   * Generate an additional class name for the entirely-selected merged cells.\n   *\n   * @param {number} currentRow Visual row index of the currently processed cell.\n   * @param {number} currentColumn Visual column index of the currently cell.\n   * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow, endColumn]`.\n   * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.\n   * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently processed cell.\n   */\n  getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel) {\n    const startRow = Math.min(cornersOfSelection[0], cornersOfSelection[2]);\n    const startColumn = Math.min(cornersOfSelection[1], cornersOfSelection[3]);\n    const endRow = Math.max(cornersOfSelection[0], cornersOfSelection[2]);\n    const endColumn = Math.max(cornersOfSelection[1], cornersOfSelection[3]);\n    if (layerLevel === void 0) {\n      return;\n    }\n    const isFirstRenderableMergedCell = this.plugin.mergedCellsCollection.isFirstRenderableMergedCell(currentRow, currentColumn);\n\n    // We add extra classes just to the first renderable merged cell.\n    if (!isFirstRenderableMergedCell) {\n      return;\n    }\n    const mergedCell = this.plugin.mergedCellsCollection.get(currentRow, currentColumn);\n    if (!mergedCell) {\n      return;\n    }\n    const mergeRowEnd = mergedCell.getLastRow();\n    const mergeColumnEnd = mergedCell.getLastColumn();\n    const fullMergeAreaWithinSelection = startRow <= mergedCell.row && startColumn <= mergedCell.col && endRow >= mergeRowEnd && endColumn >= mergeColumnEnd;\n    if (fullMergeAreaWithinSelection) {\n      return `${this.fullySelectedMergedCellClassName}-${layerLevel}`;\n    } else if (this.plugin.selectionCalculations.isMergeCellFullySelected(mergedCell, this.plugin.hot.getSelectedRange())) {\n      // eslint-disable-line max-len\n      return `${this.fullySelectedMergedCellClassName}-multiple`;\n    }\n  }\n\n  /**\n   * Check if the provided merged cell is fully selected (by one or many layers of selection).\n   *\n   * @param {MergedCellCoords} mergedCell The merged cell to be processed.\n   * @param {CellRange[]} selectionRangesArray Array of selection ranges.\n   * @returns {boolean}\n   */\n  isMergeCellFullySelected(mergedCell, selectionRangesArray) {\n    const mergedCellIndividualCoords = [];\n    if (!selectionRangesArray || !mergedCell) {\n      return false;\n    }\n    for (let r = 0; r < mergedCell.rowspan; r += 1) {\n      for (let c = 0; c < mergedCell.colspan; c += 1) {\n        mergedCellIndividualCoords.push(this.hot._createCellCoords(mergedCell.row + r, mergedCell.col + c));\n      }\n    }\n    for (let i = 0; i < mergedCellIndividualCoords.length; i += 1) {\n      const insideSelections = [];\n      for (let s = 0; s < selectionRangesArray.length; s += 1) {\n        insideSelections[s] = selectionRangesArray[s].includes(mergedCellIndividualCoords[i]);\n      }\n      if (!insideSelections.includes(true)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Generate an array of the entirely-selected merged cells' class names.\n   *\n   * @returns {string[]} An `Array` of `String`s. Each of these strings will act like class names to be removed from all the cells in the table.\n   */\n  getSelectedMergedCellClassNameToRemove() {\n    const classNames = [];\n    for (let i = 0; i <= 7; i += 1) {\n      classNames.push(`${this.fullySelectedMergedCellClassName}-${i}`);\n    }\n    classNames.push(`${this.fullySelectedMergedCellClassName}-multiple`);\n    return classNames;\n  }\n}\nexport default SelectionCalculations;","import * as C from \"../../../i18n/constants.mjs\";\nimport MergedCellCoords from \"../cellCoords.mjs\";\n/**\n * @param {*} plugin The plugin instance.\n * @returns {object}\n */\nexport default function toggleMergeItem(plugin) {\n  return {\n    key: 'mergeCells',\n    name() {\n      const sel = this.getSelectedLast();\n      if (sel) {\n        const info = plugin.mergedCellsCollection.get(sel[0], sel[1]);\n        if (info.row === sel[0] && info.col === sel[1] && info.row + info.rowspan - 1 === sel[2] && info.col + info.colspan - 1 === sel[3]) {\n          return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_UNMERGE_CELLS);\n        }\n      }\n      return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_MERGE_CELLS);\n    },\n    callback() {\n      plugin.toggleMergeOnSelection();\n    },\n    disabled() {\n      const sel = this.getSelectedLast();\n      if (!sel) {\n        return true;\n      }\n      const isSingleCell = MergedCellCoords.isSingleCell({\n        row: sel[0],\n        col: sel[1],\n        rowspan: sel[2] - sel[0] + 1,\n        colspan: sel[3] - sel[1] + 1\n      });\n      return isSingleCell || this.selection.isSelectedByCorner();\n    },\n    hidden: false\n  };\n}","import \"core-js/modules/es.array.push.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport MergedCellsCollection from \"./cellsCollection.mjs\";\nimport MergedCellCoords from \"./cellCoords.mjs\";\nimport AutofillCalculations from \"./calculations/autofill.mjs\";\nimport SelectionCalculations from \"./calculations/selection.mjs\";\nimport toggleMergeItem from \"./contextMenuItem/toggleMerge.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { isObject, clone } from \"../../helpers/object.mjs\";\nimport { warn } from \"../../helpers/console.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { applySpanProperties } from \"./utils.mjs\";\nimport { getStyle } from \"../../helpers/dom/element.mjs\";\nimport { isChrome } from \"../../helpers/browser.mjs\";\nHooks.getSingleton().register('beforeMergeCells');\nHooks.getSingleton().register('afterMergeCells');\nHooks.getSingleton().register('beforeUnmergeCells');\nHooks.getSingleton().register('afterUnmergeCells');\nexport const PLUGIN_KEY = 'mergeCells';\nexport const PLUGIN_PRIORITY = 150;\nconst privatePool = new WeakMap();\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin MergeCells\n * @class MergeCells\n *\n * @description\n * Plugin, which allows merging cells in the table (using the initial configuration, API or context menu).\n *\n * @example\n *\n * ::: only-for javascript\n * ```js\n * const hot = new Handsontable(document.getElementById('example'), {\n *  data: getData(),\n *  mergeCells: [\n *    {row: 0, col: 3, rowspan: 3, colspan: 3},\n *    {row: 2, col: 6, rowspan: 2, colspan: 2},\n *    {row: 4, col: 8, rowspan: 3, colspan: 3}\n *  ],\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={getData()}\n *   // enable plugin\n *   mergeCells={[\n *    {row: 0, col: 3, rowspan: 3, colspan: 3},\n *    {row: 2, col: 6, rowspan: 2, colspan: 2},\n *    {row: 4, col: 8, rowspan: 3, colspan: 3}\n *   ]}\n * />\n * ```\n * :::\n */\nexport class MergeCells extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    privatePool.set(this, {\n      lastDesiredCoords: null\n    });\n\n    /**\n     * A container for all the merged cells.\n     *\n     * @private\n     * @type {MergedCellsCollection}\n     */\n    this.mergedCellsCollection = null;\n    /**\n     * Instance of the class responsible for all the autofill-related calculations.\n     *\n     * @private\n     * @type {AutofillCalculations}\n     */\n    this.autofillCalculations = null;\n    /**\n     * Instance of the class responsible for the selection-related calculations.\n     *\n     * @private\n     * @type {SelectionCalculations}\n     */\n    this.selectionCalculations = null;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link MergeCells#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    this.mergedCellsCollection = new MergedCellsCollection(this);\n    this.autofillCalculations = new AutofillCalculations(this);\n    this.selectionCalculations = new SelectionCalculations(this);\n    this.addHook('afterInit', function () {\n      return _this.onAfterInit(...arguments);\n    });\n    this.addHook('modifyTransformStart', function () {\n      return _this.onModifyTransformStart(...arguments);\n    });\n    this.addHook('afterModifyTransformStart', function () {\n      return _this.onAfterModifyTransformStart(...arguments);\n    });\n    this.addHook('modifyTransformEnd', function () {\n      return _this.onModifyTransformEnd(...arguments);\n    });\n    this.addHook('modifyGetCellCoords', function () {\n      return _this.onModifyGetCellCoords(...arguments);\n    });\n    this.addHook('beforeSetRangeStart', function () {\n      return _this.onBeforeSetRangeStart(...arguments);\n    });\n    this.addHook('beforeSetRangeStartOnly', function () {\n      return _this.onBeforeSetRangeStart(...arguments);\n    });\n    this.addHook('beforeSetRangeEnd', function () {\n      return _this.onBeforeSetRangeEnd(...arguments);\n    });\n    this.addHook('afterIsMultipleSelection', function () {\n      return _this.onAfterIsMultipleSelection(...arguments);\n    });\n    this.addHook('afterRenderer', function () {\n      return _this.onAfterRenderer(...arguments);\n    });\n    this.addHook('afterContextMenuDefaultOptions', function () {\n      return _this.addMergeActionsToContextMenu(...arguments);\n    });\n    this.addHook('afterGetCellMeta', function () {\n      return _this.onAfterGetCellMeta(...arguments);\n    });\n    this.addHook('afterViewportRowCalculatorOverride', function () {\n      return _this.onAfterViewportRowCalculatorOverride(...arguments);\n    });\n    this.addHook('afterViewportColumnCalculatorOverride', function () {\n      return _this.onAfterViewportColumnCalculatorOverride(...arguments);\n    });\n    this.addHook('modifyAutofillRange', function () {\n      return _this.onModifyAutofillRange(...arguments);\n    });\n    this.addHook('afterCreateCol', function () {\n      return _this.onAfterCreateCol(...arguments);\n    });\n    this.addHook('afterRemoveCol', function () {\n      return _this.onAfterRemoveCol(...arguments);\n    });\n    this.addHook('afterCreateRow', function () {\n      return _this.onAfterCreateRow(...arguments);\n    });\n    this.addHook('afterRemoveRow', function () {\n      return _this.onAfterRemoveRow(...arguments);\n    });\n    this.addHook('afterChange', function () {\n      return _this.onAfterChange(...arguments);\n    });\n    this.addHook('beforeDrawBorders', function () {\n      return _this.onBeforeDrawAreaBorders(...arguments);\n    });\n    this.addHook('afterDrawSelection', function () {\n      return _this.onAfterDrawSelection(...arguments);\n    });\n    this.addHook('beforeUndoStackChange', (action, source) => {\n      if (source === 'MergeCells') {\n        return false;\n      }\n    });\n    this.registerShortcuts();\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.clearCollections();\n    this.unregisterShortcuts();\n    this.hot.render();\n    super.disablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the\n   * following configuration options:\n   *  - [`mergeCells`](@/api/options.md#mergecells)\n   */\n  updatePlugin() {\n    const settings = this.hot.getSettings()[PLUGIN_KEY];\n    this.disablePlugin();\n    this.enablePlugin();\n    this.generateFromSettings(settings);\n    super.updatePlugin();\n  }\n\n  /**\n   * If the browser is recognized as Chrome, force an additional repaint to prevent showing the effects of a Chrome bug.\n   *\n   * Issue described in https://github.com/handsontable/dev-handsontable/issues/521.\n   *\n   * @private\n   */\n  ifChromeForceRepaint() {\n    if (!isChrome()) {\n      return;\n    }\n    const rowsToRefresh = [];\n    let rowIndexesToRefresh = [];\n    this.mergedCellsCollection.mergedCells.forEach(mergedCell => {\n      const {\n        row,\n        rowspan\n      } = mergedCell;\n      for (let r = row + 1; r < row + rowspan; r++) {\n        rowIndexesToRefresh.push(r);\n      }\n    });\n\n    // Remove duplicates\n    rowIndexesToRefresh = [...new Set(rowIndexesToRefresh)];\n    rowIndexesToRefresh.forEach(rowIndex => {\n      const renderableRowIndex = this.hot.rowIndexMapper.getRenderableFromVisualIndex(rowIndex);\n      this.hot.view._wt.wtOverlays.getOverlays(true).map(overlay => (overlay === null || overlay === void 0 ? void 0 : overlay.name) === 'master' ? overlay : overlay.clone.wtTable).forEach(wtTableRef => {\n        const rowToRefresh = wtTableRef.getRow(renderableRowIndex);\n        if (rowToRefresh) {\n          // Modify the TR's `background` property to later modify it asynchronously.\n          // The background color is getting modified only with the alpha, so the change should not be visible (and is\n          // covered by the TDs' background color).\n          rowToRefresh.style.background = getStyle(rowToRefresh, 'backgroundColor').replace(')', ', 0.99)');\n          rowsToRefresh.push(rowToRefresh);\n        }\n      });\n    });\n\n    // Asynchronously revert the TRs' `background` property to force a fresh repaint.\n    this.hot._registerTimeout(() => {\n      rowsToRefresh.forEach(rowElement => {\n        rowElement.style.background = getStyle(rowElement, 'backgroundColor').replace(', 0.99)', ')');\n      });\n    }, 1);\n  }\n\n  /**\n   * Validates a single setting object, represented by a single merged cell information object.\n   *\n   * @private\n   * @param {object} setting An object with `row`, `col`, `rowspan` and `colspan` properties.\n   * @returns {boolean}\n   */\n  validateSetting(setting) {\n    let valid = true;\n    if (!setting) {\n      return false;\n    }\n    if (MergedCellCoords.containsNegativeValues(setting)) {\n      warn(MergedCellCoords.NEGATIVE_VALUES_WARNING(setting));\n      valid = false;\n    } else if (MergedCellCoords.isOutOfBounds(setting, this.hot.countRows(), this.hot.countCols())) {\n      warn(MergedCellCoords.IS_OUT_OF_BOUNDS_WARNING(setting));\n      valid = false;\n    } else if (MergedCellCoords.isSingleCell(setting)) {\n      warn(MergedCellCoords.IS_SINGLE_CELL(setting));\n      valid = false;\n    } else if (MergedCellCoords.containsZeroSpan(setting)) {\n      warn(MergedCellCoords.ZERO_SPAN_WARNING(setting));\n      valid = false;\n    }\n    return valid;\n  }\n\n  /**\n   * Generates the merged cells from the settings provided to the plugin.\n   *\n   * @private\n   * @param {Array|boolean} settings The settings provided to the plugin.\n   */\n  generateFromSettings(settings) {\n    if (Array.isArray(settings)) {\n      const populatedNulls = [];\n      arrayEach(settings, setting => {\n        if (!this.validateSetting(setting)) {\n          return;\n        }\n        const highlight = this.hot._createCellCoords(setting.row, setting.col);\n        const rangeEnd = this.hot._createCellCoords(setting.row + setting.rowspan - 1, setting.col + setting.colspan - 1);\n        const mergeRange = this.hot._createCellRange(highlight, highlight, rangeEnd);\n\n        // Merging without data population.\n        this.mergeRange(mergeRange, true, true);\n        rangeEach(setting.row, setting.row + setting.rowspan - 1, rowIndex => {\n          rangeEach(setting.col, setting.col + setting.colspan - 1, columnIndex => {\n            // Not resetting a cell representing a merge area's value.\n            if ((rowIndex === setting.row && columnIndex === setting.col) === false) {\n              populatedNulls.push([rowIndex, columnIndex, null]);\n            }\n          });\n        });\n      });\n\n      // There are no merged cells. Thus, no data population is needed.\n      if (populatedNulls.length === 0) {\n        return;\n      }\n      this.hot.setDataAtCell(populatedNulls);\n    }\n  }\n\n  /**\n   * Clears the merged cells from the merged cell container.\n   */\n  clearCollections() {\n    this.mergedCellsCollection.clear();\n  }\n\n  /**\n   * Returns `true` if a range is mergeable.\n   *\n   * @private\n   * @param {object} newMergedCellInfo Merged cell information object to test.\n   * @param {boolean} [auto=false] `true` if triggered at initialization.\n   * @returns {boolean}\n   */\n  canMergeRange(newMergedCellInfo) {\n    let auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    return auto ? true : this.validateSetting(newMergedCellInfo);\n  }\n\n  /**\n   * Merge or unmerge, based on last selected range.\n   *\n   * @private\n   */\n  toggleMergeOnSelection() {\n    const currentRange = this.hot.getSelectedRangeLast();\n    if (!currentRange) {\n      return;\n    }\n    currentRange.setDirection(this.hot.isRtl() ? 'NE-SW' : 'NW-SE');\n    const {\n      from,\n      to\n    } = currentRange;\n    this.toggleMerge(currentRange);\n    this.hot.selectCell(from.row, from.col, to.row, to.col, false);\n  }\n\n  /**\n   * Merges the selection provided as a cell range.\n   *\n   * @param {CellRange} [cellRange] Selection cell range.\n   */\n  mergeSelection() {\n    let cellRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hot.getSelectedRangeLast();\n    if (!cellRange) {\n      return;\n    }\n    cellRange.setDirection(this.hot.isRtl() ? 'NE-SW' : 'NW-SE');\n    const {\n      from,\n      to\n    } = cellRange;\n    this.unmergeRange(cellRange, true);\n    this.mergeRange(cellRange);\n    this.hot.selectCell(from.row, from.col, to.row, to.col, false);\n  }\n\n  /**\n   * Unmerges the selection provided as a cell range.\n   *\n   * @param {CellRange} [cellRange] Selection cell range.\n   */\n  unmergeSelection() {\n    let cellRange = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.hot.getSelectedRangeLast();\n    if (!cellRange) {\n      return;\n    }\n    const {\n      from,\n      to\n    } = cellRange;\n    this.unmergeRange(cellRange, true);\n    this.hot.selectCell(from.row, from.col, to.row, to.col, false);\n  }\n\n  /**\n   * Merges cells in the provided cell range.\n   *\n   * @private\n   * @param {CellRange} cellRange Cell range to merge.\n   * @param {boolean} [auto=false] `true` if is called automatically, e.g. At initialization.\n   * @param {boolean} [preventPopulation=false] `true`, if the method should not run `populateFromArray` at the end,\n   *   but rather return its arguments.\n   * @returns {Array|boolean} Returns an array of [row, column, dataUnderCollection] if preventPopulation is set to\n   *   true. If the the merging process went successful, it returns `true`, otherwise - `false`.\n   * @fires Hooks#beforeMergeCells\n   * @fires Hooks#afterMergeCells\n   */\n  mergeRange(cellRange) {\n    let auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let preventPopulation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const topStart = cellRange.getTopStartCorner();\n    const bottomEnd = cellRange.getBottomEndCorner();\n    const mergeParent = {\n      row: topStart.row,\n      col: topStart.col,\n      rowspan: bottomEnd.row - topStart.row + 1,\n      colspan: bottomEnd.col - topStart.col + 1\n    };\n    const clearedData = [];\n    let populationInfo = null;\n    if (!this.canMergeRange(mergeParent, auto)) {\n      return false;\n    }\n    this.hot.runHooks('beforeMergeCells', cellRange, auto);\n    rangeEach(0, mergeParent.rowspan - 1, i => {\n      rangeEach(0, mergeParent.colspan - 1, j => {\n        let clearedValue = null;\n        if (!clearedData[i]) {\n          clearedData[i] = [];\n        }\n        if (i === 0 && j === 0) {\n          clearedValue = this.hot.getSourceDataAtCell(this.hot.toPhysicalRow(mergeParent.row), this.hot.toPhysicalColumn(mergeParent.col));\n        } else {\n          this.hot.setCellMeta(mergeParent.row + i, mergeParent.col + j, 'hidden', true);\n        }\n        clearedData[i][j] = clearedValue;\n      });\n    });\n    this.hot.setCellMeta(mergeParent.row, mergeParent.col, 'spanned', true);\n    const mergedCellAdded = this.mergedCellsCollection.add(mergeParent);\n    if (mergedCellAdded) {\n      if (preventPopulation) {\n        populationInfo = [mergeParent.row, mergeParent.col, clearedData];\n      } else {\n        this.hot.populateFromArray(mergeParent.row, mergeParent.col, clearedData, void 0, void 0, this.pluginName);\n      }\n      if (!auto) {\n        this.ifChromeForceRepaint();\n      }\n      this.hot.runHooks('afterMergeCells', cellRange, mergeParent, auto);\n      return populationInfo;\n    }\n    return true;\n  }\n\n  /**\n   * Unmerges the selection provided as a cell range. If no cell range is provided, it uses the current selection.\n   *\n   * @private\n   * @param {CellRange} cellRange Selection cell range.\n   * @param {boolean} [auto=false] `true` if called automatically by the plugin.\n   *\n   * @fires Hooks#beforeUnmergeCells\n   * @fires Hooks#afterUnmergeCells\n   */\n  unmergeRange(cellRange) {\n    let auto = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    const mergedCells = this.mergedCellsCollection.getWithinRange(cellRange);\n    if (!mergedCells) {\n      return;\n    }\n    this.hot.runHooks('beforeUnmergeCells', cellRange, auto);\n    arrayEach(mergedCells, currentCollection => {\n      this.mergedCellsCollection.remove(currentCollection.row, currentCollection.col);\n      rangeEach(0, currentCollection.rowspan - 1, i => {\n        rangeEach(0, currentCollection.colspan - 1, j => {\n          this.hot.removeCellMeta(currentCollection.row + i, currentCollection.col + j, 'hidden');\n          this.hot.removeCellMeta(currentCollection.row + i, currentCollection.col + j, 'copyable');\n        });\n      });\n      this.hot.removeCellMeta(currentCollection.row, currentCollection.col, 'spanned');\n    });\n    this.hot.runHooks('afterUnmergeCells', cellRange, auto);\n    this.hot.render();\n  }\n\n  /**\n   * Merges or unmerges, based on the cell range provided as `cellRange`.\n   *\n   * @private\n   * @param {CellRange} cellRange The cell range to merge or unmerged.\n   */\n  toggleMerge(cellRange) {\n    const mergedCell = this.mergedCellsCollection.get(cellRange.from.row, cellRange.from.col);\n    const mergedCellCoversWholeRange = mergedCell.row === cellRange.from.row && mergedCell.col === cellRange.from.col && mergedCell.row + mergedCell.rowspan - 1 === cellRange.to.row && mergedCell.col + mergedCell.colspan - 1 === cellRange.to.col;\n    if (mergedCellCoversWholeRange) {\n      this.unmergeRange(cellRange);\n    } else {\n      this.mergeSelection(cellRange);\n    }\n  }\n\n  /**\n   * Merges the specified range.\n   *\n   * @param {number} startRow Start row of the merged cell.\n   * @param {number} startColumn Start column of the merged cell.\n   * @param {number} endRow End row of the merged cell.\n   * @param {number} endColumn End column of the merged cell.\n   * @fires Hooks#beforeMergeCells\n   * @fires Hooks#afterMergeCells\n   */\n  merge(startRow, startColumn, endRow, endColumn) {\n    const start = this.hot._createCellCoords(startRow, startColumn);\n    const end = this.hot._createCellCoords(endRow, endColumn);\n    this.mergeRange(this.hot._createCellRange(start, start, end));\n  }\n\n  /**\n   * Unmerges the merged cell in the provided range.\n   *\n   * @param {number} startRow Start row of the merged cell.\n   * @param {number} startColumn Start column of the merged cell.\n   * @param {number} endRow End row of the merged cell.\n   * @param {number} endColumn End column of the merged cell.\n   * @fires Hooks#beforeUnmergeCells\n   * @fires Hooks#afterUnmergeCells\n   */\n  unmerge(startRow, startColumn, endRow, endColumn) {\n    const start = this.hot._createCellCoords(startRow, startColumn);\n    const end = this.hot._createCellCoords(endRow, endColumn);\n    this.unmergeRange(this.hot._createCellRange(start, start, end));\n  }\n\n  /**\n   * `afterInit` hook callback.\n   *\n   * @private\n   */\n  onAfterInit() {\n    this.generateFromSettings(this.hot.getSettings()[PLUGIN_KEY]);\n    this.hot.render();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling a merge.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    const shortcutManager = this.hot.getShortcutManager();\n    const gridContext = shortcutManager.getContext('grid');\n    gridContext.addShortcut({\n      keys: [['Control', 'm']],\n      callback: () => {\n        const range = this.hot.getSelectedRangeLast();\n        if (range && !range.isSingleHeader()) {\n          this.toggleMerge(range);\n          this.hot.render();\n        }\n      },\n      runOnlyIf: event => !event.altKey,\n      // right ALT in some systems triggers ALT+CTRL\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling a merge.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    const shortcutManager = this.hot.getShortcutManager();\n    const gridContext = shortcutManager.getContext('grid');\n    gridContext.removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Modifies the information on whether the current selection contains multiple cells. The `afterIsMultipleSelection`\n   * hook callback.\n   *\n   * @private\n   * @param {boolean} isMultiple Determines whether the current selection contains multiple cells.\n   * @returns {boolean}\n   */\n  onAfterIsMultipleSelection(isMultiple) {\n    if (isMultiple) {\n      const mergedCells = this.mergedCellsCollection.mergedCells;\n      const selectionRange = this.hot.getSelectedRangeLast();\n      for (let group = 0; group < mergedCells.length; group += 1) {\n        if (selectionRange.from.row === mergedCells[group].row && selectionRange.from.col === mergedCells[group].col && selectionRange.to.row === mergedCells[group].row + mergedCells[group].rowspan - 1 && selectionRange.to.col === mergedCells[group].col + mergedCells[group].colspan - 1) {\n          return false;\n        }\n      }\n    }\n    return isMultiple;\n  }\n\n  /**\n   * `modifyTransformStart` hook callback.\n   *\n   * @private\n   * @param {object} delta The transformation delta.\n   */\n  onModifyTransformStart(delta) {\n    const priv = privatePool.get(this);\n    const currentlySelectedRange = this.hot.getSelectedRangeLast();\n    let newDelta = {\n      row: delta.row,\n      col: delta.col\n    };\n    let nextPosition = null;\n    const currentPosition = this.hot._createCellCoords(currentlySelectedRange.highlight.row, currentlySelectedRange.highlight.col);\n    const mergedParent = this.mergedCellsCollection.get(currentPosition.row, currentPosition.col);\n    if (!priv.lastDesiredCoords) {\n      priv.lastDesiredCoords = this.hot._createCellCoords(null, null);\n    }\n    if (mergedParent) {\n      // only merge selected\n      const mergeTopLeft = this.hot._createCellCoords(mergedParent.row, mergedParent.col);\n      const mergeBottomRight = this.hot._createCellCoords(mergedParent.row + mergedParent.rowspan - 1, mergedParent.col + mergedParent.colspan - 1);\n      const mergeRange = this.hot._createCellRange(mergeTopLeft, mergeTopLeft, mergeBottomRight);\n      if (!mergeRange.includes(priv.lastDesiredCoords)) {\n        priv.lastDesiredCoords = this.hot._createCellCoords(null, null); // reset outdated version of lastDesiredCoords\n      }\n\n      newDelta.row = priv.lastDesiredCoords.row ? priv.lastDesiredCoords.row - currentPosition.row : newDelta.row;\n      newDelta.col = priv.lastDesiredCoords.col ? priv.lastDesiredCoords.col - currentPosition.col : newDelta.col;\n      if (delta.row > 0) {\n        // moving down\n        newDelta.row = mergedParent.row + mergedParent.rowspan - 1 - currentPosition.row + delta.row;\n      } else if (delta.row < 0) {\n        // moving up\n        newDelta.row = currentPosition.row - mergedParent.row + delta.row;\n      }\n      if (delta.col > 0) {\n        // moving right\n        newDelta.col = mergedParent.col + mergedParent.colspan - 1 - currentPosition.col + delta.col;\n      } else if (delta.col < 0) {\n        // moving left\n        newDelta.col = currentPosition.col - mergedParent.col + delta.col;\n      }\n    }\n    nextPosition = this.hot._createCellCoords(currentlySelectedRange.highlight.row + newDelta.row, currentlySelectedRange.highlight.col + newDelta.col);\n    const nextPositionMergedCell = this.mergedCellsCollection.get(nextPosition.row, nextPosition.col);\n    if (nextPositionMergedCell) {\n      // skipping the invisible cells in the merge range\n      const firstRenderableCoords = this.mergedCellsCollection.getFirstRenderableCoords(nextPositionMergedCell.row, nextPositionMergedCell.col);\n      priv.lastDesiredCoords = nextPosition;\n      newDelta = {\n        row: firstRenderableCoords.row - currentPosition.row,\n        col: firstRenderableCoords.col - currentPosition.col\n      };\n    }\n    if (newDelta.row !== 0) {\n      delta.row = newDelta.row;\n    }\n    if (newDelta.col !== 0) {\n      delta.col = newDelta.col;\n    }\n  }\n\n  /**\n   * `modifyTransformEnd` hook callback. Needed to handle \"jumping over\" merged merged cells, while selecting.\n   *\n   * @private\n   * @param {object} delta The transformation delta.\n   */\n  onModifyTransformEnd(delta) {\n    const currentSelectionRange = this.hot.getSelectedRangeLast();\n    const newDelta = clone(delta);\n    const newSelectionRange = this.selectionCalculations.getUpdatedSelectionRange(currentSelectionRange, delta);\n    let tempDelta = clone(newDelta);\n    const mergedCellsWithinRange = this.mergedCellsCollection.getWithinRange(newSelectionRange, true);\n    do {\n      tempDelta = clone(newDelta);\n      this.selectionCalculations.getUpdatedSelectionRange(currentSelectionRange, newDelta);\n      arrayEach(mergedCellsWithinRange, mergedCell => {\n        this.selectionCalculations.snapDelta(newDelta, currentSelectionRange, mergedCell);\n      });\n    } while (newDelta.row !== tempDelta.row || newDelta.col !== tempDelta.col);\n    delta.row = newDelta.row;\n    delta.col = newDelta.col;\n  }\n\n  /**\n   * `modifyGetCellCoords` hook callback. Swaps the `getCell` coords with the merged parent coords.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @param {number} column Visual column index.\n   * @returns {Array|undefined} Visual coordinates of the merge.\n   */\n  onModifyGetCellCoords(row, column) {\n    if (row < 0 || column < 0) {\n      return;\n    }\n    const mergeParent = this.mergedCellsCollection.get(row, column);\n    if (!mergeParent) {\n      return;\n    }\n    const {\n      row: mergeRow,\n      col: mergeColumn,\n      colspan,\n      rowspan\n    } = mergeParent;\n    return [\n    // Most top-left merged cell coords.\n    mergeRow, mergeColumn,\n    // Most bottom-right merged cell coords.\n    mergeRow + rowspan - 1, mergeColumn + colspan - 1];\n  }\n\n  /**\n   * `afterContextMenuDefaultOptions` hook callback.\n   *\n   * @private\n   * @param {object} defaultOptions The default context menu options.\n   */\n  addMergeActionsToContextMenu(defaultOptions) {\n    defaultOptions.items.push({\n      name: '---------'\n    }, toggleMergeItem(this));\n  }\n\n  /**\n   * `afterRenderer` hook callback.\n   *\n   * @private\n   * @param {HTMLElement} TD The cell to be modified.\n   * @param {number} row Row index.\n   * @param {number} col Visual column index.\n   */\n  onAfterRenderer(TD, row, col) {\n    const mergedCell = this.mergedCellsCollection.get(row, col);\n    // We shouldn't override data in the collection.\n    const mergedCellCopy = isObject(mergedCell) ? clone(mergedCell) : void 0;\n    if (isObject(mergedCellCopy)) {\n      const {\n        rowIndexMapper: rowMapper,\n        columnIndexMapper: columnMapper\n      } = this.hot;\n      const {\n        row: mergeRow,\n        col: mergeColumn,\n        colspan,\n        rowspan\n      } = mergedCellCopy;\n      const [lastMergedRowIndex, lastMergedColumnIndex] = this.translateMergedCellToRenderable(mergeRow, rowspan, mergeColumn, colspan);\n      const renderedRowIndex = rowMapper.getRenderableFromVisualIndex(row);\n      const renderedColumnIndex = columnMapper.getRenderableFromVisualIndex(col);\n      const maxRowSpan = lastMergedRowIndex - renderedRowIndex + 1; // Number of rendered columns.\n      const maxColSpan = lastMergedColumnIndex - renderedColumnIndex + 1; // Number of rendered columns.\n\n      // We just try to determine some values basing on the actual number of rendered indexes (some columns may be hidden).\n      mergedCellCopy.row = rowMapper.getNearestNotHiddenIndex(mergedCellCopy.row, 1);\n      // We just try to determine some values basing on the actual number of rendered indexes (some columns may be hidden).\n      mergedCellCopy.col = columnMapper.getNearestNotHiddenIndex(mergedCellCopy.col, 1);\n      // The `rowSpan` property for a `TD` element should be at most equal to number of rendered rows in the merge area.\n      mergedCellCopy.rowspan = Math.min(mergedCellCopy.rowspan, maxRowSpan);\n      // The `colSpan` property for a `TD` element should be at most equal to number of rendered columns in the merge area.\n      mergedCellCopy.colspan = Math.min(mergedCellCopy.colspan, maxColSpan);\n    }\n    applySpanProperties(TD, mergedCellCopy, row, col);\n  }\n\n  /**\n   * `beforeSetRangeStart` and `beforeSetRangeStartOnly` hook callback.\n   * A selection within merge area should be rewritten to the start of merge area.\n   *\n   * @private\n   * @param {object} coords Cell coords.\n   */\n  onBeforeSetRangeStart(coords) {\n    // TODO: It is a workaround, but probably this hook may be needed. Every selection on the merge area\n    // could set start point of the selection to the start of the merge area. However, logic inside `expandByRange` need\n    // an initial start point. Click on the merge cell when there are some hidden indexes break the logic in some cases.\n    // Please take a look at #7010 for more information. I'm not sure if selection directions are calculated properly\n    // and what was idea for flipping direction inside `expandByRange` method.\n    if (this.mergedCellsCollection.isFirstRenderableMergedCell(coords.row, coords.col)) {\n      const mergeParent = this.mergedCellsCollection.get(coords.row, coords.col);\n      [coords.row, coords.col] = [mergeParent.row, mergeParent.col];\n    }\n  }\n\n  /**\n   * `beforeSetRangeEnd` hook callback.\n   * While selecting cells with keyboard or mouse, make sure that rectangular area is expanded to the extent of the\n   * merged cell.\n   *\n   * Note: Please keep in mind that callback may modify both start and end range coordinates by the reference.\n   *\n   * @private\n   * @param {object} coords Cell coords.\n   */\n  onBeforeSetRangeEnd(coords) {\n    const selRange = this.hot.getSelectedRangeLast();\n    selRange.highlight = this.hot._createCellCoords(selRange.highlight.row, selRange.highlight.col); // clone in case we will modify its reference\n    selRange.to = coords;\n    let rangeExpanded = false;\n    if (this.hot.selection.isSelectedByColumnHeader() || this.hot.selection.isSelectedByRowHeader()) {\n      return;\n    }\n    do {\n      rangeExpanded = false;\n      for (let i = 0; i < this.mergedCellsCollection.mergedCells.length; i += 1) {\n        const cellInfo = this.mergedCellsCollection.mergedCells[i];\n        const mergedCellRange = cellInfo.getRange();\n        if (selRange.expandByRange(mergedCellRange)) {\n          coords.row = selRange.to.row;\n          coords.col = selRange.to.col;\n          rangeExpanded = true;\n        }\n      }\n    } while (rangeExpanded);\n  }\n\n  /**\n   * The `afterGetCellMeta` hook callback.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @param {number} col Column index.\n   * @param {object} cellProperties The cell properties object.\n   */\n  onAfterGetCellMeta(row, col, cellProperties) {\n    const mergeParent = this.mergedCellsCollection.get(row, col);\n    if (mergeParent) {\n      if (mergeParent.row !== row || mergeParent.col !== col) {\n        cellProperties.copyable = false;\n      } else {\n        cellProperties.rowspan = mergeParent.rowspan;\n        cellProperties.colspan = mergeParent.colspan;\n      }\n    }\n  }\n\n  /**\n   * `afterViewportRowCalculatorOverride` hook callback.\n   *\n   * @private\n   * @param {object} calc The row calculator object.\n   */\n  onAfterViewportRowCalculatorOverride(calc) {\n    const nrOfColumns = this.hot.countCols();\n    this.modifyViewportRowStart(calc, nrOfColumns);\n    this.modifyViewportRowEnd(calc, nrOfColumns);\n  }\n\n  /**\n   * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.\n   *\n   * @private\n   * @param {object} calc The row calculator object.\n   * @param {number} nrOfColumns Number of visual columns.\n   */\n  modifyViewportRowStart(calc, nrOfColumns) {\n    const rowMapper = this.hot.rowIndexMapper;\n    const visualStartRow = rowMapper.getVisualFromRenderableIndex(calc.startRow);\n    for (let visualColumnIndex = 0; visualColumnIndex < nrOfColumns; visualColumnIndex += 1) {\n      const mergeParentForViewportStart = this.mergedCellsCollection.get(visualStartRow, visualColumnIndex);\n      if (isObject(mergeParentForViewportStart)) {\n        const renderableIndexAtMergeStart = rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(mergeParentForViewportStart.row, 1));\n\n        // Merge start is out of the viewport (i.e. when we scrolled to the bottom and we can see just part of a merge).\n        if (renderableIndexAtMergeStart < calc.startRow) {\n          // We extend viewport when some rows have been merged.\n          calc.startRow = renderableIndexAtMergeStart;\n          // We are looking for next merges inside already extended viewport (starting again from row equal to 0).\n          this.modifyViewportRowStart(calc, nrOfColumns); // recursively search upwards\n\n          return; // Finish the current loop. Everything will be checked from the beginning by above recursion.\n        }\n      }\n    }\n  }\n\n  /**\n   *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.\n   *\n   * @private\n   * @param {object} calc The row calculator object.\n   * @param {number} nrOfColumns Number of visual columns.\n   */\n  modifyViewportRowEnd(calc, nrOfColumns) {\n    const rowMapper = this.hot.rowIndexMapper;\n    const visualEndRow = rowMapper.getVisualFromRenderableIndex(calc.endRow);\n    for (let visualColumnIndex = 0; visualColumnIndex < nrOfColumns; visualColumnIndex += 1) {\n      const mergeParentForViewportEnd = this.mergedCellsCollection.get(visualEndRow, visualColumnIndex);\n      if (isObject(mergeParentForViewportEnd)) {\n        const mergeEnd = mergeParentForViewportEnd.row + mergeParentForViewportEnd.rowspan - 1;\n        const renderableIndexAtMergeEnd = rowMapper.getRenderableFromVisualIndex(rowMapper.getNearestNotHiddenIndex(mergeEnd, -1));\n\n        // Merge end is out of the viewport.\n        if (renderableIndexAtMergeEnd > calc.endRow) {\n          // We extend the viewport when some rows have been merged.\n          calc.endRow = renderableIndexAtMergeEnd;\n          // We are looking for next merges inside already extended viewport (starting again from row equal to 0).\n          this.modifyViewportRowEnd(calc, nrOfColumns); // recursively search upwards\n\n          return; // Finish the current loop. Everything will be checked from the beginning by above recursion.\n        }\n      }\n    }\n  }\n\n  /**\n   * `afterViewportColumnCalculatorOverride` hook callback.\n   *\n   * @private\n   * @param {object} calc The column calculator object.\n   */\n  onAfterViewportColumnCalculatorOverride(calc) {\n    const nrOfRows = this.hot.countRows();\n    this.modifyViewportColumnStart(calc, nrOfRows);\n    this.modifyViewportColumnEnd(calc, nrOfRows);\n  }\n\n  /**\n   * Modify viewport start when needed. We extend viewport when merged cells aren't fully visible.\n   *\n   * @private\n   * @param {object} calc The column calculator object.\n   * @param {number} nrOfRows Number of visual rows.\n   */\n  modifyViewportColumnStart(calc, nrOfRows) {\n    const columnMapper = this.hot.columnIndexMapper;\n    const visualStartCol = columnMapper.getVisualFromRenderableIndex(calc.startColumn);\n    for (let visualRowIndex = 0; visualRowIndex < nrOfRows; visualRowIndex += 1) {\n      const mergeParentForViewportStart = this.mergedCellsCollection.get(visualRowIndex, visualStartCol);\n      if (isObject(mergeParentForViewportStart)) {\n        const renderableIndexAtMergeStart = columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(mergeParentForViewportStart.col, 1));\n\n        // Merge start is out of the viewport (i.e. when we scrolled to the right and we can see just part of a merge).\n        if (renderableIndexAtMergeStart < calc.startColumn) {\n          // We extend viewport when some columns have been merged.\n          calc.startColumn = renderableIndexAtMergeStart;\n          // We are looking for next merges inside already extended viewport (starting again from column equal to 0).\n          this.modifyViewportColumnStart(calc, nrOfRows); // recursively search upwards\n\n          return; // Finish the current loop. Everything will be checked from the beginning by above recursion.\n        }\n      }\n    }\n  }\n\n  /**\n   *  Modify viewport end when needed. We extend viewport when merged cells aren't fully visible.\n   *\n   * @private\n   * @param {object} calc The column calculator object.\n   * @param {number} nrOfRows Number of visual rows.\n   */\n  modifyViewportColumnEnd(calc, nrOfRows) {\n    const columnMapper = this.hot.columnIndexMapper;\n    const visualEndCol = columnMapper.getVisualFromRenderableIndex(calc.endColumn);\n    for (let visualRowIndex = 0; visualRowIndex < nrOfRows; visualRowIndex += 1) {\n      const mergeParentForViewportEnd = this.mergedCellsCollection.get(visualRowIndex, visualEndCol);\n      if (isObject(mergeParentForViewportEnd)) {\n        const mergeEnd = mergeParentForViewportEnd.col + mergeParentForViewportEnd.colspan - 1;\n        const renderableIndexAtMergeEnd = columnMapper.getRenderableFromVisualIndex(columnMapper.getNearestNotHiddenIndex(mergeEnd, -1));\n\n        // Merge end is out of the viewport.\n        if (renderableIndexAtMergeEnd > calc.endColumn) {\n          // We extend the viewport when some columns have been merged.\n          calc.endColumn = renderableIndexAtMergeEnd;\n          // We are looking for next merges inside already extended viewport (starting again from column equal to 0).\n          this.modifyViewportColumnEnd(calc, nrOfRows); // recursively search upwards\n\n          return; // Finish the current loop. Everything will be checked from the beginning by above recursion.\n        }\n      }\n    }\n  }\n\n  /**\n   * Translates merged cell coordinates to renderable indexes.\n   *\n   * @private\n   * @param {number} parentRow Visual row index.\n   * @param {number} rowspan Rowspan which describes shift which will be applied to parent row\n   *                         to calculate renderable index which points to the most bottom\n   *                         index position. Pass rowspan as `0` to calculate the most top\n   *                         index position.\n   * @param {number} parentColumn Visual column index.\n   * @param {number} colspan Colspan which describes shift which will be applied to parent column\n   *                         to calculate renderable index which points to the most right\n   *                         index position. Pass colspan as `0` to calculate the most left\n   *                         index position.\n   * @returns {number[]}\n   */\n  translateMergedCellToRenderable(parentRow, rowspan, parentColumn, colspan) {\n    const {\n      rowIndexMapper: rowMapper,\n      columnIndexMapper: columnMapper\n    } = this.hot;\n    let firstNonHiddenRow;\n    let firstNonHiddenColumn;\n    if (rowspan === 0) {\n      firstNonHiddenRow = rowMapper.getNearestNotHiddenIndex(parentRow, 1);\n    } else {\n      firstNonHiddenRow = rowMapper.getNearestNotHiddenIndex(parentRow + rowspan - 1, -1);\n    }\n    if (colspan === 0) {\n      firstNonHiddenColumn = columnMapper.getNearestNotHiddenIndex(parentColumn, 1);\n    } else {\n      firstNonHiddenColumn = columnMapper.getNearestNotHiddenIndex(parentColumn + colspan - 1, -1);\n    }\n    const renderableRow = parentRow >= 0 ? rowMapper.getRenderableFromVisualIndex(firstNonHiddenRow) : parentRow;\n    const renderableColumn = parentColumn >= 0 ? columnMapper.getRenderableFromVisualIndex(firstNonHiddenColumn) : parentColumn;\n    return [renderableRow, renderableColumn];\n  }\n\n  /**\n   * The `modifyAutofillRange` hook callback.\n   *\n   * @private\n   * @param {Array} drag The drag area coordinates.\n   * @param {Array} select The selection information.\n   * @returns {Array} The new drag area.\n   */\n  onModifyAutofillRange(drag, select) {\n    this.autofillCalculations.correctSelectionAreaSize(select);\n    const dragDirection = this.autofillCalculations.getDirection(select, drag);\n    let dragArea = drag;\n    if (this.autofillCalculations.dragAreaOverlapsCollections(select, dragArea, dragDirection)) {\n      dragArea = select;\n      return dragArea;\n    }\n    const mergedCellsWithinSelectionArea = this.mergedCellsCollection.getWithinRange({\n      from: {\n        row: select[0],\n        col: select[1]\n      },\n      to: {\n        row: select[2],\n        col: select[3]\n      }\n    });\n    if (!mergedCellsWithinSelectionArea) {\n      return dragArea;\n    }\n    dragArea = this.autofillCalculations.snapDragArea(select, dragArea, dragDirection, mergedCellsWithinSelectionArea);\n    return dragArea;\n  }\n\n  /**\n   * `afterCreateCol` hook callback.\n   *\n   * @private\n   * @param {number} column Column index.\n   * @param {number} count Number of created columns.\n   */\n  onAfterCreateCol(column, count) {\n    this.mergedCellsCollection.shiftCollections('right', column, count);\n  }\n\n  /**\n   * `afterRemoveCol` hook callback.\n   *\n   * @private\n   * @param {number} column Column index.\n   * @param {number} count Number of removed columns.\n   */\n  onAfterRemoveCol(column, count) {\n    this.mergedCellsCollection.shiftCollections('left', column, count);\n  }\n\n  /**\n   * `afterCreateRow` hook callback.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @param {number} count Number of created rows.\n   * @param {string} source Source of change.\n   */\n  onAfterCreateRow(row, count, source) {\n    if (source === 'auto') {\n      return;\n    }\n    this.mergedCellsCollection.shiftCollections('down', row, count);\n  }\n\n  /**\n   * `afterRemoveRow` hook callback.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @param {number} count Number of removed rows.\n   */\n  onAfterRemoveRow(row, count) {\n    this.mergedCellsCollection.shiftCollections('up', row, count);\n  }\n\n  /**\n   * `afterChange` hook callback. Used to propagate merged cells after using Autofill.\n   *\n   * @private\n   * @param {Array} changes The changes array.\n   * @param {string} source Determines the source of the change.\n   */\n  onAfterChange(changes, source) {\n    if (source !== 'Autofill.fill') {\n      return;\n    }\n    this.autofillCalculations.recreateAfterDataPopulation(changes);\n  }\n\n  /**\n   * `beforeDrawAreaBorders` hook callback.\n   *\n   * @private\n   * @param {Array} corners Visual coordinates of the area corners.\n   * @param {string} className Class name for the area.\n   */\n  onBeforeDrawAreaBorders(corners, className) {\n    if (className && className === 'area') {\n      const selectedRange = this.hot.getSelectedRangeLast();\n      const mergedCellsWithinRange = this.mergedCellsCollection.getWithinRange(selectedRange);\n      arrayEach(mergedCellsWithinRange, mergedCell => {\n        if (selectedRange.getBottomEndCorner().row === mergedCell.getLastRow() && selectedRange.getBottomEndCorner().col === mergedCell.getLastColumn()) {\n          corners[2] = mergedCell.row;\n          corners[3] = mergedCell.col;\n        }\n      });\n    }\n  }\n\n  /**\n   * `afterModifyTransformStart` hook callback. Fixes a problem with navigating through merged cells at the edges of\n   * the table with the ENTER/SHIFT+ENTER/TAB/SHIFT+TAB keys.\n   *\n   * @private\n   * @param {CellCoords} coords Coordinates of the to-be-selected cell.\n   * @param {number} rowTransformDir Row transformation direction (negative value = up, 0 = none, positive value =\n   *   down).\n   * @param {number} colTransformDir Column transformation direction (negative value = up, 0 = none, positive value =\n   *   down).\n   */\n  onAfterModifyTransformStart(coords, rowTransformDir, colTransformDir) {\n    if (!this.enabled) {\n      return;\n    }\n    const mergedCellAtCoords = this.mergedCellsCollection.get(coords.row, coords.col);\n    if (!mergedCellAtCoords) {\n      return;\n    }\n    const goingDown = rowTransformDir > 0;\n    const goingUp = rowTransformDir < 0;\n    const goingLeft = colTransformDir < 0;\n    const goingRight = colTransformDir > 0;\n    const mergedCellOnBottomEdge = mergedCellAtCoords.row + mergedCellAtCoords.rowspan - 1 === this.hot.countRows() - 1;\n    const mergedCellOnTopEdge = mergedCellAtCoords.row === 0;\n    const mergedCellOnRightEdge = mergedCellAtCoords.col + mergedCellAtCoords.colspan - 1 === this.hot.countCols() - 1;\n    const mergedCellOnLeftEdge = mergedCellAtCoords.col === 0;\n    if (goingDown && mergedCellOnBottomEdge || goingUp && mergedCellOnTopEdge || goingRight && mergedCellOnRightEdge || goingLeft && mergedCellOnLeftEdge) {\n      coords.row = mergedCellAtCoords.row;\n      coords.col = mergedCellAtCoords.col;\n    }\n  }\n\n  /**\n   * `afterDrawSelection` hook callback. Used to add the additional class name for the entirely-selected merged cells.\n   *\n   * @private\n   * @param {number} currentRow Visual row index of the currently processed cell.\n   * @param {number} currentColumn Visual column index of the currently cell.\n   * @param {Array} cornersOfSelection Array of the current selection in a form of `[startRow, startColumn, endRow,\n   *   endColumn]`.\n   * @param {number|undefined} layerLevel Number indicating which layer of selection is currently processed.\n   * @returns {string|undefined} A `String`, which will act as an additional `className` to be added to the currently\n   *   processed cell.\n   */\n  onAfterDrawSelection(currentRow, currentColumn, cornersOfSelection, layerLevel) {\n    // Nothing's selected (hook might be triggered by the custom borders)\n    if (!cornersOfSelection) {\n      return;\n    }\n    return this.selectionCalculations.getSelectedMergedCellClassName(currentRow, currentColumn, cornersOfSelection, layerLevel);\n  }\n}","import { getCompareFunctionFactory, DO_NOT_SWAP } from \"../columnSorting/sortService/index.mjs\";\n/**\n * Sort comparator handled by conventional sort algorithm.\n *\n * @param {Array} sortingOrders Sort orders (`asc` for ascending, `desc` for descending).\n * @param {Array} columnMetas Column meta objects.\n * @returns {Function}\n */\nexport function rootComparator(sortingOrders, columnMetas) {\n  return function (rowIndexWithValues, nextRowIndexWithValues) {\n    // We sort array of arrays. Single array is in form [rowIndex, ...values].\n    // We compare just values, stored at second index of array.\n    const [, ...values] = rowIndexWithValues;\n    const [, ...nextValues] = nextRowIndexWithValues;\n    return function getCompareResult(column) {\n      const sortingOrder = sortingOrders[column];\n      const columnMeta = columnMetas[column];\n      const value = values[column];\n      const nextValue = nextValues[column];\n      const pluginSettings = columnMeta.multiColumnSorting;\n      const compareFunctionFactory = pluginSettings.compareFunctionFactory ? pluginSettings.compareFunctionFactory : getCompareFunctionFactory(columnMeta.type);\n      const compareResult = compareFunctionFactory(sortingOrder, columnMeta, pluginSettings)(value, nextValue);\n      if (compareResult === DO_NOT_SWAP) {\n        const nextSortedColumn = column + 1;\n        if (typeof columnMetas[nextSortedColumn] !== 'undefined') {\n          return getCompareResult(nextSortedColumn);\n        }\n      }\n      return compareResult;\n    }(0);\n  };\n}","import { warn } from \"../../helpers/console.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\n/**\n * Warn users about problems when using `columnSorting` and `multiColumnSorting` plugins simultaneously.\n */\nexport function warnAboutPluginsConflict() {\n  warn(toSingleLine`Plugins \\`columnSorting\\` and \\`multiColumnSorting\\` should not be enabled simultaneously. \n    Only \\`multiColumnSorting\\` will work.`);\n}","import \"core-js/modules/es.array.push.js\";\nconst COLUMN_ORDER_PREFIX = 'sort';\n\n/**\n * Get CSS classes which should be added to particular column header.\n *\n * @param {object} columnStatesManager Instance of column state manager.\n * @param {number} column Visual column index.\n * @param {boolean} showSortIndicator Indicates if indicator should be shown for the particular column.\n * @returns {Array} Array of CSS classes.\n */\nexport function getClassesToAdd(columnStatesManager, column, showSortIndicator) {\n  const cssClasses = [];\n  if (showSortIndicator === false) {\n    return cssClasses;\n  }\n  if (columnStatesManager.isColumnSorted(column) && columnStatesManager.getNumberOfSortedColumns() > 1) {\n    cssClasses.push(`${COLUMN_ORDER_PREFIX}-${columnStatesManager.getIndexOfColumnInSortQueue(column) + 1}`);\n  }\n  return cssClasses;\n}\n\n/**\n * Get CSS classes which should be removed from column header.\n *\n * @param {HTMLElement} htmlElement An element to process.\n * @returns {Array} Array of CSS classes.\n */\nexport function getClassesToRemove(htmlElement) {\n  const cssClasses = htmlElement.className.split(' ');\n  const sortSequenceRegExp = new RegExp(`^${COLUMN_ORDER_PREFIX}-[0-9]{1,2}$`);\n  return cssClasses.filter(cssClass => sortSequenceRegExp.test(cssClass));\n}","import { APPEND_COLUMN_CONFIG_STRATEGY, ColumnSorting } from \"../columnSorting/index.mjs\";\nimport { registerRootComparator } from \"../columnSorting/sortService/index.mjs\";\nimport { wasHeaderClickedProperly } from \"../columnSorting/utils.mjs\";\nimport { addClass, removeClass } from \"../../helpers/dom/element.mjs\";\nimport { rootComparator } from \"./rootComparator.mjs\";\nimport { warnAboutPluginsConflict } from \"./utils.mjs\";\nimport { getClassesToAdd, getClassesToRemove } from \"./domHelpers.mjs\";\nexport const PLUGIN_KEY = 'multiColumnSorting';\nexport const PLUGIN_PRIORITY = 170;\nconst CONFLICTED_PLUGIN_KEY = 'columnSorting';\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nregisterRootComparator(PLUGIN_KEY, rootComparator);\n\n/**\n * @plugin MultiColumnSorting\n * @class MultiColumnSorting\n *\n * @description\n * This plugin sorts the view by columns (but does not sort the data source!). To enable the plugin, set the\n * {@link Options#multiColumnSorting} property to the correct value (see the examples below).\n *\n * @example\n * ```js\n * // as boolean\n * multiColumnSorting: true\n *\n * // as an object with initial sort config (sort ascending for column at index 1 and then sort descending for column at index 0)\n * multiColumnSorting: {\n *   initialConfig: [{\n *     column: 1,\n *     sortOrder: 'asc'\n *   }, {\n *     column: 0,\n *     sortOrder: 'desc'\n *   }]\n * }\n *\n * // as an object which define specific sorting options for all columns\n * multiColumnSorting: {\n *   sortEmptyCells: true, // true = the table sorts empty cells, false = the table moves all empty cells to the end of the table (by default)\n *   indicator: true, // true = shows indicator for all columns (by default), false = don't show indicator for columns\n *   headerAction: true, // true = allow to click on the headers to sort (by default), false = turn off possibility to click on the headers to sort\n *   compareFunctionFactory: function(sortOrder, columnMeta) {\n *     return function(value, nextValue) {\n *       // Some value comparisons which will return -1, 0 or 1...\n *     }\n *   }\n * }\n *\n * // as an object passed to the `column` property, allows specifying a custom options for the desired column.\n * // please take a look at documentation of `column` property: {@link Options#columns}\n * columns: [{\n *   multiColumnSorting: {\n *     indicator: false, // disable indicator for the first column,\n *     sortEmptyCells: true,\n *     headerAction: false, // clicks on the first column won't sort\n *     compareFunctionFactory: function(sortOrder, columnMeta) {\n *       return function(value, nextValue) {\n *         return 0; // Custom compare function for the first column (don't sort)\n *       }\n *     }\n *   }\n * }]\n * ```\n */\nexport class MultiColumnSorting extends ColumnSorting {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Main settings key designed for the plugin.\n     *\n     * @private\n     * @type {string}\n     */\n    this.pluginKey = PLUGIN_KEY;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the Handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link MultiColumnSorting#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return super.isEnabled();\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (!this.enabled && this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[CONFLICTED_PLUGIN_KEY]) {\n      warnAboutPluginsConflict();\n    }\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    super.disablePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling column sorting functionality.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    super.registerShortcuts();\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Shift', 'Enter']],\n      callback: () => {\n        const {\n          highlight\n        } = this.hot.getSelectedRangeLast();\n        if (highlight.row === -1 && highlight.col >= 0) {\n          this.sort(this.getNextSortConfig(highlight.col, APPEND_COLUMN_CONFIG_STRATEGY));\n        }\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected;\n        return (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight.isHeader();\n      },\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling column sorting functionality.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    super.unregisterShortcuts();\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * Sorts the table by chosen columns and orders.\n   *\n   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   *\n   * **Note**: Please keep in mind that every call of `sort` function set an entirely new sort order. Previous sort configs aren't preserved.\n   *\n   * @example\n   * ```js\n   * // sort ascending first visual column\n   * hot.getPlugin('multiColumnSorting').sort({ column: 0, sortOrder: 'asc' });\n   *\n   * // sort first two visual column in the defined sequence\n   * hot.getPlugin('multiColumnSorting').sort([{\n   *   column: 1, sortOrder: 'asc'\n   * }, {\n   *   column: 0, sortOrder: 'desc'\n   * }]);\n   * ```\n   *\n   * @fires Hooks#beforeColumnSort\n   * @fires Hooks#afterColumnSort\n   */\n  sort(sortConfig) {\n    super.sort(sortConfig);\n  }\n\n  /**\n   * Clear the sort performed on the table.\n   */\n  clearSort() {\n    super.clearSort();\n  }\n\n  /**\n   * Checks if the table is sorted (any column have to be sorted).\n   *\n   * @returns {boolean}\n   */\n  isSorted() {\n    return super.isSorted();\n  }\n\n  /**\n   * Get sort configuration for particular column or for all sorted columns. Objects contain `column` and `sortOrder` properties.\n   *\n   * **Note**: Please keep in mind that returned objects expose **visual** column index under the `column` key. They are handled by the `sort` function.\n   *\n   * @param {number} [column] Visual column index.\n   * @returns {undefined|object|Array}\n   */\n  getSortConfig(column) {\n    return super.getSortConfig(column);\n  }\n\n  /**\n   * @description\n   * Warn: Useful mainly for providing server side sort implementation (see in the example below). It doesn't sort the data set. It just sets sort configuration for all sorted columns.\n   * Note: Please keep in mind that this method doesn't re-render the table.\n   *\n   * @example\n   * ```js\n   * beforeColumnSort: function(currentSortConfig, destinationSortConfigs) {\n   *   const columnSortPlugin = this.getPlugin('multiColumnSorting');\n   *\n   *   columnSortPlugin.setSortConfig(destinationSortConfigs);\n   *\n   *   // const newData = ... // Calculated data set, ie. from an AJAX call.\n   *\n   *   this.loadData(newData); // Load new data set and re-render the table.\n   *\n   *   return false; // The blockade for the default sort action.\n   * }\n   * ```\n   *\n   * @param {undefined|object|Array} sortConfig Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   */\n  setSortConfig(sortConfig) {\n    super.setSortConfig(sortConfig);\n  }\n\n  /**\n   * Get normalized sort configs.\n   *\n   * @private\n   * @param {object|Array} [sortConfig=[]] Single column sort configuration or full sort configuration (for all sorted columns).\n   * The configuration object contains `column` and `sortOrder` properties. First of them contains visual column index, the second one contains\n   * sort order (`asc` for ascending, `desc` for descending).\n   * @returns {Array}\n   */\n  getNormalizedSortConfigs() {\n    let sortConfig = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    if (Array.isArray(sortConfig)) {\n      return sortConfig;\n    }\n    return [sortConfig];\n  }\n\n  /**\n   * Update header classes.\n   *\n   * @private\n   * @param {HTMLElement} headerSpanElement Header span element.\n   * @param {...*} args Extra arguments for helpers.\n   */\n  updateHeaderClasses(headerSpanElement) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    super.updateHeaderClasses(headerSpanElement, ...args);\n    removeClass(headerSpanElement, getClassesToRemove(headerSpanElement));\n    if (this.enabled !== false) {\n      addClass(headerSpanElement, getClassesToAdd(...args));\n    }\n  }\n\n  /**\n   * Overwriting base plugin's `onUpdateSettings` method. Please keep in mind that `onAfterUpdateSettings` isn't called\n   * for `updateSettings` in specific situations.\n   *\n   * @private\n   * @param {object} newSettings New settings object.\n   */\n  onUpdateSettings(newSettings) {\n    if (this.hot.getSettings()[this.pluginKey] && this.hot.getSettings()[CONFLICTED_PLUGIN_KEY]) {\n      warnAboutPluginsConflict();\n    }\n    super.onUpdateSettings(newSettings);\n  }\n\n  /**\n   * Callback for the `onAfterOnCellMouseDown` hook.\n   *\n   * @private\n   * @param {Event} event Event which are provided by hook.\n   * @param {CellCoords} coords Visual coords of the selected cell.\n   */\n  onAfterOnCellMouseDown(event, coords) {\n    if (wasHeaderClickedProperly(coords.row, coords.col, event) === false) {\n      return;\n    }\n    if (this.wasClickableHeaderClicked(event, coords.col)) {\n      if (this.hot.getShortcutManager().isCtrlPressed()) {\n        this.hot.deselectCell();\n        this.hot.selectColumns(coords.col);\n        this.sort(this.getNextSortConfig(coords.col, APPEND_COLUMN_CONFIG_STRATEGY));\n      } else {\n        this.sort(this.getColumnNextConfig(coords.col));\n      }\n    }\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { hasClass } from \"../../helpers/dom/element.mjs\";\nimport { isMobileBrowser } from \"../../helpers/browser.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport EventManager from \"../../eventManager.mjs\";\nexport const PLUGIN_KEY = 'multipleSelectionHandles';\nexport const PLUGIN_PRIORITY = 160;\n\n/**\n * @private\n * @plugin MultipleSelectionHandles\n * @class MultipleSelectionHandles\n */\nexport class MultipleSelectionHandles extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n\n  /**\n   * @param {object} hotInstance The handsontable instance.\n   */\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * @type {Array}\n     */\n    this.dragged = [];\n    /**\n     * Instance of EventManager.\n     *\n     * @type {EventManager}\n     */\n    this.eventManager = null;\n    /**\n     * @type {null}\n     */\n    this.lastSetCell = null;\n  }\n\n  /**\n   * Check if the plugin is enabled in the handsontable settings.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return isMobileBrowser();\n  }\n\n  /**\n   * Enable plugin for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    if (!this.eventManager) {\n      this.eventManager = new EventManager(this);\n    }\n    this.registerListeners();\n    super.enablePlugin();\n  }\n\n  /**\n   * Bind the touch events.\n   *\n   * @private\n   */\n  registerListeners() {\n    const _this = this;\n    const {\n      rootElement\n    } = this.hot;\n\n    /**\n     * @private\n     * @param {string} query Query for the position.\n     * @returns {boolean}\n     */\n    function removeFromDragged(query) {\n      if (_this.dragged.length === 1) {\n        // clear array\n        _this.dragged.splice(0, _this.dragged.length);\n        return true;\n      }\n      const entryPosition = _this.dragged.indexOf(query);\n      if (entryPosition === -1) {\n        return false;\n      } else if (entryPosition === 0) {\n        _this.dragged = _this.dragged.slice(0, 1);\n      } else if (entryPosition === 1) {\n        _this.dragged = _this.dragged.slice(-1);\n      }\n    }\n    this.eventManager.addEventListener(rootElement, 'touchstart', event => {\n      let selectedRange;\n      if (hasClass(event.target, 'topSelectionHandle-HitArea')) {\n        selectedRange = _this.hot.getSelectedRangeLast();\n        _this.dragged.push('top');\n        _this.touchStartRange = {\n          width: selectedRange.getWidth(),\n          height: selectedRange.getHeight(),\n          direction: selectedRange.getDirection()\n        };\n        event.preventDefault();\n        return false;\n      } else if (hasClass(event.target, 'bottomSelectionHandle-HitArea')) {\n        selectedRange = _this.hot.getSelectedRangeLast();\n        _this.dragged.push('bottom');\n        _this.touchStartRange = {\n          width: selectedRange.getWidth(),\n          height: selectedRange.getHeight(),\n          direction: selectedRange.getDirection()\n        };\n        event.preventDefault();\n        return false;\n      }\n    });\n    this.eventManager.addEventListener(rootElement, 'touchend', event => {\n      if (hasClass(event.target, 'topSelectionHandle-HitArea')) {\n        removeFromDragged.call(_this, 'top');\n        _this.touchStartRange = void 0;\n        event.preventDefault();\n        return false;\n      } else if (hasClass(event.target, 'bottomSelectionHandle-HitArea')) {\n        removeFromDragged.call(_this, 'bottom');\n        _this.touchStartRange = void 0;\n        event.preventDefault();\n        return false;\n      }\n    });\n    this.eventManager.addEventListener(rootElement, 'touchmove', event => {\n      const {\n        rootDocument\n      } = this.hot;\n      let targetCoords;\n      let selectedRange;\n      let rangeWidth;\n      let rangeHeight;\n      let rangeDirection;\n      let newRangeCoords;\n      if (_this.dragged.length === 0) {\n        return;\n      }\n      const endTarget = rootDocument.elementFromPoint(event.touches[0].clientX, event.touches[0].clientY);\n      if (!endTarget || endTarget === _this.lastSetCell) {\n        return;\n      }\n      if (endTarget.nodeName === 'TD' || endTarget.nodeName === 'TH') {\n        targetCoords = _this.hot.getCoords(endTarget);\n        if (targetCoords.col === -1) {\n          targetCoords.col = 0;\n        }\n        selectedRange = _this.hot.getSelectedRangeLast();\n        rangeWidth = selectedRange.getWidth();\n        rangeHeight = selectedRange.getHeight();\n        rangeDirection = selectedRange.getDirection();\n        if (rangeWidth === 1 && rangeHeight === 1) {\n          _this.hot.selection.setRangeEnd(targetCoords);\n        }\n        newRangeCoords = _this.getCurrentRangeCoords(selectedRange, targetCoords, _this.touchStartRange.direction, rangeDirection, _this.dragged[0]);\n        if (newRangeCoords.start !== null) {\n          _this.hot.selection.setRangeStart(newRangeCoords.start);\n        }\n        _this.hot.selection.setRangeEnd(newRangeCoords.end);\n        _this.lastSetCell = endTarget;\n      }\n      event.preventDefault();\n    });\n  }\n  getCurrentRangeCoords(selectedRange, currentTouch, touchStartDirection, currentDirection, draggedHandle) {\n    const topStartCorner = selectedRange.getTopStartCorner();\n    const bottomEndCorner = selectedRange.getBottomEndCorner();\n    const bottomStartCorner = selectedRange.getBottomStartCorner();\n    const topEndCorner = selectedRange.getTopEndCorner();\n    let newCoords = {\n      start: null,\n      end: null\n    };\n    switch (touchStartDirection) {\n      case 'NE-SW':\n        switch (currentDirection) {\n          case 'NE-SW':\n          case 'NW-SE':\n            if (draggedHandle === 'top') {\n              newCoords = {\n                start: this.hot._createCellCoords(currentTouch.row, selectedRange.highlight.col),\n                end: this.hot._createCellCoords(bottomStartCorner.row, currentTouch.col)\n              };\n            } else {\n              newCoords = {\n                start: this.hot._createCellCoords(selectedRange.highlight.row, currentTouch.col),\n                end: this.hot._createCellCoords(currentTouch.row, topStartCorner.col)\n              };\n            }\n            break;\n          case 'SE-NW':\n            if (draggedHandle === 'bottom') {\n              newCoords = {\n                start: this.hot._createCellCoords(bottomEndCorner.row, currentTouch.col),\n                end: this.hot._createCellCoords(currentTouch.row, topStartCorner.col)\n              };\n            }\n            break;\n          default:\n            break;\n        }\n        break;\n      case 'NW-SE':\n        switch (currentDirection) {\n          case 'NE-SW':\n            if (draggedHandle === 'top') {\n              newCoords = {\n                start: currentTouch,\n                end: bottomStartCorner\n              };\n            } else {\n              newCoords.end = currentTouch;\n            }\n            break;\n          case 'NW-SE':\n            if (draggedHandle === 'top') {\n              newCoords = {\n                start: currentTouch,\n                end: bottomEndCorner\n              };\n            } else {\n              newCoords.end = currentTouch;\n            }\n            break;\n          case 'SE-NW':\n            if (draggedHandle === 'top') {\n              newCoords = {\n                start: currentTouch,\n                end: topStartCorner\n              };\n            } else {\n              newCoords.end = currentTouch;\n            }\n            break;\n          case 'SW-NE':\n            if (draggedHandle === 'top') {\n              newCoords = {\n                start: currentTouch,\n                end: topEndCorner\n              };\n            } else {\n              newCoords.end = currentTouch;\n            }\n            break;\n          default:\n            break;\n        }\n        break;\n      case 'SW-NE':\n        switch (currentDirection) {\n          case 'NW-SE':\n            if (draggedHandle === 'bottom') {\n              newCoords = {\n                start: this.hot._createCellCoords(currentTouch.row, topStartCorner.col),\n                end: this.hot._createCellCoords(bottomStartCorner.row, currentTouch.col)\n              };\n            } else {\n              newCoords = {\n                start: this.hot._createCellCoords(topStartCorner.row, currentTouch.col),\n                end: this.hot._createCellCoords(currentTouch.row, bottomEndCorner.col)\n              };\n            }\n            break;\n          // case 'NE-SW':\n          //\n          //  break;\n          case 'SW-NE':\n            if (draggedHandle === 'top') {\n              newCoords = {\n                start: this.hot._createCellCoords(selectedRange.highlight.row, currentTouch.col),\n                end: this.hot._createCellCoords(currentTouch.row, bottomEndCorner.col)\n              };\n            } else {\n              newCoords = {\n                start: this.hot._createCellCoords(currentTouch.row, topStartCorner.col),\n                end: this.hot._createCellCoords(topStartCorner.row, currentTouch.col)\n              };\n            }\n            break;\n          case 'SE-NW':\n            if (draggedHandle === 'bottom') {\n              newCoords = {\n                start: this.hot._createCellCoords(currentTouch.row, topEndCorner.col),\n                end: this.hot._createCellCoords(topStartCorner.row, currentTouch.col)\n              };\n            } else if (draggedHandle === 'top') {\n              newCoords = {\n                start: bottomStartCorner,\n                end: currentTouch\n              };\n            }\n            break;\n          default:\n            break;\n        }\n        break;\n      case 'SE-NW':\n        switch (currentDirection) {\n          case 'NW-SE':\n          case 'NE-SW':\n          case 'SW-NE':\n            if (draggedHandle === 'top') {\n              newCoords.end = currentTouch;\n            }\n            break;\n          case 'SE-NW':\n            if (draggedHandle === 'top') {\n              newCoords.end = currentTouch;\n            } else {\n              newCoords = {\n                start: currentTouch,\n                end: topStartCorner\n              };\n            }\n            break;\n          default:\n            break;\n        }\n        break;\n      default:\n        break;\n    }\n    return newCoords;\n  }\n\n  /**\n   * Check if user is currently dragging the handle.\n   *\n   * @returns {boolean} Dragging state.\n   */\n  isDragged() {\n    return this.dragged.length > 0;\n  }\n}","/**\n * @typedef {object} DefaultHeaderSettings\n * @property {string} label The name/label of the column header.\n * @property {number} colspan Current calculated colspan value of the rendered column header element.\n * @property {number} origColspan Original colspan value, set once while parsing user-defined nested header settings.\n * @property {boolean} collapsible The flag determines whether the node is collapsible (can be collapsed/expanded).\n * @property {number[]} crossHiddenColumns The list of visual column indexes which indicates that the specified columns within\n *                                         the header settings are hidden.\n * @property {boolean} isCollapsed The flag determines whether the node is collapsed.\n * @property {boolean} isHidden The flag determines whether the column header at specified index is hidden. If true\n *                              the TH element will be rendered as hidden (display: none).\n * @property {boolean} isRoot The flag which determines whether the column header settings is actually not renderable. That kind\n *                            of objects are generated after colspaned header to fill an array to correct size.\n *                            For example for header with colspan = 8 the 7 blank objects are generated to fill the array settings\n *                            to length = 8.\n * @property {boolean} isPlaceholder The flag determines whether the column header at the specified index is non-renderable.\n */\n\n/**\n * Creates the header settings object with default values.\n *\n * @param {DefaultHeaderSettings} initialValues The initial values for the header settings object.\n * @returns {DefaultHeaderSettings}\n */\nexport function createDefaultHeaderSettings() {\n  let {\n    label = '',\n    colspan = 1,\n    origColspan = 1,\n    collapsible = false,\n    crossHiddenColumns = [],\n    isCollapsed = false,\n    isHidden = false,\n    isRoot = false,\n    isPlaceholder = false\n  } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return {\n    label,\n    colspan,\n    origColspan,\n    collapsible,\n    isCollapsed,\n    crossHiddenColumns,\n    isHidden,\n    isRoot,\n    isPlaceholder\n  };\n}\n\n/**\n * Creates the placeholder header settings object. Those settings tell the header renderers\n * that this TH element should not be rendered (the node will be overlapped by the previously\n * created node with colspan bigger than 1).\n *\n * @returns {object}\n */\nexport function createPlaceholderHeaderSettings() {\n  return {\n    label: '',\n    isPlaceholder: true\n  };\n}","import \"core-js/modules/es.array.push.js\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\nimport { arrayEach, arrayMap } from \"../../../helpers/array.mjs\";\nimport { isObject } from \"../../../helpers/object.mjs\";\nimport { stringify } from \"../../../helpers/mixed.mjs\";\nimport { createDefaultHeaderSettings, createPlaceholderHeaderSettings } from \"./utils.mjs\";\n/**\n * A function that normalizes user-defined settings into one predictable\n * structure. Currently, the developer can declare nested headers by passing\n * the following unstructured (and sometimes uncompleted) array.\n *   [\n *     [{ label: 'A1', colspan: 2 }],\n *     [{ label: true }, 'B2', 4],\n *     [],\n *   ]\n *\n * The normalization process equalizes the length of columns to each header\n * layers to the same length and generates object settings with a common shape.\n * So the above mentioned example will be normalized into this:\n *   [\n *     [\n *       { label: 'A1', colspan: 2, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: true, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: 'true', colspan: 1, isHidden: false, ... },\n *       { label: 'B2', colspan: 1, isHidden: false, ... },\n *       { label: '4', colspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: '', colspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, isHidden: false, ... },\n *     ],\n *   ]\n *\n * @param {Array[]} sourceSettings An array with defined nested headers settings.\n * @param {number} [columnsLimit=Infinity] A number of columns to which the structure\n *                                         will be trimmed. While trimming the colspan\n *                                         values are adjusted to preserve the original\n *                                         structure.\n * @returns {Array[]}\n */\nexport function normalizeSettings(sourceSettings) {\n  let columnsLimit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  const normalizedSettings = [];\n  if (columnsLimit === 0) {\n    return normalizedSettings;\n  }\n\n  // Normalize array items (header settings) into one shape - literal object with default props.\n  arrayEach(sourceSettings, headersSettings => {\n    const columns = [];\n    let columnIndex = 0;\n    normalizedSettings.push(columns);\n    arrayEach(headersSettings, sourceHeaderSettings => {\n      const headerSettings = createDefaultHeaderSettings();\n      if (isObject(sourceHeaderSettings)) {\n        const {\n          label,\n          colspan\n        } = sourceHeaderSettings;\n        headerSettings.label = stringify(label);\n        if (typeof colspan === 'number' && colspan > 1) {\n          headerSettings.colspan = colspan;\n          headerSettings.origColspan = colspan;\n        }\n      } else {\n        headerSettings.label = stringify(sourceHeaderSettings);\n      }\n      columnIndex += headerSettings.origColspan;\n      let cancelProcessing = false;\n      if (columnIndex >= columnsLimit) {\n        // Adjust the colspan value to not overlap the columns limit.\n        headerSettings.colspan = headerSettings.origColspan - (columnIndex - columnsLimit);\n        headerSettings.origColspan = headerSettings.colspan;\n        cancelProcessing = true;\n      }\n      columns.push(headerSettings);\n      if (headerSettings.colspan > 1) {\n        for (let i = 0; i < headerSettings.colspan - 1; i++) {\n          columns.push(createPlaceholderHeaderSettings());\n        }\n      }\n      return !cancelProcessing;\n    });\n  });\n  const columnsLength = Math.max(...arrayMap(normalizedSettings, headersSettings => headersSettings.length));\n\n  // Normalize the length of each header layer to the same columns length.\n  arrayEach(normalizedSettings, headersSettings => {\n    if (headersSettings.length < columnsLength) {\n      const defaultSettings = arrayMap(new Array(columnsLength - headersSettings.length), () => createDefaultHeaderSettings());\n      headersSettings.splice(headersSettings.length, 0, ...defaultSettings);\n    }\n  });\n  return normalizedSettings;\n}","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { extend, isObject } from \"../../../helpers/object.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport { normalizeSettings } from \"./settingsNormalizer.mjs\";\n/**\n * List of properties which are configurable. That properties can be changed using public API.\n *\n * @type {string[]}\n */\nexport const HEADER_CONFIGURABLE_PROPS = ['label', 'collapsible'];\n\n/**\n * The class manages and normalizes settings passed by the developer\n * into the nested headers plugin. The SourceSettings class is a\n * source of truth for tree builder (HeaderTree) module.\n *\n * @private\n * @class SourceSettings\n */\nvar _data = /*#__PURE__*/new WeakMap();\nvar _dataLength = /*#__PURE__*/new WeakMap();\nvar _columnsLimit = /*#__PURE__*/new WeakMap();\nexport default class SourceSettings {\n  constructor() {\n    /**\n     * The normalized source data (normalized user-defined settings for nested headers).\n     *\n     * @private\n     * @type {Array[]}\n     */\n    _classPrivateFieldInitSpec(this, _data, {\n      writable: true,\n      value: []\n    });\n    /**\n     * The total length of the nested header layers.\n     *\n     * @private\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _dataLength, {\n      writable: true,\n      value: 0\n    });\n    /**\n     * Columns count limit value trims source settings to that value. If columns\n     * count limit intersects nested header, the header's colspan value is reduced\n     * to keep the whole structure stable (trimmed precisely where the limit is set).\n     *\n     * @type {number}\n     */\n    _classPrivateFieldInitSpec(this, _columnsLimit, {\n      writable: true,\n      value: Infinity\n    });\n  }\n  /**\n   * Sets columns limit to the source settings will be trimmed. All headers which\n   * overlap the column limit will be reduced to keep the structure solid.\n   *\n   * @param {number} columnsCount The number of columns to limit to.\n   */\n  setColumnsLimit(columnsCount) {\n    _classPrivateFieldSet(this, _columnsLimit, columnsCount);\n  }\n\n  /**\n   * Sets a new nested header configuration.\n   *\n   * @param {Array[]} [nestedHeadersSettings=[]] The user-defined nested headers settings.\n   */\n  setData() {\n    let nestedHeadersSettings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    _classPrivateFieldSet(this, _data, normalizeSettings(nestedHeadersSettings, _classPrivateFieldGet(this, _columnsLimit)));\n    _classPrivateFieldSet(this, _dataLength, _classPrivateFieldGet(this, _data).length);\n  }\n\n  /**\n   * Gets normalized source settings.\n   *\n   * @returns {Array[]}\n   */\n  getData() {\n    return _classPrivateFieldGet(this, _data);\n  }\n\n  /**\n   * Merges settings with current source settings.\n   *\n   * @param {object[]} additionalSettings An array of objects with `row`, `col` and additional\n   *                                      properties to merge with current source settings.\n   */\n  mergeWith(additionalSettings) {\n    arrayEach(additionalSettings, _ref => {\n      let {\n        row,\n        col,\n        ...rest\n      } = _ref;\n      const headerSettings = this.getHeaderSettings(row, col);\n      if (headerSettings !== null) {\n        extend(headerSettings, rest, HEADER_CONFIGURABLE_PROPS);\n      }\n    });\n  }\n\n  /**\n   * Maps the current state with a callback. For each source settings the callback function\n   * is called. If the function returns value that value is merged with the source settings.\n   *\n   * @param {Function} callback A function that is called for every header settings.\n   *                            Each time the callback is called, the returned value extends\n   *                            header settings.\n   */\n  map(callback) {\n    arrayEach(_classPrivateFieldGet(this, _data), header => {\n      arrayEach(header, headerSettings => {\n        const propsToExtend = callback({\n          ...headerSettings\n        });\n        if (isObject(propsToExtend)) {\n          extend(headerSettings, propsToExtend, HEADER_CONFIGURABLE_PROPS);\n        }\n      });\n    });\n  }\n\n  /**\n   * Gets source column header settings for a specified header. The returned\n   * object contains information about the header label, its colspan length,\n   * or if it is hidden in the header renderers.\n   *\n   * @param {number} headerLevel Header level (0 = most distant to the table).\n   * @param {number} columnIndex A visual column index.\n   * @returns {object|null}\n   */\n  getHeaderSettings(headerLevel, columnIndex) {\n    var _headersSettings$colu;\n    if (headerLevel >= _classPrivateFieldGet(this, _dataLength) || headerLevel < 0) {\n      return null;\n    }\n    const headersSettings = _classPrivateFieldGet(this, _data)[headerLevel];\n    if (columnIndex >= headersSettings.length) {\n      return null;\n    }\n    return (_headersSettings$colu = headersSettings[columnIndex]) !== null && _headersSettings$colu !== void 0 ? _headersSettings$colu : null;\n  }\n\n  /**\n   * Gets source of column headers settings for specified headers. If the retrieved column\n   * settings overlap the range \"box\" determined by \"columnIndex\" and \"columnsLength\"\n   * the exception will be thrown.\n   *\n   * @param {number} headerLevel Header level (0 = most distant to the table).\n   * @param {number} columnIndex A visual column index from which the settings will be extracted.\n   * @param {number} [columnsLength=1] The number of columns involved in the extraction of settings.\n   * @returns {object}\n   */\n  getHeadersSettings(headerLevel, columnIndex) {\n    let columnsLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    const headersSettingsChunks = [];\n    if (headerLevel >= _classPrivateFieldGet(this, _dataLength) || headerLevel < 0) {\n      return headersSettingsChunks;\n    }\n    const headersSettings = _classPrivateFieldGet(this, _data)[headerLevel];\n    let currentLength = 0;\n    for (let i = columnIndex; i < headersSettings.length; i++) {\n      const headerSettings = headersSettings[i];\n      if (headerSettings.isPlaceholder) {\n        throw new Error('The first column settings cannot overlap the other header layers');\n      }\n      currentLength += headerSettings.colspan;\n      headersSettingsChunks.push(headerSettings);\n      if (headerSettings.colspan > 1) {\n        i += headerSettings.colspan - 1;\n      }\n\n      // We met the current sum of the child colspans\n      if (currentLength === columnsLength) {\n        break;\n      }\n      // We exceeds the current sum of the child colspans, the last columns colspan overlaps the \"columnsLength\" length.\n      if (currentLength > columnsLength) {\n        throw new Error('The last column settings cannot overlap the other header layers');\n      }\n    }\n    return headersSettingsChunks;\n  }\n\n  /**\n   * Gets a total number of headers levels.\n   *\n   * @returns {number}\n   */\n  getLayersCount() {\n    return _classPrivateFieldGet(this, _dataLength);\n  }\n\n  /**\n   * Gets a total number of columns count.\n   *\n   * @returns {number}\n   */\n  getColumnsCount() {\n    return _classPrivateFieldGet(this, _dataLength) > 0 ? _classPrivateFieldGet(this, _data)[0].length : 0;\n  }\n\n  /**\n   * Clears the data.\n   */\n  clear() {\n    _classPrivateFieldSet(this, _data, []);\n    _classPrivateFieldSet(this, _dataLength, 0);\n  }\n}","function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\n/**\n * Depth-first pre-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR)).\n *\n * @type {string}\n */\nexport const TRAVERSAL_DF_PRE = 'DF-pre-order';\n/**\n * @param {Function} callback A callback which will be called on each visited node.\n * @param {*} context A context to pass through.\n * @returns {boolean}\n */\nexport function depthFirstPreOrder(callback, context) {\n  let continueTraverse = callback.call(context, this);\n  for (let i = 0; i < this.childs.length; i++) {\n    if (continueTraverse === false) {\n      return false;\n    }\n    continueTraverse = depthFirstPreOrder.call(this.childs[i], callback, context);\n  }\n  return continueTraverse;\n}\n\n/**\n * Depth-first post-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Post-order_(NLR)).\n *\n * @type {string}\n */\nexport const TRAVERSAL_DF_POST = 'DF-post-order';\n/**\n * @param {Function} callback A callback which will be called on each visited node.\n * @param {*} context A context to pass through.\n * @returns {boolean}\n */\nfunction depthFirstPostOrder(callback, context) {\n  for (let i = 0; i < this.childs.length; i++) {\n    const continueTraverse = depthFirstPostOrder.call(this.childs[i], callback, context);\n    if (continueTraverse === false) {\n      return false;\n    }\n  }\n  return callback.call(context, this);\n}\n\n/**\n * Breadth-first traversal strategy (https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search_/_level_order).\n *\n * @type {string}\n */\nexport const TRAVERSAL_BF = 'BF';\n/**\n * @param {Function} callback A callback which will be called on each visited node.\n * @param {*} context A context to pass through.\n */\nfunction breadthFirst(callback, context) {\n  const queue = [this];\n\n  /**\n   * Internal processor.\n   */\n  function process() {\n    if (queue.length === 0) {\n      return;\n    }\n    const node = queue.shift();\n    queue.push(...node.childs);\n    if (callback.call(context, node) !== false) {\n      process();\n    }\n  }\n  process();\n}\n\n/**\n * Default strategy for tree traversal.\n *\n * @type {string}\n */\nconst DEFAULT_TRAVERSAL_STRATEGY = TRAVERSAL_BF;\n/**\n * Collection of all available tree traversal strategies.\n *\n * @type {Map<string, Function>}\n */\nconst TRAVERSAL_STRATEGIES = new Map([[TRAVERSAL_DF_PRE, depthFirstPreOrder], [TRAVERSAL_DF_POST, depthFirstPostOrder], [TRAVERSAL_BF, breadthFirst]]);\n\n/**\n *\n */\nexport default class TreeNode {\n  constructor(data) {\n    /**\n     * A tree data.\n     *\n     * @type {object}\n     */\n    _defineProperty(this, \"data\", {});\n    /**\n     * A parent node.\n     *\n     * @type {TreeNode}\n     */\n    _defineProperty(this, \"parent\", null);\n    /**\n     * A tree leaves.\n     *\n     * @type {TreeNode[]}\n     */\n    _defineProperty(this, \"childs\", []);\n    this.data = data;\n  }\n\n  /**\n   * Adds a node to tree leaves. Added node is linked with the parent node through \"parent\" property.\n   *\n   * @param {TreeNode} node A TreeNode to add.\n   */\n  addChild(node) {\n    node.parent = this;\n    this.childs.push(node);\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * @memberof TreeNode#\n   * @function cloneTree\n   *\n   * Clones a tree structure deeply.\n   *\n   * For example, for giving a tree structure:\n   *      .--(B1)--.\n   *   .-(C1)   .-(C2)-.----.\n   *  (D1)     (D2)   (D3) (D4)\n   *\n   * Cloning a tree starting from C2 node creates a mirrored tree structure.\n   *     .-(C2')-.-----.\n   *    (D2')   (D3') (D4')\n   *\n   * The cloned tree can be safely modified without affecting the original structure.\n   * After modification, the clone can be merged with a tree using the \"replaceTreeWith\" method.\n   *\n   * @param {TreeNode} [nodeTree=this] A TreeNode to clone.\n   * @returns {TreeNode}\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  cloneTree() {\n    let nodeTree = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;\n    const clonedNode = new TreeNode({\n      ...nodeTree.data\n    });\n    for (let i = 0; i < nodeTree.childs.length; i++) {\n      clonedNode.addChild(this.cloneTree(nodeTree.childs[i]));\n    }\n    return clonedNode;\n  }\n\n  /**\n   * Replaces the current node with a passed tree structure.\n   *\n   * @param {TreeNode} nodeTree A TreeNode to replace with.\n   */\n  replaceTreeWith(nodeTree) {\n    this.data = {\n      ...nodeTree.data\n    };\n    this.childs = [];\n    for (let i = 0; i < nodeTree.childs.length; i++) {\n      this.addChild(nodeTree.childs[i]);\n    }\n  }\n\n  /**\n   * Traverses the tree structure through node childs. The walk down traversing supports\n   * a three different strategies.\n   *  - Depth-first pre-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR));\n   *  - Depth-first post-order strategy (https://en.wikipedia.org/wiki/Tree_traversal#Post-order_(NLR));\n   *  - Breadth-first traversal strategy (https://en.wikipedia.org/wiki/Tree_traversal#Breadth-first_search_/_level_order).\n   *\n   * @param {Function} callback The callback function which will be called for each node.\n   * @param {string} [traversalStrategy=DEFAULT_TRAVERSAL_STRATEGY] Traversing strategy.\n   */\n  walkDown(callback) {\n    let traversalStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_TRAVERSAL_STRATEGY;\n    if (!TRAVERSAL_STRATEGIES.has(traversalStrategy)) {\n      throw new Error(`Traversal strategy \"${traversalStrategy}\" does not exist`);\n    }\n    TRAVERSAL_STRATEGIES.get(traversalStrategy).call(this, callback, this);\n  }\n\n  /**\n   * Traverses the tree structure through node parents.\n   *\n   * @param {Function} callback The callback function which will be called for each node.\n   */\n  walkUp(callback) {\n    const context = this;\n    const process = node => {\n      const continueTraverse = callback.call(context, node);\n      if (continueTraverse !== false && node.parent !== null) {\n        process(node.parent);\n      }\n    };\n    process(this);\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport TreeNode from \"../../../utils/dataStructures/tree.mjs\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\n/**\n * @private\n * @class HeadersTree\n *\n * The header tree class keeps nested header settings in the tree\n * structure for easier node manipulation (e.q collapse or expand column).\n * That trees represent the current state of the nested headers. From the\n * trees, the matrix is generated for nested header renderers.\n *\n * The second role of the module is validation. While building the tree,\n * there is check whether the configuration contains overlapping\n * headers. If true, then the exception is thrown.\n *\n * The tree is static; it means that its column indexing never changes\n * even when a collapsing header is performed. The structure is based\n * on visual column indexes.\n *\n * For example, for that header configuration:\n *   +----+----+----+----+----+\n *   │ A1                │ A2 │\n *   +----+----+----+----+----+\n *   │ B1           │ B2 │ B3 │\n *   +----+----+----+----+----+\n *   │ C1      │ C2 │ C3 │ C4 │\n *   +----+----+----+----+----+\n *\n * The tree structures look like:\n *                (0)                      (4)           // a visual column index\n *                 │                        │\n *        .------(A1)------.              (A2)--.\n *   .--(B1)--.           (B2)--.              (B3)--.\n *  (C1)     (C2)              (C3)                 (C4)\n *\n */\n/* eslint-enable jsdoc/require-description-complete-sentence */\nvar _rootNodes = /*#__PURE__*/new WeakMap();\nvar _rootsIndex = /*#__PURE__*/new WeakMap();\nvar _sourceSettings = /*#__PURE__*/new WeakMap();\nexport default class HeadersTree {\n  constructor(sourceSettings) {\n    /**\n     * The collection of nested headers settings structured into trees. The root trees are stored\n     * under the visual column index.\n     *\n     * @private\n     * @type {Map<number, TreeNode>}\n     */\n    _classPrivateFieldInitSpec(this, _rootNodes, {\n      writable: true,\n      value: new Map()\n    });\n    /**\n     * A map that translates the visual column indexes that intersect the range\n     * defined by the header colspan width to the root index.\n     *\n     * @private\n     * @type {Map<number, number>}\n     */\n    _classPrivateFieldInitSpec(this, _rootsIndex, {\n      writable: true,\n      value: new Map()\n    });\n    /**\n     * The instance of the SourceSettings class.\n     *\n     * @private\n     * @type {SourceSettings}\n     */\n    _classPrivateFieldInitSpec(this, _sourceSettings, {\n      writable: true,\n      value: null\n    });\n    _classPrivateFieldSet(this, _sourceSettings, sourceSettings);\n  }\n\n  /**\n   * Gets an array of the all root nodes.\n   *\n   * @returns {TreeNode[]}\n   */\n  getRoots() {\n    return Array.from(_classPrivateFieldGet(this, _rootNodes).values());\n  }\n\n  /**\n   * Gets a root node by specified visual column index.\n   *\n   * @param {number} columnIndex A visual column index.\n   * @returns {TreeNode|undefined}\n   */\n  getRootByColumn(columnIndex) {\n    let node;\n    if (_classPrivateFieldGet(this, _rootsIndex).has(columnIndex)) {\n      node = _classPrivateFieldGet(this, _rootNodes).get(_classPrivateFieldGet(this, _rootsIndex).get(columnIndex));\n    }\n    return node;\n  }\n\n  /**\n   * Gets a tree node by its position in the grid settings.\n   *\n   * @param {number} headerLevel Header level index (there is support only for positive values).\n   * @param {number} columnIndex A visual column index.\n   * @returns {TreeNode|undefined}\n   */\n  getNode(headerLevel, columnIndex) {\n    const rootNode = this.getRootByColumn(columnIndex);\n    if (!rootNode) {\n      return;\n    }\n\n    // Normalize the visual column index to a 0-based system for a specific \"box\" defined\n    // by root node colspan width.\n    const normColumnIndex = columnIndex - _classPrivateFieldGet(this, _rootsIndex).get(columnIndex);\n    let columnCursor = 0;\n    let treeNode;\n\n    // Collect all parent nodes that depend on the collapsed node.\n    rootNode.walkDown(node => {\n      const {\n        data: {\n          origColspan,\n          headerLevel: nodeHeaderLevel\n        }\n      } = node;\n      if (headerLevel === nodeHeaderLevel) {\n        if (normColumnIndex >= columnCursor && normColumnIndex <= columnCursor + origColspan - 1) {\n          treeNode = node;\n          treeNode.data.isRoot = columnIndex === treeNode.data.columnIndex;\n          return false; // Cancel tree traversing.\n        }\n\n        columnCursor += origColspan;\n      }\n    });\n    return treeNode;\n  }\n\n  /**\n   * Builds (or rebuilds if called again) root nodes indexes.\n   */\n  rebuildTreeIndex() {\n    let columnIndex = 0;\n    _classPrivateFieldGet(this, _rootsIndex).clear();\n    arrayEach(_classPrivateFieldGet(this, _rootNodes), _ref => {\n      let [, {\n        data: {\n          colspan\n        }\n      }] = _ref;\n      // Map tree range (colspan range/width) into visual column index of the root node.\n      for (let i = columnIndex; i < columnIndex + colspan; i++) {\n        _classPrivateFieldGet(this, _rootsIndex).set(i, columnIndex);\n      }\n      columnIndex += colspan;\n    });\n  }\n\n  /**\n   * Builds trees based on SourceSettings class. Calling a method causes clearing the tree state built\n   * from the previous call.\n   */\n  buildTree() {\n    this.clear();\n    const columnsCount = _classPrivateFieldGet(this, _sourceSettings).getColumnsCount();\n    let columnIndex = 0;\n    while (columnIndex < columnsCount) {\n      const columnSettings = _classPrivateFieldGet(this, _sourceSettings).getHeaderSettings(0, columnIndex);\n      const rootNode = new TreeNode();\n      _classPrivateFieldGet(this, _rootNodes).set(columnIndex, rootNode);\n      this.buildLeaves(rootNode, columnIndex, 0, columnSettings.origColspan);\n      columnIndex += columnSettings.origColspan;\n    }\n    this.rebuildTreeIndex();\n  }\n\n  /**\n   * Builds leaves for specified tree node.\n   *\n   * @param {TreeNode} parentNode A node to which the leaves applies.\n   * @param {number} columnIndex A visual column index.\n   * @param {number} headerLevel Currently processed header level.\n   * @param {number} [extractionLength=1] Determines column extraction length for node children.\n   */\n  buildLeaves(parentNode, columnIndex, headerLevel) {\n    let extractionLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n    const columnsSettings = _classPrivateFieldGet(this, _sourceSettings).getHeadersSettings(headerLevel, columnIndex, extractionLength);\n    headerLevel += 1;\n    arrayEach(columnsSettings, columnSettings => {\n      const nodeData = {\n        ...columnSettings,\n        /**\n         * The header level (tree node depth level).\n         *\n         * @type {number}\n         */\n        headerLevel: headerLevel - 1,\n        /**\n         * A visual column index.\n         *\n         * @type {number}\n         */\n        columnIndex\n      };\n      let node;\n      if (headerLevel === 1) {\n        // fill the root node\n        parentNode.data = nodeData;\n        node = parentNode;\n      } else {\n        node = new TreeNode(nodeData);\n        parentNode.addChild(node);\n      }\n      if (headerLevel < _classPrivateFieldGet(this, _sourceSettings).getLayersCount()) {\n        this.buildLeaves(node, columnIndex, headerLevel, columnSettings.origColspan);\n      }\n      columnIndex += columnSettings.origColspan;\n    });\n  }\n\n  /**\n   * Clears the tree to the initial state.\n   */\n  clear() {\n    _classPrivateFieldGet(this, _rootNodes).clear();\n    _classPrivateFieldGet(this, _rootsIndex).clear();\n  }\n}","/**\n * Traverses the tree nodes and calls a callback when no hidden node is found. The callback\n * is called with visual column index then.\n *\n * @param {TreeNode} node A tree node to traverse.\n * @param {Function} callback The callback function which will be called for each node.\n */\nexport function traverseHiddenNodeColumnIndexes(node, callback) {\n  node.walkDown(_ref => {\n    let {\n      data,\n      childs\n    } = _ref;\n    if (!data.isHidden) {\n      callback(data.columnIndex);\n      if (childs.length === 0) {\n        for (let i = 1; i < data.colspan; i++) {\n          callback(data.columnIndex + i);\n        }\n      }\n    }\n  });\n}\n\n/**\n * A tree helper for retrieving a data from the first child.\n *\n * @param {TreeNode} node A tree node to check.\n * @param {string} propertyName A name of the property whose value you want to get.\n * @returns {*}\n */\nexport function getFirstChildProperty(_ref2, propertyName) {\n  let {\n    childs\n  } = _ref2;\n  if (childs.length === 0) {\n    return;\n  }\n  return childs[0].data[propertyName];\n}\n\n/**\n * A tree helper which checks if passed node has the same original colspan as its\n * first child. In that case the node is treated as \"mirrored\" or \"reflected\" every\n * action performed on one of that nodes should be reflected to other \"mirrored\" node.\n *\n * In that case nodes A1 and A2 are \"reflected\"\n *   +----+----+----+----+\n *   | A1      | B1      |\n *   +----+----+----+----+\n *   | A2      | B2 | B3 |\n *   +----+----+----+----+.\n *\n * @param {TreeNode} node A tree node to check.\n * @returns {boolean}\n */\nexport function isNodeReflectsFirstChildColspan(node) {\n  return getFirstChildProperty(node, 'origColspan') === node.data.origColspan;\n}","import { arrayEach } from \"../../../../helpers/array.mjs\";\nimport { collapseNode } from \"./collapse.mjs\";\nimport { getFirstChildProperty, isNodeReflectsFirstChildColspan, traverseHiddenNodeColumnIndexes } from \"./utils/tree.mjs\";\n/**\n * Expanding a node is a process where the processing node is expanded to\n * its original colspan width. To restore an original state of all node\n * children on the right, the modified nodes are replaced with the cloned\n * nodes (they were cloned while collapsing).\n *\n * @param {TreeNode} nodeToProcess A tree node to process.\n * @returns {object} Returns an object with properties:\n *                    - rollbackModification: The function that rollbacks\n *                      the tree to the previous state.\n *                    - affectedColumns: The list of the visual column\n *                      indexes which are affected. That list is passed\n *                      to the hiddens column logic.\n *                    - colspanCompensation: The number of colspan by\n *                      which the processed node colspan was increased.\n */\nexport function expandNode(nodeToProcess) {\n  const {\n    data: nodeData,\n    childs: nodeChilds\n  } = nodeToProcess;\n  if (!nodeData.isCollapsed || nodeData.isHidden || nodeData.origColspan <= 1) {\n    return {\n      rollbackModification: () => {},\n      affectedColumns: [],\n      colspanCompensation: 0\n    };\n  }\n  const isNodeReflected = isNodeReflectsFirstChildColspan(nodeToProcess);\n  if (isNodeReflected) {\n    return expandNode(nodeChilds[0]);\n  }\n  nodeData.isCollapsed = false;\n  const allLeavesExceptMostLeft = nodeChilds.slice(1);\n  const affectedColumns = new Set();\n  let colspanCompensation = 0;\n  if (allLeavesExceptMostLeft.length > 0) {\n    arrayEach(allLeavesExceptMostLeft, node => {\n      // Restore original state of the collapsed headers.\n      node.replaceTreeWith(node.data.clonedTree);\n      node.data.clonedTree = null;\n      const leafData = node.data;\n\n      // Calculate by how many colspan it needs to increase the headings to match them to\n      // the colspan width of all its children.\n      colspanCompensation += leafData.colspan;\n      traverseHiddenNodeColumnIndexes(node, gridColumnIndex => {\n        affectedColumns.add(gridColumnIndex);\n      });\n    });\n  } else {\n    const {\n      colspan,\n      origColspan,\n      columnIndex\n    } = nodeData;\n\n    // In a case when the node doesn't have any children restore the colspan width to\n    // its original state.\n    colspanCompensation = origColspan - colspan;\n\n    // Add column to \"affected\" started from 1. The header without children can not be\n    // collapsed so the first column is already visible and we shouldn't touch it.\n    for (let i = 1; i < origColspan; i++) {\n      affectedColumns.add(columnIndex + i);\n    }\n  }\n  nodeToProcess.walkUp(node => {\n    const {\n      data\n    } = node;\n    data.colspan += colspanCompensation;\n    if (data.colspan >= data.origColspan) {\n      data.colspan = data.origColspan;\n      data.isCollapsed = false;\n    } else if (isNodeReflectsFirstChildColspan(node)) {\n      data.isCollapsed = getFirstChildProperty(node, 'isCollapsed');\n    }\n  });\n  return {\n    rollbackModification: () => collapseNode(nodeToProcess),\n    affectedColumns: Array.from(affectedColumns),\n    colspanCompensation\n  };\n}","import { arrayEach } from \"../../../../helpers/array.mjs\";\nimport { expandNode } from \"./expand.mjs\";\nimport { getFirstChildProperty, isNodeReflectsFirstChildColspan, traverseHiddenNodeColumnIndexes } from \"./utils/tree.mjs\";\n/**\n * Collapsing a node is a process where the processing node is collapsed\n * to the colspan width of the first child. All node children, except the\n * first one, are hidden. To prevent losing a current state of node children\n * on the right, all nodes are cloned (and restored while expanding), and\n * only then original nodes are modified (hidden in this case).\n *\n * @param {TreeNode} nodeToProcess A tree node to process.\n * @returns {object} Returns an object with properties:\n *                    - rollbackModification: The function that rollbacks\n *                      the tree to the previous state.\n *                    - affectedColumns: The list of the visual column\n *                      indexes which are affected. That list is passed\n *                      to the hiddens column logic.\n *                    - colspanCompensation: The number of colspan by\n *                      which the processed node colspan was reduced.\n */\nexport function collapseNode(nodeToProcess) {\n  var _getFirstChildPropert;\n  const {\n    data: nodeData,\n    childs: nodeChilds\n  } = nodeToProcess;\n  if (nodeData.isCollapsed || nodeData.isHidden || nodeData.origColspan <= 1) {\n    return {\n      rollbackModification: () => {},\n      affectedColumns: [],\n      colspanCompensation: 0\n    };\n  }\n  const isNodeReflected = isNodeReflectsFirstChildColspan(nodeToProcess);\n  if (isNodeReflected) {\n    return collapseNode(nodeChilds[0]);\n  }\n  nodeData.isCollapsed = true;\n  const allLeavesExceptMostLeft = nodeChilds.slice(1);\n  const affectedColumns = new Set();\n  if (allLeavesExceptMostLeft.length > 0) {\n    arrayEach(allLeavesExceptMostLeft, node => {\n      traverseHiddenNodeColumnIndexes(node, gridColumnIndex => {\n        affectedColumns.add(gridColumnIndex);\n      });\n\n      // Clone the tree to preserve original tree state after header expanding.\n      node.data.clonedTree = node.cloneTree();\n\n      // Hide all leaves except the first leaf on the left (on headers context hide all\n      // headers on the right).\n      node.walkDown(_ref => {\n        let {\n          data\n        } = _ref;\n        data.isHidden = true;\n      });\n    });\n  } else {\n    const {\n      origColspan,\n      columnIndex\n    } = nodeData;\n\n    // Add column to \"affected\" started from 1. The header without children can not be\n    // collapsed so the first have to be visible (untouched).\n    for (let i = 1; i < origColspan; i++) {\n      const gridColumnIndex = columnIndex + i;\n      affectedColumns.add(gridColumnIndex);\n    }\n  }\n\n  // Calculate by how many colspan it needs to reduce the headings to match them to\n  // the first child colspan width.\n  const colspanCompensation = nodeData.colspan - ((_getFirstChildPropert = getFirstChildProperty(nodeToProcess, 'colspan')) !== null && _getFirstChildPropert !== void 0 ? _getFirstChildPropert : 1);\n  nodeToProcess.walkUp(node => {\n    const {\n      data\n    } = node;\n    data.colspan -= colspanCompensation;\n    if (data.colspan <= 1) {\n      data.colspan = 1;\n      data.isCollapsed = true;\n    } else if (isNodeReflectsFirstChildColspan(node)) {\n      data.isCollapsed = getFirstChildProperty(node, 'isCollapsed');\n    }\n  });\n  return {\n    rollbackModification: () => expandNode(nodeToProcess),\n    affectedColumns: Array.from(affectedColumns),\n    colspanCompensation\n  };\n}","import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { toSingleLine } from \"../../../../helpers/templateLiteralTag.mjs\";\n/**\n * @param {TreeNode} nodeToProcess A tree node to process.\n * @param {number} gridColumnIndex The visual column index that triggers the node modification.\n *                                 The index can be between the root node column index and\n *                                 column index plus node colspan length.\n */\nexport function hideColumn(nodeToProcess, gridColumnIndex) {\n  if (!Number.isInteger(gridColumnIndex)) {\n    throw new Error('The passed gridColumnIndex argument has invalid type.');\n  }\n  if (nodeToProcess.childs.length > 0) {\n    throw new Error(toSingleLine`The passed node is not the last node on the tree. Only for\\x20\nthe last node, the hide column modification can be applied.`);\n  }\n  const {\n    crossHiddenColumns\n  } = nodeToProcess.data;\n  if (crossHiddenColumns.includes(gridColumnIndex)) {\n    return;\n  }\n  let isCollapsibleNode = false;\n  nodeToProcess.walkUp(node => {\n    const {\n      data: {\n        collapsible\n      }\n    } = node;\n    if (collapsible) {\n      isCollapsibleNode = true;\n      return false; // Cancel tree traversing\n    }\n  });\n\n  // TODO: When the node is collapsible do not hide the column. Currently collapsible headers\n  // does not work with hidden columns (hidden index map types).\n  if (isCollapsibleNode) {\n    return;\n  }\n  nodeToProcess.walkUp(node => {\n    const {\n      data\n    } = node;\n    data.crossHiddenColumns.push(gridColumnIndex);\n    if (data.colspan > 1) {\n      data.colspan -= 1;\n    } else {\n      data.isHidden = true;\n    }\n  });\n}","import \"core-js/modules/es.error.cause.js\";\nimport { toSingleLine } from \"../../../../helpers/templateLiteralTag.mjs\";\n/**\n * @param {TreeNode} nodeToProcess A tree node to process.\n * @param {number} gridColumnIndex The visual column index that triggers the node modification.\n *                                 The index can be between the root node column index and\n *                                 column index plus node colspan length.\n */\nexport function showColumn(nodeToProcess, gridColumnIndex) {\n  if (!Number.isInteger(gridColumnIndex)) {\n    throw new Error('The passed gridColumnIndex argument has invalid type.');\n  }\n  if (nodeToProcess.childs.length > 0) {\n    throw new Error(toSingleLine`The passed node is not the last node on the tree. Only for\\x20\nthe last node, the show column modification can be applied.`);\n  }\n  const {\n    crossHiddenColumns\n  } = nodeToProcess.data;\n  if (!crossHiddenColumns.includes(gridColumnIndex)) {\n    return;\n  }\n  let isCollapsibleNode = false;\n  nodeToProcess.walkUp(node => {\n    const {\n      data: {\n        collapsible\n      }\n    } = node;\n    if (collapsible) {\n      isCollapsibleNode = true;\n      return false; // Cancel tree traversing\n    }\n  });\n\n  // TODO: When the node is collapsible do not show the column. Currently collapsible headers\n  // does not work with hidden columns (hidden index map types).\n  if (isCollapsibleNode) {\n    return;\n  }\n  nodeToProcess.walkUp(node => {\n    const {\n      data\n    } = node;\n    data.crossHiddenColumns.splice(data.crossHiddenColumns.indexOf(gridColumnIndex), 1);\n    if (!data.isHidden && data.colspan < data.origColspan) {\n      data.colspan += 1;\n    }\n    data.isHidden = false;\n  });\n}","import \"core-js/modules/es.error.cause.js\";\n/**\n * The NodeModifiers module is responsible for the modification of a tree structure\n * in a way to achieve new column headers state.\n */\nimport { collapseNode } from \"./collapse.mjs\";\nimport { expandNode } from \"./expand.mjs\";\nimport { hideColumn } from \"./hideColumn.mjs\";\nimport { showColumn } from \"./showColumn.mjs\";\nconst availableModifiers = new Map([['collapse', collapseNode], ['expand', expandNode], ['hide-column', hideColumn], ['show-column', showColumn]]);\n\n/**\n * An entry point for triggering a node modifiers. If the triggered action\n * does not exist the exception is thrown.\n *\n * @param {string} actionName An action name to trigger.\n * @param {TreeNode} nodeToProcess A tree node to process.\n * @param {number} gridColumnIndex The visual column index that comes from the nested headers grid.\n *                                 The index, as opposed to the `columnIndex` in the tree node\n *                                 (which describes the column index of the root node of the header\n *                                 element), describes the index passed from the grid. Hence, the\n *                                 index can be between the column index of the node and its colspan\n *                                 width.\n * @returns {object}\n */\nexport function triggerNodeModification(actionName, nodeToProcess, gridColumnIndex) {\n  if (!availableModifiers.has(actionName)) {\n    throw new Error(`The node modifier action (\"${actionName}\") does not exist.`);\n  }\n  return availableModifiers.get(actionName)(nodeToProcess, gridColumnIndex);\n}","import \"core-js/modules/es.array.push.js\";\n/* eslint-disable jsdoc/require-description-complete-sentence */\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport { createDefaultHeaderSettings, createPlaceholderHeaderSettings } from \"./utils.mjs\";\n/**\n * A function that dump a tree structure into multidimensional array. That structure is\n * later processed by header renderers to modify TH elements to achieve a proper\n * DOM structure.\n *\n * That structure contains settings object for every TH element generated by Walkontable.\n * The matrix operates on visual column index.\n *\n * Output example:\n *   [\n *     [\n *       { label: 'A1', colspan: 2, origColspan: 2, isHidden: false, ... },\n *       { label: '', colspan: 1, origColspan: 1, isHidden: true, ... },\n *       { label: '', colspan: 1, origColspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: 'true', colspan: 1, origColspan: 1, isHidden: false, ... },\n *       { label: 'B2', colspan: 1, origColspan: 1, isHidden: false, ... },\n *       { label: '4', colspan: 1, origColspan: 1, isHidden: false, ... },\n *     ],\n *     [\n *       { label: '', colspan: 1, origColspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, origColspan: 1, isHidden: false, ... },\n *       { label: '', colspan: 1, origColspan: 1, isHidden: false, ... },\n *     ],\n *   ]\n *\n * @param {TreeNode[]} headerRoots An array of root nodes.\n * @returns {Array[]}\n */\nexport function generateMatrix(headerRoots) {\n  const matrix = [];\n  arrayEach(headerRoots, rootNode => {\n    rootNode.walkDown(node => {\n      const nodeData = node.data;\n      const {\n        origColspan,\n        columnIndex,\n        headerLevel,\n        crossHiddenColumns\n      } = nodeData;\n      const colspanHeaderLayer = createNestedArrayIfNecessary(matrix, headerLevel);\n      let isRootSettingsFound = false;\n      for (let i = columnIndex; i < columnIndex + origColspan; i++) {\n        const isColumnHidden = crossHiddenColumns.includes(i);\n        if (isColumnHidden || isRootSettingsFound) {\n          colspanHeaderLayer.push(createPlaceholderHeaderSettings(nodeData));\n        } else {\n          const headerRootSettings = createHeaderSettings(nodeData);\n          headerRootSettings.isRoot = true;\n          colspanHeaderLayer.push(headerRootSettings);\n          isRootSettingsFound = true;\n        }\n      }\n    });\n  });\n  return matrix;\n}\n\n/**\n * Creates header settings object.\n *\n * @param {object} nodeData The tree data object.\n * @returns {object}\n */\nfunction createHeaderSettings(nodeData) {\n  // For the matrix module we do not need to export \"crossHiddenColumns\" key. It's redundant here.\n  const {\n    crossHiddenColumns,\n    ...headerRootSettings\n  } = createDefaultHeaderSettings(nodeData);\n  return headerRootSettings;\n}\n\n/**\n * Internal helper which ensures that subarray exists under specified index.\n *\n * @param {Array[]} array An array to check.\n * @param {number} index An array index under the subarray should be checked.\n * @returns {Array}\n */\nfunction createNestedArrayIfNecessary(array, index) {\n  let subArray;\n  if (Array.isArray(array[index])) {\n    subArray = array[index];\n  } else {\n    subArray = [];\n    array[index] = subArray;\n  }\n  return subArray;\n}","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { arrayMap, arrayReduce } from \"../../../helpers/array.mjs\";\nimport SourceSettings from \"./sourceSettings.mjs\";\nimport HeadersTree from \"./headersTree.mjs\";\nimport { triggerNodeModification } from \"./nodeModifiers/index.mjs\";\nimport { generateMatrix } from \"./matrixGenerator.mjs\";\nimport { TRAVERSAL_DF_PRE } from \"../../../utils/dataStructures/tree.mjs\";\n/**\n * The state manager is a source of truth for nested headers configuration.\n * The state generation process is divided into three stages.\n *\n *   +---------------------+  1. User-defined configuration normalization;\n *   │                     │  The source settings class normalizes and shares API for\n *   │   SourceSettings    │  raw settings passed by the developer. It is only consumed by\n *   │                     │  the header tree module.\n *   +---------------------+\n *             │\n *            \\│/\n *   +---------------------+  2. Building a tree structure for validation and easier node manipulation;\n *   │                     │  The header tree generates a tree based on source settings for future\n *   │     HeadersTree     │  node manipulation (such as collapsible columns feature). While generating a tree\n *   │                     │  the source settings is checked to see if the configuration has overlapping headers.\n *   +---------------------+  If `true` the colspan matrix generation is skipped, overlapped headers are not supported.\n *             │\n *            \\│/\n *   +---------------------+  3. Matrix generation;\n *   │                     │  Based on built trees the matrix generation is performed. That part of code\n *   │  matrix generation  │  generates an array structure similar to normalized data from the SourceSettings\n *   │                     │  but with the difference that this structure contains column settings which changed\n *   +---------------------+  during runtime (after the tree manipulation) e.q after collapse or expand column.\n *                            That settings describes how the TH element should be modified (colspan attribute,\n *                            CSS classes, etc) for a specific column and layer level.\n *\n * @class StateManager\n */\nvar _sourceSettings = /*#__PURE__*/new WeakMap();\nvar _headersTree = /*#__PURE__*/new WeakMap();\nvar _stateMatrix = /*#__PURE__*/new WeakMap();\nexport default class StateManager {\n  constructor() {\n    /**\n     * The instance of the source settings class.\n     *\n     * @private\n     * @type {SourceSettings}\n     */\n    _classPrivateFieldInitSpec(this, _sourceSettings, {\n      writable: true,\n      value: new SourceSettings()\n    });\n    /**\n     * The instance of the headers tree. The tree is generated after setting new configuration data.\n     *\n     * @private\n     * @type {HeadersTree}\n     */\n    _classPrivateFieldInitSpec(this, _headersTree, {\n      writable: true,\n      value: new HeadersTree(_classPrivateFieldGet(this, _sourceSettings))\n    });\n    /**\n     * Cached matrix which is generated from the tree structure.\n     *\n     * @private\n     * @type {Array[]}\n     */\n    _classPrivateFieldInitSpec(this, _stateMatrix, {\n      writable: true,\n      value: [[]]\n    });\n  }\n  /**\n   * Sets a new state for the nested headers plugin based on settings passed\n   * directly to the plugin.\n   *\n   * @param {Array[]} nestedHeadersSettings The user-defined settings.\n   * @returns {boolean} Returns `true` if the settings are processed correctly, `false` otherwise.\n   */\n  setState(nestedHeadersSettings) {\n    _classPrivateFieldGet(this, _sourceSettings).setData(nestedHeadersSettings);\n    let hasError = false;\n    try {\n      _classPrivateFieldGet(this, _headersTree).buildTree();\n    } catch (ex) {\n      _classPrivateFieldGet(this, _headersTree).clear();\n      _classPrivateFieldGet(this, _sourceSettings).clear();\n      hasError = true;\n    }\n    _classPrivateFieldSet(this, _stateMatrix, generateMatrix(_classPrivateFieldGet(this, _headersTree).getRoots()));\n    return hasError;\n  }\n\n  /**\n   * Sets columns limit to the state will be trimmed. All headers (colspans) which\n   * overlap the column limit will be reduced to keep the structure solid.\n   *\n   * @param {number} columnsCount The number of columns to limit to.\n   */\n  setColumnsLimit(columnsCount) {\n    _classPrivateFieldGet(this, _sourceSettings).setColumnsLimit(columnsCount);\n  }\n\n  /**\n   * Merges settings with current plugin state.\n   *\n   * By default only foreign keys are merged with source state and passed to the tree. But only\n   * known keys are exported to matrix.\n   *\n   * @param {object[]} settings An array of objects to merge with the current source settings.\n   *                            It is a requirement that every object has `row` and `col` properties\n   *                            which points to the specific header settings object.\n   */\n  mergeStateWith(settings) {\n    const transformedSettings = arrayMap(settings, _ref => {\n      let {\n        row,\n        ...rest\n      } = _ref;\n      return {\n        row: row < 0 ? this.rowCoordsToLevel(row) : row,\n        ...rest\n      };\n    });\n    _classPrivateFieldGet(this, _sourceSettings).mergeWith(transformedSettings);\n    _classPrivateFieldGet(this, _headersTree).buildTree();\n    _classPrivateFieldSet(this, _stateMatrix, generateMatrix(_classPrivateFieldGet(this, _headersTree).getRoots()));\n  }\n\n  /**\n   * Maps the current state with a callback. For each header settings the callback function\n   * is called. If the function returns value that value is merged with the state.\n   *\n   * By default only foreign keys are merged with source state and passed to the tree. But only\n   * known keys are exported to matrix.\n   *\n   * @param {Function} callback A function that is called for every header source settings.\n   *                            Each time the callback is called, the returned value extends\n   *                            header settings.\n   */\n  mapState(callback) {\n    _classPrivateFieldGet(this, _sourceSettings).map(callback);\n    _classPrivateFieldGet(this, _headersTree).buildTree();\n    _classPrivateFieldSet(this, _stateMatrix, generateMatrix(_classPrivateFieldGet(this, _headersTree).getRoots()));\n  }\n\n  /**\n   * Maps the current tree nodes with a callback. For each node the callback function\n   * is called. If the function returns value that value is added to returned array.\n   *\n   * @param {Function} callback A function that is called for every tree node.\n   *                            Each time the callback is called, the returned value is\n   *                            added to returned array.\n   * @returns {Array}\n   */\n  mapNodes(callback) {\n    return arrayReduce(_classPrivateFieldGet(this, _headersTree).getRoots(), (acc, rootNode) => {\n      rootNode.walkDown(node => {\n        const result = callback(node.data);\n        if (result !== void 0) {\n          acc.push(result);\n        }\n      });\n      return acc;\n    }, []);\n  }\n\n  /**\n   * Triggers an action (e.g. \"collapse\") from the NodeModifiers module. The module\n   * modifies a tree structure in such a way as to obtain the correct structure consistent with the\n   * called action.\n   *\n   * @param {string} action An action name to trigger.\n   * @param {number} headerLevel Header level index (there is support for negative and positive values).\n   * @param {number} columnIndex A visual column index.\n   * @returns {object|undefined}\n   */\n  triggerNodeModification(action, headerLevel, columnIndex) {\n    if (headerLevel < 0) {\n      headerLevel = this.rowCoordsToLevel(headerLevel);\n    }\n    const nodeToProcess = _classPrivateFieldGet(this, _headersTree).getNode(headerLevel, columnIndex);\n    let actionResult;\n    if (nodeToProcess) {\n      actionResult = triggerNodeModification(action, nodeToProcess, columnIndex);\n\n      // TODO (perf-tip): Trigger matrix generation once after multiple node modifications.\n      _classPrivateFieldSet(this, _stateMatrix, generateMatrix(_classPrivateFieldGet(this, _headersTree).getRoots()));\n    }\n    return actionResult;\n  }\n\n  /**\n   * Triggers an action (e.g. \"hide-column\") from the NodeModifiers module. The action is\n   * triggered starting from the lowest header. The module modifies a tree structure in\n   * such a way as to obtain the correct structure consistent with the called action.\n   *\n   * @param {string} action An action name to trigger.\n   * @param {number} columnIndex A visual column index.\n   * @returns {object|undefined}\n   */\n  triggerColumnModification(action, columnIndex) {\n    return this.triggerNodeModification(action, -1, columnIndex);\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * @memberof StateManager#\n   * @function rowCoordsToLevel\n   *\n   * Translates row coordinates into header level. The row coordinates counts from -1 to -N\n   * and describes headers counting from most closest to most distant from the table.\n   * The header levels are counted from 0 to N where 0 describes most distant header\n   * from the table.\n   *\n   *  Row coords             Header level\n   *           +--------------+\n   *       -3  │ A1 │ A1      │  0\n   *           +--------------+\n   *       -2  │ B1 │ B2 │ B3 │  1\n   *           +--------------+\n   *       -1  │ C1 │ C2 │ C3 │  2\n   *           +==============+\n   *           │    │    │    │\n   *           +--------------+\n   *           │    │    │    │\n   *\n   * @param {number} rowIndex A visual row index.\n   * @returns {number|null} Returns unsigned number.\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  rowCoordsToLevel(rowIndex) {\n    if (rowIndex >= 0) {\n      return null;\n    }\n    const headerLevel = rowIndex + Math.max(this.getLayersCount(), 1);\n    if (headerLevel < 0) {\n      return null;\n    }\n    return headerLevel;\n  }\n\n  /* eslint-disable jsdoc/require-description-complete-sentence */\n  /**\n   * @memberof StateManager#\n   * @function levelToRowCoords\n   *\n   * Translates header level into row coordinates. The row coordinates counts from -1 to -N\n   * and describes headers counting from most closest to most distant from the table.\n   * The header levels are counted from 0 to N where 0 describes most distant header\n   * from the table.\n   *\n   *  Header level            Row coords\n   *           +--------------+\n   *        0  │ A1 │ A1      │  -3\n   *           +--------------+\n   *        1  │ B1 │ B2 │ B3 │  -2\n   *           +--------------+\n   *        2  │ C1 │ C2 │ C3 │  -1\n   *           +==============+\n   *           │    │    │    │\n   *           +--------------+\n   *           │    │    │    │\n   *\n   * @param {number} headerLevel Header level index.\n   * @returns {number} Returns negative number.\n   */\n  /* eslint-enable jsdoc/require-description-complete-sentence */\n  levelToRowCoords(headerLevel) {\n    if (headerLevel < 0) {\n      return null;\n    }\n    const rowIndex = headerLevel - Math.max(this.getLayersCount(), 1);\n    if (rowIndex >= 0) {\n      return null;\n    }\n    return rowIndex;\n  }\n\n  /**\n   * Gets column header settings for a specified column and header index. The returned object contains\n   * all information necessary for header renderers. It contains header label, colspan length, or hidden\n   * flag.\n   *\n   * @param {number} headerLevel Header level (there is support for negative and positive values).\n   * @param {number} columnIndex A visual column index.\n   * @returns {object|null}\n   */\n  getHeaderSettings(headerLevel, columnIndex) {\n    var _classPrivateFieldGet2, _classPrivateFieldGet3;\n    if (headerLevel < 0) {\n      headerLevel = this.rowCoordsToLevel(headerLevel);\n    }\n    if (headerLevel === null || headerLevel >= this.getLayersCount()) {\n      return null;\n    }\n    return (_classPrivateFieldGet2 = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _stateMatrix)[headerLevel]) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3[columnIndex]) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : null;\n  }\n\n  /**\n   * Gets tree data that is connected to the column header. The returned object contains all information\n   * necessary for modifying tree structure (column collapsing, hiding, etc.). It contains a header\n   * label, colspan length, or visual column index that indicates which column index the node is rendered from.\n   *\n   * @param {number} headerLevel Header level (there is support for negative and positive values).\n   * @param {number} columnIndex A visual column index.\n   * @returns {object|null}\n   */\n  getHeaderTreeNodeData(headerLevel, columnIndex) {\n    const node = this.getHeaderTreeNode(headerLevel, columnIndex);\n    if (!node) {\n      return null;\n    }\n    return {\n      ...node.data\n    };\n  }\n\n  /**\n   * Gets tree node that is connected to the column header.\n   *\n   * @param {number} headerLevel Header level (there is support for negative and positive values).\n   * @param {number} columnIndex A visual column index.\n   * @returns {TreeNode|null}\n   */\n  getHeaderTreeNode(headerLevel, columnIndex) {\n    if (headerLevel < 0) {\n      headerLevel = this.rowCoordsToLevel(headerLevel);\n    }\n    if (headerLevel === null || headerLevel >= this.getLayersCount()) {\n      return null;\n    }\n    const node = _classPrivateFieldGet(this, _headersTree).getNode(headerLevel, columnIndex);\n    if (!node) {\n      return null;\n    }\n    return node;\n  }\n\n  /**\n   * Finds the most top header level of the column header that is rendered entirely within\n   * the passed visual columns range. If multiple columns headers are found within the range the\n   * most top header level value will be returned.\n   *\n   * @param {number} columnIndexFrom A visual column index.\n   * @param {number} [columnIndexTo] A visual column index.\n   * @returns {number} Returns a header level in format -1 to -N.\n   */\n  findTopMostEntireHeaderLevel(columnIndexFrom) {\n    var _headerLevel;\n    let columnIndexTo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : columnIndexFrom;\n    const columnsWidth = columnIndexTo - columnIndexFrom + 1;\n    let atLeastOneRootFound = false;\n    let headerLevel = null;\n    for (let columnIndex = columnIndexFrom; columnIndex <= columnIndexTo; columnIndex++) {\n      const rootNode = _classPrivateFieldGet(this, _headersTree).getRootByColumn(columnIndex);\n      if (!rootNode) {\n        break;\n      }\n      atLeastOneRootFound = true;\n\n      // eslint-disable-next-line\n      rootNode.walkDown(node => {\n        const {\n          columnIndex: nodeColumnIndex,\n          headerLevel: nodeHeaderLevel,\n          origColspan,\n          isHidden\n        } = node.data;\n        if (isHidden) {\n          return;\n        }\n\n        // if the header fits entirely within the columns range get and save the node header level\n        if (origColspan <= columnsWidth && nodeColumnIndex >= columnIndexFrom && nodeColumnIndex + origColspan - 1 <= columnIndexTo && (headerLevel === null || nodeHeaderLevel < headerLevel)) {\n          headerLevel = nodeHeaderLevel;\n        }\n      }, TRAVERSAL_DF_PRE);\n    }\n    if (atLeastOneRootFound && headerLevel === null) {\n      return -1;\n    }\n    return this.levelToRowCoords((_headerLevel = headerLevel) !== null && _headerLevel !== void 0 ? _headerLevel : 0);\n  }\n\n  /**\n   * The method is helpful in cases where the column index targets in-between currently\n   * collapsed column. In that case, the method returns the left-most column index\n   * where the nested header begins.\n   *\n   * @param {number} headerLevel Header level (there is support for negative and positive values).\n   * @param {number} columnIndex A visual column index.\n   * @returns {number}\n   */\n  findLeftMostColumnIndex(headerLevel, columnIndex) {\n    var _this$getHeaderSettin;\n    const {\n      isRoot\n    } = (_this$getHeaderSettin = this.getHeaderSettings(headerLevel, columnIndex)) !== null && _this$getHeaderSettin !== void 0 ? _this$getHeaderSettin : {\n      isRoot: true\n    };\n    if (isRoot) {\n      return columnIndex;\n    }\n    let stepBackColumn = columnIndex - 1;\n    while (stepBackColumn >= 0) {\n      var _this$getHeaderSettin2;\n      const {\n        isRoot: isRootNode\n      } = (_this$getHeaderSettin2 = this.getHeaderSettings(headerLevel, stepBackColumn)) !== null && _this$getHeaderSettin2 !== void 0 ? _this$getHeaderSettin2 : {\n        isRoot: true\n      };\n      if (isRootNode) {\n        break;\n      }\n      stepBackColumn -= 1;\n    }\n    return stepBackColumn;\n  }\n\n  /**\n   * The method is helpful in cases where the column index targets in-between currently\n   * collapsed column. In that case, the method returns the right-most column index\n   * where the nested header ends.\n   *\n   * @param {number} headerLevel Header level (there is support for negative and positive values).\n   * @param {number} columnIndex A visual column index.\n   * @returns {number}\n   */\n  findRightMostColumnIndex(headerLevel, columnIndex) {\n    var _this$getHeaderSettin3;\n    const {\n      isRoot,\n      origColspan\n    } = (_this$getHeaderSettin3 = this.getHeaderSettings(headerLevel, columnIndex)) !== null && _this$getHeaderSettin3 !== void 0 ? _this$getHeaderSettin3 : {\n      isRoot: true,\n      origColspan: 1\n    };\n    if (isRoot) {\n      return columnIndex + origColspan - 1;\n    }\n    let stepForthColumn = columnIndex + 1;\n    while (stepForthColumn < this.getColumnsCount()) {\n      var _this$getHeaderSettin4;\n      const {\n        isRoot: isRootNode\n      } = (_this$getHeaderSettin4 = this.getHeaderSettings(headerLevel, stepForthColumn)) !== null && _this$getHeaderSettin4 !== void 0 ? _this$getHeaderSettin4 : {\n        isRoot: true\n      };\n      if (isRootNode) {\n        break;\n      }\n      stepForthColumn += 1;\n    }\n    return stepForthColumn - 1;\n  }\n\n  /**\n   * Gets a total number of headers levels.\n   *\n   * @returns {number}\n   */\n  getLayersCount() {\n    return _classPrivateFieldGet(this, _sourceSettings).getLayersCount();\n  }\n\n  /**\n   * Gets a total number of columns count.\n   *\n   * @returns {number}\n   */\n  getColumnsCount() {\n    return _classPrivateFieldGet(this, _sourceSettings).getColumnsCount();\n  }\n\n  /**\n   * Clears the column state manager to the initial state.\n   */\n  clear() {\n    _classPrivateFieldSet(this, _stateMatrix, []);\n    _classPrivateFieldGet(this, _sourceSettings).clear();\n    _classPrivateFieldGet(this, _headersTree).clear();\n  }\n}","import \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { fastInnerHTML } from \"../../../helpers/dom/element.mjs\";\n/**\n * The class generates the nested headers structure in the DOM and reads the column width for\n * each column. The hierarchy is built only for visible, non-hidden columns. Each time the\n * column is shown or hidden, the structure is rebuilt, and the width of the columns in the\n * map updated.\n *\n * @private\n */\nclass GhostTable {\n  constructor(hot, nestedHeaderSettingsGetter) {\n    /**\n     * Reference to the Handsontable instance.\n     *\n     * @private\n     * @type {Handsontable}\n     */\n    _defineProperty(this, \"hot\", void 0);\n    /**\n     * The function for retrieving the nested headers settings.\n     *\n     * @private\n     * @type {Function}\n     */\n    _defineProperty(this, \"nestedHeaderSettingsGetter\", void 0);\n    /**\n     * The value that holds information about the number of the nested header layers (header rows).\n     *\n     * @private\n     * @type {number}\n     */\n    _defineProperty(this, \"layersCount\", 0);\n    /**\n     * Temporary element created to get minimal headers widths.\n     *\n     * @private\n     * @type {*}\n     */\n    _defineProperty(this, \"container\", void 0);\n    /**\n     * PhysicalIndexToValueMap to keep and track of the columns' widths.\n     *\n     * @private\n     * @type {PhysicalIndexToValueMap}\n     */\n    _defineProperty(this, \"widthsMap\", void 0);\n    this.hot = hot;\n    this.nestedHeaderSettingsGetter = nestedHeaderSettingsGetter;\n    this.widthsMap = this.hot.columnIndexMapper.createAndRegisterIndexMap('nestedHeaders.widthsMap', 'physicalIndexToValue');\n  }\n\n  /**\n   * Sets the number of nested headers layers count.\n   *\n   * @param {number} layersCount Total number of headers levels.\n   * @returns {GhostTable}\n   */\n  setLayersCount(layersCount) {\n    this.layersCount = layersCount;\n    return this;\n  }\n\n  /**\n   * Gets the column width based on the visual column index.\n   *\n   * @param {number} visualColumn Visual column index.\n   * @returns {number|null}\n   */\n  getWidth(visualColumn) {\n    return this.widthsMap.getValueAtIndex(this.hot.toPhysicalColumn(visualColumn));\n  }\n\n  /**\n   * Build cache of the headers widths.\n   */\n  buildWidthsMap() {\n    this.container = this.hot.rootDocument.createElement('div');\n    this.container.classList.add('handsontable', 'htGhostTable', 'htAutoSize');\n    this._buildGhostTable(this.container);\n    this.hot.rootDocument.body.appendChild(this.container);\n    const columns = this.container.querySelectorAll('tr:last-of-type th');\n    const maxColumns = columns.length;\n    this.widthsMap.clear();\n    for (let column = 0; column < maxColumns; column++) {\n      const visualColumnsIndex = this.hot.columnIndexMapper.getVisualFromRenderableIndex(column);\n      const physicalColumnIndex = this.hot.toPhysicalColumn(visualColumnsIndex);\n      this.widthsMap.setValueAtIndex(physicalColumnIndex, columns[column].offsetWidth);\n    }\n    this.container.parentNode.removeChild(this.container);\n    this.container = null;\n  }\n\n  /**\n   * Build temporary table for getting minimal columns widths.\n   *\n   * @private\n   * @param {HTMLElement} container The element where the DOM nodes are injected.\n   */\n  _buildGhostTable(container) {\n    const {\n      rootDocument,\n      columnIndexMapper\n    } = this.hot;\n    const fragment = rootDocument.createDocumentFragment();\n    const table = rootDocument.createElement('table');\n    const isDropdownEnabled = !!this.hot.getSettings().dropdownMenu;\n    const maxRenderedCols = columnIndexMapper.getRenderableIndexesLength();\n    for (let row = 0; row < this.layersCount; row++) {\n      const tr = rootDocument.createElement('tr');\n      for (let col = 0; col < maxRenderedCols; col++) {\n        let visualColumnsIndex = columnIndexMapper.getVisualFromRenderableIndex(col);\n        if (visualColumnsIndex === null) {\n          visualColumnsIndex = col;\n        }\n        const th = rootDocument.createElement('th');\n        const headerSettings = this.nestedHeaderSettingsGetter(row, visualColumnsIndex);\n        if (headerSettings && (!headerSettings.isPlaceholder || headerSettings.isHidden)) {\n          let label = headerSettings.label;\n          if (isDropdownEnabled) {\n            label += '<button class=\"changeType\"></button>';\n          }\n          fastInnerHTML(th, label);\n          th.colSpan = headerSettings.colspan;\n          tr.appendChild(th);\n        }\n      }\n      table.appendChild(tr);\n    }\n    fragment.appendChild(table);\n    container.appendChild(fragment);\n  }\n\n  /**\n   * Clear the widths cache.\n   */\n  clear() {\n    this.widthsMap.clear();\n    this.container = null;\n  }\n}\nexport default GhostTable;","import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.error.cause.js\";\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }\nfunction _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError(\"Cannot initialize the same private elements twice on an object\"); } }\nfunction _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"set\"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }\nfunction _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError(\"attempted to set read only private field\"); } descriptor.value = value; } }\nfunction _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, \"get\"); return _classApplyDescriptorGet(receiver, descriptor); }\nfunction _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError(\"attempted to \" + action + \" private field on non-instance\"); } return privateMap.get(receiver); }\nfunction _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }\nimport { addClass, removeClass } from \"../../helpers/dom/element.mjs\";\nimport { isNumeric, clamp } from \"../../helpers/number.mjs\";\nimport { toSingleLine } from \"../../helpers/templateLiteralTag.mjs\";\nimport { isLeftClick, isRightClick } from \"../../helpers/dom/event.mjs\";\nimport { warn } from \"../../helpers/console.mjs\";\nimport { ACTIVE_HEADER_TYPE, HEADER_TYPE } from \"../../selection/index.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport StateManager from \"./stateManager/index.mjs\";\nimport GhostTable from \"./utils/ghostTable.mjs\";\nexport const PLUGIN_KEY = 'nestedHeaders';\nexport const PLUGIN_PRIORITY = 280;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin NestedHeaders\n * @class NestedHeaders\n *\n * @description\n * The plugin allows to create a nested header structure, using the HTML's colspan attribute.\n *\n * To make any header wider (covering multiple table columns), it's corresponding configuration array element should be\n * provided as an object with `label` and `colspan` properties. The `label` property defines the header's label,\n * while the `colspan` property defines a number of columns that the header should cover.\n *\n * __Note__ that the plugin supports a *nested* structure, which means, any header cannot be wider than it's \"parent\". In\n * other words, headers cannot overlap each other.\n * @example\n *\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   nestedHeaders: [\n *     ['A', {label: 'B', colspan: 8}, 'C'],\n *     ['D', {label: 'E', colspan: 4}, {label: 'F', colspan: 4}, 'G'],\n *     ['H', {label: 'I', colspan: 2}, {label: 'J', colspan: 2}, {label: 'K', colspan: 2}, {label: 'L', colspan: 2}, 'M'],\n *     ['N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W']\n *  ],\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * <HotTable\n *   data={getData()}\n *   nestedHeaders={[\n *     ['A', {label: 'B', colspan: 8}, 'C'],\n *     ['D', {label: 'E', colspan: 4}, {label: 'F', colspan: 4}, 'G'],\n *     ['H', {label: 'I', colspan: 2}, {label: 'J', colspan: 2}, {label: 'K', colspan: 2}, {label: 'L', colspan: 2}, 'M'],\n *     ['N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W']\n *  ]}\n * />\n * ```\n * :::\n */\nvar _stateManager = /*#__PURE__*/new WeakMap();\nvar _hidingIndexMapObserver = /*#__PURE__*/new WeakMap();\nvar _focusInitialCoords = /*#__PURE__*/new WeakMap();\nvar _isColumnsSelectionInProgress = /*#__PURE__*/new WeakMap();\nexport class NestedHeaders extends BasePlugin {\n  constructor() {\n    super(...arguments);\n    /**\n     * The state manager for the nested headers.\n     *\n     * @type {StateManager}\n     */\n    _classPrivateFieldInitSpec(this, _stateManager, {\n      writable: true,\n      value: new StateManager()\n    });\n    /**\n     * The instance of the ChangesObservable class that allows track the changes that happens in the\n     * column indexes.\n     *\n     * @type {ChangesObservable}\n     */\n    _classPrivateFieldInitSpec(this, _hidingIndexMapObserver, {\n      writable: true,\n      value: null\n    });\n    /**\n     * Holds the coords that points to the place where the column selection starts.\n     *\n     * @type {number|null}\n     */\n    _classPrivateFieldInitSpec(this, _focusInitialCoords, {\n      writable: true,\n      value: null\n    });\n    /**\n     * Determines if there is performed the column selection.\n     *\n     * @type {boolean}\n     */\n    _classPrivateFieldInitSpec(this, _isColumnsSelectionInProgress, {\n      writable: true,\n      value: false\n    });\n    /**\n     * Custom helper for getting widths of the nested headers.\n     *\n     * @private\n     * @type {GhostTable}\n     */\n    // @TODO This should be changed after refactor handsontable/utils/ghostTable.\n    _defineProperty(this, \"ghostTable\", new GhostTable(this.hot, (row, column) => this.getHeaderSettings(row, column)));\n    /**\n     * The flag which determines that the nested header settings contains overlapping headers\n     * configuration.\n     *\n     * @type {boolean}\n     */\n    _defineProperty(this, \"detectedOverlappedHeaders\", false);\n  }\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  /**\n   * Check if plugin is enabled.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const {\n      nestedHeaders\n    } = this.hot.getSettings();\n    if (!Array.isArray(nestedHeaders) || !Array.isArray(nestedHeaders[0])) {\n      warn(toSingleLine`Your Nested Headers plugin configuration is invalid. The settings has to be\\x20\n                        passed as an array of arrays e.q. [['A1', { label: 'A2', colspan: 2 }]]`);\n    }\n    this.addHook('init', () => this.onInit());\n    this.addHook('afterLoadData', function () {\n      return _this.onAfterLoadData(...arguments);\n    });\n    this.addHook('beforeOnCellMouseDown', function () {\n      return _this.onBeforeOnCellMouseDown(...arguments);\n    });\n    this.addHook('afterOnCellMouseDown', function () {\n      return _this.onAfterOnCellMouseDown(...arguments);\n    });\n    this.addHook('beforeOnCellMouseOver', function () {\n      return _this.onBeforeOnCellMouseOver(...arguments);\n    });\n    this.addHook('beforeOnCellMouseUp', function () {\n      return _this.onBeforeOnCellMouseUp(...arguments);\n    });\n    this.addHook('beforeSelectionHighlightSet', function () {\n      return _this.onBeforeSelectionHighlightSet(...arguments);\n    });\n    this.addHook('modifyTransformStart', function () {\n      return _this.onModifyTransformStart(...arguments);\n    });\n    this.addHook('afterSelection', () => this.updateFocusHighlightPosition());\n    this.addHook('beforeViewportScrollHorizontally', function () {\n      return _this.onBeforeViewportScrollHorizontally(...arguments);\n    });\n    this.addHook('afterGetColumnHeaderRenderers', array => this.onAfterGetColumnHeaderRenderers(array));\n    this.addHook('modifyColWidth', function () {\n      return _this.onModifyColWidth(...arguments);\n    });\n    this.addHook('modifyColumnHeaderValue', function () {\n      return _this.onModifyColumnHeaderValue(...arguments);\n    });\n    this.addHook('beforeHighlightingColumnHeader', function () {\n      return _this.onBeforeHighlightingColumnHeader(...arguments);\n    });\n    this.addHook('beforeCopy', function () {\n      return _this.onBeforeCopy(...arguments);\n    });\n    this.addHook('beforeSelectColumns', function () {\n      return _this.onBeforeSelectColumns(...arguments);\n    });\n    this.addHook('afterViewportColumnCalculatorOverride', function () {\n      return _this.onAfterViewportColumnCalculatorOverride(...arguments);\n    });\n    this.addHook('modifyFocusedElement', function () {\n      return _this.onModifyFocusedElement(...arguments);\n    });\n    this.hot.columnIndexMapper.addLocalHook('cacheUpdated', () => this.updateFocusHighlightPosition());\n    this.hot.rowIndexMapper.addLocalHook('cacheUpdated', () => this.updateFocusHighlightPosition());\n    super.enablePlugin();\n    this.updatePlugin(); // @TODO: Workaround for broken plugin initialization abstraction.\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`nestedHeaders`](@/api/options.md#nestedheaders)\n   */\n  updatePlugin() {\n    if (!this.hot.view) {\n      // @TODO: Workaround for broken plugin initialization abstraction.\n      return;\n    }\n    const {\n      nestedHeaders\n    } = this.hot.getSettings();\n    _classPrivateFieldGet(this, _stateManager).setColumnsLimit(this.hot.countCols());\n    if (Array.isArray(nestedHeaders)) {\n      this.detectedOverlappedHeaders = _classPrivateFieldGet(this, _stateManager).setState(nestedHeaders);\n    }\n    if (this.detectedOverlappedHeaders) {\n      warn(toSingleLine`Your Nested Headers plugin setup contains overlapping headers. This kind of configuration\\x20\n                        is currently not supported.`);\n    }\n    if (this.enabled) {\n      // This line covers the case when a developer uses the external hiding maps to manipulate\n      // the columns' visibility. The tree state built from the settings - which is always built\n      // as if all the columns are visible, needs to be modified to be in sync with a dataset.\n      this.hot.columnIndexMapper.hidingMapsCollection.getMergedValues().forEach((isColumnHidden, physicalColumnIndex) => {\n        const actionName = isColumnHidden === true ? 'hide-column' : 'show-column';\n        _classPrivateFieldGet(this, _stateManager).triggerColumnModification(actionName, physicalColumnIndex);\n      });\n    }\n    if (!_classPrivateFieldGet(this, _hidingIndexMapObserver) && this.enabled) {\n      _classPrivateFieldSet(this, _hidingIndexMapObserver, this.hot.columnIndexMapper.createChangesObserver('hiding').subscribe(changes => {\n        changes.forEach(_ref => {\n          let {\n            op,\n            index: columnIndex,\n            newValue\n          } = _ref;\n          if (op === 'replace') {\n            const actionName = newValue === true ? 'hide-column' : 'show-column';\n            _classPrivateFieldGet(this, _stateManager).triggerColumnModification(actionName, columnIndex);\n          }\n        });\n        this.ghostTable.buildWidthsMap();\n      }));\n    }\n    this.ghostTable.setLayersCount(this.getLayersCount()).buildWidthsMap();\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.clearColspans();\n    _classPrivateFieldGet(this, _stateManager).clear();\n    _classPrivateFieldGet(this, _hidingIndexMapObserver).unsubscribe();\n    _classPrivateFieldSet(this, _hidingIndexMapObserver, null);\n    this.ghostTable.clear();\n    super.disablePlugin();\n  }\n\n  /**\n   * Returns an instance of the internal state manager of the plugin.\n   *\n   * @private\n   * @returns {StateManager}\n   */\n  getStateManager() {\n    return _classPrivateFieldGet(this, _stateManager);\n  }\n\n  /**\n   * Gets a total number of headers levels.\n   *\n   * @private\n   * @returns {number}\n   */\n  getLayersCount() {\n    return _classPrivateFieldGet(this, _stateManager).getLayersCount();\n  }\n\n  /**\n   * Gets column settings for a specified header. The returned object contains\n   * information about the header label, its colspan length, or if it is hidden\n   * in the header renderers.\n   *\n   * @private\n   * @param {number} headerLevel Header level (0 = most distant to the table).\n   * @param {number} columnIndex A visual column index.\n   * @returns {object}\n   */\n  getHeaderSettings(headerLevel, columnIndex) {\n    return _classPrivateFieldGet(this, _stateManager).getHeaderSettings(headerLevel, columnIndex);\n  }\n\n  /**\n   * Clear the colspans remaining after plugin usage.\n   *\n   * @private\n   */\n  clearColspans() {\n    if (!this.hot.view) {\n      return;\n    }\n    const {\n      _wt: wt\n    } = this.hot.view;\n    const headerLevels = wt.getSetting('columnHeaders').length;\n    const mainHeaders = wt.wtTable.THEAD;\n    const topHeaders = wt.wtOverlays.topOverlay.clone.wtTable.THEAD;\n    const topLeftCornerHeaders = wt.wtOverlays.topInlineStartCornerOverlay ? wt.wtOverlays.topInlineStartCornerOverlay.clone.wtTable.THEAD : null;\n    for (let i = 0; i < headerLevels; i++) {\n      const masterLevel = mainHeaders.childNodes[i];\n      if (!masterLevel) {\n        break;\n      }\n      const topLevel = topHeaders.childNodes[i];\n      const topLeftCornerLevel = topLeftCornerHeaders ? topLeftCornerHeaders.childNodes[i] : null;\n      for (let j = 0, masterNodes = masterLevel.childNodes.length; j < masterNodes; j++) {\n        masterLevel.childNodes[j].removeAttribute('colspan');\n        removeClass(masterLevel.childNodes[j], 'hiddenHeader');\n        if (topLevel && topLevel.childNodes[j]) {\n          topLevel.childNodes[j].removeAttribute('colspan');\n          removeClass(topLevel.childNodes[j], 'hiddenHeader');\n        }\n        if (topLeftCornerHeaders && topLeftCornerLevel && topLeftCornerLevel.childNodes[j]) {\n          topLeftCornerLevel.childNodes[j].removeAttribute('colspan');\n          removeClass(topLeftCornerLevel.childNodes[j], 'hiddenHeader');\n        }\n      }\n    }\n  }\n\n  /**\n   * Generates the appropriate header renderer for a header row.\n   *\n   * @private\n   * @param {number} headerLevel The index of header level counting from the top (positive\n   *                             values counting from 0 to N).\n   * @returns {Function}\n   * @fires Hooks#afterGetColHeader\n   */\n  headerRendererFactory(headerLevel) {\n    var _this2 = this;\n    const fixedColumnsStart = this.hot.view._wt.getSetting('fixedColumnsStart');\n    return (renderedColumnIndex, TH) => {\n      var _classPrivateFieldGet2;\n      const {\n        columnIndexMapper,\n        view\n      } = this.hot;\n      let visualColumnIndex = columnIndexMapper.getVisualFromRenderableIndex(renderedColumnIndex);\n      if (visualColumnIndex === null) {\n        visualColumnIndex = renderedColumnIndex;\n      }\n      TH.removeAttribute('colspan');\n      removeClass(TH, 'hiddenHeader');\n      const {\n        colspan,\n        isHidden,\n        isPlaceholder\n      } = (_classPrivateFieldGet2 = _classPrivateFieldGet(this, _stateManager).getHeaderSettings(headerLevel, visualColumnIndex)) !== null && _classPrivateFieldGet2 !== void 0 ? _classPrivateFieldGet2 : {\n        label: ''\n      };\n      if (isPlaceholder || isHidden) {\n        addClass(TH, 'hiddenHeader');\n      } else if (colspan > 1) {\n        var _wtOverlays$topInline, _wtOverlays$inlineSta;\n        const {\n          wtOverlays\n        } = view._wt;\n        const isTopInlineStartOverlay = (_wtOverlays$topInline = wtOverlays.topInlineStartCornerOverlay) === null || _wtOverlays$topInline === void 0 ? void 0 : _wtOverlays$topInline.clone.wtTable.THEAD.contains(TH);\n        const isInlineStartOverlay = (_wtOverlays$inlineSta = wtOverlays.inlineStartOverlay) === null || _wtOverlays$inlineSta === void 0 ? void 0 : _wtOverlays$inlineSta.clone.wtTable.THEAD.contains(TH);\n\n        // Check if there is a fixed column enabled, if so then reduce colspan to fixed column width.\n        const correctedColspan = isTopInlineStartOverlay || isInlineStartOverlay ? Math.min(colspan, fixedColumnsStart - renderedColumnIndex) : colspan;\n        if (correctedColspan > 1) {\n          TH.setAttribute('colspan', correctedColspan);\n        }\n      }\n      this.hot.view.appendColHeader(visualColumnIndex, TH, function () {\n        return _this2.getColumnHeaderValue(...arguments);\n      }, headerLevel);\n    };\n  }\n\n  /**\n   * Returns the column header value for specified column and header level index.\n   *\n   * @private\n   * @param {number} visualColumnIndex Visual column index.\n   * @param {number} headerLevel The index of header level. The header level accepts positive (0 to N)\n   *                             and negative (-1 to -N) values. For positive values, 0 points to the\n   *                             top most header, and for negative direction, -1 points to the most bottom\n   *                             header (the header closest to the cells).\n   * @returns {string} Returns the column header value to update.\n   */\n  getColumnHeaderValue(visualColumnIndex, headerLevel) {\n    var _classPrivateFieldGet3;\n    const {\n      isHidden,\n      isPlaceholder\n    } = (_classPrivateFieldGet3 = _classPrivateFieldGet(this, _stateManager).getHeaderSettings(headerLevel, visualColumnIndex)) !== null && _classPrivateFieldGet3 !== void 0 ? _classPrivateFieldGet3 : {};\n    if (isPlaceholder || isHidden) {\n      return '';\n    }\n    return this.hot.getColHeader(visualColumnIndex, headerLevel);\n  }\n\n  /**\n   * Updates the selection focus highlight position to point to the nested header root element (TH)\n   * even when the logical coordinates point in-between the header.\n   *\n   * @private\n   */\n  updateFocusHighlightPosition() {\n    var _this$hot;\n    const selection = (_this$hot = this.hot) === null || _this$hot === void 0 ? void 0 : _this$hot.getSelectedRangeLast();\n    if (!selection) {\n      return;\n    }\n    const {\n      highlight\n    } = selection;\n    const isNestedHeadersRange = highlight.isHeader() && highlight.col >= 0;\n    if (isNestedHeadersRange) {\n      const columnIndex = _classPrivateFieldGet(this, _stateManager).findLeftMostColumnIndex(highlight.row, highlight.col);\n      const focusHighlight = this.hot.selection.highlight.getFocus();\n\n      // Correct the highlight/focus selection to highlight the correct TH element\n      focusHighlight.visualCellRange.highlight.col = columnIndex;\n      focusHighlight.visualCellRange.from.col = columnIndex;\n      focusHighlight.visualCellRange.to.col = columnIndex;\n      focusHighlight.commit();\n    }\n  }\n\n  /**\n   * Allows to control to which column index the viewport will be scrolled. To ensure that the viewport\n   * is scrolled to the correct column for the nested header the most left and the most right visual column\n   * indexes are used.\n   *\n   * @private\n   * @param {number} visualColumn A visual column index to which the viewport will be scrolled.\n   * @returns {number}\n   */\n  onBeforeViewportScrollHorizontally(visualColumn) {\n    const selection = this.hot.getSelectedRangeLast();\n    if (!selection) {\n      return visualColumn;\n    }\n    const {\n      highlight\n    } = selection;\n    const isNestedHeadersRange = highlight.isHeader() && highlight.col >= 0;\n    if (!isNestedHeadersRange) {\n      return visualColumn;\n    }\n    const firstColumn = this.hot.view.getFirstFullyVisibleColumn();\n    const lastColumn = this.hot.view.getLastFullyVisibleColumn();\n    const mostLeftColumnIndex = _classPrivateFieldGet(this, _stateManager).findLeftMostColumnIndex(highlight.row, highlight.col);\n    const mostRightColumnIndex = _classPrivateFieldGet(this, _stateManager).findRightMostColumnIndex(highlight.row, highlight.col);\n\n    // do not scroll the viewport when the header is wider than the viewport\n    if (mostLeftColumnIndex < firstColumn && mostRightColumnIndex > lastColumn) {\n      return visualColumn;\n    }\n    return mostLeftColumnIndex < firstColumn ? mostLeftColumnIndex : mostRightColumnIndex;\n  }\n\n  /**\n   * Allows to control which header DOM element will be used to highlight.\n   *\n   * @private\n   * @param {number} visualColumn A visual column index of the highlighted row header.\n   * @param {number} headerLevel A row header level that is currently highlighted.\n   * @param {object} highlightMeta An object with meta data that describes the highlight state.\n   * @returns {number}\n   */\n  onBeforeHighlightingColumnHeader(visualColumn, headerLevel, highlightMeta) {\n    const headerNodeData = _classPrivateFieldGet(this, _stateManager).getHeaderTreeNodeData(headerLevel, visualColumn);\n    if (!headerNodeData) {\n      return visualColumn;\n    }\n    const {\n      columnCursor,\n      selectionType,\n      selectionWidth\n    } = highlightMeta;\n    const {\n      isRoot,\n      colspan\n    } = _classPrivateFieldGet(this, _stateManager).getHeaderSettings(headerLevel, visualColumn);\n    if (selectionType === HEADER_TYPE) {\n      if (!isRoot) {\n        return headerNodeData.columnIndex;\n      }\n    } else if (selectionType === ACTIVE_HEADER_TYPE) {\n      if (colspan > selectionWidth - columnCursor || !isRoot) {\n        // Prevents adding any CSS class names to the TH element\n        return null;\n      }\n    }\n    return visualColumn;\n  }\n\n  /**\n   * Listens the `beforeCopy` hook that allows processing the copied column headers so that the\n   * merged column headers do not propagate the value for each column but only once at the beginning\n   * of the column.\n   *\n   * @private\n   * @param {Array[]} data An array of arrays which contains data to copied.\n   * @param {object[]} copyableRanges An array of objects with ranges of the visual indexes (`startRow`, `startCol`, `endRow`, `endCol`)\n   *                                  which will copied.\n   * @param {{ columnHeadersCount: number }} copiedHeadersCount An object with keys that holds information with\n   *                                                            the number of copied headers.\n   */\n  onBeforeCopy(data, copyableRanges, _ref2) {\n    let {\n      columnHeadersCount\n    } = _ref2;\n    if (columnHeadersCount === 0) {\n      return;\n    }\n    for (let rangeIndex = 0; rangeIndex < copyableRanges.length; rangeIndex++) {\n      const {\n        startRow,\n        startCol,\n        endRow,\n        endCol\n      } = copyableRanges[rangeIndex];\n      const rowsCount = endRow - startRow + 1;\n      const columnsCount = startCol - endCol + 1;\n\n      // do not process dataset ranges and column headers where only one column is copied\n      if (startRow >= 0 || columnsCount === 1) {\n        break;\n      }\n      for (let column = startCol; column <= endCol; column++) {\n        for (let row = startRow; row <= endRow; row++) {\n          var _classPrivateFieldGet4;\n          const zeroBasedColumnHeaderLevel = rowsCount + row;\n          const zeroBasedColumnIndex = column - startCol;\n          if (zeroBasedColumnIndex === 0) {\n            continue; // eslint-disable-line no-continue\n          }\n\n          const isRoot = (_classPrivateFieldGet4 = _classPrivateFieldGet(this, _stateManager).getHeaderTreeNodeData(row, column)) === null || _classPrivateFieldGet4 === void 0 ? void 0 : _classPrivateFieldGet4.isRoot;\n          if (isRoot === false) {\n            data[zeroBasedColumnHeaderLevel][zeroBasedColumnIndex] = '';\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Allows blocking the column selection that is controlled by the core Selection module.\n   *\n   * @private\n   * @param {MouseEvent} event Mouse event.\n   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.\n   * @param {CellCoords} TD The table cell or header element.\n   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n   *                            a boolean value that allows or disallows changing the selection for that particular area.\n   */\n  onBeforeOnCellMouseDown(event, coords, TD, controller) {\n    const headerNodeData = this._getHeaderTreeNodeDataByCoords(coords);\n    if (headerNodeData) {\n      // Block the Selection module in controlling how the columns are selected. Pass the\n      // responsibility of the column selection to this plugin (see \"onAfterOnCellMouseDown\" hook).\n      controller.column = true;\n    }\n  }\n\n  /**\n   * Allows to control how the column selection based on the coordinates and the nested headers is made.\n   *\n   * @private\n   * @param {MouseEvent} event Mouse event.\n   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.\n   */\n  onAfterOnCellMouseDown(event, coords) {\n    const headerNodeData = this._getHeaderTreeNodeDataByCoords(coords);\n    if (!headerNodeData) {\n      return;\n    }\n    _classPrivateFieldSet(this, _focusInitialCoords, coords.clone());\n    _classPrivateFieldSet(this, _isColumnsSelectionInProgress, true);\n    const {\n      selection\n    } = this.hot;\n    const currentSelection = selection.isSelected() ? selection.getSelectedRange().current() : null;\n    const columnsToSelect = [];\n    const {\n      columnIndex,\n      origColspan\n    } = headerNodeData;\n\n    // The Selection module doesn't allow it to extend its behavior easily. That's why here we need\n    // to re-implement the \"click\" and \"shift\" behavior. As a workaround, the logic for the nested\n    // headers must implement a similar logic as in the original Selection handler\n    // (see src/selection/mouseEventHandler.js).\n    const allowRightClickSelection = !selection.inInSelection(coords);\n    if (event.shiftKey && currentSelection) {\n      if (coords.col < currentSelection.from.col) {\n        columnsToSelect.push(currentSelection.getTopEndCorner().col, columnIndex, coords.row);\n      } else if (coords.col > currentSelection.from.col) {\n        columnsToSelect.push(currentSelection.getTopStartCorner().col, columnIndex + origColspan - 1, coords.row);\n      } else {\n        columnsToSelect.push(columnIndex, columnIndex + origColspan - 1, coords.row);\n      }\n    } else if (isLeftClick(event) || isRightClick(event) && allowRightClickSelection) {\n      columnsToSelect.push(columnIndex, columnIndex + origColspan - 1, coords.row);\n    }\n\n    // The plugin takes control of how the columns are selected.\n    selection.selectColumns(...columnsToSelect);\n  }\n\n  /**\n   * Makes the header-selection properly select the nested headers.\n   *\n   * @private\n   * @param {MouseEvent} event Mouse event.\n   * @param {CellCoords} coords Cell coords object containing the visual coordinates of the clicked cell.\n   * @param {HTMLElement} TD The cell element.\n   * @param {object} controller An object with properties `row`, `column` and `cell`. Each property contains\n   *                            a boolean value that allows or disallows changing the selection for that particular area.\n   */\n  onBeforeOnCellMouseOver(event, coords, TD, controller) {\n    if (!this.hot.view.isMouseDown()) {\n      return;\n    }\n    const headerNodeData = this._getHeaderTreeNodeDataByCoords(coords);\n    if (!headerNodeData) {\n      return;\n    }\n    const {\n      columnIndex,\n      origColspan\n    } = headerNodeData;\n    const selectedRange = this.hot.getSelectedRangeLast();\n    const topStartCoords = selectedRange.getTopStartCorner();\n    const bottomEndCoords = selectedRange.getBottomEndCorner();\n    const {\n      from\n    } = selectedRange;\n\n    // Block the Selection module in controlling how the columns and cells are selected.\n    // From now on, the plugin is responsible for the selection.\n    controller.column = true;\n    controller.cell = true;\n    const columnsToSelect = [];\n    const headerLevel = clamp(coords.row, -Infinity, -1);\n    if (coords.col < from.col) {\n      columnsToSelect.push(bottomEndCoords.col, columnIndex, headerLevel);\n    } else if (coords.col > from.col) {\n      columnsToSelect.push(topStartCoords.col, columnIndex + origColspan - 1, headerLevel);\n    } else {\n      columnsToSelect.push(columnIndex, columnIndex + origColspan - 1, headerLevel);\n    }\n    this.hot.selection.selectColumns(...columnsToSelect);\n  }\n\n  /**\n   * Switches internal flag about selection progress to `false`.\n   *\n   * @private\n   */\n  onBeforeOnCellMouseUp() {\n    _classPrivateFieldSet(this, _isColumnsSelectionInProgress, false);\n  }\n\n  /**\n   * The hook checks and ensures that the focus position that depends on the selected columns\n   * range is always positioned within the range.\n   *\n   * @private\n   */\n  onBeforeSelectionHighlightSet() {\n    const {\n      navigableHeaders\n    } = this.hot.getSettings();\n    if (!this.hot.view.isMouseDown() || !_classPrivateFieldGet(this, _isColumnsSelectionInProgress) || !navigableHeaders) {\n      return;\n    }\n    const selectedRange = this.hot.getSelectedRangeLast();\n    const columnStart = selectedRange.getTopStartCorner().col;\n    const columnEnd = selectedRange.getBottomEndCorner().col;\n    const {\n      columnIndex,\n      origColspan\n    } = _classPrivateFieldGet(this, _stateManager).getHeaderTreeNodeData(_classPrivateFieldGet(this, _focusInitialCoords).row, _classPrivateFieldGet(this, _focusInitialCoords).col);\n    selectedRange.setHighlight(_classPrivateFieldGet(this, _focusInitialCoords));\n    if (origColspan > selectedRange.getWidth() || columnIndex < columnStart || columnIndex + origColspan - 1 > columnEnd) {\n      const headerLevel = _classPrivateFieldGet(this, _stateManager).findTopMostEntireHeaderLevel(clamp(columnStart, columnIndex, columnIndex + origColspan - 1), clamp(columnEnd, columnIndex, columnIndex + origColspan - 1));\n      selectedRange.highlight.row = headerLevel;\n      selectedRange.highlight.col = selectedRange.from.col;\n    }\n  }\n\n  /**\n   * `modifyTransformStart` hook is called every time the keyboard navigation is used.\n   *\n   * @private\n   * @param {object} delta The transformation delta.\n   */\n  onModifyTransformStart(delta) {\n    const {\n      highlight\n    } = this.hot.getSelectedRangeLast();\n    const nextCoords = this.hot._createCellCoords(highlight.row + delta.row, highlight.col + delta.col);\n    const isNestedHeadersRange = nextCoords.isHeader() && nextCoords.col >= 0;\n    if (!isNestedHeadersRange) {\n      return;\n    }\n    const visualColumnIndexStart = _classPrivateFieldGet(this, _stateManager).findLeftMostColumnIndex(nextCoords.row, nextCoords.col);\n    const visualColumnIndexEnd = _classPrivateFieldGet(this, _stateManager).findRightMostColumnIndex(nextCoords.row, nextCoords.col);\n    if (delta.col < 0) {\n      const nextColumn = highlight.col >= visualColumnIndexStart && highlight.col <= visualColumnIndexEnd ? visualColumnIndexStart - 1 : visualColumnIndexEnd;\n      const notHiddenColumnIndex = this.hot.columnIndexMapper.getNearestNotHiddenIndex(nextColumn, -1);\n      if (notHiddenColumnIndex === null) {\n        // There are no visible columns anymore, so move the selection out of the table edge. This will\n        // be processed by the selection Transformer class as a move selection to the previous row (if autoWrapRow is enabled).\n        delta.col = -this.hot.view.countRenderableColumnsInRange(0, highlight.col);\n      } else {\n        delta.col = -Math.max(this.hot.view.countRenderableColumnsInRange(notHiddenColumnIndex, highlight.col) - 1, 1);\n      }\n    } else if (delta.col > 0) {\n      const nextColumn = highlight.col >= visualColumnIndexStart && highlight.col <= visualColumnIndexEnd ? visualColumnIndexEnd + 1 : visualColumnIndexStart;\n      const notHiddenColumnIndex = this.hot.columnIndexMapper.getNearestNotHiddenIndex(nextColumn, 1);\n      if (notHiddenColumnIndex === null) {\n        // There are no visible columns anymore, so move the selection out of the table edge. This will\n        // be processed by the selection Transformer class as a move selection to the next row (if autoWrapRow is enabled).\n        delta.col = this.hot.view.countRenderableColumnsInRange(highlight.col, this.hot.countCols());\n      } else {\n        delta.col = Math.max(this.hot.view.countRenderableColumnsInRange(highlight.col, notHiddenColumnIndex) - 1, 1);\n      }\n    }\n  }\n\n  /**\n   * The hook observes the column selection from the Selection API and modifies the column range to\n   * ensure that the whole nested column will be covered.\n   *\n   * @private\n   * @param {CellCoords} from The coords object where the selection starts.\n   * @param {CellCoords} to The coords object where the selection ends.\n   */\n  onBeforeSelectColumns(from, to) {\n    const headerLevel = from.row;\n    const startNodeData = this._getHeaderTreeNodeDataByCoords({\n      row: headerLevel,\n      col: from.col\n    });\n    const endNodeData = this._getHeaderTreeNodeDataByCoords({\n      row: headerLevel,\n      col: to.col\n    });\n    if (to.col < from.col) {\n      // Column selection from right to left\n      if (startNodeData) {\n        from.col = startNodeData.columnIndex + startNodeData.origColspan - 1;\n      }\n      if (endNodeData) {\n        to.col = endNodeData.columnIndex;\n      }\n    } else if (to.col >= from.col) {\n      // Column selection from left to right or a single column selection\n      if (startNodeData) {\n        from.col = startNodeData.columnIndex;\n      }\n      if (endNodeData) {\n        to.col = endNodeData.columnIndex + endNodeData.origColspan - 1;\n      }\n    }\n  }\n\n  /**\n   * `afterGetColumnHeader` hook callback - prepares the header structure.\n   *\n   * @private\n   * @param {Array} renderersArray Array of renderers.\n   */\n  onAfterGetColumnHeaderRenderers(renderersArray) {\n    renderersArray.length = 0;\n    for (let headerLayer = 0; headerLayer < _classPrivateFieldGet(this, _stateManager).getLayersCount(); headerLayer++) {\n      renderersArray.push(this.headerRendererFactory(headerLayer));\n    }\n  }\n\n  /**\n   * Make the renderer render the first nested column in its entirety.\n   *\n   * @private\n   * @param {object} calc Viewport column calculator.\n   */\n  onAfterViewportColumnCalculatorOverride(calc) {\n    const headerLayersCount = _classPrivateFieldGet(this, _stateManager).getLayersCount();\n    let newStartColumn = calc.startColumn;\n    let nonRenderable = !!headerLayersCount;\n    for (let headerLayer = 0; headerLayer < headerLayersCount; headerLayer++) {\n      const startColumn = _classPrivateFieldGet(this, _stateManager).findLeftMostColumnIndex(headerLayer, calc.startColumn);\n      const renderedStartColumn = this.hot.columnIndexMapper.getRenderableFromVisualIndex(startColumn);\n\n      // If any of the headers for that column index is rendered, all of them should be rendered properly, see\n      // comment below.\n      if (startColumn >= 0) {\n        nonRenderable = false;\n      }\n\n      // `renderedStartColumn` can be `null` if the leftmost columns are hidden. In that case -> ignore that header\n      // level, as it should be handled by the \"parent\" header\n      if (isNumeric(renderedStartColumn) && renderedStartColumn < calc.startColumn) {\n        newStartColumn = renderedStartColumn;\n        break;\n      }\n    }\n\n    // If no headers for the provided column index are renderable, start rendering from the beginning of the upmost\n    // header for that position.\n    calc.startColumn = nonRenderable ? _classPrivateFieldGet(this, _stateManager).getHeaderTreeNodeData(0, newStartColumn).columnIndex : newStartColumn;\n  }\n\n  /**\n   * `modifyColWidth` hook callback - returns width from cache, when is greater than incoming from hook.\n   *\n   * @private\n   * @param {number} width Width from hook.\n   * @param {number} column Visual index of an column.\n   * @returns {number}\n   */\n  onModifyColWidth(width, column) {\n    const cachedWidth = this.ghostTable.getWidth(column);\n    return width > cachedWidth ? width : cachedWidth;\n  }\n\n  /**\n   * Listens the `modifyColumnHeaderValue` hook that overwrites the column headers values based on\n   * the internal state and settings of the plugin.\n   *\n   * @private\n   * @param {string} value The column header value.\n   * @param {number} visualColumnIndex The visual column index.\n   * @param {number} headerLevel The index of header level. The header level accepts positive (0 to N)\n   *                             and negative (-1 to -N) values. For positive values, 0 points to the\n   *                             top most header, and for negative direction, -1 points to the most bottom\n   *                             header (the header closest to the cells).\n   * @returns {string} Returns the column header value to update.\n   */\n  onModifyColumnHeaderValue(value, visualColumnIndex, headerLevel) {\n    var _classPrivateFieldGet5;\n    const {\n      label\n    } = (_classPrivateFieldGet5 = _classPrivateFieldGet(this, _stateManager).getHeaderTreeNodeData(headerLevel, visualColumnIndex)) !== null && _classPrivateFieldGet5 !== void 0 ? _classPrivateFieldGet5 : {\n      label: ''\n    };\n    return label;\n  }\n\n  /**\n   * `modifyFocusedElement` hook callback.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @param {number} column Column index.\n   * @returns {HTMLTableCellElement} The `TH` element to be focused.\n   */\n  onModifyFocusedElement(row, column) {\n    if (row < 0) {\n      return this.hot.getCell(row, _classPrivateFieldGet(this, _stateManager).findLeftMostColumnIndex(row, column), true);\n    }\n  }\n\n  /**\n   * Updates the plugin state after HoT initialization.\n   *\n   * @private\n   */\n  onInit() {\n    // @TODO: Workaround for broken plugin initialization abstraction.\n    this.updatePlugin();\n  }\n\n  /**\n   * Updates the plugin state after new dataset load.\n   *\n   * @private\n   * @param {Array[]} sourceData Array of arrays or array of objects containing data.\n   * @param {boolean} initialLoad Flag that determines whether the data has been loaded\n   *                              during the initialization.\n   */\n  onAfterLoadData(sourceData, initialLoad) {\n    if (!initialLoad) {\n      this.updatePlugin();\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    _classPrivateFieldSet(this, _stateManager, null);\n    if (_classPrivateFieldGet(this, _hidingIndexMapObserver) !== null) {\n      _classPrivateFieldGet(this, _hidingIndexMapObserver).unsubscribe();\n      _classPrivateFieldSet(this, _hidingIndexMapObserver, null);\n    }\n    super.destroy();\n  }\n\n  /**\n   * Gets the tree data that belongs to the column headers pointed by the passed coordinates.\n   *\n   * @private\n   * @param {CellCoords} coords The CellCoords instance.\n   * @returns {object|undefined}\n   */\n  _getHeaderTreeNodeDataByCoords(coords) {\n    if (coords.row >= 0 || coords.col < 0) {\n      return;\n    }\n    return _classPrivateFieldGet(this, _stateManager).getHeaderTreeNodeData(coords.row, coords.col);\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { rangeEach } from \"../../../helpers/number.mjs\";\nimport { objectEach } from \"../../../helpers/object.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\n/**\n * Class responsible for making data operations.\n *\n * @private\n */\nclass DataManager {\n  constructor(nestedRowsPlugin, hotInstance) {\n    /**\n     * Main Handsontable instance reference.\n     *\n     * @type {object}\n     */\n    this.hot = hotInstance;\n    /**\n     * Reference to the source data object.\n     *\n     * @type {Handsontable.CellValue[][]|Handsontable.RowObject[]}\n     */\n    this.data = null;\n    /**\n     * Reference to the NestedRows plugin.\n     *\n     * @type {object}\n     */\n    this.plugin = nestedRowsPlugin;\n    /**\n     * Map of row object parents.\n     *\n     * @type {WeakMap}\n     */\n    this.parentReference = new WeakMap();\n    /**\n     * Nested structure cache.\n     *\n     * @type {object}\n     */\n    this.cache = {\n      levels: [],\n      levelCount: 0,\n      rows: [],\n      nodeInfo: new WeakMap()\n    };\n  }\n\n  /**\n   * Set the data for the manager.\n   *\n   * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.\n   */\n  setData(data) {\n    this.data = data;\n  }\n\n  /**\n   * Get the data cached in the manager.\n   *\n   * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}\n   */\n  getData() {\n    return this.data;\n  }\n\n  /**\n   * Load the \"raw\" source data, without NestedRows' modifications.\n   *\n   * @returns {Handsontable.CellValue[][]|Handsontable.RowObject[]}\n   */\n  getRawSourceData() {\n    let rawSourceData = null;\n    this.plugin.disableCoreAPIModifiers();\n    rawSourceData = this.hot.getSourceData();\n    this.plugin.enableCoreAPIModifiers();\n    return rawSourceData;\n  }\n\n  /**\n   * Update the Data Manager with new data and refresh cache.\n   *\n   * @param {Handsontable.CellValue[][]|Handsontable.RowObject[]} data Data for the manager.\n   */\n  updateWithData(data) {\n    this.setData(data);\n    this.rewriteCache();\n  }\n\n  /**\n   * Rewrite the nested structure cache.\n   *\n   * @private\n   */\n  rewriteCache() {\n    this.cache = {\n      levels: [],\n      levelCount: 0,\n      rows: [],\n      nodeInfo: new WeakMap()\n    };\n    rangeEach(0, this.data.length - 1, i => {\n      this.cacheNode(this.data[i], 0, null);\n    });\n  }\n\n  /**\n   * Cache a data node.\n   *\n   * @private\n   * @param {object} node Node to cache.\n   * @param {number} level Level of the node.\n   * @param {object} parent Parent of the node.\n   */\n  cacheNode(node, level, parent) {\n    if (!this.cache.levels[level]) {\n      this.cache.levels[level] = [];\n      this.cache.levelCount += 1;\n    }\n    this.cache.levels[level].push(node);\n    this.cache.rows.push(node);\n    this.cache.nodeInfo.set(node, {\n      parent,\n      row: this.cache.rows.length - 1,\n      level\n    });\n    if (this.hasChildren(node)) {\n      arrayEach(node.__children, elem => {\n        this.cacheNode(elem, level + 1, node);\n      });\n    }\n  }\n\n  /**\n   * Get the date for the provided visual row number.\n   *\n   * @param {number} row Row index.\n   * @returns {object}\n   */\n  getDataObject(row) {\n    return row === null || row === void 0 ? null : this.cache.rows[row];\n  }\n\n  /**\n   * Read the row tree in search for a specific row index or row object.\n   *\n   * @private\n   * @param {object} parent The initial parent object.\n   * @param {number} readCount Number of read nodes.\n   * @param {number} neededIndex The row index we search for.\n   * @param {object} neededObject The row object we search for.\n   * @returns {number|object}\n   */\n  readTreeNodes(parent, readCount, neededIndex, neededObject) {\n    let rootLevel = false;\n    let readNodesCount = readCount;\n    if (isNaN(readNodesCount) && readNodesCount.end) {\n      return readNodesCount;\n    }\n    let parentObj = parent;\n    if (!parentObj) {\n      parentObj = {\n        __children: this.data\n      };\n      rootLevel = true;\n      readNodesCount -= 1;\n    }\n    if (neededIndex !== null && neededIndex !== void 0 && readNodesCount === neededIndex) {\n      return {\n        result: parentObj,\n        end: true\n      };\n    }\n    if (neededObject !== null && neededObject !== void 0 && parentObj === neededObject) {\n      return {\n        result: readNodesCount,\n        end: true\n      };\n    }\n    readNodesCount += 1;\n    if (parentObj.__children) {\n      arrayEach(parentObj.__children, val => {\n        this.parentReference.set(val, rootLevel ? null : parentObj);\n        readNodesCount = this.readTreeNodes(val, readNodesCount, neededIndex, neededObject);\n        if (isNaN(readNodesCount) && readNodesCount.end) {\n          return false;\n        }\n      });\n    }\n    return readNodesCount;\n  }\n\n  /**\n   * Mock a parent node.\n   *\n   * @private\n   * @returns {*}\n   */\n  mockParent() {\n    const fakeParent = this.mockNode();\n    fakeParent.__children = this.data;\n    return fakeParent;\n  }\n\n  /**\n   * Mock a data node.\n   *\n   * @private\n   * @returns {{}}\n   */\n  mockNode() {\n    const fakeNode = {};\n    objectEach(this.data[0], (val, key) => {\n      fakeNode[key] = null;\n    });\n    return fakeNode;\n  }\n\n  /**\n   * Get the row index for the provided row object.\n   *\n   * @param {object} rowObj The row object.\n   * @returns {number} Row index.\n   */\n  getRowIndex(rowObj) {\n    return rowObj === null || rowObj === void 0 ? null : this.cache.nodeInfo.get(rowObj).row;\n  }\n\n  /**\n   * Get the index of the provided row index/row object within its parent.\n   *\n   * @param {number|object} row Row index / row object.\n   * @returns {number}\n   */\n  getRowIndexWithinParent(row) {\n    let rowObj = null;\n    if (isNaN(row)) {\n      rowObj = row;\n    } else {\n      rowObj = this.getDataObject(row);\n    }\n    const parent = this.getRowParent(row);\n    if (parent === null || parent === void 0) {\n      return this.data.indexOf(rowObj);\n    }\n    return parent.__children.indexOf(rowObj);\n  }\n\n  /**\n   * Count all rows (including all parents and children).\n   *\n   * @returns {number}\n   */\n  countAllRows() {\n    const rootNodeMock = {\n      __children: this.data\n    };\n    return this.countChildren(rootNodeMock);\n  }\n\n  /**\n   * Count children of the provided parent.\n   *\n   * @param {object|number} parent Parent node.\n   * @returns {number} Children count.\n   */\n  countChildren(parent) {\n    let rowCount = 0;\n    let parentNode = parent;\n    if (!isNaN(parentNode)) {\n      parentNode = this.getDataObject(parentNode);\n    }\n    if (!parentNode || !parentNode.__children) {\n      return 0;\n    }\n    arrayEach(parentNode.__children, elem => {\n      rowCount += 1;\n      if (elem.__children) {\n        rowCount += this.countChildren(elem);\n      }\n    });\n    return rowCount;\n  }\n\n  /**\n   * Get the parent of the row at the provided index.\n   *\n   * @param {number|object} row Physical row index.\n   * @returns {object}\n   */\n  getRowParent(row) {\n    let rowObject;\n    if (isNaN(row)) {\n      rowObject = row;\n    } else {\n      rowObject = this.getDataObject(row);\n    }\n    return this.getRowObjectParent(rowObject);\n  }\n\n  /**\n   * Get the parent of the provided row object.\n   *\n   * @private\n   * @param {object} rowObject The row object (tree node).\n   * @returns {object|null}\n   */\n  getRowObjectParent(rowObject) {\n    if (!rowObject || typeof rowObject !== 'object') {\n      return null;\n    }\n    return this.cache.nodeInfo.get(rowObject).parent;\n  }\n\n  /**\n   * Get the nesting level for the row with the provided row index.\n   *\n   * @param {number} row Row index.\n   * @returns {number|null} Row level or null, when row doesn't exist.\n   */\n  getRowLevel(row) {\n    let rowObject = null;\n    if (isNaN(row)) {\n      rowObject = row;\n    } else {\n      rowObject = this.getDataObject(row);\n    }\n    return rowObject ? this.getRowObjectLevel(rowObject) : null;\n  }\n\n  /**\n   * Get the nesting level for the row with the provided row index.\n   *\n   * @private\n   * @param {object} rowObject Row object.\n   * @returns {number} Row level.\n   */\n  getRowObjectLevel(rowObject) {\n    return rowObject === null || rowObject === void 0 ? null : this.cache.nodeInfo.get(rowObject).level;\n  }\n\n  /**\n   * Check if the provided row/row element has children.\n   *\n   * @param {number|object} row Row number or row element.\n   * @returns {boolean}\n   */\n  hasChildren(row) {\n    let rowObj = row;\n    if (!isNaN(rowObj)) {\n      rowObj = this.getDataObject(rowObj);\n    }\n    return !!(rowObj.__children && rowObj.__children.length);\n  }\n\n  /**\n   * Returns `true` if the row at the provided index has a parent.\n   *\n   * @param {number} index Row index.\n   * @returns {boolean} `true` if the row at the provided index has a parent, `false` otherwise.\n   */\n  isChild(index) {\n    return this.getRowParent(index) !== null;\n  }\n\n  /**\n   * Get child at a provided index from the parent element.\n   *\n   * @param {object} parent The parent row object.\n   * @param {number} index Index of the child element to be retrieved.\n   * @returns {object|null} The child element or `null` if the child doesn't exist.\n   */\n  getChild(parent, index) {\n    var _parent$__children;\n    return ((_parent$__children = parent.__children) === null || _parent$__children === void 0 ? void 0 : _parent$__children[index]) || null;\n  }\n\n  /**\n   * Return `true` of the row at the provided index is located at the topmost level.\n   *\n   * @param {number} index Row index.\n   * @returns {boolean} `true` of the row at the provided index is located at the topmost level, `false` otherwise.\n   */\n  isRowHighestLevel(index) {\n    return !this.isChild(index);\n  }\n\n  /**\n   * Return `true` if the provided row index / row object represents a parent in the nested structure.\n   *\n   * @param {number|object} row Row index / row object.\n   * @returns {boolean} `true` if the row is a parent, `false` otherwise.\n   */\n  isParent(row) {\n    var _rowObj$__children;\n    let rowObj = row;\n    if (!isNaN(rowObj)) {\n      rowObj = this.getDataObject(rowObj);\n    }\n    return rowObj && !!rowObj.__children && ((_rowObj$__children = rowObj.__children) === null || _rowObj$__children === void 0 ? void 0 : _rowObj$__children.length) !== 0;\n  }\n\n  /**\n   * Add a child to the provided parent. It's optional to add a row object as the \"element\".\n   *\n   * @param {object} parent The parent row object.\n   * @param {object} [element] The element to add as a child.\n   */\n  addChild(parent, element) {\n    let childElement = element;\n    this.hot.runHooks('beforeAddChild', parent, childElement);\n    let parentIndex = null;\n    if (parent) {\n      parentIndex = this.getRowIndex(parent);\n    }\n    this.hot.runHooks('beforeCreateRow', parentIndex + this.countChildren(parent) + 1, 1);\n    let functionalParent = parent;\n    if (!parent) {\n      functionalParent = this.mockParent();\n    }\n    if (!functionalParent.__children) {\n      functionalParent.__children = [];\n    }\n    if (!childElement) {\n      childElement = this.mockNode();\n    }\n    functionalParent.__children.push(childElement);\n    this.rewriteCache();\n    const newRowIndex = this.getRowIndex(childElement);\n    this.hot.rowIndexMapper.insertIndexes(newRowIndex, 1);\n    this.hot.runHooks('afterCreateRow', newRowIndex, 1);\n    this.hot.runHooks('afterAddChild', parent, childElement);\n  }\n\n  /**\n   * Add a child node to the provided parent at a specified index.\n   *\n   * @param {object} parent Parent node.\n   * @param {number} index Index to insert the child element at.\n   * @param {object} [element] Element (node) to insert.\n   */\n  addChildAtIndex(parent, index, element) {\n    let childElement = element;\n    let flattenedIndex;\n    if (!childElement) {\n      childElement = this.mockNode();\n    }\n    this.hot.runHooks('beforeAddChild', parent, childElement, index);\n    if (parent) {\n      const parentIndex = this.getRowIndex(parent);\n      const finalChildIndex = parentIndex + index + 1;\n      this.hot.runHooks('beforeCreateRow', finalChildIndex, 1);\n      parent.__children.splice(index, null, childElement);\n      this.rewriteCache();\n      this.plugin.disableCoreAPIModifiers();\n      this.hot.setSourceDataAtCell(this.getRowIndexWithinParent(parent), '__children', parent.__children, 'NestedRows.addChildAtIndex');\n      this.hot.rowIndexMapper.insertIndexes(finalChildIndex, 1);\n      this.plugin.enableCoreAPIModifiers();\n      this.hot.runHooks('afterCreateRow', finalChildIndex, 1);\n      flattenedIndex = finalChildIndex;\n    } else {\n      this.plugin.disableCoreAPIModifiers();\n      this.hot.alter('insert_row_above', index, 1, 'NestedRows.addChildAtIndex');\n      this.plugin.enableCoreAPIModifiers();\n      flattenedIndex = this.getRowIndex(this.data[index]);\n    }\n\n    // Workaround for refreshing cache losing the reference to the mocked row.\n    childElement = this.getDataObject(flattenedIndex);\n    this.hot.runHooks('afterAddChild', parent, childElement, index);\n  }\n\n  /**\n   * Add a sibling element at the specified index.\n   *\n   * @param {number} index New element sibling's index.\n   * @param {('above'|'below')} where Direction in which the sibling is to be created.\n   */\n  addSibling(index) {\n    let where = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'below';\n    const translatedIndex = this.translateTrimmedRow(index);\n    const parent = this.getRowParent(translatedIndex);\n    const indexWithinParent = this.getRowIndexWithinParent(translatedIndex);\n    switch (where) {\n      case 'below':\n        this.addChildAtIndex(parent, indexWithinParent + 1, null);\n        break;\n      case 'above':\n        this.addChildAtIndex(parent, indexWithinParent, null);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * Detach the provided element from its parent and add it right after it.\n   *\n   * @param {object|Array} elements Row object or an array of selected coordinates.\n   * @param {boolean} [forceRender=true] If true (default), it triggers render after finished.\n   */\n  detachFromParent(elements) {\n    let forceRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let element = null;\n    const rowObjects = [];\n    if (Array.isArray(elements)) {\n      rangeEach(elements[0], elements[2], i => {\n        const translatedIndex = this.translateTrimmedRow(i);\n        rowObjects.push(this.getDataObject(translatedIndex));\n      });\n      rangeEach(0, rowObjects.length - 2, i => {\n        this.detachFromParent(rowObjects[i], false);\n      });\n      element = rowObjects[rowObjects.length - 1];\n    } else {\n      element = elements;\n    }\n    const childRowIndex = this.getRowIndex(element);\n    const childCount = this.countChildren(element);\n    const indexWithinParent = this.getRowIndexWithinParent(element);\n    const parent = this.getRowParent(element);\n    const grandparent = this.getRowParent(parent);\n    const grandparentRowIndex = this.getRowIndex(grandparent);\n    let movedElementRowIndex = null;\n    this.hot.runHooks('beforeDetachChild', parent, element);\n    if (indexWithinParent !== null && indexWithinParent !== void 0) {\n      const removedRowIndexes = Array.from(new Array(childRowIndex + childCount + 1).keys()).splice(-1 * (childCount + 1));\n      this.hot.runHooks('beforeRemoveRow', childRowIndex, childCount + 1, removedRowIndexes, this.plugin.pluginName);\n      parent.__children.splice(indexWithinParent, 1);\n      this.rewriteCache();\n      this.hot.runHooks('afterRemoveRow', childRowIndex, childCount + 1, removedRowIndexes, this.plugin.pluginName);\n      if (grandparent) {\n        movedElementRowIndex = grandparentRowIndex + this.countChildren(grandparent);\n        const lastGrandparentChild = this.getChild(grandparent, this.countChildren(grandparent) - 1);\n        const lastGrandparentChildIndex = this.getRowIndex(lastGrandparentChild);\n        this.hot.runHooks('beforeCreateRow', lastGrandparentChildIndex + 1, childCount + 1, this.plugin.pluginName);\n        grandparent.__children.push(element);\n      } else {\n        movedElementRowIndex = this.hot.countRows() + 1;\n        this.hot.runHooks('beforeCreateRow', movedElementRowIndex - 2, childCount + 1, this.plugin.pluginName);\n        this.data.push(element);\n      }\n    }\n    this.rewriteCache();\n    this.hot.runHooks('afterCreateRow', movedElementRowIndex - 2, childCount + 1, this.plugin.pluginName);\n    this.hot.runHooks('afterDetachChild', parent, element, this.getRowIndex(element));\n    if (forceRender) {\n      this.hot.render();\n    }\n  }\n\n  /**\n   * Filter the data by the `logicRows` array.\n   *\n   * @private\n   * @param {number} index Index of the first row to remove.\n   * @param {number} amount Number of elements to remove.\n   * @param {Array} logicRows Array of indexes to remove.\n   */\n  filterData(index, amount, logicRows) {\n    // TODO: why are the first 2 arguments not used?\n\n    const elementsToRemove = [];\n    arrayEach(logicRows, elem => {\n      elementsToRemove.push(this.getDataObject(elem));\n    });\n    arrayEach(elementsToRemove, elem => {\n      const indexWithinParent = this.getRowIndexWithinParent(elem);\n      const tempParent = this.getRowParent(elem);\n      if (tempParent === null) {\n        this.data.splice(indexWithinParent, 1);\n      } else {\n        tempParent.__children.splice(indexWithinParent, 1);\n      }\n    });\n    this.rewriteCache();\n  }\n\n  /**\n   * Used to splice the source data. Needed to properly modify the nested structure, which wouldn't work with the\n   * default script.\n   *\n   * @private\n   * @param {number} index Physical index of the element at the splice beginning.\n   * @param {number} amount Number of elements to be removed.\n   * @param {object[]} elements Array of row objects to add.\n   */\n  spliceData(index, amount, elements) {\n    const previousElement = this.getDataObject(index - 1);\n    let newRowParent = null;\n    let indexWithinParent = index;\n    if (previousElement && previousElement.__children && previousElement.__children.length === 0) {\n      newRowParent = previousElement;\n      indexWithinParent = 0;\n    } else if (index < this.countAllRows()) {\n      newRowParent = this.getRowParent(index);\n      indexWithinParent = this.getRowIndexWithinParent(index);\n    }\n    if (newRowParent) {\n      if (elements) {\n        newRowParent.__children.splice(indexWithinParent, amount, ...elements);\n      } else {\n        newRowParent.__children.splice(indexWithinParent, amount);\n      }\n    } else if (elements) {\n      this.data.splice(indexWithinParent, amount, ...elements);\n    } else {\n      this.data.splice(indexWithinParent, amount);\n    }\n    this.rewriteCache();\n  }\n\n  /**\n   * Update the `__children` key of the upmost parent of the provided row object.\n   *\n   * @private\n   * @param {object} rowElement Row object.\n   */\n  syncRowWithRawSource(rowElement) {\n    let upmostParent = rowElement;\n    let tempParent = null;\n    do {\n      tempParent = this.getRowParent(tempParent);\n      if (tempParent !== null) {\n        upmostParent = tempParent;\n      }\n    } while (tempParent !== null);\n    this.plugin.disableCoreAPIModifiers();\n    this.hot.setSourceDataAtCell(this.getRowIndex(upmostParent), '__children', upmostParent.__children, 'NestedRows.syncRowWithRawSource');\n    this.plugin.enableCoreAPIModifiers();\n  }\n\n  /* eslint-disable jsdoc/require-param */\n  /**\n   * Move a single row.\n   *\n   * @param {number} fromIndex Index of the row to be moved.\n   * @param {number} toIndex Index of the destination.\n   * @param {boolean} moveToCollapsed `true` if moving a row to a collapsed parent.\n   * @param {boolean} moveToLastChild `true` if moving a row to be a last child of the new parent.\n   */\n\n  /* eslint-enable jsdoc/require-param */\n  moveRow(fromIndex, toIndex, moveToCollapsed, moveToLastChild) {\n    const moveToLastRow = toIndex === this.hot.countRows();\n    const fromParent = this.getRowParent(fromIndex);\n    const indexInFromParent = this.getRowIndexWithinParent(fromIndex);\n    const elemToMove = fromParent.__children.slice(indexInFromParent, indexInFromParent + 1);\n    const movingUp = fromIndex > toIndex;\n    let toParent = moveToLastRow ? this.getRowParent(toIndex - 1) : this.getRowParent(toIndex);\n    if (toParent === null || toParent === void 0) {\n      toParent = this.getRowParent(toIndex - 1);\n    }\n    if (toParent === null || toParent === void 0) {\n      toParent = this.getDataObject(toIndex - 1);\n    }\n    if (!toParent) {\n      toParent = this.getDataObject(toIndex);\n      toParent.__children = [];\n    } else if (!toParent.__children) {\n      toParent.__children = [];\n    }\n    const indexInTargetParent = moveToLastRow || moveToCollapsed || moveToLastChild ? toParent.__children.length : this.getRowIndexWithinParent(toIndex);\n    const sameParent = fromParent === toParent;\n    toParent.__children.splice(indexInTargetParent, 0, elemToMove[0]);\n    fromParent.__children.splice(indexInFromParent + (movingUp && sameParent ? 1 : 0), 1);\n\n    // Sync the changes in the cached data with the actual data stored in HOT.\n    this.syncRowWithRawSource(fromParent);\n    if (!sameParent) {\n      this.syncRowWithRawSource(toParent);\n    }\n  }\n\n  /**\n   * Translate the visual row index to the physical index, taking into consideration the state of collapsed rows.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @returns {number}\n   */\n  translateTrimmedRow(row) {\n    if (this.plugin.collapsingUI) {\n      return this.plugin.collapsingUI.translateTrimmedRow(row);\n    }\n    return row;\n  }\n\n  /**\n   * Translate the physical row index to the visual index, taking into consideration the state of collapsed rows.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @returns {number}\n   */\n  untranslateTrimmedRow(row) {\n    if (this.plugin.collapsingUI) {\n      return this.plugin.collapsingUI.untranslateTrimmedRow(row);\n    }\n    return row;\n  }\n}\nexport default DataManager;","/**\n * Base class for the Nested Rows' UI sub-classes.\n *\n * @private\n * @class\n */\nclass BaseUI {\n  constructor(pluginInstance, hotInstance) {\n    /**\n     * Instance of Handsontable.\n     *\n     * @type {Core}\n     */\n    this.hot = hotInstance;\n    /**\n     * Reference to the main plugin instance.\n     */\n    this.plugin = pluginInstance;\n  }\n}\nexport default BaseUI;","import { arrayEach } from \"../../../helpers/array.mjs\";\nimport { rangeEach } from \"../../../helpers/number.mjs\";\nimport { addClass, setAttribute } from \"../../../helpers/dom/element.mjs\";\nimport BaseUI from \"./_base.mjs\";\nimport { A11Y_EXPANDED, A11Y_HIDDEN } from \"../../../helpers/a11y.mjs\";\n/**\n * Class responsible for the UI in the Nested Rows' row headers.\n *\n * @private\n * @class HeadersUI\n * @augments BaseUI\n */\nclass HeadersUI extends BaseUI {\n  /**\n   * CSS classes used in the row headers.\n   *\n   * @type {object}\n   */\n  static get CSS_CLASSES() {\n    return {\n      indicatorContainer: 'ht_nestingLevels',\n      parent: 'ht_nestingParent',\n      indicator: 'ht_nestingLevel',\n      emptyIndicator: 'ht_nestingLevel_empty',\n      button: 'ht_nestingButton',\n      expandButton: 'ht_nestingExpand',\n      collapseButton: 'ht_nestingCollapse'\n    };\n  }\n  constructor(nestedRowsPlugin, hotInstance) {\n    super(nestedRowsPlugin, hotInstance);\n    /**\n     * Reference to the DataManager instance connected with the Nested Rows plugin.\n     *\n     * @type {DataManager}\n     */\n    this.dataManager = this.plugin.dataManager;\n    // /**\n    //  * Level cache array.\n    //  *\n    //  * @type {Array}\n    //  */\n    // this.levelCache = this.dataManager.cache.levels;\n    /**\n     * Reference to the CollapsingUI instance connected with the Nested Rows plugin.\n     *\n     * @type {CollapsingUI}\n     */\n    this.collapsingUI = this.plugin.collapsingUI;\n    /**\n     * Cache for the row headers width.\n     *\n     * @type {null|number}\n     */\n    this.rowHeaderWidthCache = null;\n  }\n\n  /**\n   * Append nesting indicators and buttons to the row headers.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @param {HTMLElement} TH TH 3element.\n   */\n  appendLevelIndicators(row, TH) {\n    const rowIndex = this.hot.toPhysicalRow(row);\n    const rowLevel = this.dataManager.getRowLevel(rowIndex);\n    const rowObject = this.dataManager.getDataObject(rowIndex);\n    const innerDiv = TH.getElementsByTagName('DIV')[0];\n    const innerSpan = innerDiv.querySelector('span.rowHeader');\n    const previousIndicators = innerDiv.querySelectorAll('[class^=\"ht_nesting\"]');\n    const ariaEnabled = this.hot.getSettings().ariaTags;\n    arrayEach(previousIndicators, elem => {\n      if (elem) {\n        innerDiv.removeChild(elem);\n      }\n    });\n    addClass(TH, HeadersUI.CSS_CLASSES.indicatorContainer);\n    if (rowLevel) {\n      const {\n        rootDocument\n      } = this.hot;\n      const initialContent = innerSpan.cloneNode(true);\n      innerDiv.innerHTML = '';\n      rangeEach(0, rowLevel - 1, () => {\n        const levelIndicator = rootDocument.createElement('SPAN');\n        addClass(levelIndicator, HeadersUI.CSS_CLASSES.emptyIndicator);\n        innerDiv.appendChild(levelIndicator);\n      });\n      innerDiv.appendChild(initialContent);\n    }\n    if (this.dataManager.hasChildren(rowObject)) {\n      const buttonsContainer = this.hot.rootDocument.createElement('DIV');\n      if (ariaEnabled) {\n        setAttribute(buttonsContainer, [A11Y_HIDDEN()]);\n      }\n      addClass(TH, HeadersUI.CSS_CLASSES.parent);\n      if (this.collapsingUI.areChildrenCollapsed(rowIndex)) {\n        addClass(buttonsContainer, `${HeadersUI.CSS_CLASSES.button} ${HeadersUI.CSS_CLASSES.expandButton}`);\n        if (ariaEnabled) {\n          setAttribute(TH, [A11Y_EXPANDED(false)]);\n        }\n      } else {\n        addClass(buttonsContainer, `${HeadersUI.CSS_CLASSES.button} ${HeadersUI.CSS_CLASSES.collapseButton}`);\n        if (ariaEnabled) {\n          setAttribute(TH, [A11Y_EXPANDED(true)]);\n        }\n      }\n      innerDiv.appendChild(buttonsContainer);\n    }\n  }\n\n  /**\n   * Update the row header width according to number of levels in the dataset.\n   *\n   * @private\n   * @param {number} deepestLevel Cached deepest level of nesting.\n   */\n  updateRowHeaderWidth(deepestLevel) {\n    let deepestLevelIndex = deepestLevel;\n    if (!deepestLevelIndex) {\n      deepestLevelIndex = this.dataManager.cache.levelCount;\n    }\n    this.rowHeaderWidthCache = Math.max(50, 11 + 10 * deepestLevelIndex + 25);\n    this.hot.render();\n  }\n}\nexport default HeadersUI;","import \"core-js/modules/es.array.push.js\";\nimport { stopImmediatePropagation } from \"../../../helpers/dom/event.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport { rangeEach } from \"../../../helpers/number.mjs\";\nimport { hasClass } from \"../../../helpers/dom/element.mjs\";\nimport BaseUI from \"./_base.mjs\";\nimport HeadersUI from \"./headers.mjs\";\n/**\n * Class responsible for the UI for collapsing and expanding groups.\n *\n * @private\n * @class\n * @augments BaseUI\n */\nclass CollapsingUI extends BaseUI {\n  constructor(nestedRowsPlugin, hotInstance) {\n    var _this;\n    /**\n     * Reference to the TrimRows plugin.\n     */\n    super(nestedRowsPlugin, hotInstance);\n    _this = this;\n    this.dataManager = this.plugin.dataManager;\n    this.collapsedRows = [];\n    this.collapsedRowsStash = {\n      stash: function () {\n        let forceRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n        _this.lastCollapsedRows = _this.collapsedRows.slice(0);\n\n        // Workaround for wrong indexes being set in the trimRows plugin\n        _this.expandMultipleChildren(_this.lastCollapsedRows, forceRender);\n      },\n      shiftStash: function (baseIndex, targetIndex) {\n        let delta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n        if (targetIndex === null || targetIndex === void 0) {\n          targetIndex = Infinity;\n        }\n        arrayEach(_this.lastCollapsedRows, (elem, i) => {\n          if (elem >= baseIndex && elem < targetIndex) {\n            _this.lastCollapsedRows[i] = elem + delta;\n          }\n        });\n      },\n      applyStash: function () {\n        let forceRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        _this.collapseMultipleChildren(_this.lastCollapsedRows, forceRender);\n        _this.lastCollapsedRows = void 0;\n      },\n      trimStash: (realElementIndex, amount) => {\n        rangeEach(realElementIndex, realElementIndex + amount - 1, i => {\n          const indexOfElement = this.lastCollapsedRows.indexOf(i);\n          if (indexOfElement > -1) {\n            this.lastCollapsedRows.splice(indexOfElement, 1);\n          }\n        });\n      }\n    };\n  }\n\n  /**\n   * Collapse the children of the row passed as an argument.\n   *\n   * @param {number|object} row The parent row.\n   * @param {boolean} [forceRender=true] Whether to render the table after the function ends.\n   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.\n   * @returns {Array}\n   */\n  collapseChildren(row) {\n    let forceRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let doTrimming = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const rowsToCollapse = [];\n    let rowObject = null;\n    let rowIndex = null;\n    let rowsToTrim = null;\n    if (isNaN(row)) {\n      rowObject = row;\n      rowIndex = this.dataManager.getRowIndex(rowObject);\n    } else {\n      rowObject = this.dataManager.getDataObject(row);\n      rowIndex = row;\n    }\n    if (this.dataManager.hasChildren(rowObject)) {\n      arrayEach(rowObject.__children, elem => {\n        rowsToCollapse.push(this.dataManager.getRowIndex(elem));\n      });\n    }\n    rowsToTrim = this.collapseRows(rowsToCollapse, true, false);\n    if (doTrimming) {\n      this.trimRows(rowsToTrim);\n    }\n    if (forceRender) {\n      this.renderAndAdjust();\n    }\n    if (this.collapsedRows.indexOf(rowIndex) === -1) {\n      this.collapsedRows.push(rowIndex);\n    }\n    return rowsToTrim;\n  }\n\n  /**\n   * Collapse multiple children.\n   *\n   * @param {Array} rows Rows to collapse (including their children).\n   * @param {boolean} [forceRender=true] `true` if the table should be rendered after finishing the function.\n   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.\n   */\n  collapseMultipleChildren(rows) {\n    let forceRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let doTrimming = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const rowsToTrim = [];\n    arrayEach(rows, elem => {\n      rowsToTrim.push(...this.collapseChildren(elem, false, false));\n    });\n    if (doTrimming) {\n      this.trimRows(rowsToTrim);\n    }\n    if (forceRender) {\n      this.renderAndAdjust();\n    }\n  }\n\n  /**\n   * Collapse a single row.\n   *\n   * @param {number} rowIndex Index of the row to collapse.\n   * @param {boolean} [recursive=true] `true` if it should collapse the row's children.\n   */\n  collapseRow(rowIndex) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.collapseRows([rowIndex], recursive);\n  }\n\n  /**\n   * Collapse multiple rows.\n   *\n   * @param {Array} rowIndexes Array of row indexes to collapse.\n   * @param {boolean} [recursive=true] `true` if it should collapse the rows' children.\n   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.\n   * @returns {Array} Rows prepared for trimming (or trimmed, if doTrimming == true).\n   */\n  collapseRows(rowIndexes) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let doTrimming = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const rowsToTrim = [];\n    arrayEach(rowIndexes, elem => {\n      rowsToTrim.push(elem);\n      if (recursive) {\n        this.collapseChildRows(elem, rowsToTrim);\n      }\n    });\n    if (doTrimming) {\n      this.trimRows(rowsToTrim);\n    }\n    return rowsToTrim;\n  }\n\n  /**\n   * Collapse child rows of the row at the provided index.\n   *\n   * @param {number} parentIndex Index of the parent node.\n   * @param {Array} [rowsToTrim=[]] Array of rows to trim. Defaults to an empty array.\n   * @param {boolean} [recursive] `true` if the collapsing process should be recursive.\n   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.\n   */\n  collapseChildRows(parentIndex) {\n    let rowsToTrim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let recursive = arguments.length > 2 ? arguments[2] : undefined;\n    let doTrimming = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (this.dataManager.hasChildren(parentIndex)) {\n      const parentObject = this.dataManager.getDataObject(parentIndex);\n      arrayEach(parentObject.__children, elem => {\n        const elemIndex = this.dataManager.getRowIndex(elem);\n        rowsToTrim.push(elemIndex);\n        this.collapseChildRows(elemIndex, rowsToTrim);\n      });\n    }\n    if (doTrimming) {\n      this.trimRows(rowsToTrim);\n    }\n  }\n\n  /**\n   * Expand a single row.\n   *\n   * @param {number} rowIndex Index of the row to expand.\n   * @param {boolean} [recursive=true] `true` if it should expand the row's children recursively.\n   */\n  expandRow(rowIndex) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    this.expandRows([rowIndex], recursive);\n  }\n\n  /**\n   * Expand multiple rows.\n   *\n   * @param {Array} rowIndexes Array of indexes of the rows to expand.\n   * @param {boolean} [recursive=true] `true` if it should expand the rows' children recursively.\n   * @param {boolean} [doTrimming=true] I determine whether collapsing should envolve trimming rows.\n   * @returns {Array} Array of row indexes to be untrimmed.\n   */\n  expandRows(rowIndexes) {\n    let recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let doTrimming = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const rowsToUntrim = [];\n    arrayEach(rowIndexes, elem => {\n      rowsToUntrim.push(elem);\n      if (recursive) {\n        this.expandChildRows(elem, rowsToUntrim);\n      }\n    });\n    if (doTrimming) {\n      this.untrimRows(rowsToUntrim);\n    }\n    return rowsToUntrim;\n  }\n\n  /**\n   * Expand child rows of the provided index.\n   *\n   * @param {number} parentIndex Index of the parent row.\n   * @param {Array} [rowsToUntrim=[]] Array of the rows to be untrimmed.\n   * @param {boolean} [recursive] `true` if it should expand the rows' children recursively.\n   * @param {boolean} [doTrimming=false] I determine whether collapsing should envolve trimming rows.\n   */\n  expandChildRows(parentIndex) {\n    let rowsToUntrim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let recursive = arguments.length > 2 ? arguments[2] : undefined;\n    let doTrimming = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    if (this.dataManager.hasChildren(parentIndex)) {\n      const parentObject = this.dataManager.getDataObject(parentIndex);\n      arrayEach(parentObject.__children, elem => {\n        if (!this.isAnyParentCollapsed(elem)) {\n          const elemIndex = this.dataManager.getRowIndex(elem);\n          rowsToUntrim.push(elemIndex);\n          this.expandChildRows(elemIndex, rowsToUntrim);\n        }\n      });\n    }\n    if (doTrimming) {\n      this.untrimRows(rowsToUntrim);\n    }\n  }\n\n  /**\n   * Expand the children of the row passed as an argument.\n   *\n   * @param {number|object} row Parent row.\n   * @param {boolean} [forceRender=true] Whether to render the table after the function ends.\n   * @param {boolean} [doTrimming=true] If set to `true`, the trimming will be applied when the function finishes.\n   * @returns {number[]}\n   */\n  expandChildren(row) {\n    let forceRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let doTrimming = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const rowsToExpand = [];\n    let rowObject = null;\n    let rowIndex = null;\n    let rowsToUntrim = null;\n    if (isNaN(row)) {\n      rowObject = row;\n      rowIndex = this.dataManager.getRowIndex(row);\n    } else {\n      rowObject = this.dataManager.getDataObject(row);\n      rowIndex = row;\n    }\n    this.collapsedRows.splice(this.collapsedRows.indexOf(rowIndex), 1);\n    if (this.dataManager.hasChildren(rowObject)) {\n      arrayEach(rowObject.__children, elem => {\n        const childIndex = this.dataManager.getRowIndex(elem);\n        rowsToExpand.push(childIndex);\n      });\n    }\n    rowsToUntrim = this.expandRows(rowsToExpand, true, false);\n    if (doTrimming) {\n      this.untrimRows(rowsToUntrim);\n    }\n    if (forceRender) {\n      this.renderAndAdjust();\n    }\n    return rowsToUntrim;\n  }\n\n  /**\n   * Expand multiple rows' children.\n   *\n   * @param {Array} rows Array of rows which children are about to be expanded.\n   * @param {boolean} [forceRender=true] `true` if the table should render after finishing the function.\n   * @param {boolean} [doTrimming=true] `true` if the rows should be untrimmed after finishing the function.\n   */\n  expandMultipleChildren(rows) {\n    let forceRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let doTrimming = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    const rowsToUntrim = [];\n    arrayEach(rows, elem => {\n      rowsToUntrim.push(...this.expandChildren(elem, false, false));\n    });\n    if (doTrimming) {\n      this.untrimRows(rowsToUntrim);\n    }\n    if (forceRender) {\n      this.renderAndAdjust();\n    }\n  }\n\n  /**\n   * Collapse all collapsable rows.\n   */\n  collapseAll() {\n    const data = this.dataManager.getData();\n    const parentsToCollapse = [];\n    arrayEach(data, elem => {\n      if (this.dataManager.hasChildren(elem)) {\n        parentsToCollapse.push(elem);\n      }\n    });\n    this.collapseMultipleChildren(parentsToCollapse);\n    this.renderAndAdjust();\n  }\n\n  /**\n   * Expand all collapsable rows.\n   */\n  expandAll() {\n    const data = this.dataManager.getData();\n    const parentsToExpand = [];\n    arrayEach(data, elem => {\n      if (this.dataManager.hasChildren(elem)) {\n        parentsToExpand.push(elem);\n      }\n    });\n    this.expandMultipleChildren(parentsToExpand);\n    this.renderAndAdjust();\n  }\n\n  /**\n   * Trim rows.\n   *\n   * @param {Array} rows Physical row indexes.\n   */\n  trimRows(rows) {\n    this.hot.batchExecution(() => {\n      arrayEach(rows, physicalRow => {\n        this.plugin.collapsedRowsMap.setValueAtIndex(physicalRow, true);\n      });\n    }, true);\n  }\n\n  /**\n   * Untrim rows.\n   *\n   * @param {Array} rows Physical row indexes.\n   */\n  untrimRows(rows) {\n    this.hot.batchExecution(() => {\n      arrayEach(rows, physicalRow => {\n        this.plugin.collapsedRowsMap.setValueAtIndex(physicalRow, false);\n      });\n    }, true);\n  }\n\n  /**\n   * Check if all child rows are collapsed.\n   *\n   * @private\n   * @param {number|object|null} row The parent row. `null` for the top level.\n   * @returns {boolean}\n   */\n  areChildrenCollapsed(row) {\n    let rowObj = isNaN(row) ? row : this.dataManager.getDataObject(row);\n    let allCollapsed = true;\n\n    // Checking the children of the top-level \"parent\"\n    if (rowObj === null) {\n      rowObj = {\n        __children: this.dataManager.data\n      };\n    }\n    if (this.dataManager.hasChildren(rowObj)) {\n      arrayEach(rowObj.__children, elem => {\n        const rowIndex = this.dataManager.getRowIndex(elem);\n        if (!this.plugin.collapsedRowsMap.getValueAtIndex(rowIndex)) {\n          allCollapsed = false;\n          return false;\n        }\n      });\n    }\n    return allCollapsed;\n  }\n\n  /**\n   * Check if any of the row object parents are collapsed.\n   *\n   * @private\n   * @param {object} rowObj Row object.\n   * @returns {boolean}\n   */\n  isAnyParentCollapsed(rowObj) {\n    let parent = rowObj;\n    while (parent !== null) {\n      parent = this.dataManager.getRowParent(parent);\n      const parentIndex = this.dataManager.getRowIndex(parent);\n      if (this.collapsedRows.indexOf(parentIndex) > -1) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Toggle collapsed state. Callback for the `beforeOnCellMousedown` hook.\n   *\n   * @private\n   * @param {MouseEvent} event `mousedown` event.\n   * @param {object} coords Coordinates of the clicked cell/header.\n   */\n  toggleState(event, coords) {\n    if (coords.col >= 0) {\n      return;\n    }\n    const row = this.translateTrimmedRow(coords.row);\n    if (hasClass(event.target, HeadersUI.CSS_CLASSES.button)) {\n      if (this.areChildrenCollapsed(row)) {\n        this.expandChildren(row);\n      } else {\n        this.collapseChildren(row);\n      }\n      stopImmediatePropagation(event);\n    }\n  }\n\n  /**\n   * Translate visual row after trimming to physical base row index.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @returns {number} Base row index.\n   */\n  translateTrimmedRow(row) {\n    return this.hot.toPhysicalRow(row);\n  }\n\n  /**\n   * Translate physical row after trimming to visual base row index.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @returns {number} Base row index.\n   */\n  untranslateTrimmedRow(row) {\n    return this.hot.toVisualRow(row);\n  }\n\n  /**\n   * Helper function to render the table and call the `adjustElementsSize` method.\n   *\n   * @private\n   */\n  renderAndAdjust() {\n    this.hot.render();\n\n    // Dirty workaround to prevent scroll height not adjusting to the table height. Needs refactoring in the future.\n    this.hot.view.adjustElementsSize();\n  }\n}\nexport default CollapsingUI;","import { rangeEach } from \"../../../helpers/number.mjs\";\nimport { arrayEach } from \"../../../helpers/array.mjs\";\nimport * as C from \"../../../i18n/constants.mjs\";\nimport BaseUI from \"./_base.mjs\";\nconst privatePool = new WeakMap();\n\n/**\n * Class responsible for the Context Menu entries for the Nested Rows plugin.\n *\n * @private\n * @class ContextMenuUI\n * @augments BaseUI\n */\nclass ContextMenuUI extends BaseUI {\n  constructor(nestedRowsPlugin, hotInstance) {\n    super(nestedRowsPlugin, hotInstance);\n    privatePool.set(this, {\n      row_above: (key, selection) => {\n        const lastSelection = selection[selection.length - 1];\n        this.dataManager.addSibling(lastSelection.start.row, 'above');\n      },\n      row_below: (key, selection) => {\n        const lastSelection = selection[selection.length - 1];\n        this.dataManager.addSibling(lastSelection.start.row, 'below');\n      }\n    });\n    /**\n     * Reference to the DataManager instance connected with the Nested Rows plugin.\n     *\n     * @type {DataManager}\n     */\n    this.dataManager = this.plugin.dataManager;\n  }\n  /**\n   * Append options to the context menu. (Propagated from the `afterContextMenuDefaultOptions` hook callback)\n   * f.\n   *\n   * @private\n   * @param {object} defaultOptions Default context menu options.\n   * @returns {*}\n   */\n  appendOptions(defaultOptions) {\n    const newEntries = [{\n      key: 'add_child',\n      name() {\n        return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD);\n      },\n      callback: () => {\n        const translatedRowIndex = this.dataManager.translateTrimmedRow(this.hot.getSelectedLast()[0]);\n        const parent = this.dataManager.getDataObject(translatedRowIndex);\n        this.dataManager.addChild(parent);\n      },\n      disabled: () => {\n        const selected = this.hot.getSelectedLast();\n        return !selected || selected[0] < 0 || this.hot.selection.isSelectedByColumnHeader() || this.hot.countRows() >= this.hot.getSettings().maxRows;\n      }\n    }, {\n      key: 'detach_from_parent',\n      name() {\n        return this.getTranslatedPhrase(C.CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD);\n      },\n      callback: () => {\n        this.dataManager.detachFromParent(this.hot.getSelectedLast());\n      },\n      disabled: () => {\n        const selected = this.hot.getSelectedLast();\n        const translatedRowIndex = this.dataManager.translateTrimmedRow(selected[0]);\n        const parent = this.dataManager.getRowParent(translatedRowIndex);\n        return !parent || !selected || selected[0] < 0 || this.hot.selection.isSelectedByColumnHeader() || this.hot.countRows() >= this.hot.getSettings().maxRows;\n      }\n    }, {\n      name: '---------'\n    }];\n    rangeEach(0, defaultOptions.items.length - 1, i => {\n      if (i === 0) {\n        arrayEach(newEntries, (val, j) => {\n          defaultOptions.items.splice(i + j, 0, val);\n        });\n        return false;\n      }\n    });\n    return this.modifyRowInsertingOptions(defaultOptions);\n  }\n\n  /**\n   * Modify how the row inserting options work.\n   *\n   * @private\n   * @param {object} defaultOptions Default context menu items.\n   * @returns {*}\n   */\n  modifyRowInsertingOptions(defaultOptions) {\n    const priv = privatePool.get(this);\n    rangeEach(0, defaultOptions.items.length - 1, i => {\n      const option = priv[defaultOptions.items[i].key];\n      if (option !== null && option !== void 0) {\n        defaultOptions.items[i].callback = option;\n      }\n    });\n    return defaultOptions;\n  }\n}\nexport default ContextMenuUI;","import \"core-js/modules/es.array.push.js\";\nimport { isUndefined } from \"../../../helpers/mixed.mjs\";\nimport { warn } from \"../../../helpers/console.mjs\";\nimport { toSingleLine } from \"../../../helpers/templateLiteralTag.mjs\";\n/**\n * Helper class for the row-move-related operations.\n *\n * @private\n * @class RowMoveController\n */\nexport default class RowMoveController {\n  constructor(plugin) {\n    /**\n     * Reference to the Nested Rows plugin instance.\n     *\n     * @type {NestedRows}\n     */\n    this.plugin = plugin;\n    /**\n     * Reference to the Handsontable instance.\n     *\n     * @type {Handsontable.Core}\n     */\n    this.hot = plugin.hot;\n    /**\n     * Reference to the Data Manager class instance.\n     *\n     * @type {DataManager}\n     */\n    this.dataManager = plugin.dataManager;\n    /**\n     * Reference to the Collapsing UI class instance.\n     *\n     * @type {CollapsingUI}\n     */\n    this.collapsingUI = plugin.collapsingUI;\n  }\n\n  /**\n   * `beforeRowMove` hook callback.\n   *\n   * @param {Array} rows Array of visual row indexes to be moved.\n   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements\n   *   will be placed after the moving action. To check the visualization of the final index, please take a look at\n   *   [documentation](@/guides/rows/row-moving.md).\n   * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we\n   *   are going to drop the moved elements. To check visualization of drop index please take a look at\n   *   [documentation](@/guides/rows/row-moving.md).\n   * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.\n   * @fires Hooks#afterRowMove\n   * @returns {boolean}\n   */\n  onBeforeRowMove(rows, finalIndex, dropIndex, movePossible) {\n    const improperUsage = this.displayAPICompatibilityWarning({\n      rows,\n      finalIndex,\n      dropIndex,\n      movePossible\n    });\n    if (improperUsage) {\n      return false;\n    }\n    this.movedToCollapsed = false;\n    const dropToLastRow = dropIndex === this.hot.countRows();\n    const physicalDropIndex = dropToLastRow ? this.hot.countSourceRows() : this.dataManager.translateTrimmedRow(dropIndex);\n    let allowMove = true;\n    const physicalStartIndexes = rows.map(rowIndex => {\n      // Don't do the logic for the rest of the rows, as it's bound to fail anyway.\n      if (!allowMove) {\n        return false;\n      }\n      const physicalRowIndex = this.dataManager.translateTrimmedRow(rowIndex);\n      allowMove = this.shouldAllowMoving(physicalRowIndex, physicalDropIndex);\n      return physicalRowIndex;\n    });\n    const willDataChange = physicalStartIndexes.indexOf(physicalDropIndex) === -1;\n    if (!allowMove || !willDataChange) {\n      return false;\n    }\n    const baseParent = this.getBaseParent(physicalStartIndexes);\n    const targetParent = this.getTargetParent(dropToLastRow, physicalDropIndex);\n    const sameParent = baseParent === targetParent;\n    this.movedToCollapsed = this.collapsingUI.areChildrenCollapsed(targetParent);\n\n    // Stash the current state of collapsed rows\n    this.collapsingUI.collapsedRowsStash.stash();\n    this.shiftCollapsibleParentsLocations(physicalStartIndexes, physicalDropIndex, sameParent);\n    this.moveRows(physicalStartIndexes, physicalDropIndex, targetParent);\n    this.dataManager.rewriteCache();\n    this.moveCellsMeta(physicalStartIndexes, physicalDropIndex);\n    this.collapsingUI.collapsedRowsStash.applyStash(false);\n\n    // TODO: Trying to mock real work of the `ManualRowMove` plugin. It was blocked by returning `false` below.\n    this.hot.runHooks('afterRowMove', rows, finalIndex, dropIndex, movePossible, movePossible && this.isRowOrderChanged(rows, finalIndex));\n\n    // Not necessary - added to keep compatibility with other plugins (namely: columnSummary).\n    this.hot.render();\n    this.selectCells(rows, dropIndex);\n    return false;\n  }\n\n  /**\n   * Display a `dragRows`/`moveRows` method compatibility warning if needed.\n   *\n   * @param {object} beforeMoveRowHookArgs A set of arguments from the `beforeMoveRow` hook.\n   * @returns {boolean} `true` if is a result of an improper usage of the moving API.\n   */\n  displayAPICompatibilityWarning(beforeMoveRowHookArgs) {\n    const {\n      rows,\n      finalIndex,\n      dropIndex,\n      movePossible\n    } = beforeMoveRowHookArgs;\n    let shouldTerminate = false;\n    if (isUndefined(dropIndex)) {\n      warn(toSingleLine`Since version 8.0.0 of the Handsontable the 'moveRows' method isn't used for moving rows\\x20\n      when the NestedRows plugin is enabled. Please use the 'dragRows' method instead.`);\n\n      // TODO: Trying to mock real work of the `ManualRowMove` plugin. It was blocked by returning `false` below.\n      this.hot.runHooks('afterRowMove', rows, finalIndex, dropIndex, movePossible, false);\n      shouldTerminate = true;\n    }\n    return shouldTerminate;\n  }\n\n  /**\n   * Check if the moving action should be allowed.\n   *\n   * @param {number} physicalRowIndex Physical start row index.\n   * @param {number} physicalDropIndex Physical drop index.\n   * @returns {boolean} `true` if it should continue with the moving action.\n   */\n  shouldAllowMoving(physicalRowIndex, physicalDropIndex) {\n    /*\n       We can't move rows when any of them is:\n       - a parent\n       - a top-level element\n       - is being moved to the top level\n       - is being moved to the position of any of the moved rows (not changing position)\n    */\n\n    return !(this.dataManager.isParent(physicalRowIndex) || this.dataManager.isRowHighestLevel(physicalRowIndex) || physicalRowIndex === physicalDropIndex || physicalDropIndex === 0);\n  }\n\n  /**\n   * Get the base row parent.\n   *\n   * @param {number} physicalStartIndexes Physical start row index.\n   * @returns {object|null} The base row parent.\n   */\n  getBaseParent(physicalStartIndexes) {\n    return this.dataManager.getRowParent(physicalStartIndexes[0]);\n  }\n\n  /**\n   * Get the target row parent.\n   *\n   * @param {boolean} dropToLastRow `true` if the row is moved to the last row of the table.\n   * @param {number} physicalDropIndex Physical drop row index.\n   * @returns {object|null} The target row parent.\n   */\n  getTargetParent(dropToLastRow, physicalDropIndex) {\n    let targetParent = this.dataManager.getRowParent(dropToLastRow ? physicalDropIndex - 1 : physicalDropIndex);\n\n    // If we try to move an element to the place of a top-level parent, snap the element to the previous top-level\n    // parent's children instead\n    if (targetParent === null || targetParent === void 0) {\n      targetParent = this.dataManager.getRowParent(physicalDropIndex - 1);\n    }\n    return targetParent;\n  }\n\n  /**\n   * Shift the cached collapsible rows position according to the move action.\n   *\n   * @param {number[]} physicalStartIndexes Physical start row indexes.\n   * @param {number} physicalDropIndex Physical drop index.\n   * @param {boolean} sameParent `true` if the row's being moved between siblings of the same parent.\n   */\n  shiftCollapsibleParentsLocations(physicalStartIndexes, physicalDropIndex, sameParent) {\n    if (!sameParent) {\n      if (Math.max(...physicalStartIndexes) <= physicalDropIndex) {\n        this.collapsingUI.collapsedRowsStash.shiftStash(physicalStartIndexes[0], physicalDropIndex, -1 * physicalStartIndexes.length);\n      } else {\n        this.collapsingUI.collapsedRowsStash.shiftStash(physicalDropIndex, physicalStartIndexes[0], physicalStartIndexes.length);\n      }\n    }\n  }\n\n  /**\n   * Move the rows at the provided coordinates.\n   *\n   * @param {number[]} physicalStartIndexes Physical indexes of the rows about to be moved.\n   * @param {number} physicalDropIndex Physical drop index.\n   * @param {object} targetParent Parent of the destination row.\n   */\n  moveRows(physicalStartIndexes, physicalDropIndex, targetParent) {\n    const moveToLastChild = physicalDropIndex === this.dataManager.getRowIndex(targetParent) + this.dataManager.countChildren(targetParent) + 1;\n    this.hot.batchRender(() => {\n      physicalStartIndexes.forEach(physicalStartIndex => {\n        this.dataManager.moveRow(physicalStartIndex, physicalDropIndex, this.movedToCollapsed, moveToLastChild);\n      });\n    });\n  }\n\n  /**\n   * Move the cell meta for multiple rows.\n   *\n   * @param {number[]} baseIndexes Array of indexes for the rows being moved.\n   * @param {number} targetIndex Index of the destination of the move.\n   */\n  moveCellsMeta(baseIndexes, targetIndex) {\n    const rowsOfMeta = [];\n    const movingDown = Math.max(...baseIndexes) < targetIndex;\n    baseIndexes.forEach(baseIndex => {\n      rowsOfMeta.push(this.hot.getCellMetaAtRow(baseIndex));\n    });\n    this.hot.spliceCellsMeta(baseIndexes[0], baseIndexes.length);\n    this.hot.spliceCellsMeta(targetIndex - (movingDown ? rowsOfMeta.length : 0), 0, ...rowsOfMeta);\n  }\n\n  /**\n   * Select cells after the move.\n   *\n   * @param {Array} rows Array of visual row indexes to be moved.\n   * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we\n   *   are going to drop the moved elements. To check visualization of drop index please take a look at\n   *   [documentation](@/guides/rows/row-moving.md).\n   */\n  selectCells(rows, dropIndex) {\n    const rowsLen = rows.length;\n    let startRow = 0;\n    let endRow = 0;\n    let selection = null;\n    let lastColIndex = null;\n    if (this.movedToCollapsed) {\n      let physicalDropIndex = null;\n      if (rows[rowsLen - 1] < dropIndex) {\n        physicalDropIndex = this.dataManager.translateTrimmedRow(dropIndex - rowsLen);\n      } else {\n        physicalDropIndex = this.dataManager.translateTrimmedRow(dropIndex);\n      }\n      const parentObject = this.dataManager.getRowParent(physicalDropIndex === null ? this.hot.countSourceRows() - 1 : physicalDropIndex - 1);\n      const parentIndex = this.dataManager.getRowIndex(parentObject);\n      startRow = this.dataManager.untranslateTrimmedRow(parentIndex);\n      endRow = startRow;\n    } else if (rows[rowsLen - 1] < dropIndex) {\n      endRow = dropIndex - 1;\n      startRow = endRow - rowsLen + 1;\n    } else {\n      startRow = dropIndex;\n      endRow = startRow + rowsLen - 1;\n    }\n    selection = this.hot.selection;\n    lastColIndex = this.hot.countCols() - 1;\n    selection.setRangeStart(this.hot._createCellCoords(startRow, 0));\n    selection.setRangeEnd(this.hot._createCellCoords(endRow, lastColIndex), true);\n  }\n\n  // TODO: Reimplementation of function which is inside the `ManualRowMove` plugin.\n  /**\n   * Indicates if order of rows was changed.\n   *\n   * @param {Array} movedRows Array of visual row indexes to be moved.\n   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements\n   *   will be placed after the moving action. To check the visualization of the final index, please take a look at\n   *   [documentation](@/guides/rows/row-moving.md).\n   * @returns {boolean}\n   */\n  isRowOrderChanged(movedRows, finalIndex) {\n    return movedRows.some((row, nrOfMovedElement) => row - nrOfMovedElement !== finalIndex);\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport DataManager from \"./data/dataManager.mjs\";\nimport CollapsingUI from \"./ui/collapsing.mjs\";\nimport HeadersUI from \"./ui/headers.mjs\";\nimport ContextMenuUI from \"./ui/contextMenu.mjs\";\nimport { error } from \"../../helpers/console.mjs\";\nimport { isArrayOfObjects } from \"../../helpers/data.mjs\";\nimport { TrimmingMap } from \"../../translations/index.mjs\";\nimport RowMoveController from \"./utils/rowMoveController.mjs\";\nexport const PLUGIN_KEY = 'nestedRows';\nexport const PLUGIN_PRIORITY = 300;\nconst SHORTCUTS_GROUP = PLUGIN_KEY;\nconst privatePool = new WeakMap();\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * Error message for the wrong data type error.\n */\nconst WRONG_DATA_TYPE_ERROR = 'The Nested Rows plugin requires an Array of Objects as a dataset to be' + ' provided. The plugin has been disabled.';\n\n/**\n * @plugin NestedRows\n * @class NestedRows\n *\n * @description\n * Plugin responsible for displaying and operating on data sources with nested structures.\n */\nexport class NestedRows extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Reference to the DataManager instance.\n     *\n     * @private\n     * @type {object}\n     */\n    this.dataManager = null;\n\n    /**\n     * Reference to the HeadersUI instance.\n     *\n     * @private\n     * @type {object}\n     */\n    this.headersUI = null;\n    /**\n     * Map of skipped rows by plugin.\n     *\n     * @private\n     * @type {null|TrimmingMap}\n     */\n    this.collapsedRowsMap = null;\n    privatePool.set(this, {\n      movedToCollapsed: false,\n      skipRender: null,\n      skipCoreAPIModifiers: false\n    });\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link NestedRows#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    this.collapsedRowsMap = this.hot.rowIndexMapper.registerMap('nestedRows', new TrimmingMap());\n    this.dataManager = new DataManager(this, this.hot);\n    this.collapsingUI = new CollapsingUI(this, this.hot);\n    this.headersUI = new HeadersUI(this, this.hot);\n    this.contextMenuUI = new ContextMenuUI(this, this.hot);\n    this.rowMoveController = new RowMoveController(this);\n    this.addHook('afterInit', function () {\n      return _this.onAfterInit(...arguments);\n    });\n    this.addHook('beforeViewRender', function () {\n      return _this.onBeforeViewRender(...arguments);\n    });\n    this.addHook('modifyRowData', function () {\n      return _this.onModifyRowData(...arguments);\n    });\n    this.addHook('modifySourceLength', function () {\n      return _this.onModifySourceLength(...arguments);\n    });\n    this.addHook('beforeDataSplice', function () {\n      return _this.onBeforeDataSplice(...arguments);\n    });\n    this.addHook('filterData', function () {\n      return _this.onFilterData(...arguments);\n    });\n    this.addHook('afterContextMenuDefaultOptions', function () {\n      return _this.onAfterContextMenuDefaultOptions(...arguments);\n    });\n    this.addHook('afterGetRowHeader', function () {\n      return _this.onAfterGetRowHeader(...arguments);\n    });\n    this.addHook('beforeOnCellMouseDown', function () {\n      return _this.onBeforeOnCellMouseDown(...arguments);\n    });\n    this.addHook('beforeRemoveRow', function () {\n      return _this.onBeforeRemoveRow(...arguments);\n    });\n    this.addHook('afterRemoveRow', function () {\n      return _this.onAfterRemoveRow(...arguments);\n    });\n    this.addHook('beforeAddChild', function () {\n      return _this.onBeforeAddChild(...arguments);\n    });\n    this.addHook('afterAddChild', function () {\n      return _this.onAfterAddChild(...arguments);\n    });\n    this.addHook('beforeDetachChild', function () {\n      return _this.onBeforeDetachChild(...arguments);\n    });\n    this.addHook('afterDetachChild', function () {\n      return _this.onAfterDetachChild(...arguments);\n    });\n    this.addHook('modifyRowHeaderWidth', function () {\n      return _this.onModifyRowHeaderWidth(...arguments);\n    });\n    this.addHook('afterCreateRow', function () {\n      return _this.onAfterCreateRow(...arguments);\n    });\n    this.addHook('beforeRowMove', function () {\n      return _this.onBeforeRowMove(...arguments);\n    });\n    this.addHook('beforeLoadData', data => this.onBeforeLoadData(data));\n    this.addHook('beforeUpdateData', data => this.onBeforeLoadData(data));\n    this.registerShortcuts();\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.rowIndexMapper.unregisterMap('nestedRows');\n    this.unregisterShortcuts();\n    super.disablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`nestedRows`](@/api/options.md#nestedrows)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n\n    // We store a state of the data manager.\n    const currentSourceData = this.dataManager.getData();\n    this.enablePlugin();\n\n    // After enabling plugin previously stored data is restored.\n    this.dataManager.updateWithData(currentSourceData);\n    super.updatePlugin();\n  }\n\n  /**\n   * Register shortcuts responsible for toggling collapsible columns.\n   *\n   * @private\n   */\n  registerShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').addShortcut({\n      keys: [['Enter']],\n      callback: () => {\n        const {\n          highlight\n        } = this.hot.getSelectedRangeLast();\n        if (highlight.col === -1 && highlight.row >= 0) {\n          const row = this.collapsingUI.translateTrimmedRow(highlight.row);\n          if (this.collapsingUI.areChildrenCollapsed(row)) {\n            this.collapsingUI.expandChildren(row);\n          } else {\n            this.collapsingUI.collapseChildren(row);\n          }\n        }\n      },\n      runOnlyIf: () => {\n        var _this$hot$getSelected;\n        return (_this$hot$getSelected = this.hot.getSelectedRangeLast()) === null || _this$hot$getSelected === void 0 ? void 0 : _this$hot$getSelected.highlight.isHeader();\n      },\n      group: SHORTCUTS_GROUP\n    });\n  }\n\n  /**\n   * Unregister shortcuts responsible for toggling collapsible columns.\n   *\n   * @private\n   */\n  unregisterShortcuts() {\n    this.hot.getShortcutManager().getContext('grid').removeShortcutsByGroup(SHORTCUTS_GROUP);\n  }\n\n  /**\n   * `beforeRowMove` hook callback.\n   *\n   * @private\n   * @param {Array} rows Array of visual row indexes to be moved.\n   * @param {number} finalIndex Visual row index, being a start index for the moved rows. Points to where the elements\n   *   will be placed after the moving action. To check the visualization of the final index, please take a look at\n   *   [documentation](@/guides/rows/row-summary.md).\n   * @param {undefined|number} dropIndex Visual row index, being a drop index for the moved rows. Points to where we\n   *   are going to drop the moved elements. To check visualization of drop index please take a look at\n   *   [documentation](@/guides/rows/row-summary.md).\n   * @param {boolean} movePossible Indicates if it's possible to move rows to the desired position.\n   * @fires Hooks#afterRowMove\n   * @returns {boolean}\n   */\n  onBeforeRowMove(rows, finalIndex, dropIndex, movePossible) {\n    return this.rowMoveController.onBeforeRowMove(rows, finalIndex, dropIndex, movePossible);\n  }\n\n  /**\n   * Enable the modify hook skipping flag - allows retrieving the data from Handsontable without this plugin's\n   * modifications.\n   */\n  disableCoreAPIModifiers() {\n    const priv = privatePool.get(this);\n    priv.skipCoreAPIModifiers = true;\n  }\n\n  /**\n   * Disable the modify hook skipping flag.\n   */\n  enableCoreAPIModifiers() {\n    const priv = privatePool.get(this);\n    priv.skipCoreAPIModifiers = false;\n  }\n\n  /**\n   * `beforeOnCellMousedown` hook callback.\n   *\n   * @private\n   * @param {MouseEvent} event Mousedown event.\n   * @param {object} coords Cell coords.\n   * @param {HTMLElement} TD Clicked cell.\n   */\n  onBeforeOnCellMouseDown(event, coords, TD) {\n    this.collapsingUI.toggleState(event, coords, TD);\n  }\n\n  /**\n   * The modifyRowData hook callback.\n   *\n   * @private\n   * @param {number} row Visual row index.\n   * @returns {boolean}\n   */\n  onModifyRowData(row) {\n    const priv = privatePool.get(this);\n    if (priv.skipCoreAPIModifiers) {\n      return;\n    }\n    return this.dataManager.getDataObject(row);\n  }\n\n  /**\n   * Modify the source data length to match the length of the nested structure.\n   *\n   * @private\n   * @returns {number}\n   */\n  onModifySourceLength() {\n    const priv = privatePool.get(this);\n    if (priv.skipCoreAPIModifiers) {\n      return;\n    }\n    return this.dataManager.countAllRows();\n  }\n\n  /**\n   * @private\n   * @param {number} index The index where the data was spliced.\n   * @param {number} amount An amount of items to remove.\n   * @param {object} element An element to add.\n   * @returns {boolean}\n   */\n  onBeforeDataSplice(index, amount, element) {\n    const priv = privatePool.get(this);\n    if (priv.skipCoreAPIModifiers || this.dataManager.isRowHighestLevel(index)) {\n      return true;\n    }\n    this.dataManager.spliceData(index, amount, element);\n    return false;\n  }\n\n  /**\n   * Provide custom source data filtering. It's handled by core method and replaces the native filtering.\n   *\n   * @private\n   * @param {number} index The index where the data filtering starts.\n   * @param {number} amount An amount of rows which filtering applies to.\n   * @param {number} physicalRows Physical row indexes.\n   * @returns {Array}\n   */\n  onFilterData(index, amount, physicalRows) {\n    const priv = privatePool.get(this);\n    this.collapsingUI.collapsedRowsStash.stash();\n    this.collapsingUI.collapsedRowsStash.trimStash(physicalRows[0], amount);\n    this.collapsingUI.collapsedRowsStash.shiftStash(physicalRows[0], null, -1 * amount);\n    this.dataManager.filterData(index, amount, physicalRows);\n    priv.skipRender = true;\n    return this.dataManager.getData().slice(); // Data contains reference sometimes.\n  }\n\n  /**\n   * `afterContextMenuDefaultOptions` hook callback.\n   *\n   * @private\n   * @param {object} defaultOptions The default context menu items order.\n   * @returns {boolean}\n   */\n  onAfterContextMenuDefaultOptions(defaultOptions) {\n    return this.contextMenuUI.appendOptions(defaultOptions);\n  }\n\n  /**\n   * `afterGetRowHeader` hook callback.\n   *\n   * @private\n   * @param {number} row Row index.\n   * @param {HTMLElement} TH Row header element.\n   */\n  onAfterGetRowHeader(row, TH) {\n    this.headersUI.appendLevelIndicators(row, TH);\n  }\n\n  /**\n   * `modifyRowHeaderWidth` hook callback.\n   *\n   * @private\n   * @param {number} rowHeaderWidth The initial row header width(s).\n   * @returns {number}\n   */\n  onModifyRowHeaderWidth(rowHeaderWidth) {\n    return this.headersUI.rowHeaderWidthCache || rowHeaderWidth;\n  }\n\n  /**\n   * `onAfterRemoveRow` hook callback.\n   *\n   * @private\n   * @param {number} index Removed row.\n   * @param {number} amount Amount of removed rows.\n   * @param {Array} logicRows An array of the removed physical rows.\n   * @param {string} source Source of action.\n   */\n  onAfterRemoveRow(index, amount, logicRows, source) {\n    if (source === this.pluginName) {\n      return;\n    }\n    const priv = privatePool.get(this);\n    setTimeout(() => {\n      priv.skipRender = null;\n      this.headersUI.updateRowHeaderWidth();\n      this.collapsingUI.collapsedRowsStash.applyStash();\n    }, 0);\n  }\n\n  /**\n   * Callback for the `beforeRemoveRow` change list of removed physical indexes by reference. Removing parent node\n   * has effect in removing children nodes.\n   *\n   * @private\n   * @param {number} index Visual index of starter row.\n   * @param {number} amount Amount of rows to be removed.\n   * @param {Array} physicalRows List of physical indexes.\n   */\n  onBeforeRemoveRow(index, amount, physicalRows) {\n    const modifiedPhysicalRows = Array.from(physicalRows.reduce((removedRows, physicalIndex) => {\n      if (this.dataManager.isParent(physicalIndex)) {\n        const children = this.dataManager.getDataObject(physicalIndex).__children;\n\n        // Preserve a parent in the list of removed rows.\n        removedRows.add(physicalIndex);\n        if (Array.isArray(children)) {\n          // Add a children to the list of removed rows.\n          children.forEach(child => removedRows.add(this.dataManager.getRowIndex(child)));\n        }\n        return removedRows;\n      }\n\n      // Don't modify list of removed rows when already checked element isn't a parent.\n      return removedRows.add(physicalIndex);\n    }, new Set()));\n\n    // Modifying hook's argument by the reference.\n    physicalRows.length = 0;\n    physicalRows.push(...modifiedPhysicalRows);\n  }\n\n  /**\n   * `beforeAddChild` hook callback.\n   *\n   * @private\n   */\n  onBeforeAddChild() {\n    this.collapsingUI.collapsedRowsStash.stash();\n  }\n\n  /**\n   * `afterAddChild` hook callback.\n   *\n   * @private\n   * @param {object} parent Parent element.\n   * @param {object} element New child element.\n   */\n  onAfterAddChild(parent, element) {\n    this.collapsingUI.collapsedRowsStash.shiftStash(this.dataManager.getRowIndex(element));\n    this.collapsingUI.collapsedRowsStash.applyStash();\n    this.headersUI.updateRowHeaderWidth();\n  }\n\n  /**\n   * `beforeDetachChild` hook callback.\n   *\n   * @private\n   */\n  onBeforeDetachChild() {\n    this.collapsingUI.collapsedRowsStash.stash();\n  }\n\n  /**\n   * `afterDetachChild` hook callback.\n   *\n   * @private\n   * @param {object} parent Parent element.\n   * @param {object} element New child element.\n   * @param {number} finalElementRowIndex The final row index of the detached element.\n   */\n  onAfterDetachChild(parent, element, finalElementRowIndex) {\n    this.collapsingUI.collapsedRowsStash.shiftStash(finalElementRowIndex, null, -1);\n    this.collapsingUI.collapsedRowsStash.applyStash();\n    this.headersUI.updateRowHeaderWidth();\n  }\n\n  /**\n   * `afterCreateRow` hook callback.\n   *\n   * @private\n   */\n  onAfterCreateRow() {\n    this.dataManager.rewriteCache();\n  }\n\n  /**\n   * `afterInit` hook callback.\n   *\n   * @private\n   */\n  onAfterInit() {\n    this.headersUI.updateRowHeaderWidth();\n  }\n\n  /**\n   * `beforeViewRender` hook callback.\n   *\n   * @param {boolean} force Indicates if the render call was triggered by a change of settings or data.\n   * @param {object} skipRender An object, holder for skipRender functionality.\n   * @private\n   */\n  onBeforeViewRender(force, skipRender) {\n    const priv = privatePool.get(this);\n    if (priv.skipRender) {\n      skipRender.skipRender = true;\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n\n  /**\n   * `beforeLoadData` hook callback.\n   *\n   * @param {Array} data The source data.\n   * @private\n   */\n  onBeforeLoadData(data) {\n    if (!isArrayOfObjects(data)) {\n      error(WRONG_DATA_TYPE_ERROR);\n      this.hot.getSettings()[PLUGIN_KEY] = false;\n      this.disablePlugin();\n      return;\n    }\n    this.dataManager.setData(data);\n    this.dataManager.rewriteCache();\n  }\n}","import \"core-js/modules/es.json.stringify.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\n/**\n * @private\n * @class Storage\n */\nclass Storage {\n  // eslint-disable-next-line no-restricted-globals\n  constructor(prefix) {\n    let rootWindow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : window;\n    /**\n     * Reference to proper window.\n     *\n     * @type {Window}\n     */\n    this.rootWindow = rootWindow;\n    /**\n     * Prefix for key (id element).\n     *\n     * @type {string}\n     */\n    this.prefix = prefix;\n\n    /**\n     * Saved keys.\n     *\n     * @type {Array}\n     */\n    this.savedKeys = [];\n    this.loadSavedKeys();\n  }\n\n  /**\n   * Save data to localStorage.\n   *\n   * @param {string} key Key string.\n   * @param {Mixed} value Value to save.\n   */\n  saveValue(key, value) {\n    this.rootWindow.localStorage.setItem(`${this.prefix}_${key}`, JSON.stringify(value));\n    if (this.savedKeys.indexOf(key) === -1) {\n      this.savedKeys.push(key);\n      this.saveSavedKeys();\n    }\n  }\n\n  /**\n   * Load data from localStorage.\n   *\n   * @param {string} key Key string.\n   * @param {object} defaultValue Object containing the loaded data.\n   *\n   * @returns {object|undefined}\n   */\n  loadValue(key, defaultValue) {\n    const itemKey = typeof key === 'undefined' ? defaultValue : key;\n    const value = this.rootWindow.localStorage.getItem(`${this.prefix}_${itemKey}`);\n    return value === null ? void 0 : JSON.parse(value);\n  }\n\n  /**\n   * Reset given data from localStorage.\n   *\n   * @param {string} key Key string.\n   */\n  reset(key) {\n    this.rootWindow.localStorage.removeItem(`${this.prefix}_${key}`);\n  }\n\n  /**\n   * Reset all data from localStorage.\n   *\n   */\n  resetAll() {\n    arrayEach(this.savedKeys, (value, index) => {\n      this.rootWindow.localStorage.removeItem(`${this.prefix}_${this.savedKeys[index]}`);\n    });\n    this.clearSavedKeys();\n  }\n\n  /**\n   * Load and save all keys from localStorage.\n   *\n   * @private\n   */\n  loadSavedKeys() {\n    const keysJSON = this.rootWindow.localStorage.getItem(`${this.prefix}__persistentStateKeys`);\n    const keys = typeof keysJSON === 'string' ? JSON.parse(keysJSON) : void 0;\n    this.savedKeys = keys || [];\n  }\n\n  /**\n   * Save saved key in localStorage.\n   *\n   * @private\n   */\n  saveSavedKeys() {\n    this.rootWindow.localStorage.setItem(`${this.prefix}__persistentStateKeys`, JSON.stringify(this.savedKeys));\n  }\n\n  /**\n   * Clear saved key from localStorage.\n   *\n   * @private\n   */\n  clearSavedKeys() {\n    this.savedKeys.length = 0;\n    this.saveSavedKeys();\n  }\n}\nexport default Storage;","import { BasePlugin } from \"../base/index.mjs\";\nimport Storage from \"./storage.mjs\";\nimport Hooks from \"../../pluginHooks.mjs\";\nHooks.getSingleton().register('persistentStateSave');\nHooks.getSingleton().register('persistentStateLoad');\nHooks.getSingleton().register('persistentStateReset');\nexport const PLUGIN_KEY = 'persistentState';\nexport const PLUGIN_PRIORITY = 0;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin PersistentState\n * @class PersistentState\n *\n * @description\n * Save the state of column sorting, column positions and column sizes in local storage to preserve table state\n * between page reloads.\n *\n * In order to enable data storage mechanism, {@link Options#persistentState} option must be set to `true`.\n *\n * When persistentState is enabled it exposes 3 hooks:\n * - {@link Hooks#persistentStateSave} - Saves value under given key in browser local storage.\n * - {@link Hooks#persistentStateLoad} - Loads value, saved under given key, from browser local storage. The loaded\n * value will be saved in `saveTo.value`.\n * - {@link Hooks#persistentStateReset} - Clears the value saved under key. If no key is given, all values associated\n * with table will be cleared.\n *\n * __Note:__ The main reason behind using `persistentState` hooks rather than regular LocalStorage API is that it\n * ensures separation of data stored by multiple Handsontable instances. In other words, if you have two (or more)\n * instances of Handsontable on one page, data saved by one instance won't be accessible by the second instance.\n * Those two instances can store data under the same key and no data would be overwritten.\n *\n * __Important:__ In order for the data separation to work properly, make sure that each instance of Handsontable has a unique `id`.\n *\n */\nexport class PersistentState extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Instance of {@link Storage}.\n     *\n     * @private\n     * @type {Storage}\n     */\n    this.storage = void 0;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link PersistentState#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    if (!this.storage) {\n      this.storage = new Storage(this.hot.rootElement.id, this.hot.rootWindow);\n    }\n    this.addHook('persistentStateSave', (key, value) => this.saveValue(key, value));\n    this.addHook('persistentStateLoad', (key, saveTo) => this.loadValue(key, saveTo));\n    this.addHook('persistentStateReset', () => this.resetValue());\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.storage = void 0;\n    super.disablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`persistentState`](@/api/options.md#persistentstate)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Loads the value from local storage.\n   *\n   * @param {string} key Storage key.\n   * @param {object} saveTo Saved value from local storage.\n   */\n  loadValue(key, saveTo) {\n    saveTo.value = this.storage.loadValue(key);\n  }\n\n  /**\n   * Saves the data to local storage.\n   *\n   * @param {string} key Storage key.\n   * @param {Mixed} value Value to save.\n   */\n  saveValue(key, value) {\n    this.storage.saveValue(key, value);\n  }\n\n  /**\n   * Resets the data or all data from local storage.\n   *\n   * @param {string} key [optional] Storage key.\n   */\n  resetValue(key) {\n    if (typeof key === 'undefined') {\n      this.storage.resetAll();\n    } else {\n      this.storage.reset(key);\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { isObject } from \"../../helpers/object.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { isUndefined } from \"../../helpers/mixed.mjs\";\nexport const PLUGIN_KEY = 'search';\nexport const PLUGIN_PRIORITY = 190;\nconst DEFAULT_SEARCH_RESULT_CLASS = 'htSearchResult';\nconst DEFAULT_CALLBACK = function (instance, row, col, data, testResult) {\n  instance.getCellMeta(row, col).isSearchResult = testResult;\n};\nconst DEFAULT_QUERY_METHOD = function (query, value, cellProperties) {\n  if (isUndefined(query) || query === null || !query.toLocaleLowerCase || query.length === 0) {\n    return false;\n  }\n  if (isUndefined(value) || value === null) {\n    return false;\n  }\n  return value.toString().toLocaleLowerCase(cellProperties.locale).indexOf(query.toLocaleLowerCase(cellProperties.locale)) !== -1;\n};\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin Search\n * @class Search\n *\n * @description\n * The search plugin provides an easy interface to search data across Handsontable.\n *\n * In order to enable search mechanism, {@link Options#search} option must be set to `true`.\n *\n * @example\n * ```js\n * // as boolean\n * search: true\n * // as a object with one or more options\n * search: {\n *   callback: myNewCallbackFunction,\n *   queryMethod: myNewQueryMethod,\n *   searchResultClass: 'customClass'\n * }\n *\n * // Access to search plugin instance:\n * const searchPlugin = hot.getPlugin('search');\n *\n * // Set callback programmatically:\n * searchPlugin.setCallback(myNewCallbackFunction);\n * // Set query method programmatically:\n * searchPlugin.setQueryMethod(myNewQueryMethod);\n * // Set search result cells class programmatically:\n * searchPlugin.setSearchResultClass(customClass);\n * ```\n */\nexport class Search extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Function called during querying for each cell from the {@link DataMap}.\n     *\n     * @private\n     * @type {Function}\n     */\n    this.callback = DEFAULT_CALLBACK;\n    /**\n     * Query function is responsible for determining whether a query matches the value stored in a cell.\n     *\n     * @private\n     * @type {Function}\n     */\n    this.queryMethod = DEFAULT_QUERY_METHOD;\n    /**\n     * Class name added to each cell that belongs to the searched query.\n     *\n     * @private\n     * @type {string}\n     */\n    this.searchResultClass = DEFAULT_SEARCH_RESULT_CLASS;\n  }\n\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    var _this = this;\n    if (this.enabled) {\n      return;\n    }\n    const searchSettings = this.hot.getSettings()[PLUGIN_KEY];\n    this.updatePluginSettings(searchSettings);\n    this.addHook('beforeRenderer', function () {\n      return _this.onBeforeRenderer(...arguments);\n    });\n    super.enablePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    var _this2 = this;\n    const beforeRendererCallback = function () {\n      return _this2.onBeforeRenderer(...arguments);\n    };\n    this.hot.addHook('beforeRenderer', beforeRendererCallback);\n    this.hot.addHookOnce('afterViewRender', () => {\n      this.hot.removeHook('beforeRenderer', beforeRendererCallback);\n    });\n    super.disablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`search`](@/api/options.md#search)\n   */\n  updatePlugin() {\n    this.disablePlugin();\n    this.enablePlugin();\n    super.updatePlugin();\n  }\n\n  /**\n   * Makes the query.\n   *\n   * @param {string} queryStr Value to be search.\n   * @param {Function} [callback] Callback function performed on cells with values which matches to the searched query.\n   * @param {Function} [queryMethod] Query function responsible for determining whether a query matches the value stored in a cell.\n   * @returns {object[]} Return an array of objects with `row`, `col`, `data` properties or empty array.\n   */\n  query(queryStr) {\n    let callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.getCallback();\n    let queryMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.getQueryMethod();\n    const rowCount = this.hot.countRows();\n    const colCount = this.hot.countCols();\n    const queryResult = [];\n    const instance = this.hot;\n    rangeEach(0, rowCount - 1, rowIndex => {\n      rangeEach(0, colCount - 1, colIndex => {\n        const cellData = this.hot.getDataAtCell(rowIndex, colIndex);\n        const cellProperties = this.hot.getCellMeta(rowIndex, colIndex);\n        const cellCallback = cellProperties.search.callback || callback;\n        const cellQueryMethod = cellProperties.search.queryMethod || queryMethod;\n        const testResult = cellQueryMethod(queryStr, cellData, cellProperties);\n        if (testResult) {\n          const singleResult = {\n            row: rowIndex,\n            col: colIndex,\n            data: cellData\n          };\n          queryResult.push(singleResult);\n        }\n        if (cellCallback) {\n          cellCallback(instance, rowIndex, colIndex, cellData, testResult);\n        }\n      });\n    });\n    return queryResult;\n  }\n\n  /**\n   * Gets the callback function.\n   *\n   * @returns {Function} Return the callback function.\n   */\n  getCallback() {\n    return this.callback;\n  }\n\n  /**\n   * Sets the callback function. This function will be called during querying for each cell.\n   *\n   * @param {Function} newCallback A callback function.\n   */\n  setCallback(newCallback) {\n    this.callback = newCallback;\n  }\n\n  /**\n   * Gets the query method function.\n   *\n   * @returns {Function} Return the query method.\n   */\n  getQueryMethod() {\n    return this.queryMethod;\n  }\n\n  /**\n   * Sets the query method function. The function is responsible for determining whether a query matches the value stored in a cell.\n   *\n   * @param {Function} newQueryMethod A function with specific match logic.\n   */\n  setQueryMethod(newQueryMethod) {\n    this.queryMethod = newQueryMethod;\n  }\n\n  /**\n   * Gets search result cells class name.\n   *\n   * @returns {string} Return the cell class name.\n   */\n  getSearchResultClass() {\n    return this.searchResultClass;\n  }\n\n  /**\n   * Sets search result cells class name. This class name will be added to each cell that belongs to the searched query.\n   *\n   * @param {string} newElementClass CSS class name.\n   */\n  setSearchResultClass(newElementClass) {\n    this.searchResultClass = newElementClass;\n  }\n\n  /**\n   * Updates the settings of the plugin.\n   *\n   * @param {object} searchSettings The plugin settings, taken from Handsontable configuration.\n   * @private\n   */\n  updatePluginSettings(searchSettings) {\n    if (isObject(searchSettings)) {\n      if (searchSettings.searchResultClass) {\n        this.setSearchResultClass(searchSettings.searchResultClass);\n      }\n      if (searchSettings.queryMethod) {\n        this.setQueryMethod(searchSettings.queryMethod);\n      }\n      if (searchSettings.callback) {\n        this.setCallback(searchSettings.callback);\n      }\n    }\n  }\n\n  /**\n   * The `beforeRenderer` hook callback.\n   *\n   * @private\n   * @param {HTMLTableCellElement} TD The rendered `TD` element.\n   * @param {number} row Visual row index.\n   * @param {number} col Visual column index.\n   * @param {string|number} prop Column property name or a column index, if datasource is an array of arrays.\n   * @param {string} value Value of the rendered cell.\n   * @param {object} cellProperties Object containing the cell's properties.\n   */\n  onBeforeRenderer(TD, row, col, prop, value, cellProperties) {\n    // TODO: #4972\n    const className = cellProperties.className || [];\n    let classArray = [];\n    if (typeof className === 'string') {\n      classArray = className.split(' ');\n    } else {\n      classArray.push(...className);\n    }\n    if (this.isEnabled() && cellProperties.isSearchResult) {\n      if (!classArray.includes(this.searchResultClass)) {\n        classArray.push(`${this.searchResultClass}`);\n      }\n    } else if (classArray.includes(this.searchResultClass)) {\n      classArray.splice(classArray.indexOf(this.searchResultClass), 1);\n    }\n    cellProperties.className = classArray.join(' ');\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { addClass, removeClass } from \"../../helpers/dom/element.mjs\";\nimport { arrayEach } from \"../../helpers/array.mjs\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { isTouchSupported } from \"../../helpers/feature.mjs\";\nexport const PLUGIN_KEY = 'touchScroll';\nexport const PLUGIN_PRIORITY = 200;\n\n/**\n * @private\n * @plugin TouchScroll\n * @class TouchScroll\n */\nexport class TouchScroll extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  static get SETTING_KEYS() {\n    return true;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n\n    /**\n     * Collection of scrollbars to update.\n     *\n     * @type {Array}\n     */\n    this.scrollbars = [];\n    /**\n     * Collection of overlays to update.\n     *\n     * @type {Array}\n     */\n    this.clones = [];\n    /**\n     * Flag which determines if collection of overlays should be refilled on every table render.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.lockedCollection = false;\n    /**\n     * Flag which determines if walkontable should freeze overlays while scrolling.\n     *\n     * @type {boolean}\n     * @default false\n     */\n    this.freezeOverlays = false;\n  }\n\n  /**\n   * Check if plugin is enabled.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return isTouchSupported();\n  }\n\n  /**\n   * Enable the plugin.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    this.addHook('afterViewRender', () => this.onAfterViewRender());\n    this.registerEvents();\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin to use the latest options you have specified.\n   */\n  updatePlugin() {\n    this.lockedCollection = false;\n    super.updatePlugin();\n  }\n\n  /**\n   * Disable plugin for this Handsontable instance.\n   */\n  disablePlugin() {\n    super.disablePlugin();\n  }\n\n  /**\n   * Register all necessary events.\n   *\n   * @private\n   */\n  registerEvents() {\n    this.addHook('beforeTouchScroll', () => this.onBeforeTouchScroll());\n    this.addHook('afterMomentumScroll', () => this.onAfterMomentumScroll());\n  }\n\n  /**\n   * After view render listener.\n   *\n   * @private\n   */\n  onAfterViewRender() {\n    if (this.lockedCollection) {\n      return;\n    }\n    const {\n      topOverlay,\n      bottomOverlay,\n      inlineStartOverlay,\n      topInlineStartCornerOverlay,\n      bottomInlineStartCornerOverlay\n    } = this.hot.view._wt.wtOverlays;\n    this.lockedCollection = true;\n    this.scrollbars.length = 0;\n    this.scrollbars.push(topOverlay);\n    if (bottomOverlay.clone) {\n      this.scrollbars.push(bottomOverlay);\n    }\n    this.scrollbars.push(inlineStartOverlay);\n    if (topInlineStartCornerOverlay) {\n      this.scrollbars.push(topInlineStartCornerOverlay);\n    }\n    if (bottomInlineStartCornerOverlay && bottomInlineStartCornerOverlay.clone) {\n      this.scrollbars.push(bottomInlineStartCornerOverlay);\n    }\n    this.clones = [];\n    if (topOverlay.needFullRender) {\n      this.clones.push(topOverlay.clone.wtTable.holder.parentNode);\n    }\n    if (bottomOverlay.needFullRender) {\n      this.clones.push(bottomOverlay.clone.wtTable.holder.parentNode);\n    }\n    if (inlineStartOverlay.needFullRender) {\n      this.clones.push(inlineStartOverlay.clone.wtTable.holder.parentNode);\n    }\n    if (topInlineStartCornerOverlay) {\n      this.clones.push(topInlineStartCornerOverlay.clone.wtTable.holder.parentNode);\n    }\n    if (bottomInlineStartCornerOverlay && bottomInlineStartCornerOverlay.clone) {\n      this.clones.push(bottomInlineStartCornerOverlay.clone.wtTable.holder.parentNode);\n    }\n  }\n\n  /**\n   * Touch scroll listener.\n   *\n   * @private\n   */\n  onBeforeTouchScroll() {\n    this.freezeOverlays = true;\n    arrayEach(this.clones, clone => {\n      addClass(clone, 'hide-tween');\n    });\n  }\n\n  /**\n   * After momentum scroll listener.\n   *\n   * @private\n   */\n  onAfterMomentumScroll() {\n    this.freezeOverlays = false;\n    arrayEach(this.clones, clone => {\n      removeClass(clone, 'hide-tween');\n      addClass(clone, 'show-tween');\n    });\n    this.hot._registerTimeout(() => {\n      arrayEach(this.clones, clone => {\n        removeClass(clone, 'show-tween');\n      });\n    }, 400);\n    arrayEach(this.scrollbars, scrollbar => {\n      scrollbar.refresh();\n      scrollbar.resetFixedPosition();\n    });\n    this.hot.view._wt.wtOverlays.syncScrollWithMaster();\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport { BasePlugin } from \"../base/index.mjs\";\nimport { TrimmingMap } from \"../../translations/index.mjs\";\nimport { arrayEach, arrayReduce } from \"../../helpers/array.mjs\";\nexport const PLUGIN_KEY = 'trimRows';\nexport const PLUGIN_PRIORITY = 330;\n\n/* eslint-disable jsdoc/require-description-complete-sentence */\n\n/**\n * @plugin TrimRows\n * @class TrimRows\n *\n * @description\n * The plugin allows to trim certain rows. The trimming is achieved by applying the transformation algorithm to the data\n * transformation. In this case, when the row is trimmed it is not accessible using `getData*` methods thus the trimmed\n * data is not visible to other plugins.\n *\n * @example\n * ::: only-for javascript\n * ```js\n * const container = document.getElementById('example');\n * const hot = new Handsontable(container, {\n *   data: getData(),\n *   // hide selected rows on table initialization\n *   trimRows: [1, 2, 5]\n * });\n *\n * // access the trimRows plugin instance\n * const trimRowsPlugin = hot.getPlugin('trimRows');\n *\n * // hide single row\n * trimRowsPlugin.trimRow(1);\n *\n * // hide multiple rows\n * trimRowsPlugin.trimRow(1, 2, 9);\n *\n * // or as an array\n * trimRowsPlugin.trimRows([1, 2, 9]);\n *\n * // show single row\n * trimRowsPlugin.untrimRow(1);\n *\n * // show multiple rows\n * trimRowsPlugin.untrimRow(1, 2, 9);\n *\n * // or as an array\n * trimRowsPlugin.untrimRows([1, 2, 9]);\n *\n * // rerender table to see the changes\n * hot.render();\n * ```\n * :::\n *\n * ::: only-for react\n * ```jsx\n * const hotRef = useRef(null);\n *\n * ...\n *\n * <HotTable\n *   ref={hotRef}\n *   data={getData()}\n *   // hide selected rows on table initialization\n *   trimRows={[1, 2, 5]}\n * />\n *\n * const hot = hotRef.current.hotInstance;\n * // access the trimRows plugin instance\n * const trimRowsPlugin = hot.getPlugin('trimRows');\n *\n * // hide single row\n * trimRowsPlugin.trimRow(1);\n *\n * // hide multiple rows\n * trimRowsPlugin.trimRow(1, 2, 9);\n *\n * // or as an array\n * trimRowsPlugin.trimRows([1, 2, 9]);\n *\n * // show single row\n * trimRowsPlugin.untrimRow(1);\n *\n * // show multiple rows\n * trimRowsPlugin.untrimRow(1, 2, 9);\n *\n * // or as an array\n * trimRowsPlugin.untrimRows([1, 2, 9]);\n *\n * // rerender table to see the changes\n * hot.render();\n * ```\n * :::\n */\nexport class TrimRows extends BasePlugin {\n  static get PLUGIN_KEY() {\n    return PLUGIN_KEY;\n  }\n  static get PLUGIN_PRIORITY() {\n    return PLUGIN_PRIORITY;\n  }\n  constructor(hotInstance) {\n    super(hotInstance);\n    /**\n     * Map of skipped rows by the plugin.\n     *\n     * @private\n     * @type {null|TrimmingMap}\n     */\n    this.trimmedRowsMap = null;\n  }\n  /**\n   * Checks if the plugin is enabled in the handsontable settings. This method is executed in {@link Hooks#beforeInit}\n   * hook and if it returns `true` then the {@link AutoRowSize#enablePlugin} method is called.\n   *\n   * @returns {boolean}\n   */\n  isEnabled() {\n    return !!this.hot.getSettings()[PLUGIN_KEY];\n  }\n\n  /**\n   * Enables the plugin functionality for this Handsontable instance.\n   */\n  enablePlugin() {\n    if (this.enabled) {\n      return;\n    }\n    this.trimmedRowsMap = this.hot.rowIndexMapper.registerMap('trimRows', new TrimmingMap());\n    this.trimmedRowsMap.addLocalHook('init', () => this.onMapInit());\n    super.enablePlugin();\n  }\n\n  /**\n   * Updates the plugin's state.\n   *\n   * This method is executed when [`updateSettings()`](@/api/core.md#updatesettings) is invoked with any of the following configuration options:\n   *  - [`trimRows`](@/api/options.md#trimrows)\n   */\n  updatePlugin() {\n    const trimmedRows = this.hot.getSettings()[PLUGIN_KEY];\n    if (Array.isArray(trimmedRows)) {\n      this.hot.batchExecution(() => {\n        this.trimmedRowsMap.clear();\n        arrayEach(trimmedRows, physicalRow => {\n          this.trimmedRowsMap.setValueAtIndex(physicalRow, true);\n        });\n      }, true);\n    }\n    super.updatePlugin();\n  }\n\n  /**\n   * Disables the plugin functionality for this Handsontable instance.\n   */\n  disablePlugin() {\n    this.hot.rowIndexMapper.unregisterMap('trimRows');\n    super.disablePlugin();\n  }\n\n  /**\n   * Get list of trimmed rows.\n   *\n   * @returns {Array} Physical rows.\n   */\n  getTrimmedRows() {\n    return this.trimmedRowsMap.getTrimmedIndexes();\n  }\n\n  /**\n   * Trims the rows provided in the array.\n   *\n   * @param {number[]} rows Array of physical row indexes.\n   * @fires Hooks#beforeTrimRow\n   * @fires Hooks#afterTrimRow\n   */\n  trimRows(rows) {\n    const currentTrimConfig = this.getTrimmedRows();\n    const isValidConfig = this.isValidConfig(rows);\n    let destinationTrimConfig = currentTrimConfig;\n    if (isValidConfig) {\n      destinationTrimConfig = Array.from(new Set(currentTrimConfig.concat(rows)));\n    }\n    const allowTrimRow = this.hot.runHooks('beforeTrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig);\n    if (allowTrimRow === false) {\n      return;\n    }\n    if (isValidConfig) {\n      this.hot.batchExecution(() => {\n        arrayEach(rows, physicalRow => {\n          this.trimmedRowsMap.setValueAtIndex(physicalRow, true);\n        });\n      }, true);\n    }\n    this.hot.runHooks('afterTrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig, isValidConfig && destinationTrimConfig.length > currentTrimConfig.length);\n  }\n\n  /**\n   * Trims the row provided as a physical row index (counting from 0).\n   *\n   * @param {...number} row Physical row index.\n   */\n  trimRow() {\n    for (var _len = arguments.length, row = new Array(_len), _key = 0; _key < _len; _key++) {\n      row[_key] = arguments[_key];\n    }\n    this.trimRows(row);\n  }\n\n  /**\n   * Untrims the rows provided in the array.\n   *\n   * @param {number[]} rows Array of physical row indexes.\n   * @fires Hooks#beforeUntrimRow\n   * @fires Hooks#afterUntrimRow\n   */\n  untrimRows(rows) {\n    const currentTrimConfig = this.getTrimmedRows();\n    const isValidConfig = this.isValidConfig(rows);\n    let destinationTrimConfig = currentTrimConfig;\n    const trimmingMapValues = this.trimmedRowsMap.getValues().slice();\n    const isAnyRowUntrimmed = rows.length > 0;\n    if (isValidConfig && isAnyRowUntrimmed) {\n      // Preparing new values for trimming map.\n      arrayEach(rows, physicalRow => {\n        trimmingMapValues[physicalRow] = false;\n      });\n\n      // Preparing new trimming config.\n      destinationTrimConfig = arrayReduce(trimmingMapValues, (trimmedIndexes, isTrimmed, physicalIndex) => {\n        if (isTrimmed) {\n          trimmedIndexes.push(physicalIndex);\n        }\n        return trimmedIndexes;\n      }, []);\n    }\n    const allowUntrimRow = this.hot.runHooks('beforeUntrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig && isAnyRowUntrimmed);\n    if (allowUntrimRow === false) {\n      return;\n    }\n    if (isValidConfig && isAnyRowUntrimmed) {\n      this.trimmedRowsMap.setValues(trimmingMapValues);\n    }\n    this.hot.runHooks('afterUntrimRow', currentTrimConfig, destinationTrimConfig, isValidConfig && isAnyRowUntrimmed, isValidConfig && destinationTrimConfig.length < currentTrimConfig.length);\n  }\n\n  /**\n   * Untrims the row provided as a physical row index (counting from 0).\n   *\n   * @param {...number} row Physical row index.\n   */\n  untrimRow() {\n    for (var _len2 = arguments.length, row = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      row[_key2] = arguments[_key2];\n    }\n    this.untrimRows(row);\n  }\n\n  /**\n   * Checks if given row is hidden.\n   *\n   * @param {number} physicalRow Physical row index.\n   * @returns {boolean}\n   */\n  isTrimmed(physicalRow) {\n    return this.trimmedRowsMap.getValueAtIndex(physicalRow) || false;\n  }\n\n  /**\n   * Untrims all trimmed rows.\n   */\n  untrimAll() {\n    this.untrimRows(this.getTrimmedRows());\n  }\n\n  /**\n   * Get if trim config is valid. Check whether all of the provided physical row indexes are within source data.\n   *\n   * @param {Array} trimmedRows List of physical row indexes.\n   * @returns {boolean}\n   */\n  isValidConfig(trimmedRows) {\n    const sourceRows = this.hot.countSourceRows();\n    return trimmedRows.every(trimmedRow => Number.isInteger(trimmedRow) && trimmedRow >= 0 && trimmedRow < sourceRows);\n  }\n\n  /**\n   * On map initialized hook callback.\n   *\n   * @private\n   */\n  onMapInit() {\n    const trimmedRows = this.hot.getSettings()[PLUGIN_KEY];\n    if (Array.isArray(trimmedRows)) {\n      this.hot.batchExecution(() => {\n        arrayEach(trimmedRows, physicalRow => {\n          this.trimmedRowsMap.setValueAtIndex(physicalRow, true);\n        });\n      }, true);\n    }\n  }\n\n  /**\n   * Destroys the plugin instance.\n   */\n  destroy() {\n    super.destroy();\n  }\n}","import \"core-js/modules/es.array.push.js\";\nimport Hooks from \"../../pluginHooks.mjs\";\nimport { arrayMap, arrayEach } from \"../../helpers/array.mjs\";\nimport { rangeEach } from \"../../helpers/number.mjs\";\nimport { inherit, deepClone } from \"../../helpers/object.mjs\";\nimport { align } from \"../contextMenu/utils.mjs\";\nconst SHORTCUTS_GROUP = 'undoRedo';\nexport const PLUGIN_KEY = 'undoRedo';\n\n/**\n * @description\n * Handsontable UndoRedo plugin allows to undo and redo certain actions done in the table.\n *\n * __Note__, that not all actions are currently undo-able. The UndoRedo plugin is enabled by default.\n * @example\n * ```js\n * undo: true\n * ```\n * @class UndoRedo\n * @plugin UndoRedo\n * @param {Core} instance The Handsontable instance.\n */\nfunction UndoRedo(instance) {\n  const plugin = this;\n  this.instance = instance;\n  this.doneActions = [];\n  this.undoneActions = [];\n  this.ignoreNewActions = false;\n  this.enabled = false;\n  instance.addHook('afterChange', function (changes, source) {\n    const changesLen = changes && changes.length;\n    if (!changesLen) {\n      return;\n    }\n    const hasDifferences = changes.find(change => {\n      const [,, oldValue, newValue] = change;\n      return oldValue !== newValue;\n    });\n    if (!hasDifferences) {\n      return;\n    }\n    const wrappedAction = () => {\n      const clonedChanges = changes.reduce((arr, change) => {\n        arr.push([...change]);\n        return arr;\n      }, []);\n      arrayEach(clonedChanges, change => {\n        change[1] = instance.propToCol(change[1]);\n      });\n      const selected = changesLen > 1 ? this.getSelected() : [[clonedChanges[0][0], clonedChanges[0][1]]];\n      return new UndoRedo.ChangeAction(clonedChanges, selected);\n    };\n    plugin.done(wrappedAction, source);\n  });\n  instance.addHook('afterCreateRow', (index, amount, source) => {\n    plugin.done(() => new UndoRedo.CreateRowAction(index, amount), source);\n  });\n  instance.addHook('beforeRemoveRow', (index, amount, logicRows, source) => {\n    const wrappedAction = () => {\n      const physicalRowIndex = instance.toPhysicalRow(index);\n      const removedData = deepClone(plugin.instance.getSourceData(physicalRowIndex, 0, physicalRowIndex + amount - 1, plugin.instance.countSourceCols() - 1));\n      return new UndoRedo.RemoveRowAction(physicalRowIndex, removedData, instance.getSettings().fixedRowsBottom, instance.getSettings().fixedRowsTop, instance.rowIndexMapper.getIndexesSequence());\n    };\n    plugin.done(wrappedAction, source);\n  });\n  instance.addHook('afterCreateCol', (index, amount, source) => {\n    plugin.done(() => new UndoRedo.CreateColumnAction(index, amount), source);\n  });\n  instance.addHook('beforeRemoveCol', (index, amount, logicColumns, source) => {\n    const wrappedAction = () => {\n      const originalData = plugin.instance.getSourceDataArray();\n      const columnIndex = (plugin.instance.countCols() + index) % plugin.instance.countCols();\n      const removedData = [];\n      const headers = [];\n      const indexes = [];\n      rangeEach(originalData.length - 1, i => {\n        const column = [];\n        const origRow = originalData[i];\n        rangeEach(columnIndex, columnIndex + (amount - 1), j => {\n          column.push(origRow[instance.toPhysicalColumn(j)]);\n        });\n        removedData.push(column);\n      });\n      rangeEach(amount - 1, i => {\n        indexes.push(instance.toPhysicalColumn(columnIndex + i));\n      });\n      if (Array.isArray(instance.getSettings().colHeaders)) {\n        rangeEach(amount - 1, i => {\n          headers.push(instance.getSettings().colHeaders[instance.toPhysicalColumn(columnIndex + i)] || null);\n        });\n      }\n      const columnsMap = instance.columnIndexMapper.getIndexesSequence();\n      const rowsMap = instance.rowIndexMapper.getIndexesSequence();\n      return new UndoRedo.RemoveColumnAction(columnIndex, indexes, removedData, headers, columnsMap, rowsMap, instance.getSettings().fixedColumnsStart);\n    };\n    plugin.done(wrappedAction, source);\n  });\n  instance.addHook('beforeCellAlignment', (stateBefore, range, type, alignment) => {\n    plugin.done(() => new UndoRedo.CellAlignmentAction(stateBefore, range, type, alignment));\n  });\n  instance.addHook('beforeFilter', conditionsStack => {\n    plugin.done(() => new UndoRedo.FiltersAction(conditionsStack));\n  });\n  instance.addHook('beforeRowMove', (rows, finalIndex) => {\n    if (rows === false) {\n      return;\n    }\n    plugin.done(() => new UndoRedo.RowMoveAction(rows, finalIndex));\n  });\n  instance.addHook('beforeMergeCells', (cellRange, auto) => {\n    if (auto) {\n      return;\n    }\n    plugin.done(() => new UndoRedo.MergeCellsAction(instance, cellRange));\n  });\n  instance.addHook('afterUnmergeCells', (cellRange, auto) => {\n    if (auto) {\n      return;\n    }\n    plugin.done(() => new UndoRedo.UnmergeCellsAction(instance, cellRange));\n  });\n\n  // TODO: Why this callback is needed? One test doesn't pass after calling method right after plugin creation (outside the callback).\n  instance.addHook('afterInit', () => {\n    plugin.init();\n  });\n}\n\n/**\n * Stash information about performed actions.\n *\n * @function done\n * @memberof UndoRedo#\n * @fires Hooks#beforeUndoStackChange\n * @fires Hooks#afterUndoStackChange\n * @fires Hooks#beforeRedoStackChange\n * @fires Hooks#afterRedoStackChange\n * @param {Function} wrappedAction The action descriptor wrapped in a closure.\n * @param {string} [source] Source of the action. It is defined just for more general actions (not related to plugins).\n */\nUndoRedo.prototype.done = function (wrappedAction, source) {\n  if (this.ignoreNewActions) {\n    return;\n  }\n  const isBlockedByDefault = source === 'UndoRedo.undo' || source === 'UndoRedo.redo' || source === 'auto';\n  if (isBlockedByDefault) {\n    return;\n  }\n  const doneActionsCopy = this.doneActions.slice();\n  const continueAction = this.instance.runHooks('beforeUndoStackChange', doneActionsCopy, source);\n  if (continueAction === false) {\n    return;\n  }\n  const newAction = wrappedAction();\n  const undoneActionsCopy = this.undoneActions.slice();\n  this.doneActions.push(newAction);\n  this.instance.runHooks('afterUndoStackChange', doneActionsCopy, this.doneActions.slice());\n  this.instance.runHooks('beforeRedoStackChange', undoneActionsCopy);\n  this.undoneActions.length = 0;\n  this.instance.runHooks('afterRedoStackChange', undoneActionsCopy, this.undoneActions.slice());\n};\n\n/**\n * Undo the last action performed to the table.\n *\n * @function undo\n * @memberof UndoRedo#\n * @fires Hooks#beforeUndoStackChange\n * @fires Hooks#afterUndoStackChange\n * @fires Hooks#beforeRedoStackChange\n * @fires Hooks#afterRedoStackChange\n * @fires Hooks#beforeUndo\n * @fires Hooks#afterUndo\n */\nUndoRedo.prototype.undo = function () {\n  if (this.isUndoAvailable()) {\n    const doneActionsCopy = this.doneActions.slice();\n    this.instance.runHooks('beforeUndoStackChange', doneActionsCopy);\n    const action = this.doneActions.pop();\n    this.instance.runHooks('afterUndoStackChange', doneActionsCopy, this.doneActions.slice());\n    const actionClone = deepClone(action);\n    const continueAction = this.instance.runHooks('beforeUndo', actionClone);\n    if (continueAction === false) {\n      return;\n    }\n    this.ignoreNewActions = true;\n    const that = this;\n    const undoneActionsCopy = this.undoneActions.slice();\n    this.instance.runHooks('beforeRedoStackChange', undoneActionsCopy);\n    action.undo(this.instance, () => {\n      that.ignoreNewActions = false;\n      that.undoneActions.push(action);\n    });\n    this.instance.runHooks('afterRedoStackChange', undoneActionsCopy, this.undoneActions.slice());\n    this.instance.runHooks('afterUndo', actionClone);\n  }\n};\n\n/**\n * Redo the previous action performed to the table (used to reverse an undo).\n *\n * @function redo\n * @memberof UndoRedo#\n * @fires Hooks#beforeUndoStackChange\n * @fires Hooks#afterUndoStackChange\n * @fires Hooks#beforeRedoStackChange\n * @fires Hooks#afterRedoStackChange\n * @fires Hooks#beforeRedo\n * @fires Hooks#afterRedo\n */\nUndoRedo.prototype.redo = function () {\n  if (this.isRedoAvailable()) {\n    const undoneActionsCopy = this.undoneActions.slice();\n    this.instance.runHooks('beforeRedoStackChange', undoneActionsCopy);\n    const action = this.undoneActions.pop();\n    this.instance.runHooks('afterRedoStackChange', undoneActionsCopy, this.undoneActions.slice());\n    const actionClone = deepClone(action);\n    const continueAction = this.instance.runHooks('beforeRedo', actionClone);\n    if (continueAction === false) {\n      return;\n    }\n    this.ignoreNewActions = true;\n    const that = this;\n    const doneActionsCopy = this.doneActions.slice();\n    this.instance.runHooks('beforeUndoStackChange', doneActionsCopy);\n    action.redo(this.instance, () => {\n      that.ignoreNewActions = false;\n      that.doneActions.push(action);\n    });\n    this.instance.runHooks('afterUndoStackChange', doneActionsCopy, this.doneActions.slice());\n    this.instance.runHooks('afterRedo', actionClone);\n  }\n};\n\n/**\n * Checks if undo action is available.\n *\n * @function isUndoAvailable\n * @memberof UndoRedo#\n * @returns {boolean} Return `true` if undo can be performed, `false` otherwise.\n */\nUndoRedo.prototype.isUndoAvailable = function () {\n  return this.doneActions.length > 0;\n};\n\n/**\n * Checks if redo action is available.\n *\n * @function isRedoAvailable\n * @memberof UndoRedo#\n * @returns {boolean} Return `true` if redo can be performed, `false` otherwise.\n */\nUndoRedo.prototype.isRedoAvailable = function () {\n  return this.undoneActions.length > 0;\n};\n\n/**\n * Clears undo history.\n *\n * @function clear\n * @memberof UndoRedo#\n */\nUndoRedo.prototype.clear = function () {\n  this.doneActions.length = 0;\n  this.undoneActions.length = 0;\n};\n\n/**\n * Checks if the plugin is enabled.\n *\n * @function isEnabled\n * @memberof UndoRedo#\n * @returns {boolean}\n */\nUndoRedo.prototype.isEnabled = function () {\n  return this.enabled;\n};\n\n/**\n * Enables the plugin.\n *\n * @function enable\n * @memberof UndoRedo#\n */\nUndoRedo.prototype.enable = function () {\n  if (this.isEnabled()) {\n    return;\n  }\n  const hot = this.instance;\n  this.enabled = true;\n  exposeUndoRedoMethods(hot);\n  this.registerShortcuts();\n  hot.addHook('afterChange', onAfterChange);\n};\n\n/**\n * Disables the plugin.\n *\n * @function disable\n * @memberof UndoRedo#\n */\nUndoRedo.prototype.disable = function () {\n  if (!this.isEnabled()) {\n    return;\n  }\n  const hot = this.instance;\n  this.enabled = false;\n  removeExposedUndoRedoMethods(hot);\n  this.unregisterShortcuts();\n  hot.removeHook('afterChange', onAfterChange);\n};\n\n/**\n * Destroys the instance.\n *\n * @function destroy\n * @memberof UndoRedo#\n */\nUndoRedo.prototype.destroy = function () {\n  this.clear();\n  this.instance = null;\n  this.doneActions = null;\n  this.undoneActions = null;\n};\nUndoRedo.Action = function () {};\nUndoRedo.Action.prototype.undo = function () {};\nUndoRedo.Action.prototype.redo = function () {};\n\n/**\n * Change action.\n *\n * @private\n * @param {Array} changes 2D array containing information about each of the edited cells.\n * @param {number[]} selected The cell selection.\n */\nUndoRedo.ChangeAction = function (changes, selected) {\n  this.changes = changes;\n  this.selected = selected;\n  this.actionType = 'change';\n};\ninherit(UndoRedo.ChangeAction, UndoRedo.Action);\nUndoRedo.ChangeAction.prototype.undo = function (instance, undoneCallback) {\n  const data = deepClone(this.changes);\n  const emptyRowsAtTheEnd = instance.countEmptyRows(true);\n  const emptyColsAtTheEnd = instance.countEmptyCols(true);\n  for (let i = 0, len = data.length; i < len; i++) {\n    data[i].splice(3, 1);\n  }\n  instance.addHookOnce('afterChange', undoneCallback);\n  instance.setDataAtCell(data, null, null, 'UndoRedo.undo');\n  for (let i = 0, len = data.length; i < len; i++) {\n    const [row, column] = data[i];\n    if (instance.getSettings().minSpareRows && row + 1 + instance.getSettings().minSpareRows === instance.countRows() && emptyRowsAtTheEnd === instance.getSettings().minSpareRows) {\n      instance.alter('remove_row', parseInt(row + 1, 10), instance.getSettings().minSpareRows);\n      instance.undoRedo.doneActions.pop();\n    }\n    if (instance.getSettings().minSpareCols && column + 1 + instance.getSettings().minSpareCols === instance.countCols() && emptyColsAtTheEnd === instance.getSettings().minSpareCols) {\n      instance.alter('remove_col', parseInt(column + 1, 10), instance.getSettings().minSpareCols);\n      instance.undoRedo.doneActions.pop();\n    }\n  }\n  instance.selectCells(this.selected, false, false);\n};\nUndoRedo.ChangeAction.prototype.redo = function (instance, onFinishCallback) {\n  const data = deepClone(this.changes);\n  for (let i = 0, len = data.length; i < len; i++) {\n    data[i].splice(2, 1);\n  }\n  instance.addHookOnce('afterChange', onFinishCallback);\n  instance.setDataAtCell(data, null, null, 'UndoRedo.redo');\n  if (this.selected) {\n    instance.selectCells(this.selected, false, false);\n  }\n};\n\n/**\n * Create row action.\n *\n * @private\n * @param {number} index The visual row index.\n * @param {number} amount The number of created rows.\n */\nUndoRedo.CreateRowAction = function (index, amount) {\n  this.index = index;\n  this.amount = amount;\n  this.actionType = 'insert_row';\n};\ninherit(UndoRedo.CreateRowAction, UndoRedo.Action);\nUndoRedo.CreateRowAction.prototype.undo = function (instance, undoneCallback) {\n  const rowCount = instance.countRows();\n  const minSpareRows = instance.getSettings().minSpareRows;\n  if (this.index >= rowCount && this.index - minSpareRows < rowCount) {\n    this.index -= minSpareRows; // work around the situation where the needed row was removed due to an 'undo' of a made change\n  }\n\n  instance.addHookOnce('afterRemoveRow', undoneCallback);\n  instance.alter('remove_row', this.index, this.amount, 'UndoRedo.undo');\n};\nUndoRedo.CreateRowAction.prototype.redo = function (instance, redoneCallback) {\n  instance.addHookOnce('afterCreateRow', redoneCallback);\n  instance.alter('insert_row_above', this.index, this.amount, 'UndoRedo.redo');\n};\n\n/**\n * Remove row action.\n *\n * @private\n * @param {number} index The visual row index.\n * @param {Array} data The removed data.\n * @param {number} fixedRowsBottom Number of fixed rows on the bottom. Remove row action change it sometimes.\n * @param {number} fixedRowsTop Number of fixed rows on the top. Remove row action change it sometimes.\n * @param {Array} rowIndexesSequence Row index sequence taken from the row index mapper.\n */\nUndoRedo.RemoveRowAction = function (index, data, fixedRowsBottom, fixedRowsTop, rowIndexesSequence) {\n  this.index = index;\n  this.data = data;\n  this.actionType = 'remove_row';\n  this.fixedRowsBottom = fixedRowsBottom;\n  this.fixedRowsTop = fixedRowsTop;\n  this.rowIndexesSequence = rowIndexesSequence;\n};\ninherit(UndoRedo.RemoveRowAction, UndoRedo.Action);\nUndoRedo.RemoveRowAction.prototype.undo = function (instance, undoneCallback) {\n  const settings = instance.getSettings();\n  const changes = [];\n\n  // Changing by the reference as `updateSettings` doesn't work the best.\n  settings.fixedRowsBottom = this.fixedRowsBottom;\n  settings.fixedRowsTop = this.fixedRowsTop;\n\n  // Prepare the change list to fill the source data.\n  this.data.forEach((dataRow, rowIndexDelta) => {\n    Object.keys(dataRow).forEach(columnProp => {\n      const columnIndex = parseInt(columnProp, 10);\n      changes.push([this.index + rowIndexDelta, isNaN(columnIndex) ? columnProp : columnIndex, dataRow[columnProp]]);\n    });\n  });\n  instance.alter('insert_row_above', this.index, this.data.length, 'UndoRedo.undo');\n  instance.addHookOnce('afterViewRender', undoneCallback);\n  instance.setSourceDataAtCell(changes, null, null, 'UndoRedo.undo');\n  instance.rowIndexMapper.setIndexesSequence(this.rowIndexesSequence);\n};\nUndoRedo.RemoveRowAction.prototype.redo = function (instance, redoneCallback) {\n  instance.addHookOnce('afterRemoveRow', redoneCallback);\n  instance.alter('remove_row', this.index, this.data.length, 'UndoRedo.redo');\n};\n\n/**\n * Create column action.\n *\n * @private\n * @param {number} index The visual column index.\n * @param {number} amount The number of created columns.\n */\nUndoRedo.CreateColumnAction = function (index, amount) {\n  this.index = index;\n  this.amount = amount;\n  this.actionType = 'insert_col';\n};\ninherit(UndoRedo.CreateColumnAction, UndoRedo.Action);\nUndoRedo.CreateColumnAction.prototype.undo = function (instance, undoneCallback) {\n  instance.addHookOnce('afterRemoveCol', undoneCallback);\n  instance.alter('remove_col', this.index, this.amount, 'UndoRedo.undo');\n};\nUndoRedo.CreateColumnAction.prototype.redo = function (instance, redoneCallback) {\n  instance.addHookOnce('afterCreateCol', redoneCallback);\n  instance.alter('insert_col_start', this.index, this.amount, 'UndoRedo.redo');\n};\n\n/**\n * Remove column action.\n *\n * @private\n * @param {number} index The visual column index.\n * @param {number[]} indexes The visual column indexes.\n * @param {Array} data The removed data.\n * @param {Array} headers The header values.\n * @param {number[]} columnPositions The column position.\n * @param {number[]} rowPositions The row position.\n * @param {number} fixedColumnsStart Number of fixed columns on the left. Remove column action change it sometimes.\n */\nUndoRedo.RemoveColumnAction = function (index, indexes, data, headers, columnPositions, rowPositions, fixedColumnsStart) {\n  // eslint-disable-line max-len\n  this.index = index;\n  this.indexes = indexes;\n  this.data = data;\n  this.amount = this.data[0].length;\n  this.headers = headers;\n  this.columnPositions = columnPositions.slice(0);\n  this.rowPositions = rowPositions.slice(0);\n  this.actionType = 'remove_col';\n  this.fixedColumnsStart = fixedColumnsStart;\n};\ninherit(UndoRedo.RemoveColumnAction, UndoRedo.Action);\nUndoRedo.RemoveColumnAction.prototype.undo = function (instance, undoneCallback) {\n  const settings = instance.getSettings();\n\n  // Changing by the reference as `updateSettings` doesn't work the best.\n  settings.fixedColumnsStart = this.fixedColumnsStart;\n  const ascendingIndexes = this.indexes.slice(0).sort();\n  const sortByIndexes = (elem, j, arr) => arr[this.indexes.indexOf(ascendingIndexes[j])];\n  const removedDataLength = this.data.length;\n  const sortedData = [];\n  for (let rowIndex = 0; rowIndex < removedDataLength; rowIndex++) {\n    sortedData.push(arrayMap(this.data[rowIndex], sortByIndexes));\n  }\n  const sortedHeaders = arrayMap(this.headers, sortByIndexes);\n  const changes = [];\n  instance.alter('insert_col_start', this.indexes[0], this.indexes.length, 'UndoRedo.undo');\n  arrayEach(instance.getSourceDataArray(), (rowData, rowIndex) => {\n    arrayEach(ascendingIndexes, (changedIndex, contiquesIndex) => {\n      rowData[changedIndex] = sortedData[rowIndex][contiquesIndex];\n      changes.push([rowIndex, changedIndex, rowData[changedIndex]]);\n    });\n  });\n  instance.setSourceDataAtCell(changes, void 0, void 0, 'UndoRedo.undo');\n  if (typeof this.headers !== 'undefined') {\n    arrayEach(sortedHeaders, (headerData, columnIndex) => {\n      instance.getSettings().colHeaders[ascendingIndexes[columnIndex]] = headerData;\n    });\n  }\n  instance.batchExecution(() => {\n    // Restore row sequence in a case when all columns are removed. the original\n    // row sequence is lost in that case.\n    instance.rowIndexMapper.setIndexesSequence(this.rowPositions);\n    instance.columnIndexMapper.setIndexesSequence(this.columnPositions);\n  }, true);\n  instance.addHookOnce('afterViewRender', undoneCallback);\n  instance.render();\n};\nUndoRedo.RemoveColumnAction.prototype.redo = function (instance, redoneCallback) {\n  instance.addHookOnce('afterRemoveCol', redoneCallback);\n  instance.alter('remove_col', this.index, this.amount, 'UndoRedo.redo');\n};\n\n/**\n * Cell alignment action.\n *\n * @private\n * @param {Array} stateBefore The previous state.\n * @param {object} range The cell range.\n * @param {string} type The type of the alignment (\"top\", \"left\", \"bottom\" or \"right\").\n * @param {string} alignment The alignment CSS class.\n */\nUndoRedo.CellAlignmentAction = function (stateBefore, range, type, alignment) {\n  this.stateBefore = stateBefore;\n  this.range = range;\n  this.type = type;\n  this.alignment = alignment;\n};\nUndoRedo.CellAlignmentAction.prototype.undo = function (instance, undoneCallback) {\n  arrayEach(this.range, range => {\n    range.forAll((row, col) => {\n      // Alignment classes should only collected within cell ranges. We skip header coordinates.\n      if (row >= 0 && col >= 0) {\n        instance.setCellMeta(row, col, 'className', this.stateBefore[row][col] || ' htLeft');\n      }\n    });\n  });\n  instance.addHookOnce('afterViewRender', undoneCallback);\n  instance.render();\n};\nUndoRedo.CellAlignmentAction.prototype.redo = function (instance, undoneCallback) {\n  align(this.range, this.type, this.alignment, (row, col) => instance.getCellMeta(row, col), (row, col, key, value) => instance.setCellMeta(row, col, key, value));\n  instance.addHookOnce('afterViewRender', undoneCallback);\n  instance.render();\n};\n\n/**\n * Filters action.\n *\n * @private\n * @param {Array} conditionsStack An array of the filter condition.\n */\nUndoRedo.FiltersAction = function (conditionsStack) {\n  this.conditionsStack = conditionsStack;\n  this.actionType = 'filter';\n};\ninherit(UndoRedo.FiltersAction, UndoRedo.Action);\nUndoRedo.FiltersAction.prototype.undo = function (instance, undoneCallback) {\n  const filters = instance.getPlugin('filters');\n  instance.addHookOnce('afterViewRender', undoneCallback);\n  filters.conditionCollection.importAllConditions(this.conditionsStack.slice(0, this.conditionsStack.length - 1));\n  filters.filter();\n};\nUndoRedo.FiltersAction.prototype.redo = function (instance, redoneCallback) {\n  const filters = instance.getPlugin('filters');\n  instance.addHookOnce('afterViewRender', redoneCallback);\n  filters.conditionCollection.importAllConditions(this.conditionsStack);\n  filters.filter();\n};\n\n/**\n * Merge Cells action.\n *\n * @util\n */\nclass MergeCellsAction extends UndoRedo.Action {\n  constructor(instance, cellRange) {\n    super();\n    this.cellRange = cellRange;\n    const topStartCorner = this.cellRange.getTopStartCorner();\n    const bottomEndCorner = this.cellRange.getBottomEndCorner();\n    this.rangeData = instance.getData(topStartCorner.row, topStartCorner.col, bottomEndCorner.row, bottomEndCorner.col);\n  }\n  undo(instance, undoneCallback) {\n    const mergeCellsPlugin = instance.getPlugin('mergeCells');\n    instance.addHookOnce('afterViewRender', undoneCallback);\n    mergeCellsPlugin.unmergeRange(this.cellRange, true);\n    const topStartCorner = this.cellRange.getTopStartCorner();\n    instance.populateFromArray(topStartCorner.row, topStartCorner.col, this.rangeData, void 0, void 0, 'MergeCells');\n  }\n  redo(instance, redoneCallback) {\n    const mergeCellsPlugin = instance.getPlugin('mergeCells');\n    instance.addHookOnce('afterViewRender', redoneCallback);\n    mergeCellsPlugin.mergeRange(this.cellRange);\n  }\n}\nUndoRedo.MergeCellsAction = MergeCellsAction;\n\n/**\n * Unmerge Cells action.\n *\n * @util\n */\nclass UnmergeCellsAction extends UndoRedo.Action {\n  constructor(instance, cellRange) {\n    super();\n    this.cellRange = cellRange;\n  }\n  undo(instance, undoneCallback) {\n    const mergeCellsPlugin = instance.getPlugin('mergeCells');\n    instance.addHookOnce('afterViewRender', undoneCallback);\n    mergeCellsPlugin.mergeRange(this.cellRange, true);\n  }\n  redo(instance, redoneCallback) {\n    const mergeCellsPlugin = instance.getPlugin('mergeCells');\n    instance.addHookOnce('afterViewRender', redoneCallback);\n    mergeCellsPlugin.unmergeRange(this.cellRange, true);\n    instance.render();\n  }\n}\nUndoRedo.UnmergeCellsAction = UnmergeCellsAction;\n\n/**\n * ManualRowMove action.\n *\n * @TODO removeRow undo should works on logical index\n * @private\n * @param {number[]} rows An array with moved rows.\n * @param {number} finalIndex The destination index.\n */\nUndoRedo.RowMoveAction = function (rows, finalIndex) {\n  this.rows = rows.slice();\n  this.finalIndex = finalIndex;\n  this.actionType = 'row_move';\n};\ninherit(UndoRedo.RowMoveAction, UndoRedo.Action);\nUndoRedo.RowMoveAction.prototype.undo = function (instance, undoneCallback) {\n  const manualRowMove = instance.getPlugin('manualRowMove');\n  const copyOfRows = [].concat(this.rows);\n  const rowsMovedUp = copyOfRows.filter(a => a > this.finalIndex);\n  const rowsMovedDown = copyOfRows.filter(a => a <= this.finalIndex);\n  const allMovedRows = rowsMovedUp.sort((a, b) => b - a).concat(rowsMovedDown.sort((a, b) => a - b));\n  instance.addHookOnce('afterViewRender', undoneCallback);\n\n  // Moving rows from those with higher indexes to those with lower indexes when action was performed from bottom to top\n  // Moving rows from those with lower indexes to those with higher indexes when action was performed from top to bottom\n  for (let i = 0; i < allMovedRows.length; i += 1) {\n    const newPhysicalRow = instance.toVisualRow(allMovedRows[i]);\n    manualRowMove.moveRow(newPhysicalRow, allMovedRows[i]);\n  }\n  instance.render();\n  instance.deselectCell();\n  instance.selectRows(this.rows[0], this.rows[0] + this.rows.length - 1);\n};\nUndoRedo.RowMoveAction.prototype.redo = function (instance, redoneCallback) {\n  const manualRowMove = instance.getPlugin('manualRowMove');\n  instance.addHookOnce('afterViewRender', redoneCallback);\n  manualRowMove.moveRows(this.rows.slice(), this.finalIndex);\n  instance.render();\n  instance.deselectCell();\n  instance.selectRows(this.finalIndex, this.finalIndex + this.rows.length - 1);\n};\n\n/**\n * Enabling and disabling plugin and attaching its to an instance.\n *\n * @private\n */\nUndoRedo.prototype.init = function () {\n  const settings = this.instance.getSettings().undo;\n  const pluginEnabled = typeof settings === 'undefined' || settings;\n  if (!this.instance.undoRedo) {\n    this.instance.undoRedo = this;\n  }\n  if (pluginEnabled) {\n    this.instance.undoRedo.enable();\n  } else {\n    this.instance.undoRedo.disable();\n  }\n};\n\n/**\n * Registers shortcuts responsible for performing undo/redo.\n *\n * @private\n */\nUndoRedo.prototype.registerShortcuts = function () {\n  const shortcutManager = this.instance.getShortcutManager();\n  const gridContext = shortcutManager.getContext('grid');\n  const runOnlyIf = event => {\n    return !event.altKey; // right ALT in some systems triggers ALT+CTR\n  };\n\n  const config = {\n    runOnlyIf,\n    group: SHORTCUTS_GROUP\n  };\n  gridContext.addShortcuts([{\n    keys: [['Control/Meta', 'z']],\n    callback: () => {\n      this.undo();\n    }\n  }, {\n    keys: [['Control/Meta', 'y'], ['Control/Meta', 'Shift', 'z']],\n    callback: () => {\n      this.redo();\n    }\n  }], config);\n};\n\n/**\n * Unregister shortcuts responsible for performing undo/redo.\n *\n * @private\n */\nUndoRedo.prototype.unregisterShortcuts = function () {\n  const shortcutManager = this.instance.getShortcutManager();\n  const gridContext = shortcutManager.getContext('grid');\n  gridContext.removeShortcutsByGroup(SHORTCUTS_GROUP);\n};\n\n/**\n * @param {Array} changes 2D array containing information about each of the edited cells.\n * @param {string} source String that identifies source of hook call.\n * @returns {boolean}\n */\nfunction onAfterChange(changes, source) {\n  const instance = this;\n  if (source === 'loadData') {\n    return instance.undoRedo.clear();\n  }\n}\n\n/**\n * @param {Core} instance The Handsontable instance.\n */\nfunction exposeUndoRedoMethods(instance) {\n  /**\n   * {@link UndoRedo#undo}.\n   *\n   * @alias undo\n   * @memberof! Core#\n   * @returns {boolean}\n   */\n  instance.undo = function () {\n    return instance.undoRedo.undo();\n  };\n\n  /**\n   * {@link UndoRedo#redo}.\n   *\n   * @alias redo\n   * @memberof! Core#\n   * @returns {boolean}\n   */\n  instance.redo = function () {\n    return instance.undoRedo.redo();\n  };\n\n  /**\n   * {@link UndoRedo#isUndoAvailable}.\n   *\n   * @alias isUndoAvailable\n   * @memberof! Core#\n   * @returns {boolean}\n   */\n  instance.isUndoAvailable = function () {\n    return instance.undoRedo.isUndoAvailable();\n  };\n\n  /**\n   * {@link UndoRedo#isRedoAvailable}.\n   *\n   * @alias isRedoAvailable\n   * @memberof! Core#\n   * @returns {boolean}\n   */\n  instance.isRedoAvailable = function () {\n    return instance.undoRedo.isRedoAvailable();\n  };\n\n  /**\n   * {@link UndoRedo#clear}.\n   *\n   * @alias clearUndo\n   * @memberof! Core#\n   * @returns {boolean}\n   */\n  instance.clearUndo = function () {\n    return instance.undoRedo.clear();\n  };\n}\n\n/**\n * @param {Core} instance The Handsontable instance.\n */\nfunction removeExposedUndoRedoMethods(instance) {\n  delete instance.undo;\n  delete instance.redo;\n  delete instance.isUndoAvailable;\n  delete instance.isRedoAvailable;\n  delete instance.clearUndo;\n}\nconst hook = Hooks.getSingleton();\nhook.add('afterUpdateSettings', function () {\n  var _this$getPlugin;\n  (_this$getPlugin = this.getPlugin('undoRedo')) === null || _this$getPlugin === void 0 || _this$getPlugin.init();\n});\nhook.register('beforeUndo');\nhook.register('afterUndo');\nhook.register('beforeRedo');\nhook.register('afterRedo');\nUndoRedo.PLUGIN_KEY = PLUGIN_KEY;\nUndoRedo.SETTING_KEYS = true;\nexport default UndoRedo;","var _Handsontable$cellTyp, _Handsontable$editors, _Handsontable$rendere, _Handsontable$validat, _Handsontable$plugins;\nimport Handsontable, { CellCoords, CellRange } from \"./base.mjs\";\nimport { registerAllModules } from \"./registry.mjs\";\nimport EventManager, { getListenersCounter } from \"./eventManager.mjs\";\nimport { getRegisteredMapsCounter } from \"./translations/index.mjs\";\nimport jQueryWrapper from \"./helpers/wrappers/jquery.mjs\";\nimport GhostTable from \"./utils/ghostTable.mjs\";\nimport * as parseTableHelpers from \"./utils/parseTable.mjs\";\nimport * as arrayHelpers from \"./helpers/array.mjs\";\nimport * as browserHelpers from \"./helpers/browser.mjs\";\nimport * as dataHelpers from \"./helpers/data.mjs\";\nimport * as dateHelpers from \"./helpers/date.mjs\";\nimport * as featureHelpers from \"./helpers/feature.mjs\";\nimport * as functionHelpers from \"./helpers/function.mjs\";\nimport * as mixedHelpers from \"./helpers/mixed.mjs\";\nimport * as numberHelpers from \"./helpers/number.mjs\";\nimport * as objectHelpers from \"./helpers/object.mjs\";\nimport * as stringHelpers from \"./helpers/string.mjs\";\nimport * as unicodeHelpers from \"./helpers/unicode.mjs\";\nimport * as domHelpers from \"./helpers/dom/element.mjs\";\nimport * as domEventHelpers from \"./helpers/dom/event.mjs\";\nimport { getRegisteredEditorNames, getEditor, registerEditor } from \"./editors/registry.mjs\";\nimport { getRegisteredRendererNames, getRenderer, registerRenderer } from \"./renderers/registry.mjs\";\nimport { getRegisteredValidatorNames, getValidator, registerValidator } from \"./validators/registry.mjs\";\nimport { getRegisteredCellTypeNames, getCellType, registerCellType } from \"./cellTypes/registry.mjs\";\nimport { getPluginsNames, getPlugin, registerPlugin } from \"./plugins/registry.mjs\";\nimport { BasePlugin } from \"./plugins/base/index.mjs\";\nregisterAllModules();\njQueryWrapper(Handsontable);\n\n// TODO: Remove this exports after rewrite tests about this module\nHandsontable.__GhostTable = GhostTable;\nHandsontable._getListenersCounter = getListenersCounter; // For MemoryLeak tests\nHandsontable._getRegisteredMapsCounter = getRegisteredMapsCounter; // For MemoryLeak tests\nHandsontable.EventManager = EventManager;\n\n// Export all helpers to the Handsontable object\nconst HELPERS = [arrayHelpers, browserHelpers, dataHelpers, dateHelpers, featureHelpers, functionHelpers, mixedHelpers, numberHelpers, objectHelpers, stringHelpers, unicodeHelpers, parseTableHelpers];\nconst DOM = [domHelpers, domEventHelpers];\nHandsontable.helper = {};\nHandsontable.dom = {};\n\n// Fill general helpers.\narrayHelpers.arrayEach(HELPERS, helper => {\n  arrayHelpers.arrayEach(Object.getOwnPropertyNames(helper), key => {\n    if (key.charAt(0) !== '_') {\n      Handsontable.helper[key] = helper[key];\n    }\n  });\n});\n\n// Fill DOM helpers.\narrayHelpers.arrayEach(DOM, helper => {\n  arrayHelpers.arrayEach(Object.getOwnPropertyNames(helper), key => {\n    if (key.charAt(0) !== '_') {\n      Handsontable.dom[key] = helper[key];\n    }\n  });\n});\n\n// Export cell types.\nHandsontable.cellTypes = (_Handsontable$cellTyp = Handsontable.cellTypes) !== null && _Handsontable$cellTyp !== void 0 ? _Handsontable$cellTyp : {};\narrayHelpers.arrayEach(getRegisteredCellTypeNames(), cellTypeName => {\n  Handsontable.cellTypes[cellTypeName] = getCellType(cellTypeName);\n});\nHandsontable.cellTypes.registerCellType = registerCellType;\nHandsontable.cellTypes.getCellType = getCellType;\n\n// Export all registered editors from the Handsontable.\nHandsontable.editors = (_Handsontable$editors = Handsontable.editors) !== null && _Handsontable$editors !== void 0 ? _Handsontable$editors : {};\narrayHelpers.arrayEach(getRegisteredEditorNames(), editorName => {\n  Handsontable.editors[`${stringHelpers.toUpperCaseFirst(editorName)}Editor`] = getEditor(editorName);\n});\nHandsontable.editors.registerEditor = registerEditor;\nHandsontable.editors.getEditor = getEditor;\n\n// Export all registered renderers from the Handsontable.\nHandsontable.renderers = (_Handsontable$rendere = Handsontable.renderers) !== null && _Handsontable$rendere !== void 0 ? _Handsontable$rendere : {};\narrayHelpers.arrayEach(getRegisteredRendererNames(), rendererName => {\n  const renderer = getRenderer(rendererName);\n  if (rendererName === 'base') {\n    Handsontable.renderers.cellDecorator = renderer;\n  }\n  Handsontable.renderers[`${stringHelpers.toUpperCaseFirst(rendererName)}Renderer`] = renderer;\n});\nHandsontable.renderers.registerRenderer = registerRenderer;\nHandsontable.renderers.getRenderer = getRenderer;\n\n// Export all registered validators from the Handsontable.\nHandsontable.validators = (_Handsontable$validat = Handsontable.validators) !== null && _Handsontable$validat !== void 0 ? _Handsontable$validat : {};\narrayHelpers.arrayEach(getRegisteredValidatorNames(), validatorName => {\n  Handsontable.validators[`${stringHelpers.toUpperCaseFirst(validatorName)}Validator`] = getValidator(validatorName);\n});\nHandsontable.validators.registerValidator = registerValidator;\nHandsontable.validators.getValidator = getValidator;\n\n// Export all registered plugins from the Handsontable.\n// Make sure to initialize the plugin dictionary as an empty object. Otherwise, while\n// transpiling the files into ES and CommonJS format, the injected CoreJS helper\n// `import \"core-js/modules/es.object.get-own-property-names\";` won't be processed\n// by the `./config/plugin/babel/add-import-extension` babel plugin. Thus, the distribution\n// files will be broken. The reason is not known right now (probably it's caused by bug in\n// the Babel or missing something in the plugin).\nHandsontable.plugins = (_Handsontable$plugins = Handsontable.plugins) !== null && _Handsontable$plugins !== void 0 ? _Handsontable$plugins : {};\narrayHelpers.arrayEach(getPluginsNames(), pluginName => {\n  Handsontable.plugins[pluginName] = getPlugin(pluginName);\n});\nHandsontable.plugins[`${stringHelpers.toUpperCaseFirst(BasePlugin.PLUGIN_KEY)}Plugin`] = BasePlugin;\nHandsontable.plugins.registerPlugin = registerPlugin;\nHandsontable.plugins.getPlugin = getPlugin;\nexport { CellCoords, CellRange };\nexport default Handsontable;","import { AutoColumnSize } from \"./autoColumnSize/index.mjs\";\nimport { Autofill } from \"./autofill/index.mjs\";\nimport { AutoRowSize } from \"./autoRowSize/index.mjs\";\nimport { BasePlugin } from \"./base/index.mjs\";\nimport { BindRowsWithHeaders } from \"./bindRowsWithHeaders/index.mjs\";\nimport { CollapsibleColumns } from \"./collapsibleColumns/index.mjs\";\nimport { ColumnSorting } from \"./columnSorting/index.mjs\";\nimport { ColumnSummary } from \"./columnSummary/index.mjs\";\nimport { Comments } from \"./comments/index.mjs\";\nimport { ContextMenu } from \"./contextMenu/index.mjs\";\nimport { CopyPaste } from \"./copyPaste/index.mjs\";\nimport { CustomBorders } from \"./customBorders/index.mjs\";\nimport { DragToScroll } from \"./dragToScroll/index.mjs\";\nimport { DropdownMenu } from \"./dropdownMenu/index.mjs\";\nimport { ExportFile } from \"./exportFile/index.mjs\";\nimport { Filters } from \"./filters/index.mjs\";\nimport { Formulas } from \"./formulas/index.mjs\";\nimport { HiddenColumns } from \"./hiddenColumns/index.mjs\";\nimport { HiddenRows } from \"./hiddenRows/index.mjs\";\nimport { ManualColumnFreeze } from \"./manualColumnFreeze/index.mjs\";\nimport { ManualColumnMove } from \"./manualColumnMove/index.mjs\";\nimport { ManualColumnResize } from \"./manualColumnResize/index.mjs\";\nimport { ManualRowMove } from \"./manualRowMove/index.mjs\";\nimport { ManualRowResize } from \"./manualRowResize/index.mjs\";\nimport { MergeCells } from \"./mergeCells/index.mjs\";\nimport { MultiColumnSorting } from \"./multiColumnSorting/index.mjs\";\nimport { MultipleSelectionHandles } from \"./multipleSelectionHandles/index.mjs\";\nimport { NestedHeaders } from \"./nestedHeaders/index.mjs\";\nimport { NestedRows } from \"./nestedRows/index.mjs\";\nimport { PersistentState } from \"./persistentState/index.mjs\";\nimport { Search } from \"./search/index.mjs\";\nimport { TouchScroll } from \"./touchScroll/index.mjs\";\nimport { TrimRows } from \"./trimRows/index.mjs\";\nimport { UndoRedo } from \"./undoRedo/index.mjs\";\nimport { registerPlugin } from \"./registry.mjs\";\n/**\n * Registers all available plugins.\n */\nexport function registerAllPlugins() {\n  registerPlugin(AutoColumnSize);\n  registerPlugin(Autofill);\n  registerPlugin(AutoRowSize);\n  registerPlugin(BindRowsWithHeaders);\n  registerPlugin(CollapsibleColumns);\n  registerPlugin(ColumnSorting);\n  registerPlugin(ColumnSummary);\n  registerPlugin(Comments);\n  registerPlugin(ContextMenu);\n  registerPlugin(CopyPaste);\n  registerPlugin(CustomBorders);\n  registerPlugin(DragToScroll);\n  registerPlugin(DropdownMenu);\n  registerPlugin(ExportFile);\n  registerPlugin(Filters);\n  registerPlugin(Formulas);\n  registerPlugin(HiddenColumns);\n  registerPlugin(HiddenRows);\n  registerPlugin(ManualColumnFreeze);\n  registerPlugin(ManualColumnMove);\n  registerPlugin(ManualColumnResize);\n  registerPlugin(ManualRowMove);\n  registerPlugin(ManualRowResize);\n  registerPlugin(MergeCells);\n  registerPlugin(MultiColumnSorting);\n  registerPlugin(MultipleSelectionHandles);\n  registerPlugin(NestedHeaders);\n  registerPlugin(NestedRows);\n  registerPlugin(PersistentState);\n  registerPlugin(Search);\n  registerPlugin(TouchScroll);\n  registerPlugin(TrimRows);\n  registerPlugin(UndoRedo);\n}\nexport { AutoColumnSize, Autofill, AutoRowSize, BasePlugin, BindRowsWithHeaders, CollapsibleColumns, ColumnSorting, ColumnSummary, Comments, ContextMenu, CopyPaste, CustomBorders, DragToScroll, DropdownMenu, ExportFile, Filters, Formulas, HiddenColumns, HiddenRows, ManualColumnFreeze, ManualColumnMove, ManualColumnResize, ManualRowMove, ManualRowResize, MergeCells, MultiColumnSorting, MultipleSelectionHandles, NestedHeaders, NestedRows, PersistentState, Search, TouchScroll, TrimRows, UndoRedo };\nexport { getPlugin, getPluginsNames, registerPlugin } from \"./registry.mjs\";","/* eslint-disable handsontable/restricted-module-imports */\n// Since the Handsontable was modularized, importing some submodules is\n// restricted. Importing the main entry of the submodule can make the\n// \"dead\" code elimination process more difficult or even impossible.\n// The \"handsontable/restricted-module-imports\" rule is on guard.\n// This file exports the functions that allow include packages to\n// the Base version of the Handsontable, so that's why the rule is\n// disabled here (see more #7506).\nimport { registerAllEditors } from \"./editors/index.mjs\";\nimport { registerAllRenderers } from \"./renderers/index.mjs\";\nimport { registerAllValidators } from \"./validators/index.mjs\";\nimport { registerAllCellTypes } from \"./cellTypes/index.mjs\";\nimport { registerAllPlugins } from \"./plugins/index.mjs\";\n/* eslint-enable handsontable/restricted-module-imports */\nexport { registerAllEditors, registerAllRenderers, registerAllValidators, registerAllCellTypes, registerAllPlugins };\n\n/**\n * Registers all available Handsontable modules.\n */\nexport function registerAllModules() {\n  registerAllEditors();\n  registerAllRenderers();\n  registerAllValidators();\n  registerAllCellTypes();\n  registerAllPlugins();\n}","import \"core-js/modules/es.error.cause.js\";\n/**\n * @param {Core} Handsontable The Handsontable instance.\n */\nexport default function jQueryWrapper(Handsontable) {\n  // eslint-disable-next-line\n  const jQuery = typeof window === 'undefined' ? false : window.jQuery;\n  if (!jQuery) {\n    return;\n  }\n  jQuery.fn.handsontable = function (action) {\n    const $this = this.first(); // Use only first element from list\n    let instance = $this.data('handsontable');\n\n    // Init case\n    if (typeof action !== 'string') {\n      const userSettings = action || {};\n      if (instance) {\n        instance.updateSettings(userSettings);\n      } else {\n        instance = new Handsontable.Core($this[0], userSettings);\n        $this.data('handsontable', instance);\n        instance.init();\n      }\n      return $this;\n    }\n    let output;\n\n    // Action case\n    if (instance) {\n      if (typeof instance[action] !== 'undefined') {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        output = instance[action].call(instance, ...args);\n        if (action === 'destroy') {\n          $this.removeData();\n        }\n      } else {\n        throw new Error(`Handsontable do not provide action: ${action}`);\n      }\n    }\n    return output;\n  };\n}","import Handsontable from \"handsontable\";\nimport { baseRenderer } from \"handsontable/renderers\";\n\ntype AddClassWhenNeeded = (\n  td: HTMLTableCellElement,\n  cellProperties: Handsontable.CellProperties\n) => void;\n\nconst addClassWhenNeeded: AddClassWhenNeeded = (td, cellProperties) => {\n  const className = cellProperties.className;\n\n  if (className !== void 0) {\n    Handsontable.dom.addClass(td, className);\n  }\n};\n\nexport const progressBarRenderer: typeof baseRenderer = (\n  instance,\n  td,\n  row,\n  column,\n  prop,\n  value,\n  cellProperties\n) => {\n  const div = document.createElement(\"div\");\n\n  div.style.width = `${value * 10}px`;\n\n  addClassWhenNeeded(td, cellProperties);\n  Handsontable.dom.addClass(div, \"progressBar\");\n  Handsontable.dom.empty(td);\n\n  td.appendChild(div);\n};\n","import Handsontable from \"handsontable\";\nimport { baseRenderer } from \"handsontable/renderers\";\n\nexport const starsRenderer: typeof baseRenderer = function(\n  this: Handsontable,\n  instance,\n  td,\n  row,\n  column,\n  prop,\n  value,\n  cellProperties\n) {\n  Handsontable.renderers.TextRenderer.apply(this, [\n    instance,\n    td,\n    row,\n    column,\n    prop,\n    \"★\".repeat(value),\n    cellProperties\n  ]);\n};\n","import Handsontable from \"handsontable\";\nimport {\n  SELECTED_CLASS,\n  ODD_ROW_CLASS\n} from \"./constants\";\n\nconst headerAlignments = new Map([\n  [\"9\", \"htCenter\"],\n  [\"10\", \"htRight\"],\n  [\"12\", \"htCenter\"]\n]);\n\ntype AddClassesToRows = (\n  TD: HTMLTableCellElement,\n  row: number,\n  column: number,\n  prop: number | string,\n  value: any,\n  cellProperties: Handsontable.CellProperties\n) => void;\n\nexport const addClassesToRows: AddClassesToRows = (\n  TD,\n  row,\n  column,\n  prop,\n  value,\n  cellProperties\n) => {\n  // Adding classes to `TR` just while rendering first visible `TD` element\n  if (column !== 0) {\n    return;\n  }\n\n  const parentElement = TD.parentElement;\n\n  if (parentElement === null) {\n    return;\n  }\n\n  // Add class to selected rows\n  if (cellProperties.instance.getDataAtRowProp(row, \"0\")) {\n    Handsontable.dom.addClass(parentElement, SELECTED_CLASS);\n  } else {\n    Handsontable.dom.removeClass(parentElement, SELECTED_CLASS);\n  }\n\n  // Add class to odd TRs\n  if (row % 2 === 0) {\n    Handsontable.dom.addClass(parentElement, ODD_ROW_CLASS);\n  } else {\n    Handsontable.dom.removeClass(parentElement, ODD_ROW_CLASS);\n  }\n};\n\ntype DrawCheckboxInRowHeaders = (\n  this: Handsontable,\n  row: number,\n  TH: HTMLTableCellElement\n) => void;\n\nexport const drawCheckboxInRowHeaders: DrawCheckboxInRowHeaders = function drawCheckboxInRowHeaders(\n  row,\n  TH\n) {\n  const input = document.createElement(\"input\");\n\n  input.type = \"checkbox\";\n\n  if (row >= 0 && this.getDataAtRowProp(row, \"0\")) {\n    input.checked = true;\n  }\n\n  Handsontable.dom.empty(TH);\n\n  TH.appendChild(input);\n};\n\nexport function alignHeaders(this: Handsontable, column: number, TH: HTMLTableCellElement) {\n  if (column < 0) {\n    return;\n  }\n\n  const alignmentClass = this.isRtl() ? \"htRight\" : \"htLeft\";\n\n  if (TH.firstChild) {\n    if (headerAlignments.has(column.toString())) {\n      Handsontable.dom.removeClass(TH.firstChild as HTMLElement, alignmentClass);\n      Handsontable.dom.addClass(TH.firstChild as HTMLElement, headerAlignments.get(column.toString()) as string);\n    } else {\n      Handsontable.dom.addClass(TH.firstChild as HTMLElement, alignmentClass);\n    }\n  }\n};\n\ntype ChangeCheckboxCell = (\n  this: Handsontable,\n  event: MouseEvent,\n  coords: { row: number; col: number }\n) => void;\n\nexport const changeCheckboxCell: ChangeCheckboxCell = function changeCheckboxCell(\n  event,\n  coords\n) {\n  const target = event.target as HTMLInputElement;\n\n  if (coords.col === -1 && event.target && target.nodeName === \"INPUT\") {\n    event.preventDefault(); // Handsontable will render checked/unchecked checkbox by it own.\n\n    this.setDataAtRowProp(coords.row, \"0\", !target.checked);\n  }\n};\n","\nimport { HotTable } from '@handsontable/vue';\nimport 'handsontable/dist/handsontable.full.css';\n\nimport { getData } from \"../utils/constants\";\nimport { progressBarRenderer } from \"../renderers/progressBar\";\nimport { starsRenderer } from \"../renderers/stars\";\n\nimport {\n  alignHeaders,\n  drawCheckboxInRowHeaders,\n  addClassesToRows,\n  changeCheckboxCell\n} from \"../utils/hooks-callbacks\";\n\nexport default {\n  name: 'DataGrid',\n  data: function() {\n    return {\n      hotSettings: {\n        height: 450,\n        dropdownMenu: true,\n        hiddenColumns: {\n          indicators: true,\n        },\n        contextMenu: true,\n        multiColumnSorting: true,\n        filters: true,\n        rowHeaders: true,\n        afterOnCellMouseDown: changeCheckboxCell,\n        afterGetColHeader: alignHeaders,\n        afterGetRowHeader: drawCheckboxInRowHeaders,\n        beforeRenderer: addClassesToRows,\n        colWidths: [140, 192, 100, 90, 90, 110, 97, 100, 126],\n        colHeaders: [\n          \"Company name\",\n          \"Name\",\n          \"Sell date\",\n          \"In stock\",\n          \"Qty\",\n          \"Progress\",\n          \"Rating\",\n          \"Order ID\",\n          \"Country\"\n        ],\n        columns: [\n          { data: 1, type: \"text\" },\n          { data: 3, type: \"text\" },\n          {\n            data: 4,\n            type: \"date\",\n            allowInvalid: false\n          },\n          {\n            data: 6,\n            type: \"checkbox\",\n            className: \"htCenter\"\n          },\n          {\n            data: 7,\n            type: \"numeric\"\n          },\n          {\n            data: 8,\n            renderer: progressBarRenderer,\n            readOnly: true,\n            className: \"htMiddle\"\n          },\n          {\n            data: 9,\n            renderer: starsRenderer,\n            readOnly: true,\n            className: \"star htCenter\",\n          },\n          { data: 5, type: \"text\" },\n          { data: 2, type: \"text\" }\n        ],\n        licenseKey: \"non-commercial-and-evaluation\",\n      },\n      data: getData()\n    }\n  },\n  components: {\n    HotTable\n  }\n}\n","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-typescript/node_modules/ts-loader/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DataGrid.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../node_modules/@vue/cli-plugin-typescript/node_modules/ts-loader/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./DataGrid.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./DataGrid.vue?vue&type=template&id=92058da8&\"\nimport script from \"./DataGrid.vue?vue&type=script&lang=ts&\"\nexport * from \"./DataGrid.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./DataGrid.vue?vue&type=style&index=0&id=92058da8&prod&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n  <div id=\"app\">\n    <DataGrid/>\n  </div>\n</template>\n\n<script>\nimport DataGrid from \"./components/DataGrid\";\n\nexport default {\n  name: \"App\",\n  components: {\n    DataGrid\n  }\n};\n</script>\n","import mod from \"-!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=0d0273db&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from \"vue\";\nimport App from \"./App.vue\";\nimport Handsontable from 'handsontable';\nimport { HotTable } from '@handsontable/vue';\n\nconsole.log(`Handsontable: v${Handsontable.version} (${Handsontable.buildDate}) Wrapper: v${HotTable.version} Vue: v${Vue.version}`);\n\nVue.config.silent = true;\n\nnew Vue({\n  render: (h) => h(App)\n}).$mount(\"#app\");\n","var map = {\n\t\"./af\": 4466,\n\t\"./af.js\": 4466,\n\t\"./ar\": 9252,\n\t\"./ar-dz\": 6520,\n\t\"./ar-dz.js\": 6520,\n\t\"./ar-kw\": 2358,\n\t\"./ar-kw.js\": 2358,\n\t\"./ar-ly\": 3229,\n\t\"./ar-ly.js\": 3229,\n\t\"./ar-ma\": 1707,\n\t\"./ar-ma.js\": 1707,\n\t\"./ar-sa\": 3237,\n\t\"./ar-sa.js\": 3237,\n\t\"./ar-tn\": 8206,\n\t\"./ar-tn.js\": 8206,\n\t\"./ar.js\": 9252,\n\t\"./az\": 9665,\n\t\"./az.js\": 9665,\n\t\"./be\": 2888,\n\t\"./be.js\": 2888,\n\t\"./bg\": 5945,\n\t\"./bg.js\": 5945,\n\t\"./bm\": 6375,\n\t\"./bm.js\": 6375,\n\t\"./bn\": 758,\n\t\"./bn-bd\": 533,\n\t\"./bn-bd.js\": 533,\n\t\"./bn.js\": 758,\n\t\"./bo\": 5502,\n\t\"./bo.js\": 5502,\n\t\"./br\": 70,\n\t\"./br.js\": 70,\n\t\"./bs\": 295,\n\t\"./bs.js\": 295,\n\t\"./ca\": 6647,\n\t\"./ca.js\": 6647,\n\t\"./cs\": 4343,\n\t\"./cs.js\": 4343,\n\t\"./cv\": 9886,\n\t\"./cv.js\": 9886,\n\t\"./cy\": 2985,\n\t\"./cy.js\": 2985,\n\t\"./da\": 139,\n\t\"./da.js\": 139,\n\t\"./de\": 472,\n\t\"./de-at\": 994,\n\t\"./de-at.js\": 994,\n\t\"./de-ch\": 4824,\n\t\"./de-ch.js\": 4824,\n\t\"./de.js\": 472,\n\t\"./dv\": 9271,\n\t\"./dv.js\": 9271,\n\t\"./el\": 5195,\n\t\"./el.js\": 5195,\n\t\"./en-au\": 8847,\n\t\"./en-au.js\": 8847,\n\t\"./en-ca\": 1348,\n\t\"./en-ca.js\": 1348,\n\t\"./en-gb\": 9053,\n\t\"./en-gb.js\": 9053,\n\t\"./en-ie\": 1853,\n\t\"./en-ie.js\": 1853,\n\t\"./en-il\": 4135,\n\t\"./en-il.js\": 4135,\n\t\"./en-in\": 7122,\n\t\"./en-in.js\": 7122,\n\t\"./en-nz\": 3011,\n\t\"./en-nz.js\": 3011,\n\t\"./en-sg\": 6714,\n\t\"./en-sg.js\": 6714,\n\t\"./eo\": 197,\n\t\"./eo.js\": 197,\n\t\"./es\": 4293,\n\t\"./es-do\": 8029,\n\t\"./es-do.js\": 8029,\n\t\"./es-mx\": 1154,\n\t\"./es-mx.js\": 1154,\n\t\"./es-us\": 8357,\n\t\"./es-us.js\": 8357,\n\t\"./es.js\": 4293,\n\t\"./et\": 6720,\n\t\"./et.js\": 6720,\n\t\"./eu\": 5808,\n\t\"./eu.js\": 5808,\n\t\"./fa\": 4924,\n\t\"./fa.js\": 4924,\n\t\"./fi\": 5949,\n\t\"./fi.js\": 5949,\n\t\"./fil\": 6108,\n\t\"./fil.js\": 6108,\n\t\"./fo\": 2687,\n\t\"./fo.js\": 2687,\n\t\"./fr\": 6724,\n\t\"./fr-ca\": 9466,\n\t\"./fr-ca.js\": 9466,\n\t\"./fr-ch\": 867,\n\t\"./fr-ch.js\": 867,\n\t\"./fr.js\": 6724,\n\t\"./fy\": 9550,\n\t\"./fy.js\": 9550,\n\t\"./ga\": 4735,\n\t\"./ga.js\": 4735,\n\t\"./gd\": 9878,\n\t\"./gd.js\": 9878,\n\t\"./gl\": 9787,\n\t\"./gl.js\": 9787,\n\t\"./gom-deva\": 6492,\n\t\"./gom-deva.js\": 6492,\n\t\"./gom-latn\": 5339,\n\t\"./gom-latn.js\": 5339,\n\t\"./gu\": 836,\n\t\"./gu.js\": 836,\n\t\"./he\": 9315,\n\t\"./he.js\": 9315,\n\t\"./hi\": 3724,\n\t\"./hi.js\": 3724,\n\t\"./hr\": 3730,\n\t\"./hr.js\": 3730,\n\t\"./hu\": 7657,\n\t\"./hu.js\": 7657,\n\t\"./hy-am\": 1918,\n\t\"./hy-am.js\": 1918,\n\t\"./id\": 2215,\n\t\"./id.js\": 2215,\n\t\"./is\": 4095,\n\t\"./is.js\": 4095,\n\t\"./it\": 2446,\n\t\"./it-ch\": 1947,\n\t\"./it-ch.js\": 1947,\n\t\"./it.js\": 2446,\n\t\"./ja\": 9545,\n\t\"./ja.js\": 9545,\n\t\"./jv\": 1437,\n\t\"./jv.js\": 1437,\n\t\"./ka\": 1330,\n\t\"./ka.js\": 1330,\n\t\"./kk\": 8900,\n\t\"./kk.js\": 8900,\n\t\"./km\": 5620,\n\t\"./km.js\": 5620,\n\t\"./kn\": 7081,\n\t\"./kn.js\": 7081,\n\t\"./ko\": 8130,\n\t\"./ko.js\": 8130,\n\t\"./ku\": 5295,\n\t\"./ku.js\": 5295,\n\t\"./ky\": 8578,\n\t\"./ky.js\": 8578,\n\t\"./lb\": 8773,\n\t\"./lb.js\": 8773,\n\t\"./lo\": 6366,\n\t\"./lo.js\": 6366,\n\t\"./lt\": 2532,\n\t\"./lt.js\": 2532,\n\t\"./lv\": 3902,\n\t\"./lv.js\": 3902,\n\t\"./me\": 3636,\n\t\"./me.js\": 3636,\n\t\"./mi\": 4059,\n\t\"./mi.js\": 4059,\n\t\"./mk\": 6005,\n\t\"./mk.js\": 6005,\n\t\"./ml\": 2982,\n\t\"./ml.js\": 2982,\n\t\"./mn\": 5543,\n\t\"./mn.js\": 5543,\n\t\"./mr\": 4898,\n\t\"./mr.js\": 4898,\n\t\"./ms\": 4145,\n\t\"./ms-my\": 8766,\n\t\"./ms-my.js\": 8766,\n\t\"./ms.js\": 4145,\n\t\"./mt\": 4780,\n\t\"./mt.js\": 4780,\n\t\"./my\": 3445,\n\t\"./my.js\": 3445,\n\t\"./nb\": 4372,\n\t\"./nb.js\": 4372,\n\t\"./ne\": 2862,\n\t\"./ne.js\": 2862,\n\t\"./nl\": 2254,\n\t\"./nl-be\": 3293,\n\t\"./nl-be.js\": 3293,\n\t\"./nl.js\": 2254,\n\t\"./nn\": 6986,\n\t\"./nn.js\": 6986,\n\t\"./oc-lnc\": 6623,\n\t\"./oc-lnc.js\": 6623,\n\t\"./pa-in\": 3802,\n\t\"./pa-in.js\": 3802,\n\t\"./pl\": 2560,\n\t\"./pl.js\": 2560,\n\t\"./pt\": 6467,\n\t\"./pt-br\": 3595,\n\t\"./pt-br.js\": 3595,\n\t\"./pt.js\": 6467,\n\t\"./ro\": 5092,\n\t\"./ro.js\": 5092,\n\t\"./ru\": 2238,\n\t\"./ru.js\": 2238,\n\t\"./sd\": 5555,\n\t\"./sd.js\": 5555,\n\t\"./se\": 7291,\n\t\"./se.js\": 7291,\n\t\"./si\": 3013,\n\t\"./si.js\": 3013,\n\t\"./sk\": 7005,\n\t\"./sk.js\": 7005,\n\t\"./sl\": 284,\n\t\"./sl.js\": 284,\n\t\"./sq\": 7274,\n\t\"./sq.js\": 7274,\n\t\"./sr\": 1344,\n\t\"./sr-cyrl\": 1521,\n\t\"./sr-cyrl.js\": 1521,\n\t\"./sr.js\": 1344,\n\t\"./ss\": 9573,\n\t\"./ss.js\": 9573,\n\t\"./sv\": 8865,\n\t\"./sv.js\": 8865,\n\t\"./sw\": 1769,\n\t\"./sw.js\": 1769,\n\t\"./ta\": 1108,\n\t\"./ta.js\": 1108,\n\t\"./te\": 2002,\n\t\"./te.js\": 2002,\n\t\"./tet\": 3164,\n\t\"./tet.js\": 3164,\n\t\"./tg\": 6599,\n\t\"./tg.js\": 6599,\n\t\"./th\": 1806,\n\t\"./th.js\": 1806,\n\t\"./tk\": 2315,\n\t\"./tk.js\": 2315,\n\t\"./tl-ph\": 3296,\n\t\"./tl-ph.js\": 3296,\n\t\"./tlh\": 3102,\n\t\"./tlh.js\": 3102,\n\t\"./tr\": 5886,\n\t\"./tr.js\": 5886,\n\t\"./tzl\": 6963,\n\t\"./tzl.js\": 6963,\n\t\"./tzm\": 1203,\n\t\"./tzm-latn\": 4676,\n\t\"./tzm-latn.js\": 4676,\n\t\"./tzm.js\": 1203,\n\t\"./ug-cn\": 1444,\n\t\"./ug-cn.js\": 1444,\n\t\"./uk\": 2676,\n\t\"./uk.js\": 2676,\n\t\"./ur\": 5026,\n\t\"./ur.js\": 5026,\n\t\"./uz\": 9895,\n\t\"./uz-latn\": 1873,\n\t\"./uz-latn.js\": 1873,\n\t\"./uz.js\": 9895,\n\t\"./vi\": 5646,\n\t\"./vi.js\": 5646,\n\t\"./x-pseudo\": 7377,\n\t\"./x-pseudo.js\": 7377,\n\t\"./yo\": 9632,\n\t\"./yo.js\": 9632,\n\t\"./zh-cn\": 5665,\n\t\"./zh-cn.js\": 5665,\n\t\"./zh-hk\": 627,\n\t\"./zh-hk.js\": 627,\n\t\"./zh-mo\": 7922,\n\t\"./zh-mo.js\": 7922,\n\t\"./zh-tw\": 8973,\n\t\"./zh-tw.js\": 8973\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 5131;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkvue_template\"] = self[\"webpackChunkvue_template\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(4877); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["render","_vm","this","_c","_self","attrs","staticRenderFns","ref","data","hotSettings","to2dArray","arr","ilen","length","i","extendArray","extension","push","pivot","pivotedArr","rowCount","colCount","j","arrayReduce","array","iteratee","accumulator","initFromArray","index","iterable","result","Array","isArray","from","arrayFilter","predicate","resIndex","value","arrayMap","arrayEach","arraySum","a","b","arrayMax","arrayMin","arrayAvg","arrayFlatten","initial","concat","arrayUnique","unique","indexOf","getDifferenceOfArrays","_len","arguments","arrays","_key","first","rest","filteredFirstArray","filter","includes","getIntersectionOfArrays","_len2","_key2","getUnionOfArrays","_len3","_key3","set","Set","has","add","stringToArray","delimiter","undefined","split","toSingleLine","strings","expressions","previousValue","currentValue","valueWithoutWhiteSpaces","replace","expressionForIndex","trim","stringify","toString","variable","isUndefined","isEmpty","isRegExp","Object","prototype","call","_m","_hd","v","parseInt","_pi","_ss","s","l","_cp","_norm","_extractTime","_ignored","location","test","host","_notified","consoleMessages","invalid","expired","_ref","keyValidityDate","hotVersion","missing","non_commercial","domMessages","_ref2","_injectProductInfo","key","element","hasValidType","isNonCommercial","toLowerCase","consoleMessageState","domMessageState","schemaValidity","_checkKeySchema","releaseDate","moment","releaseDays","Math","floor","toDate","getTime","keyValidityDays","format","message","console","parentNode","messageNode","document","createElement","className","innerHTML","insertBefore","nextSibling","z","p","c","shift","abs","padStart","toUpperCaseFirst","string","toUpperCase","substr","equalsIgnoreCase","randomString","s4","random","substring","isPercentValue","substitute","template","variables","match","name","charAt","stripTags","sanitize","ALLOWED_TAGS","options","A11Y_TABINDEX","val","A11Y_TREEGRID","A11Y_PRESENTATION","A11Y_GRIDCELL","A11Y_ROWHEADER","A11Y_COLUMNHEADER","A11Y_ROW","A11Y_MENU","A11Y_MENU_ITEM","A11Y_COMBOBOX","A11Y_LISTBOX","A11Y_OPTION","A11Y_CHECKBOX","A11Y_SCOPE_COL","A11Y_SCOPE_ROW","A11Y_TEXT","A11Y_LABEL","A11Y_HIDDEN","A11Y_DISABLED","A11Y_MULTISELECTABLE","A11Y_HASPOPUP","A11Y_ROWCOUNT","A11Y_COLCOUNT","A11Y_ROWINDEX","A11Y_COLINDEX","A11Y_EXPANDED","A11Y_SORT","A11Y_READONLY","A11Y_INVALID","A11Y_CHECKED","A11Y_SELECTED","A11Y_AUTOCOMPLETE","A11Y_CONTROLS","A11Y_ACTIVEDESCENDANT","A11Y_LIVE","A11Y_RELEVANT","A11Y_SETSIZE","A11Y_POSINSET","getParent","level","iteration","parent","elementToCheck","nodeType","Node","DOCUMENT_FRAGMENT_NODE","isThisHotChild","thisHotContainer","closestHandsontableContainer","closest","getFrameElement","frame","getPrototypeOf","frameElement","getParentWindow","hasAccessToParentWindow","nodes","until","ELEMENT_NODE","nodeName","closestDown","matched","contains","isChildOf","child","node","queriedParents","defaultView","slice","querySelectorAll","ownerDocument","previousSibling","overlayContainsElement","overlayType","root","overlayElement","parentElement","querySelector","filterEmptyClassNames","classNames","x","filterRegexes","list","returnBoth","regexFree","regexes","entry","isRegex","RegExp","hasClass","classList","addClass","removeClass","stringClasses","regexClasses","remove","forEach","regexClassName","currentClassName","setAttribute","domElement","attributes","attributeValue","attributeInfo","removeAttribute","attributesToRemove","stringAttributes","regexAttributes","attributeNameToRemove","attributeRegex","getAttributeNames","attributeName","removeTextNodes","removeChild","childs","childNodes","empty","lastChild","HTML_CHARACTERS","fastInnerHTML","content","sanitizeContent","fastInnerText","firstChild","textContent","appendChild","createTextNode","isVisible","documentElement","next","impl","Error","getComputedStyle","display","offset","rootDocument","rootWindow","offsetLeft","offsetTop","lastElem","offsetParent","body","style","position","pageXOffset","scrollLeft","pageYOffset","scrollTop","left","top","getWindowScrollTop","window","scrollY","getWindowScrollLeft","scrollX","getScrollTop","getScrollLeft","getScrollableElement","props","el","overflow","overflowX","overflowY","clientHeight","scrollHeight","clientWidth","scrollWidth","getTrimmingContainer","base","computedStyle","allowedProperties","property","getPropertyValue","propertyY","propertyX","getStyle","prop","innerWidth","innerHeight","styleProp","matchesCSSRules","rule","selectorText","type","CSSRule","STYLE_RULE","msMatchesSelector","matches","currentStyle","offsetWidth","offsetHeight","addEvent","event","callback","addEventListener","removeEvent","removeEventListener","getCaretPosition","selectionStart","getSelectionEndPosition","selectionEnd","getSelectionText","text","getSelection","selection","createRange","clearTextSelection","removeAllRanges","setCaretPosition","pos","endPos","setSelectionRange","focus","err","elementParent","parentDisplayValue","cachedScrollbarWidth","walkontableCalculateScrollbarWidth","inner","height","width","outer","boxSizing","visibility","w1","w2","getScrollbarWidth","hasVerticalScrollbar","hasHorizontalScrollbar","setOverlayPosition","overlayElem","transform","getCssTransform","resetCssTransform","isInput","inputs","contentEditable","isOutsideInput","hasAttribute","selectElementIfAllowed","activeElement","select","isDetached","observeVisibilityChangeOnce","elementToBeObserved","visibilityObserver","IntersectionObserver","entries","observer","isIntersecting","unobserve","observe","makeElementContentEditableAndSelectItsContent","invisibleSelection","ariaHidden","range","sel","selectNodeContents","addRange","removeContentEditableFromElementAndDeselect","selectedElement","removeInvisibleSelectionClass","runWithSelectedContendEditableElement","isFunction","func","throttle","wait","lastCalled","lastCallThrottled","lastTimer","_throttle","args","stamp","Date","now","needCall","remaining","apply","clearTimeout","setTimeout","throttleAfterHits","hits","funcThrottle","remainHits","_clearHits","_throttleAfterHits","clearHits","debounce","_debounce","pipe","_len4","functions","_key4","firstFunc","restFunc","_len5","_key5","acc","fn","partial","_len6","params","_key6","_len7","restParams","_key7","curry","argsLength","given","argsSoFar","_len8","_key8","passedArgsSoFar","curryRight","_len9","_key9","reverse","fastCall","context","arg1","arg2","arg3","arg4","arg5","arg6","duckSchema","object","schema","fill","objectEach","inherit","Child","Parent","constructor","extend","target","writableKeys","hasWritableKeys","deepExtend","deepClone","obj","JSON","parse","clone","mixin","Base","MIXINS","mixins","mixinItem","MIXIN_NAME","getter","initialValue","propertyName","initValue","newValue","isObject","setter","defineProperty","get","configurable","isObjectEqual","object1","object2","defineGetter","writable","enumerable","hasOwnProperty","getProperty","names","nameItem","setProperty","workingObject","propName","deepObjectSize","recursObjLen","createObjectPropListener","defaultValue","propertyToListen","privateProperty","holder","_touched","isTouched","tester","testerFunc","ua","vendor","browsers","chrome","chromeWebKit","edge","edgeWebKit","firefox","firefoxWebKit","mobile","safari","platforms","mac","platform","win","linux","ios","setBrowserMeta","userAgent","navigator","setPlatformMeta","isChrome","isChromeWebKit","isFirefox","isFirefoxWebKit","isSafari","isEdge","isEdgeWebKit","isMobileBrowser","isIOS","isIpadOS","maxTouchPoints","isWindowsOS","isMacOS","isLinuxOS","KEY_CODES","ALT","ARROW_DOWN","ARROW_LEFT","ARROW_RIGHT","ARROW_UP","AUDIO_DOWN","AUDIO_MUTE","AUDIO_UP","BACKSPACE","CAPS_LOCK","COMMA","COMMAND_LEFT","COMMAND_RIGHT","COMMAND_FIREFOX","CONTROL","DELETE","END","ENTER","ESCAPE","F1","F2","F3","F4","F5","F6","F7","F8","F9","F10","F11","F12","F13","F14","F15","F16","F17","F18","F19","HOME","INSERT","MEDIA_NEXT","MEDIA_PLAY_PAUSE","MEDIA_PREV","MEDIA_STOP","NULL","NUM_LOCK","PAGE_DOWN","PAGE_UP","PAUSE","PERIOD","SCROLL_LOCK","SHIFT","SPACE","TAB","A","C","D","F","L","O","P","S","V","X","Y","Z","FUNCTION_KEYS","isPrintableChar","keyCode","isFunctionKey","isCtrlKey","keys","isCtrlMetaKey","isKey","baseCode","stopImmediatePropagation","isImmediatePropagationEnabled","cancelBubble","isImmediatePropagationStopped","isRightClick","button","isLeftClick","offsetRelativeTo","untilElement","offsetX","y","offsetY","HTMLElement","warn","error","REGISTERED_HOOKS","REMOVED_MESSAGE","REMOVED_HOOKS","Map","DEPRECATED_HOOKS","Hooks","getSingleton","getGlobalSingleton","globalBucket","createEmptyBucket","bucket","create","hook","getBucket","pluginHookBucket","hookName","removedInVersion","register","skip","foundInitialHook","initialHook","cb","once","runOnce","run","p1","p2","p3","p4","p5","p6","globalHandlers","res","localHandlers","destroy","isRegistered","deregister","splice","isDeprecated","getRegistered","globalSingleton","collection","staticRegister","namespace","subCollection","item","getItem","hasItem","getNames","getValues","values","registeredEditorClasses","WeakMap","RegisteredEditor","editorClass","instances","Clazz","getConstructor","getInstance","hotInstance","guid","_getEditorInstance","editor","_register","_getItem","EDITOR_TYPE","editorWrapper","listenersCounter","EventManager","eventListeners","eventName","callbackProxy","extendEvent","eventManager","tmpEvent","onlyOwnEvents","len","clearEvents","clear","destroyWithOwnEventsOnly","fireEvent","bubbles","cancelable","view","detail","screenX","screenY","clientX","clientY","ctrlKey","altKey","shiftKey","metaKey","relatedTarget","createEvent","initMouseEvent","createEventObject","dispatchEvent","nativeStopImmediatePropagation","getListenersCounter","SHORTCUTS_GROUP_NAVIGATION","EditorManager","instance","tableMeta","destroyed","lock","activeEditor","cellProperties","addHook","onAfterDocumentKeyDown","isListening","openEditor","_wt","update","coords","elem","onCellDblClick","lockEditor","unlockEditor","destroyEditor","revertOriginal","closeEditor","getActiveEditor","prepareEditor","isWaiting","dataSaved","highlight","getSelectedRangeLast","isHeader","row","col","modifiedCellCoords","runHooks","visualRowToCheck","visualColumnToCheck","getCellMeta","isCellEditable","clearActiveEditor","td","getCell","getCellEditor","colToProp","originalValue","getSourceDataAtCell","toPhysicalRow","prepare","isEditorOpened","isOpened","newInitialValue","enableFullEditMode","scrollToFocusedCell","beginEditing","restoreOriginalValue","isCtrlPressed","finishEditing","closeEditorAndSaveChanges","closeEditorAndRestoreOriginalValue","rowIndexMapper","columnIndexMapper","isCellHidden","isHidden","toPhysicalColumn","readOnly","moveSelectionAfterEnter","isShiftPressed","enterMoves","transformStart","shortcutManager","getShortcutManager","editorContext","getContext","runOnlySelectedConfig","runOnlyIf","getSelected","group","addShortcuts","getDirectionFactor","editorManager","_classPrivateMethodInitSpec","privateSet","_checkPrivateRedeclaration","_classPrivateFieldInitSpec","privateMap","privateCollection","TypeError","_classPrivateMethodGet","receiver","_classPrivateFieldGet","descriptor","_classExtractFieldDescriptor","_classApplyDescriptorGet","_classPrivateFieldSet","_classApplyDescriptorSet","action","FOCUS_MODES","freeze","CELL","MIXED","_hot","_focusMode","_refocusDelay","_refocusElementGetter","_getCurrentHighlightCoords","WeakSet","_getSelectedCell","_manageFocus","_onUpdateSettings","FocusManager","_this","getSettings","imeFastEdit","_onUpdateSettings2","_manageFocus2","getFocusMode","setFocusMode","focusMode","getRefocusDelay","setRefocusDelay","delay","setRefocusElementGetter","getRefocusElementFunction","getRefocusElement","_classPrivateFieldGet2","TEXTAREA","focusOnHighlightedCell","selectedCell","_classPrivateFieldGet3","currentHighlightCoords","_getCurrentHighlightCoords2","currentlySelectedHighlight","_getSelectedCell2","elementToBeFocused","preventScroll","refocusToEditorTextarea","refocusElement","_registerTimeout","lastSelectedRange","selectedCellCoords","blur","addHookOnce","newSettings","ESCAPED_HTML_CHARS","regEscapedChars","map","join","isHTMLTable","instanceToHTML","hasColumnHeaders","hasColHeaders","hasRowHeaders","countRows","countCols","getData","TABLE","THEAD","TBODY","rowModifier","columnModifier","isColumnHeadersRow","CELLS","column","isRowHeadersColumn","cell","getColHeader","getRowHeader","cellData","hidden","rowspan","colspan","TR","_dataToHTML","input","inputLen","rowData","columnsLen","columnsResult","parsedCellData","repeat","htmlToGridSettings","settingsObj","fragment","createDocumentFragment","tempElem","checkElement","escapedAdjacentHTML","cellFragment","openingTag","cellValue","lastIndexOf","closingTag","insertAdjacentHTML","generator","trElement","cells","reduce","cols","colSpan","fixedRowsBottom","tFoot","rows","fixedRowsTop","thRowsLen","tHead","thRows","tr","isDataRow","nestedHeaders","headersRow","headers","header","currentIndex","nextHeader","label","colHeaders","children","dataRows","tBodies","sections","section","dataArr","r","mergeCells","rowHeaders","cellsLen","cellId","rowSpan","findIndex","rstart","cstart","styleAttr","getAttribute","ignoreMerge","isNumeric","additionalDelimiters","isNaN","isFinite","d","valueOf","isNumericLike","rangeEach","rangeFrom","rangeTo","rangeEachReverse","valueAccordingPercent","percent","clamp","minValue","maxValue","min","max","ASC","DESC","ORDER_MAP","DEFAULT_ERROR_PRIORITY_EXISTS","priority","DEFAULT_ERROR_PRIORITY_NAN","createPriorityMap","errorPriorityExists","errorPriorityNaN","priorityMap","addItem","getItems","order","right","sort","DEFAULT_ERROR_ID_EXISTS","id","createUniqueMap","errorIdExists","uniqueMap","removeItem","delete","getId","itemId","find","DEFAULT_ERROR_ITEM_EXISTS","createUniqueSet","errorItemExists","uniqueSet","ERROR_PLUGIN_REGISTERED","pluginName","ERROR_PRIORITY_REGISTERED","ERROR_PRIORITY_NAN","priorityPluginsQueue","uniquePluginsQueue","uniquePluginsList","getPluginsNames","getPlugin","unifiedPluginName","hasPlugin","registerPlugin","pluginClass","unifyPluginArguments","_registerPlugin","PLUGIN_KEY","PLUGIN_PRIORITY","renderer","RENDERER_TYPE","validator","VALIDATOR_TYPE","requestAnimationFrame","cancelAnimationFrame","isTouchSupported","comparisonFunction","getComparisonFunction","language","Intl","Collator","compare","String","localeCompare","privatePool","facadeGetter","domBindings","wtSettings","wtTable","selectionManager","selectedCellBeforeTouchEnd","dblClickTimeout","dblClickOrigin","registerEvents","onContextMenu","onMouseOver","onMouseOut","initTouchEvents","onTouchStart","onTouchEnd","momentumScrolling","_timeout","ongoing","getSetting","touchApplied","initMouseEvents","onMouseUp","onMouseDown","selectedCellWasTouched","touchTarget","priv","cellUnderFinger","parentCell","coordsOfCellUnderFinger","rowTouched","rowSelected","colTouched","colSelected","TD","getCoords","getFocusSelection","cellRange","getAreaSelection","to","getParentNode","realTarget","callListener","table","lastMouseOver","lastTD","nextTD","_this$parentCell","parentCellCoords","isCellsRange","isEventCancelable","interactiveElements","tagName","preventDefault","listener","getSettingPure","ColumnFilter","total","countTH","offsetted","unOffsetted","renderedToSource","sourceToRendered","offsettedTH","unOffsettedTH","visibleRowHeadedColumnToSourceColumn","sourceColumnToVisibleRowHeadedColumn","RowFilter","visibleColHeadedRowToSourceRow","sourceRowToVisibleColHeadedRow","WORKING_SPACE_ALL","WORKING_SPACE_TOP","WORKING_SPACE_BOTTOM","ViewSize","currentSize","nextSize","currentOffset","nextOffset","setSize","size","setOffset","ViewSizeSet","workingSpace","sharedSize","getViewSize","isShared","isPlaceOn","append","viewSize","prepend","OrderView","rootNode","nodesPool","childNodeType","sizeSet","visualIndex","collectedNodes","isSharedViewSet","getNode","getCurrentNode","getRenderedChildCount","childElementCount","firstElementChild","nextElementSibling","start","newNode","isSharedPlacedOnTop","replaceChild","end","SharedOrderView","prependView","orderView","appendView","NodesPool","setRootDocument","obtain","BaseRenderer","renderedNodes","setTable","adjust","RowHeadersRenderer","super","orderViews","sourceRowIndex","obtainOrderView","sourceColumnIndex","rowsToRender","rowHeaderFunctions","rowHeadersCount","visibleRowIndex","renderedRowToSource","getRenderedNode","cellsView","renderedColumnToSource","visibleColumnIndex","TH","isAriaEnabled","ColumnHeadersRenderer","columnHeadersCount","columnsToRender","allColumnsToRender","theadChildrenLength","rowHeaderIndex","columnHeaderFunctions","renderedColumnIndex","ColGroupRenderer","columnUtils","getHeaderWidth","getStretchedColumnWidth","performanceWarningAppeared","RowsRenderer","_this$table$rowUtils$","_this$table$rowUtils","rowUtils","dataAccessObject","columnHeaders","CellsRenderer","rowHeadersView","cellRenderer","TableRenderer","colGroup","rowFilter","columnFilter","setAxisUtils","setViewportSize","rowsCount","columnsCount","setFilters","setHeaderContentRenderers","setRenderers","rowIndex","columnIndex","calculateWidths","rowHeight","getHeight","Renderer","COLGROUP","ColumnUtils","headerWidths","getWidth","sourceIndex","calculator","wtViewport","columnsRenderCalculator","stretchedWidth","getHeaderHeight","oversizedHeight","oversizedColumnHeaders","cloneSource","mainHolder","scrollbarCompensation","rowHeaderWidthSetting","refreshStretching","getViewportWidth","defaultColumnWidth","RowUtils","oversizedRows","CLONE_TOP","CLONE_BOTTOM","CLONE_INLINE_START","CLONE_TOP_INLINE_START_CORNER","CLONE_BOTTOM_INLINE_START_CORNER","CLONE_TYPES","CLONE_CLASS_NAMES","_defineProperty","_toPropertyKey","arg","_toPrimitive","hint","prim","Symbol","toPrimitive","Number","Table","isMaster","wot","rootTable","spreader","createSpreader","hider","createHider","createHolder","wtRootElement","alignOverlaysWithTrimmingContainer","fixTableDomTree","correctHeaderWidth","origRowHeaderWidth","_modifyRowHeaderWidth","tableRenderer","is","overlayTypeName","draw","fastDraw","wtOverlays","totalRows","totalColumns","syncScroll","runFastDraw","holderOffset","createRenderCalculators","leftScrollPos","inlineStartOverlay","getScrollPosition","previousState","updateStateOfRendering","createVisibleCalculators","refresh","tableOffset","parentTableOffset","startRow","getFirstRenderedRow","startColumn","getFirstRenderedColumn","performRedraw","skipRender","workspaceWidth","resetOversizedRows","getRenderedRowsCount","getRenderedColumnsCount","containerWidth","markOversizedColumnHeaders","adjustColumnHeaderHeights","markOversizedRows","applyToDOM","hiderWidth","tableWidth","getWorkspaceWidth","adjustElementsSize","positionChanged","topOverlay","resetFixedPosition","bottomOverlay","topInlineStartCornerOverlay","bottomInlineStartCornerOverlay","refreshAll","setActiveOverlay","syncScrollWithMaster","drawn","markIfOversizedColumnHeader","sourceColIndex","defaultRowHeight","previousColHeaderHeight","currentHeader","currentHeaderHeight","columnHeaderHeightSetting","getColumnHeaderHeight","getColumnHeader","sourceRow","hookResult","isRowBeforeRenderedRows","isRowAfterRenderedRows","isColumnBeforeRenderedColumns","isColumnAfterRenderedColumns","getRow","renderedRowIndex","_this$rowFilter","_this$rowFilter2","getColumnHeaders","THs","visibleColumn","renderedRow","visibleRow","getRowHeaders","cellElement","CONTAINER","cellIndex","createCellCoords","expectedTableHeight","actualTableHeight","previousRowHeight","rowInnerHeight","currentTr","rowHeader","getRowHeight","getTrForRow","isColumnHeaderRendered","isRowHeaderRendered","getLastRenderedRow","getLastRenderedColumn","isColumnAfterViewport","getLastVisibleColumn","isRowAfterViewport","getLastVisibleRow","isColumnBeforeViewport","isLastRowFullyVisible","isLastColumnFullyVisible","allRowsInViewport","getVisibleRowsCount","allColumnsInViewport","getVisibleColumnsCount","getColumnWidth","sourceColumn","hasDefinedSize","hasTableHeight","hasTableWidth","getTotalWidth","getTotalHeight","rowHeaderWidthFactory","widths","_correctRowHeaderWidth","rowHeaderWidth","stickyRowsTop","getFirstVisibleRow","getColumnHeadersCount","calculatedColumns","startColumnRendered","getFirstVisibleColumn","startColumnVisible","endColumn","endColumnRendered","endColumnVisible","countColumnsRendered","countColumnsVisible","getRowHeadersCount","TopOverlayTable","Scroll","scrollViewport","snapToTop","snapToRight","snapToBottom","snapToLeft","scrolledHorizontally","scrollViewportHorizontally","scrolledVertically","scrollViewportVertically","isInteger","firstVisibleColumn","lastVisibleColumn","autoSnapping","fixedColumnsStart","scrollTo","lastScrolledColumnPos","firstVisibleRow","lastVisibleRow","lastScrolledRowPos","mainTableScrollableElement","rootElementOffset","totalTableHeight","windowHeight","windowScrollTop","rowsHeight","sumCellSizes","totalTableWidth","windowWidth","windowScrollLeft","columnsWidth","getRowHeaderWidth","isRtl","inlineStartRootElementOffset","tableRect","getBoundingClientRect","docOffsetWidth","_isRtl","CellCoords","isValid","tableParams","countRowHeaders","countColHeaders","isEqual","cellCoords","isCell","isSouthEastOf","testedCoords","isNorthWestOf","isSouthWestOf","isNorthEastOf","normalize","toObject","CellRange","setHighlight","setFrom","setTo","isSingle","isSingleCell","isSingleHeader","containsHeaders","getOuterHeight","getOuterWidth","fromRow","toRow","fromCol","toCol","getCellsCount","topStart","getOuterTopStartCorner","bottomEnd","getOuterBottomEndCorner","includesRange","overlaps","getOuterTopLeftCorner","getOuterBottomRightCorner","isOverlappingHorizontally","getOuterTopRightCorner","isOverlappingVertically","expand","_createCellCoords","expandByRange","expandingRange","initialDirection","getDirection","expandingTopStart","expandingBottomEnd","resultTopRow","resultTopCol","resultBottomRow","resultBottomCol","finalFrom","finalTo","setDirection","getVerticalDirection","flipDirectionVertically","getHorizontalDirection","flipDirectionHorizontally","direction","getOuterBottomLeftCorner","getTopStartCorner","getTopLeftCorner","getTopEndCorner","getBottomEndCorner","getBottomRightCorner","getBottomStartCorner","getTopRightCorner","getBottomLeftCorner","getOuterTopEndCorner","getOuterBottomStartCorner","isCorner","expandedRange","getOppositeCorner","getBordersSharedWith","thisBorders","bottom","rangeBorders","getInner","out","getAll","forAll","breakIteration","CoreAbstract","settings","wtScroll","createScrollDao","findOriginalHeaders","originalHeaders","clen","createCellRange","drawInterrupted","topmost","getViewport","wtEvent","getTableDao","columnsVisibleCalculator","count","startRowRendered","rowsRenderCalculator","startRowVisible","rowsVisibleCalculator","endRowRendered","endRow","endRowVisible","countRowsRendered","countRowsVisible","Clone","source","cloneOverlay","overlay","createTable","viewport","Overlay","wotInstance","trimmingContainer","makeClone","needFullRender","shouldBeRendered","changed","reset","updateTrimmingContainer","updateMainScrollableElement","getRelativeCellPosition","windowScroll","fixedColumnStart","fixedRowTop","fixedRowBottom","spreaderOffset","getRelativeStartPosition","elementOffset","offsetObject","getRelativeCellPositionWithinWindow","getRelativeCellPositionWithinHolder","onFixedRowTop","onFixedColumn","absoluteRootElementPosition","horizontalOffset","verticalOffset","absoluteRootElementStartPosition","absoluteOverlayPosition","onFixedRowBottom","tableScrollPosition","horizontal","vertical","clonedTable","tableParent","mainTableRole","preventOverflow","nextCycleRenderFlag","holderStyle","hiderStyle","rootStyle","CORNER_DEFAULT_STYLE","borderWidth","borderStyle","borderColor","TopOverlay","cachedFixedRowsTop","overlayRoot","overlayPosition","skipInnerBorderAdjusting","hiderRect","ceil","rootHeight","getOverlayOffset","adjustHeaderBordersPosition","setScrollPosition","onScroll","sum","force","adjustRootElementSize","adjustRootChildrenSize","scrollbarWidth","overlayRootStyle","hasScrollbarRight","tableHeight","selectionCornerOffset","startPosition","syncOverlayOffset","styleProperty","bottomEdge","sourceInstance","newY","getTableParentOffset","viewportHeight","getViewportHeight","overlayOffset","overlayRootHeight","maxOffset","masterParent","areFixedRowsTopChanged","stickyRowsBottom","BottomOverlayTable","BottomOverlay","cachedFixedRowsBottom","repositionOverlay","cloneRoot","bottomOffset","hasVerticalScroll","getWorkspaceHeight","hasHorizontalScroll","docClientHeight","areFixedRowsBottomChanged","calculatedRows","stickyColumnsStart","InlineStartOverlayTable","InlineStartOverlay","scrollbarHeight","hasScrollbarBottom","sourceCol","beyondRendered","newX","columnWidth","viewportWidth","rootWidth","overlayRootWidth","TopInlineStartCornerOverlayTable","TopInlineStartCornerOverlay","BottomInlineStartCornerOverlayTable","BottomInlineStartCornerOverlay","inlineStartOffset","Overlays","ResizeObserver","scrollbarSize","isOverflowHidden","scrollableElement","initOverlays","keyPressed","spreaderLastSize","verticalScrolling","horizontalScrolling","initBrowserLineHeight","registerListeners","lastScrollX","lastScrollY","getOverlays","includeMaster","overlays","lineHeight","lineHeightFalback","fontSize","browserLineHeight","topOverlayScrollableElement","inlineStartOverlayScrollableElement","onKeyDown","onKeyUp","onTableScroll","passive","isHighPixelRatio","devicePixelRatio","isScrollOnWindow","preventWheel","wheelEventOptions","onCloneWheel","resizeTimeout","resizeObserver","deregisterListeners","masterHorizontal","masterVertical","syncScrollPositions","shouldNotWheelVertically","shouldNotWheelHorizontally","isScrollPossible","translateMouseWheelToScroll","deltaY","wheelDeltaY","deltaX","wheelDeltaX","deltaMode","isScrollVerticallyPossible","scrollVertically","isScrollHorizontallyPossible","scrollHorizontally","delta","previousScroll","topHolder","leftHolder","bottomHolder","master","updateMainScrollableElements","disconnect","wasSpreaderSizeUpdated","updateLastSpreaderSize","needsUpdating","headerRowSize","headerColumnSize","rootElemScrollHeight","rootElemScrollWidth","holderScrollHeight","holderScrollWidth","getParentOverlay","syncOverlayTableClassNames","masterTable","Settings","getDefaults","defaults","facade","isDataViewInstance","externalRowCalculator","stretchH","currentRowClassName","currentColumnClassName","freezeOverlays","shouldRenderInlineStartOverlay","shouldRenderTopOverlay","shouldRenderBottomOverlay","minSpareRows","selections","hideBorderOnMouseDownOver","viewportRowCalculatorOverride","viewportColumnCalculatorOverride","onCellMouseDown","onCellContextMenu","onCellMouseOver","onCellMouseOut","onCellMouseUp","onCellCornerMouseDown","onCellCornerDblClick","beforeDraw","onDraw","onBeforeRemoveCellClassNames","onAfterDrawSelection","onBeforeDrawBorders","onBeforeViewportScrollHorizontally","onBeforeViewportScrollVertically","onScrollHorizontally","onScrollVertically","onBeforeTouchScroll","onAfterMomentumScroll","onBeforeStretchingColumnWidth","onModifyRowHeaderWidth","onModifyGetCellCoords","onBeforeHighlightingRowHeader","onBeforeHighlightingColumnHeader","onWindowResize","onContainerElementResize","renderAllRows","groups","columnHeaderHeight","headerClassName","rtlMode","ariaTags","settingValue","param1","param2","param3","param4","MasterTable","trimmingElement","trimmingElementParent","trimmingHeight","trimmingOverflow","cloneNode","cloneHeight","isTableVisible","overlayName","hasOversizedColumnHeadersMarked","rowHeaderCount","columnCount","RENDER_TYPE","FULLY_VISIBLE_TYPE","ViewportRowsCalculator","DEFAULT_HEIGHT","viewportSize","scrollOffset","totalItems","itemSizeFn","overrideFn","calculationType","rowHeightFn","horizontalScrollbarHeight","isVisibleInTrimmingContainer","calculate","zeroBasedScrollOffset","needReverse","startPositions","firstVisibleRowHeight","lastVisibleRowHeight","mostBottomScrollOffset","topRowOffset","bottomRowOffset","at","viewportSum","ViewportColumnsCalculator","DEFAULT_WIDTH","stretchMode","stretchingItemWidthFn","columnWidthFn","stretchingColumnWidthFn","stretchAllRatio","stretchLastWidth","stretch","totalTargetWidth","needVerifyLastColumnWidth","stretchAllColumnsWidth","firstVisibleColumnWidth","lastVisibleColumnWidth","compensatedViewportWidth","_getColumnWidth","mostRightScrollOffset","inlineEndColumnOffset","inlineStartColumnOffset","totalWidth","totalColumnsWidth","sumAll","permanentColumnWidth","remainingSize","Infinity","lastColumnWidth","baseWidth","_getStretchedAllColumnWidth","_getStretchedLastColumnWidth","sumRatioWidth","round","newStretchedWidth","Viewport","NaN","currentDocument","topOverlayTrimmingContainer","elemHeight","inlineStartOverlayTrimmingContainer","inlineStart","getContainerFillWidth","sumColumnWidths","stretchSetting","mainContainer","dummyElement","fillWidth","getWorkspaceOffset","containerHeight","rowHeadersWidthSetting","createRowsCalculator","fixedRowsHeight","topScrollPosition","topParentOffset","createColumnsCalculator","inlineStartScrollPosition","inlineStartParentOffset","fixedColumnsWidth","proposedRowsVisibleCalculator","proposedColumnsVisibleCalculator","areAllProposedVisibleRowsAlreadyRendered","areAllProposedVisibleColumnsAlreadyRendered","renderedStartRow","renderedEndRow","renderedStartColumn","renderedEndColumn","resetHasOversizedColumnHeadersMarked","_selection","_activeOverlaysWot","_scanCellsRange","SelectionScanner","activeOverlaysWot","setActiveSelection","scan","selectionType","elements","scanColumnsInHeadersRange","scanRowsInHeadersRange","scanCellsRange","scanRowsInCellsRange","scanColumnsInCellsRange","topRow","topColumn","bottomRow","bottomColumn","getCorners","renderedColumnsCount","cursor","headerLevel","positiveBasedHeaderLevel","newSourceCol","columnCursor","selectionWidth","renderedRowsCount","newSourceRow","rowCursor","selectionHeight","_scanCellsRange2","additionalSelectionClass","layerLevel","Border","mouseDown","main","topStyle","bottomStyle","startStyle","endStyle","cornerDefaultStyle","cornerCenterPointOffset","corner","cornerStyle","createBorders","documentBody","onMouseEnter","bounds","isOutside","mouseEvent","handler","handlerEvent","borderDivs","div","hide","backgroundColor","color","border","createMultipleSelectorHandles","disappear","bordersHolder","selectionHandles","topHitArea","bottomHitArea","hitAreaWidth","styles","hitAreaStyle","handleStyle","background","isPartRange","areaSelection","updateMultipleSelectionHandlesPosition","inlinePosProperty","topStyles","topHitAreaStyles","bottomStyles","bottomHitAreaStyles","handleBorderSize","handleSize","hitAreaSize","bottomHandlerInline","bottomHandlerAreaInline","bottomHandlerTop","bottomHandlerAreaTop","cornerVisible","zIndex","appear","corners","disabled","fromColumn","toColumn","columnHeader","fromTD","isMultiple","toTD","fromOffset","toOffset","containerOffset","minTop","minLeft","inlineStartPos","fromWidth","gridRightPos","isEntireColumnSelected","modifiedValues","getDimensionsFromHeader","fromTH","isEntireRowSelected","borderTopWidth","cornerVisibleSetting","checkRow","checkCol","borderRightWidth","trimToWindow","cornerHalfWidth","cornerHalfHeight","toTdOffsetLeft","cornerOverlappingContainer","cornerEdge","toTdOffsetTop","cornerBottomEdge","borderBottomWidth","startRowIndex","endRowIndex","startColumnIndex","endColumnIndex","fromIndex","toIndex","headerIndex","rootHotElement","getHeaderFn","dimensionFn","entireSelectionClassname","dimension","dimensionProperty","startHeader","endHeader","columnHeaderLevelCount","startHeaderOffset","endOffset","changeBorderStyle","borderElement","changeBorderToDefaultStyle","defaultBorder","toggleHiddenClass","_selections","_scanner","_appliedClasses","_destroyListeners","_selectionBorders","_resetCells","SelectionManager","activeWot","getFocus","createLayeredArea","getBorderInstance","borders","getBorderInstances","destroyBorders","_resetCells2","classNamesMap","createLayers","addLocalHook","borderInstance","classNamesLayers","_classPrivateFieldGet4","_classPrivateFieldGet5","occurrenceCount","_","flat","cellAttributes","headerAttributes","appliedOverlaysClasses","classesToRemove","_classPrivateFieldGet6","_classPrivateFieldGet7","Walkontable","getViewportDao","exportSettingsAsClassNames","toExport","allClassNames","newClassNames","WalkontableFacade","settingsOrInstance","_wot","_initFromSettings","getOverlayName","hasSetting","isShiftKey","controller","cellCoordsFactory","currentSelection","isSelected","getSelectedRange","current","selectedCorner","isSelectedByCorner","selectedRow","isSelectedByRowHeader","setRangeEnd","selectRows","selectColumns","allowRightClickSelection","inInSelection","performSelection","setRangeStart","selectAll","disableHeadersHighlight","focusPosition","mouseOver","selectedColumn","isSelectedByColumnHeader","tableProps","handlers","handleMouseEvent","_ref3","rootInstanceSymbol","registerAsRootInstance","hasValidParameter","rootSymbol","isRootInstance","_columnHeadersCount","_rowHeadersCount","TableView","selectionMouseDown","lastWidth","lastHeight","createElements","initializeWalkontable","isRenderSuspended","forceFullRender","postponedAdjustElementsSize","renderCall","getCellAtCoords","rootElement","originalStyle","tableClassName","container","isTextSelectionAllowed","fragmentSelection","isInProgress","finish","isOutsideInputElement","isSelectedByAnyHeader","unlisten","originalTarget","eventX","eventY","elementFromPoint","isTargetWebComponent","outsideClickDeselects","deselectCell","translateFromRenderableToVisualCoords","translateFromRenderableToVisualIndex","renderableRow","renderableColumn","visualRow","getVisualFromRenderableIndex","visualColumn","countRenderableIndexes","indexMapper","maxElements","consideredElements","getNotTrimmedIndexesLength","firstNotHiddenIndex","getNearestNotHiddenIndex","getRenderableFromVisualIndex","countRenderableColumns","maxCols","countRenderableRows","maxRows","countNotHiddenRowIndexes","incrementBy","countNotHiddenIndexes","countNotHiddenColumnIndexes","renderableIndexesCount","firstVisibleIndex","renderableIndex","notHiddenIndexes","countNotHiddenFixedColumnsStart","visualFixedColumnsStart","countNotHiddenFixedRowsTop","visualFixedRowsTop","countNotHiddenFixedRowsBottom","visualFixedRowsBottom","countRenderableColumnsInRange","columnStart","columnEnd","countRenderableRowsInRange","rowStart","rowEnd","isMainTableNotFullyCoveredByOverlays","fixedAllRows","fixedAllColumns","countRenderedRows","countRenderedCols","walkontableConfig","isEnabled","getDataAtCell","headerRenderers","renderableRowIndex","visualRowIndex","appendRowHeader","visualColumnsIndex","appendColHeader","getColWidth","visualColumnIndex","getDataAtRowProp","hasHook","getCellRenderer","isDestroyed","refreshDimensions","wt","visualCoords","listen","activeWt","beforeRender","afterRender","rowMapper","areColumnHeadersSelected","columnMapper","areRowHeadersSelected","highlightMeta","newVisualRow","newVisualColumn","currentRow","currentColumn","cornersOfSelection","selectedRange","selectionRangeSize","selectionForLayer","peekByIndex","borderClassName","startRenderableRow","startRenderableColumn","endRenderableRow","endRenderableColumn","visualCorners","renderableColumnIndex","visualIndexes","visualRowFrom","visualColumnFrom","visualRowTo","visualColumnTo","calc","viewportOffset","viewportRowRenderingOffset","renderableRows","firstRenderedRow","lastRenderedRow","viewportColumnRenderingOffset","renderableColumns","firstRenderedColumn","lastRenderedColumn","setLastSize","which","stopPropagation","observeDOMVisibility","isChildOfTableBody","isSelectedOnlyCell","isCellEdited","isMouseDown","_this$instance$getSel","_this$instance$getSel2","updateCellHeader","span","renderedIndex","parentOverlay","fromCharCode","maximumVisibleElementWidth","inlineOffset","maxWidth","maximumVisibleElementHeight","topOffset","workspaceHeight","maxHeight","getLastSize","getFirstFullyVisibleRow","getLastFullyVisibleRow","getFirstFullyVisibleColumn","getLastFullyVisibleColumn","COLUMN_LABEL_BASE","COLUMN_LABEL_BASE_LENGTH","spreadsheetColumnLabel","modulo","dividend","columnLabel","spreadsheetColumnIndex","createSpreadsheetData","columns","_rows","createSpreadsheetObjectData","createEmptySpreadsheetData","dataRowToChangesArray","dataRow","rowOffset","changesArray","countFirstRowKeys","isArrayOfArrays","every","isArrayOfObjects","DataSource","dataSource","hot","dataType","propToCol","modifyRowData","toArray","getByRange","setData","getAtColumn","getAtCell","getAtRow","getAllProps","newDataRow","getAtPhysicalCell","rangeStart","rangeEnd","setAtCell","valueHolder","columnOrProp","startCol","endCol","modifiedSourceLength","localHooks","_localHooks","runLocalHooks","clearLocalHooks","IndexMap","initValueOrFn","indexedValues","getValueAtIndex","setValues","setValueAtIndex","setDefaultValues","getLength","init","insert","getListWithInsertedItems","insertionIndex","insertedIndexes","getListWithRemovedItems","removedIndexes","getDecreasedIndexes","removedIndex","getIncreasedIndexes","firstInsertedIndex","amountOfIndexes","IndexesSequence","listAfterUpdate","insertedValuesMapping","insertedIndex","ordinalNumber","PhysicalIndexToValueMap","HidingMap","getHiddenIndexes","indexesList","physicalIndex","LinkedPhysicalIndexToValueMap","orderOfIndexes","clearValue","getEntries","TrimmingMap","getTrimmedIndexes","isTrimmed","availableIndexMapTypes","createIndexMap","mapType","registeredMaps","MapCollection","uniqueName","indexMap","unregister","unregisterAll","removeFromEvery","insertToEvery","initEvery","getRegisteredMapsCounter","AggregatedCollection","aggregationFunction","fallbackValue","mergedValuesCache","getMergedValues","readFromCache","mapsValuesMatrix","indexesValuesMatrix","mapsLength","valuesForIndex","mapIndex","getMergedValueAtIndex","valueAtIndex","updateCache","_currentInitialChanges","ChangesObserver","subscribe","_write","unsubscribe","changes","_writeInitialChanges","initialChanges","arrayDiff","baseArray","newArray","op","oldValue","_observers","_indexMatrix","_currentIndexState","_isMatrixIndexesInitialized","_initialIndexValue","ChangesObservable","initialIndexValue","createObserver","emit","indexesState","currentIndexState","IndexMapper","indexesSequence","trimmingMapsCollection","some","hidingMapsCollection","variousMapsCollection","hidingChangesObservable","notTrimmedIndexesCache","notHiddenIndexesCache","isBatched","indexesSequenceChanged","indexesChangeSource","trimmedIndexesChanged","hiddenIndexesChanged","renderablePhysicalIndexesCache","fromPhysicalToVisualIndexesCache","fromVisualToRenderableIndexesCache","changedMap","suspendOperations","resumeOperations","createChangesObserver","indexMapType","createAndRegisterIndexMap","indexName","registerMap","numberOfIndexes","getNumberOfIndexes","unregisterMap","getPhysicalFromVisualIndex","getPhysicalFromRenderableIndex","getVisualFromPhysicalIndex","fromVisualIndex","searchDirection","searchAlsoOtherWayAround","visibleIndexes","initToLength","fitToLength","currentIndexCount","indexesToBeRemoved","removeIndexes","insertIndexes","getIndexesSequence","setIndexesSequence","indexes","getNotTrimmedIndexes","getNotHiddenIndexes","getNotHiddenIndexesLength","getRenderableIndexes","notTrimmedIndexes","getRenderableIndexesLength","moveIndexes","movedIndexes","finalIndex","physicalMovedIndexes","notTrimmedIndexesLength","movedIndexesLength","notMovedIndexes","notTrimmedNotMovedItems","destinationPosition","firstInsertedVisualIndex","nthVisibleIndex","firstInsertedPhysicalIndex","nextIndex","stepsFromStart","anyCachedIndexChanged","cacheFromPhysicalToVisualIndexes","cacheFromVisualToRenderableIndexes","nrOfNotTrimmedIndexes","nrOfRenderableIndexes","extendNotExistingKeys","normalizeLanguageCode","languageCode","languageCodePattern","partsOfLanguageCode","exec","warnUserAboutLanguageRegistration","pluralize","phrasePropositions","pluralForm","isPluralizable","registerGloballyPhraseFormatter","getGlobalPhraseFormatters","formatterFn","CONTEXT_MENU_ITEMS_NAMESPACE","CM_ALIAS","CONTEXTMENU_ITEMS_NO_ITEMS","CONTEXTMENU_ITEMS_ROW_ABOVE","CONTEXTMENU_ITEMS_ROW_BELOW","CONTEXTMENU_ITEMS_INSERT_LEFT","CONTEXTMENU_ITEMS_INSERT_RIGHT","CONTEXTMENU_ITEMS_REMOVE_ROW","CONTEXTMENU_ITEMS_REMOVE_COLUMN","CONTEXTMENU_ITEMS_UNDO","CONTEXTMENU_ITEMS_REDO","CONTEXTMENU_ITEMS_READ_ONLY","CONTEXTMENU_ITEMS_CLEAR_COLUMN","CONTEXTMENU_ITEMS_COPY","CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_HEADERS","CONTEXTMENU_ITEMS_COPY_WITH_COLUMN_GROUP_HEADERS","CONTEXTMENU_ITEMS_COPY_COLUMN_HEADERS_ONLY","CONTEXTMENU_ITEMS_CUT","CONTEXTMENU_ITEMS_FREEZE_COLUMN","CONTEXTMENU_ITEMS_UNFREEZE_COLUMN","CONTEXTMENU_ITEMS_MERGE_CELLS","CONTEXTMENU_ITEMS_UNMERGE_CELLS","CONTEXTMENU_ITEMS_ADD_COMMENT","CONTEXTMENU_ITEMS_EDIT_COMMENT","CONTEXTMENU_ITEMS_REMOVE_COMMENT","CONTEXTMENU_ITEMS_READ_ONLY_COMMENT","CONTEXTMENU_ITEMS_ALIGNMENT","CONTEXTMENU_ITEMS_ALIGNMENT_LEFT","CONTEXTMENU_ITEMS_ALIGNMENT_CENTER","CONTEXTMENU_ITEMS_ALIGNMENT_RIGHT","CONTEXTMENU_ITEMS_ALIGNMENT_JUSTIFY","CONTEXTMENU_ITEMS_ALIGNMENT_TOP","CONTEXTMENU_ITEMS_ALIGNMENT_MIDDLE","CONTEXTMENU_ITEMS_ALIGNMENT_BOTTOM","CONTEXTMENU_ITEMS_BORDERS","CONTEXTMENU_ITEMS_BORDERS_TOP","CONTEXTMENU_ITEMS_BORDERS_RIGHT","CONTEXTMENU_ITEMS_BORDERS_BOTTOM","CONTEXTMENU_ITEMS_BORDERS_LEFT","CONTEXTMENU_ITEMS_REMOVE_BORDERS","CONTEXTMENU_ITEMS_NESTED_ROWS_INSERT_CHILD","CONTEXTMENU_ITEMS_NESTED_ROWS_DETACH_CHILD","CONTEXTMENU_ITEMS_HIDE_COLUMN","CONTEXTMENU_ITEMS_SHOW_COLUMN","CONTEXTMENU_ITEMS_HIDE_ROW","CONTEXTMENU_ITEMS_SHOW_ROW","FILTERS_NAMESPACE","FILTERS_CONDITIONS_NAMESPACE","FILTERS_CONDITIONS_NONE","FILTERS_CONDITIONS_EMPTY","FILTERS_CONDITIONS_NOT_EMPTY","FILTERS_CONDITIONS_EQUAL","FILTERS_CONDITIONS_NOT_EQUAL","FILTERS_CONDITIONS_BEGINS_WITH","FILTERS_CONDITIONS_ENDS_WITH","FILTERS_CONDITIONS_CONTAINS","FILTERS_CONDITIONS_NOT_CONTAIN","FILTERS_CONDITIONS_BY_VALUE","FILTERS_CONDITIONS_GREATER_THAN","FILTERS_CONDITIONS_GREATER_THAN_OR_EQUAL","FILTERS_CONDITIONS_LESS_THAN","FILTERS_CONDITIONS_LESS_THAN_OR_EQUAL","FILTERS_CONDITIONS_BETWEEN","FILTERS_CONDITIONS_NOT_BETWEEN","FILTERS_CONDITIONS_AFTER","FILTERS_CONDITIONS_BEFORE","FILTERS_CONDITIONS_TODAY","FILTERS_CONDITIONS_TOMORROW","FILTERS_CONDITIONS_YESTERDAY","FILTERS_DIVS_FILTER_BY_CONDITION","FILTERS_DIVS_FILTER_BY_VALUE","FILTERS_LABELS_CONJUNCTION","FILTERS_LABELS_DISJUNCTION","FILTERS_VALUES_BLANK_CELLS","FILTERS_BUTTONS_SELECT_ALL","FILTERS_BUTTONS_CLEAR","FILTERS_BUTTONS_OK","FILTERS_BUTTONS_CANCEL","FILTERS_BUTTONS_PLACEHOLDER_SEARCH","FILTERS_BUTTONS_PLACEHOLDER_VALUE","FILTERS_BUTTONS_PLACEHOLDER_SECOND_VALUE","CHECKBOX_RENDERER_NAMESPACE","CHECKBOX_CHECKED","CHECKBOX_UNCHECKED","dictionary","dictionaryKeys","DEFAULT_LANGUAGE_CODE","registerGloballyLanguageDictionary","getGlobalLanguageDictionary","hasGlobalLanguageDictionary","getGlobalLanguagesDictionaries","registerLanguageDictionary","languageCodeOrDictionary","dictionaryObject","extendLanguageDictionary","getLanguageDictionary","hasLanguageDictionary","getLanguagesDictionaries","getTranslatedPhrase","dictionaryKey","argumentsForFormatters","languageDictionary","formattedPhrase","getFormattedPhrase","formattedPhrasePropositions","formatter","getValidLanguageCode","normalizedLanguageCode","ACTIVE_HEADER_TYPE","HEADER_TYPE","AREA_TYPE","FOCUS_TYPE","FILL_TYPE","ROW_TYPE","COLUMN_TYPE","CUSTOM_SELECTION_TYPE","Selection","oldCoords","newCoords","VisualSelection","visualCellRange","commit","trimToVisibleCellsRangeOnly","visibleFromCoords","getNearestNotHiddenCoords","visibleToCoords","rowSearchDirection","columnSearchDirection","nextVisibleRow","nextVisibleColumn","trimmedCellRange","createRenderableCellRange","syncWith","broaderCellRange","coordsFrom","rowDirection","columnDirection","renderableHighlight","visualToRenderableCoords","cellCoordsVisual","currentHighlight","cellCoordsRenderable","getVisualCorners","renderableToVisualCoords","visualFromCoords","visualToCoords","renderableFromCoords","renderableToCoords","createHighlight","activeHeaderClassName","restOptions","areaCornerVisible","columnClassName","cellCornerVisible","rowClassName","_Symbol$iterator","_createHighlight","iterator","Highlight","isEnabledFor","highlightType","disableHighlight","disabledCellSelection","useLayerLevel","getFill","_createHighlight2","layeredAreas","getLayeredAreas","createArea","areas","getAreas","createRowHeader","createColumnHeader","createActiveRowHeader","activeRowHeaders","getActiveRowHeaders","createActiveColumnHeader","activeColumnHeaders","getActiveColumnHeaders","createActiveCornerHeader","activeCornerHeaders","getActiveCornerHeaders","createRowHighlight","rowHighlights","getRowHighlights","createColumnHighlight","columnHighlights","getColumnHighlights","getCustomSelections","customSelections","addCustomSelection","selectionInstance","cacheMap","highlightFactory","SelectionRange","ranges","pop","previous","_range","_options","_offset","_setOffsetSize","_clampCoords","_getTableSize","_visualToZeroBasedCoords","_zeroBasedToVisualCoords","Transformation","rowDelta","colDelta","createMissingRecords","_setOffsetSize2","navigableHeaders","highlightRenderableCoords","rowTransformDir","colTransformDir","_getTableSize2","_visualToZeroBasedCoords2","minSpareCols","autoWrapRow","autoWrapCol","rawCoords","nextColumn","previousColumn","nextRow","previousRow","rowDir","colDir","_clampCoords2","_zeroBasedToVisualCoords2","transformEnd","newVisualCoords","zeroBasedCoords","SELECTION_TYPE_UNRECOGNIZED","SELECTION_TYPE_EMPTY","SELECTION_TYPE_ARRAY","SELECTION_TYPE_OBJECT","SELECTION_TYPES","ARRAY_TYPE_PATTERN","rootCall","childCall","detectSelectionType","selectionRanges","_callSymbol","isRootCall","firstItem","isArrayType","normalizeSelectionFactory","keepDirection","isObjectType","origRowStart","origColumnStart","origRowEnd","origColumnEnd","transformSelectionToColumnDistance","selectionSchemaNormalizer","unorderedIndexes","columnNonHeaderStart","amount","orderedIndexes","normalizedColumnRanges","transformSelectionToRowDistance","rowNonHeaderStart","normalizedRowRanges","_disableHeadersHighlight","currentHeaderClassName","currentColClassName","isDisabledCellSelection","isCellCornerVisible","isAreaCornerVisible","transformation","begin","inProgress","multipleSelection","highlightCoords","isMultipleMode","selectionMode","isMultipleSelection","coordsClone","getLayerLevel","selectedByRowHeader","selectedByColumnHeader","setRangeStartOnly","focusHighlight","areaHighlight","layeredAreaHighlight","rowHeaderHighlight","columnHeaderHighlight","activeRowHeaderHighlight","activeColumnHeaderHighlight","activeCornerHeaderHighlight","rowHighlight","columnHighlight","previousRange","rowCoordsFrom","rowCoordsTo","columnCoordsFrom","columnCoordsTo","highlightRowHeaders","highlightColumnHeaders","isMultipleListener","fillHandle","deselect","_this$getSelectedRang","includeRowHeaders","includeColumnHeaders","nrOfRows","nrOfColumns","rowFrom","columnFrom","startCoords","endCoords","selectCells","rangeValidity","columnHeaderLastIndex","fromCoords","toCoords","rowHeaderLastIndex","customSelection","currentLayer","areaLayeredHighlight","CELL_TYPE","canBeOverwritten","metaObject","_metaObject$_automati","_automaticallyAssignedMetaProps","extendByMetaType","settingsToCompareWith","validType","expandedType","_metaObject$_automati2","columnFactory","TableMeta","conflictList","ColumnMeta","isUnsignedNumber","assert","condition","errorMessage","isNullish","allowEmpty","allowHtml","allowInsertColumn","allowInsertRow","allowInvalid","allowRemoveColumn","allowRemoveRow","autoColumnSize","autoRowSize","bindRowsWithHeaders","checkedTemplate","collapsibleColumns","columnSorting","columnSummary","colWidths","commentedCellClassName","comments","contextMenu","copyable","copyPaste","correctFormat","customBorders","dataSchema","dateFormat","datePickerConfig","defaultDate","disableVisualSelection","dragToScroll","dropdownMenu","enterBeginsEditing","autoInsertRow","filteringCaseSensitive","filters","fixedColumnsLeft","formulas","hiddenColumns","hiddenRows","invalidCellClassName","isEmptyCol","rowLen","isEmptyRow","colLen","meta","getSchema","layoutDirection","licenseKey","locale","manualColumnFreeze","manualColumnMove","manualColumnResize","manualRowMove","manualRowResize","minCols","minRows","multiColumnSorting","disableTabNavigation","nestedRows","noWordWrapClassName","numericFormat","persistentState","placeholder","placeholderCellClassName","readOnlyCellClassName","rowHeights","search","selectOptions","skipColumnOnPaste","skipRowOnPaste","sortByRelevance","startCols","startRows","strict","tabMoves","title","trimDropdown","trimRows","trimWhitespace","uncheckedTemplate","undo","visibleRows","wordWrap","createTableMetaEmptyClass","GlobalMeta","metaCtor","metaSchema","getMetaConstructor","getMeta","updateMeta","_settings$type","globalMeta","MetaCtor","LazyFactoryMap","valueFactory","holes","dataIndex","_getStorageIndexByKey","reuseIndex","newIndexes","dataLength","removed","validEntries","keyIndex","_getKeyByStorageIndex","done","COLUMNS_PROPS_CONFLICTS","metas","_createMeta","physicalColumn","createColumn","removeColumn","clearCache","CellMeta","columnMeta","_createRow","physicalRow","createRow","removeRow","cellMeta","setMeta","_cellMeta$_automatica","removeMeta","getMetas","getMetasAtRow","rowsMeta","MetaManager","customSettings","metaMods","ModifierClass","getGlobalMeta","updateGlobalMeta","getTableMeta","updateTableMeta","getColumnMeta","updateColumnMeta","visualCol","getCellMetaKeyValue","setCellMeta","updateCellMeta","removeCellMeta","getCellsMeta","getCellsMetaAtRow","clearCellsCache","DynamicCellMetaMod","metaManager","metaSyncMemo","extendCellMeta","_this$metaSyncMemo$ge","cellType","cellSettings","_cellSettings$type","ExtendMetaPropertiesMod","usageTracker","propDescriptors","onChange","isInitialChange","extendMetaProps","alias","hasTarget","targetProp","origProp","installPropWatcher","self","regUniversalNewLine","regNextCellNoQuotes","regNextEmptyCell","str","lastLength","nextCell","startsWith","quoteNo","isStillCell","nextChar","matchedText","rLen","cLen","DataMap","DESTINATION_RENDERER","DESTINATION_CLIPBOARD_GENERATOR","createDuckSchema","colToPropCache","propToColCache","createMap","filteredIndex","columnsAsFunc","schemaLen","recursiveDuckColumns","lastCol","lastColumn","propertyParent","cachedPhysicalIndex","toVisualColumn","refreshDuckSchema","mode","sourceRowsCount","countSourceRows","physicalRowIndex","numberOfCreatedRows","continueProcess","rowsToAdd","spliceData","newVisualRowIndex","toVisualRow","getInitialColumnCount","startPhysicalIndex","createCol","isColumnModificationAllowed","countSourceCols","physicalColumnIndex","numberOfSourceRows","numberOfCreatedCols","newVisualColumnIndex","removedPhysicalIndexes","visualRowsToPhysical","sourceRowsLength","actionWasNotCancelled","numberOfRemovedIndexes","filterData","customDefinedColumns","descendingPhysicalRows","rowPhysicalIndex","removeCol","visualColumnsToPhysical","descendingPhysicalColumns","isTableUniform","removedColumnsCount","rlen","spliceCol","colData","getDataAtCol","after","populateFromArray","spliceRow","getSourceDataAtRow","deleteCount","continueSplicing","newData","physicalRows","modifiedRowData","sliced","getCopyable","logicRows","physicRow","rowsToRemove","totalCols","visualCols","physicalCol","colsToRemove","maxRowsFromSettings","getRange","countCachedColumns","destination","output","getFn","getText","getCopyableText","replaceData","setDataMapFunction","callbackFunction","config","dataMap","internalSource","firstRun","capitalizedInternalSource","newDataMap","bind","GRID_GROUP","EDITOR_EDIT_GROUP","installFocusDetector","hooks","inputTrapTop","createInputElement","inputTrapBottom","onFocusFromTop","onFocusFromBottom","before","activate","tabIndex","deactivate","installFocusCatcher","recentlyAddedFocusCoords","_recentlyAddedFocusCo","mostTopStartCoords","getMostTopStartPosition","selectCell","_recentlyAddedFocusCo2","mostBottomEndCoords","getMostBottomEndPosition","_hot$getSelectedRange","addShortcut","_hot$getSelectedRange2","relativeToGroup","_rowIndexMapper$getVi","_columnIndexMapper$ge","mappings","normalizeKeys","lowercaseKey","getKeysList","normalizedKeys","codeToKeyRegExp","normalizeEventKey","code","__kindOf","isContextObject","objectToCheck","createContext","SHORTCUTS","captureCtrl","forwardToContext","newShortcut","keyCombination","hasKeyCombination","shortcuts","shortcut","removeShortcutsByKeys","removeShortcutsByGroup","shortcutOptions","leftOptions","option","getShortcuts","hasShortcut","createKeysObserver","PRESSED_KEYS","press","release","releaseAll","isPressed","MODIFIER_KEYS","modifierKeysObserver","instanceCounter","useRecorder","ownerWindow","handleEvent","beforeKeyDown","afterKeyDown","isModifierKey","pressedKey","getPressedModifierKeys","mergeMetaKeys","pressedModifierKeys","onkeydown","extraModifierKeys","pressedKeys","isExecutionCancelled","onkeydownForModKeys","onkeyupForModKeys","onblur","mount","eventTarget","unmount","releasePressedKeys","createShortcutManager","CONTEXTS","activeContextName","addContext","contextName","getActiveContextName","setActiveContextName","isCtrlKeySilenced","recorderCallback","activeContext","keyRecorder","command","_getEditorManager","getAllCommands","nextRowIndexToSelect","countVisibleRows","scrollPadding","nextVerticalScroll","scrollViewportTo","verticalSnap","horizontalSnap","isFocusHighlightedByHeader","rowsStep","fixedRows","fixedColumns","emptySelectedCells","visibleCoordsFrom","visibleCoordsTo","visibleRange","_createCellRange","scrollCoords","offsetColumns","countVisibleCols","offsetRows","highlightRow","highlightColumn","valueToPopulate","cellValues","setDataAtCell","allCommands","createKeyboardShortcutCommandsPool","commands","shortcutsEditorContext","commandsPool","editorCloseAndSave","editorCloseWithoutSaving","shortcutsGridContext","editorFastOpen","editorOpen","populateSelectedCellsData","extendCellsSelectionToColumns","extendCellsSelectionToRows","moveCellSelectionUp","moveCellSelectionToMostTop","extendCellsSelectionUp","extendCellsSelectionToMostTop","moveCellSelectionDown","moveCellSelectionToMostBottom","extendCellsSelectionDown","extendCellsSelectionToMostBottom","moveCellSelectionLeft","moveCellSelectionToMostLeft","extendCellsSelectionLeft","extendCellsSelectionToMostLeft","moveCellSelectionRight","moveCellSelectionToMostRight","extendCellsSelectionRight","extendCellsSelectionToMostRight","moveCellSelectionToMostInlineStart","extendCellsSelectionToMostInlineStart","moveCellSelectionToMostTopInlineStart","moveCellSelectionToMostInlineEnd","extendCellsSelectionToMostInlineEnd","moveCellSelectionToMostBottomInlineEnd","moveCellSelectionUpByViewportHight","extendCellsSelectionUpByViewportHeight","moveCellSelectionDownByViewportHeight","extendCellsSelectionDownByViewportHeight","moveCellSelectionInlineStart","moveCellSelectionInlineEnd","registerAllShortcutContexts","activeGuid","foreignHotInstances","Core","userSettings","_userSettings$layoutD","preventScrollingToCell","datamap","grid","focusManager","renderSuspendedCounter","executionSuspendedCounter","rootElementDirection","isLtr","pluginsRegistry","onIndexMapperCacheUpdate","setLanguage","setClassName","classSettings","globalMetaSettingsArray","settingsArray","classNameToRemove","classNameToAdd","ValidatorsQueue","resolved","validatorsInQueue","valid","addValidatorToQueue","removeValidatorFormQueue","checkIfQueueIsEmpty","onQueueEmpty","getParsedNumber","numericData","unifiedNumericData","parseFloat","validateChanges","waitingForValidator","shouldBeCanceled","cancelChanges","getCellValidator","validateCell","cellPropertiesReference","applyChanges","skipThisChange","numberOfCreatedColumns","adjustRowsAndCols","_refreshBorders","refreshValue","setDataInputToArray","propOrCol","processChanges","beforeChangeResult","filteredChanges","change","preventScrolling","selectionRange","selectionLayerLevel","scrollToCell","currentSelectedRange","cellRanges","changedIsMultiple","cellCoordsDelta","alter","_index","_index2","keepEmptyRows","normalizeIndexesGroup","sortedIndexes","indexA","indexB","normalizedIndexes","_ref4","groupIndex","groupAmount","previousItem","prevIndex","prevAmount","prevLastIndex","amountToAdd","insertRowMode","startRowPhysicalIndex","currentFromRange","currentFromRow","startVisualRowIndex","currentToRow","currentToColumn","currentFromColumn","insertColumnMode","startColumnPhysicalIndex","spliceArray","startVisualColumnIndex","_ref5","calcIndex","wasRemoved","_ref6","emptyRows","countEmptyRows","emptyRowsMissing","rowsToCreate","emptyCols","countEmptyCols","colsToCreate","emptyColsMissing","selectionChanged","method","newDataByColumns","columnsPopulationEnd","rowsPopulationEnd","populatedDataByColumns","numberOfDataColumns","numberOfColumnsToPopulate","pushedDownDataByRows","pushedDownDataByColumns","numberOfDataRows","numberOfRowsToPopulate","pushedRightDataByRows","skippedRow","skippedColumn","pushData","getInputValue","rowValue","rowInputLength","rowSelectionLength","colInputLength","colSelectionLength","orgValue","orgValueSchema","valueSchema","updateSettings","canBeValidated","expression","validatorCallback","_registerImmediate","changeSource","processedChanges","setDataAtRowProp","foreignHot","prepareEditorIfNeeded","_ref7","getSelectedLast","selected","suspendRender","resumeRender","nextValue","batchRender","wrappedOperations","isExecutionSuspended","suspendExecution","resumeExecution","forceFlushChanges","batchExecution","batch","isSizeChanged","isResizeBlocked","updateData","loadData","initIndexMappers","columnsSettings","finalNrOfColumns","nrOfSourceColumns","row2","column2","getCopyableData","dataUpdateFunction","ganttChart","columnSetting","setCellMetaObject","currentHeight","initialStyle","getValue","renderableCoords","columnData","dataByRows","getDataAtProp","getSourceData","getSourceDataArray","getSourceDataAtCol","setSourceDataAtCell","isThereAnySetSourceListener","changesForHook","_ref8","changeRow","changeProp","changeValue","_ref9","getDataAtRow","getDataType","rowTo","columnTo","previousType","currentType","isTypeEqual","cachedValue","spliceCellsMeta","deleteAmount","cellMetaRows","cellMetaRow","allowSetCellMeta","getCellMetaAtRow","rowOrMeta","cellEditor","cellValidator","validateCells","_validateCells","validateRows","validateColumns","translateVisualIndexToColumns","_getColWidthFromSettings","_getRowHeightFromSettings","dataLen","ending","emptyColumns","changeListener","wasSelected","getIndexToScroll","postMortem","snapToInlineStart","snapToInlineEnd","considerHiddenIndexes","isValidRowGrid","isValidColumnGrid","visualRowToScroll","visualColumnToScroll","isRowInteger","isColumnInteger","isScrolled","removeHook","_clearTimeouts","_clearImmediates","licenseInfo","_ref10","plugin","undoRedo","getPluginName","extraArguments","toHTML","toTableElement","tempElement","timeouts","handle","handleFunc","immediates","setImmediate","clearImmediate","getFocusManager","PluginClass","hooksRefRegisterer","_hooksStorage","removeHooksByKey","clearHooks","callbacks","EDITOR_STATE","VIRGIN","EDITING","WAITING","FINISHED","SHORTCUTS_GROUP_EDITOR","BaseEditor","state","_opened","_fullEditMode","_closeCallback","_fireCallbacks","setValue","open","close","saveValue","ctrlDown","selectedLast","contextConfig","isInFullEditMode","stringifiedInitialValue","previousCloseCallback","discardEditor","getEditedCellRect","_wtOverlays$getParent","getEditedCell","cellWidth","scrollableContainerTop","scrollableContainerLeft","containerScrollTop","containerScrollLeft","gridMostRightPos","overlayTable","editTopModifier","topPos","nrOfRenderableRowIndexes","firstRowIndexOfTheBottomOverlay","firstRowOffset","firstColumnOffset","horizontalScrollPosition","verticalScrollPosition","cellTopOffset","bottomWtViewport","bottomWtTable","cellStartOffset","cellComputedStyle","borderPhysicalWidthProp","inlineStartBorderCompensation","topBorderCompensation","actualVerticalScrollbarWidth","actualHorizontalScrollbarWidth","getEditedCellsLayerClass","editorSection","checkEditorSection","autoResize","minHeight","minWidth","unObserve","resize","newChar","fontFamily","whiteSpace","delayedResize","extendDefaults","el_","doObserve","updateCaretPosition","actionName","textareaElement","caretPosition","textLines","newCaretPosition","lineStartIndex","textLine","lineEndIndex","EDITOR_VISIBLE_CLASS_NAME","EDITOR_HIDDEN_CLASS_NAME","SHORTCUTS_GROUP","TextEditor","textareaStyle","TEXTAREA_PARENT","textareaParentStyle","layerClass","bindEvents","showEditableElement","registerShortcuts","hideEditableElement","unregisterShortcuts","textIndent","opacity","hasClassHandsontableEditor","childNode","sourceData","textareaComputedStyle","horizontalPadding","paddingLeft","paddingRight","verticalPadding","paddingTop","paddingBottom","finalWidth","finalHeight","finalMaxWidth","finalMaxHeight","allowKeyEventPropagation","insertNewLine","execCommand","keyName","arrowKeyCodes","baseRenderer","ariaEnabled","classesToAdd","attributesToAdd","textRenderer","escaped","rendererTemplate","TEMPLATE","HTMLTemplateElement","decorate","model","TextCellType","Handsontable","editors","DefaultSettings","packageName","buildDate","version","languages","ownKeys","e","t","getOwnPropertySymbols","o","getOwnPropertyDescriptor","_objectSpread2","_defineProperty$1","getOwnPropertyDescriptors","defineProperties","_typeof$1","_classCallCheck","Constructor","_defineProperties","_createClass","protoProps","staticProps","_inherits","subClass","superClass","_setPrototypeOf","_getPrototypeOf","setPrototypeOf","__proto__","_isNativeReflectConstruct","Reflect","construct","sham","Proxy","Boolean","_assertThisInitialized","ReferenceError","_possibleConstructorReturn","_createSuper","Derived","hasNativeReflectConstruct","Super","NewTarget","unassignedPropSymbol","bulkComponentContainer","HOT_DESTROYED_WARNING","preventInternalEditWatch","component","__internalEdit","propFactory","registeredHooks","propSchema","assign","wrapperRendererCacheSize","filterPassedProps","filteredProps","columnSettingsProp","_propName","prepareSettings","currentSettings","assignedProps","hotSettingsInProps","additionalHotSettingsInProps","simpleEqual","findVNodeByType","componentSlots","componentVNode","slot","getHotColumnComponents","$options","createVueComponent","vNode","$el","propsData","componentContainer","componentOptions","Ctor","$mount","objectA","objectB","globalThis","global","createCommonjsModule","module","exports","lru","g","f","commonjsGlobal","NEWER","OLDER","LRUMap","limit","oldest","newest","_keymap","Entry","_markEntryAsUsed","MAX_VALUE","it","itv","lru_1","HotTable","watch","mergedHotSettings","miscCache","currentSourceColumns","matchHotMappersSize","thisComponent","rendererCache","$destroy","__hotInstance","columnSettings","editorCache","computed","$props","methods","hotInit","globalRendererVNode","getGlobalRendererVNode","globalEditorVNode","getGlobalEditorVNode","getEditorClass","getRendererWrapper","_data$","columnsToRemove","indexMapperRowCount","indexMapperColumnCount","hotTableSlots","$slots","getColumnSettings","hotColumns","$children","usesRendererComponent","containerComponent","$vm","rendererArgs","isRenderer","mountedComponent","lastUsedTD","cachedEntry","cachedComponent","cachedTD","$data","componentKey","componentName","componentCacheKey","isEditor","hotCustomEditorClass","mounted","beforeDestroy","normalizeComponent","script","scopeId","isFunctionalTemplate","moduleIdentifier","shadowMode","createInjector","createInjectorSSR","createInjectorShadow","_compiled","functional","_scopeId","$vnode","ssrContext","__VUE_SSR_CONTEXT__","_registeredComponents","_ssrRegister","$root","shadowRoot","originalRender","h","existing","beforeCreate","__vue_script__$2","__vue_render__","_h","$createElement","_t","__vue_staticRenderFns__","__vue_inject_styles__$2","__vue_scope_id__$2","__vue_module_identifier__$2","__vue_is_functional_template__$2","__vue_component__$2","__decorate","decorators","desc","_typeof","_toConsumableArray","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","arr2","iter","reflectionIsSupported","defineMetadata","getOwnMetadataKeys","copyReflectionMetadata","forwardMetadata","getOwnPropertyNames","propertyKey","metaKeys","metadata","getOwnMetadata","fakeArray","hasProto","isPrimitive","collectDataFromConstructor","vm","Component","originalInit","_init","plainData","$internalHooks","componentFactory","_componentTag","proto","__decorators__","superProto","Extended","forwardStaticMembers","shouldIgnore","callee","caller","Original","extendedDescriptor","superDescriptor","registerHooks","BaseEditorComponent","_Vue","_super","_this2","customEditorClass","_Handsontable$editors","CustomEditor","_super2","_this3","hotCustomEditorInstance","_this$propName","_Handsontable$editors2","_Handsontable$editors3","_Handsontable$editors4","_Handsontable$editors5","_Handsontable$editors6","_Handsontable$editors7","_Handsontable$editors8","_Handsontable$editors9","_Handsontable$editors10","_len10","_key10","_Handsontable$editors11","_len11","_key11","_Handsontable$editors12","_len12","_key12","_Handsontable$editors13","_len13","_key13","_Handsontable$editors14","_len14","_key14","_Handsontable$editors15","_len15","_key15","_Handsontable$editors16","_len16","_key16","_Handsontable$editors17","_len17","_key17","_Handsontable$editors18","_len18","_key18","_Handsontable$editors19","_len19","_key19","_Handsontable$editors20","_len20","_key20","_Handsontable$editors21","_len21","_key21","_Handsontable$editors22","_len22","_key22","_Handsontable$editors23","_len23","_key23","_Handsontable$editors24","_len24","_key24","_Handsontable$editors25","_len25","_key25","getEditedCellsZIndex","_Handsontable$editors26","_len26","_key26","SELECTED_CLASS","ODD_ROW_CLASS","HandsontableEditor","htEditor","htContainer","htOptions","afterOnCellMouseDown","sourceValue","handsontable","onBeginEditing","DIV","assignHooks","rowToSelect","innerHOT","flipped","lastRow","AutocompleteEditor","choices","caseSensitive","choicesRelevance","valueLength","charsLeft","currentItem","valueIndex","choicesCount","toLocaleLowerCase","baseIndex","query","strippedChoices","rawChoices","skipOne","idPrefix","selectedValue","strippedValue","stripValueIfNeeded","rootInstanceAriaTagsEnabled","sourceArray","sourceSize","colIndex","onBeforeKeyDown","indexOfMatch","afterSelection","queryChoices","updateChoicesList","stripValuesIfNeeded","choicesList","sortByRelevanceSetting","filterSetting","orderByRelevance","highlightIndex","orderByRelevanceLength","sorted","updateDropdownHeight","flipDropdownIfNeeded","highlightBestMatchingChoice","isWindowAsScrollableElement","textareaOffset","textareaHeight","dropdownHeight","getDropdownHeight","trimmingContainerScrollTop","headersHeight","spaceAbove","spaceBelow","flipNeeded","flipDropdown","unflipDropdown","limitDropdownIfNeeded","spaceAvailable","tempHeight","lastRowHeight","setDropdownHeight","dropdownStyle","currentDropdownWidth","firstRowHeight","stringifiedValues","strippedValues","allowed","timeOffset","CheckboxEditor","checkbox","click","DateEditor","defaultDateFormat","parentDestroyed","$datePicker","destroyElements","datePicker","datePickerStyle","hideDatepicker","datePickerParentElement","showDatepicker","keyboardEvent","_this$$datePicker","isMeta","dateStr","getDatePickerConfig","_onInputFocus","pickerLeftPosition","setMoment","gotoToday","htInput","origOnSelect","onSelect","origOnClose","onClose","field","trigger","bound","reposition","isRTL","DropdownEditor","NumericEditor","PasswordEditor","SelectEditor","prepareOptions","optionValue","optionElement","optionsToPrepare","preparedOptions","selectStyle","margin","previousOptionIndex","selectedIndex","nextOptionIndex","TimeEditor","dir","registerAllEditors","htmlRenderer","autocompleteRenderer","rendererFunc","ARROW","acArrowListener","isListeningKeyDownEvent","isCheckboxListenerAdded","BAD_VALUE_CLASS","ATTR_ROW","ATTR_COLUMN","checkboxRenderer","createInput","labelOptions","badValue","checked","labelText","labelValue","createLabel","separated","gridContext","changeSelectedCheckboxesState","areSelectedCheckboxCells","uncheckCheckbox","selRange","cachedCellProperties","dataAtCell","topLeft","bottomRight","checkboxes","onClick","fullWidth","isCheckboxInput","newCheckboxValue","bundleSeed","labelProperty","labelData","numericRenderer","cellCulture","culture","cellFormatPattern","pattern","classArr","shortTag","langData","passwordRenderer","hashLength","hashSymbol","hash","timeRenderer","registerAllRenderers","autocompleteValidator","valueToValidate","process","originalVal","found","slen","getNormalizedDate","dateString","nativeDate","getDate","getTimezoneOffset","dateValidator","dateEditor","isValidFormat","isValidDate","correctedValue","dateFromDate","dateFromMoment","isAlphanumeric","date","numericValidator","STRICT_FORMATS","timeValidator","timeFormat","twoDigitValue","isValidTime","registerAllValidators","AutocompleteCellType","CheckboxCellType","dateRenderer","DateCellType","DropdownCellType","handsontableRenderer","HandsontableCellType","NumericCellType","PasswordCellType","selectRenderer","SelectCellType","TimeCellType","registerAllCellTypes","DEPS_TYPE_CHECKERS","missingDependeciesMsgs","initializedPlugins","_isRelevantToSettings","BasePlugin","SETTING_KEYS","pluginsInitializedCallbacks","isPluginsReady","enabled","initialized","onAfterPluginsInitialized","onUpdateSettings","pluginDeps","PLUGIN_DEPS","dependecies","missingDependencies","dependency","moduleName","errorMsg","enablePlugin","isAllPluginsAreInitialized","disablePlugin","removeHooks","callOnPluginsReady","relevantToSettings","_isRelevantToSettings2","updatePlugin","settingKeys","GhostTable","useHeaders","addRow","samples","createContainer","rowObject","createColGroupsCol","addColumnHeadersRow","colHeader","appendColumnHeadersRow","addColumn","columnObject","th","tBody","getHeights","injected","injectTable","getWidths","setSettings","setSetting","createColElement","sample","domFragment","clean","removeTable","isVertical","isHorizontal","tableLayout","containerClassName","SamplesGenerator","SAMPLE_COUNT","dataFactory","getSampleCount","customSampleCount","setSampleCount","sampleCount","setAllowDuplicates","allowDuplicates","generateRowSamples","rowRange","colRange","generateSamples","generateColumnSamples","specifierRange","generateSample","specifierValue","computedKey","sampledValues","hasCustomBundleSeed","seed","needed","duplicate","COLUMN_SIZE_MAP_NAME","AutoColumnSize","CALCULATION_STEP","SYNC_CALCULATION_LIMIT","cachedColumnHeaders","ghostTable","samplesGenerator","spanned","firstCalculation","measuredColumns","columnWidthsMap","isDblClick","onBeforeColumnResize","setting","setSamplingOptions","onAfterLoadData","onBeforeChange","onAfterFormulasValuesUpdate","onBeforeViewRender","onAfterInit","changedColumns","findColumnsWhereHeaderWasChanged","calculateVisibleColumnsWidth","calculateColumnsWidth","columnsRange","rowsRange","calculateAllColumnsWidth","timer","loop","syncLimit","getSyncCalculationLimit","samplingRatio","allowSampleDuplicates","recalculateAllColumnsWidth","colsLimit","defaultWidth","keepMinimum","firstFullyVisibleColumn","lastFullyVisibleColumn","columnTitle","cachedColumnsLength","isNeedRecalculate","columnProperty","newSize","_change$address","address","DIRECTIONS","getDragDirectionAndRange","startSelection","endSelection","startOfDragCoords","endOfDragCoords","directionOfDrag","getMappedFillHandleSetting","mappedSettings","directions","INSERT_ROW_ALTER_ACTION_NAME","INTERVAL_FOR_ADDING_ROW","Autofill","addingStarted","mouseDownOnCellCorner","mouseDragOutside","handleDraggedCells","mapSettings","onAfterCellCornerMouseDown","onBeforeCellMouseOver","clearMappedSettings","getSelectionData","copyableRanges","copyableRows","copyableColumns","rowSet","fillIn","fillStartRow","fillStartColumn","fillEndRow","fillEndColumn","selectionRangeLast","topStartCorner","bottomEndCorner","resetSelectionOfDraggedArea","cornersOfSelectedCells","cornersOfSelectionAndDragAreas","selectionData","sourceRange","targetRange","beforeAutofillHookResult","fillData","dragLength","fillOffset","setSelection","reduceSelectionAreaIfNeeded","getCoordsOfDragAndDropBorders","coordsOfSelection","bottomRightCorner","showBorder","coordsOfDragAndDropBorders","redrawBorders","addNewRowIfNeeded","cornersOfSelectedDragArea","nrOfTableRows","getIndexOfLastAdjacentFilledInRow","lastFilledInRowIndex","dataInCell","dataInNextLeftCell","dataInNextRightCell","addSelectionFromStartAreaToSpecificRowIndex","selectStartArea","cornersOfArea","selectAdjacent","getIfMouseWasDraggedOutside","tableBottom","tableRight","onMouseMove","selectionApplied","mouseWasDraggedOutside","ROW_WIDTHS_MAP_NAME","AutoRowSize","rowHeightsMap","headerHeight","measuredRows","onBeforeRowResize","recalculateAllRowsHeight","calculateRowsHeight","calculateAllRowsHeight","rowsLimit","defaultHeight","cachedHeight","clearCacheByRange","onBeforeRowMove","alterStrategies","alterUtilsFactory","indexationStrategy","LooseBindsMap","StrictBindsMap","getNextValue","DEFAULT_BIND","bindTypeToMapStrategy","BindRowsWithHeaders","headerIndexes","bindType","MapStrategy","onModifyRowHeader","COLLAPSIBLE_ELEMENT_CLASS","actionDictionary","hideColumn","beforeHook","afterHook","_collapsedColumnsMap","CollapsibleColumns","nestedHeadersPlugin","headerStateManager","getStateManager","onInit","onAfterGetColHeader","onBeforeOnCellMouseDown","detectedOverlappedHeaders","mapState","headerSettings","collapsible","origColspan","mergeStateWith","clearButtons","_this$headerStateMana","isCollapsed","getHeaderTreeNodeData","expandSection","collapseSection","_this$hot$getSelected","headerLevels","mainHeaders","topHeaders","topLeftCornerHeaders","removeButton","masterLevel","topLevel","topLeftCornerLevel","toggleCollapsibleSection","toggleAllCollapsibleSections","mapNodes","levelToRowCoords","collapseAll","expandAll","filteredCoords","isActionPossible","_this$headerStateMana2","getHeaderSettings","nodeModRollbacks","affectedColumnsIndexes","colspanCompensation","affectedColumns","rollbackModification","triggerNodeModification","currentCollapsedColumns","getCollapsedColumns","destinationCollapsedColumns","actionTranslator","isActionAllowed","nodeModRollback","isActionPerformed","_this$headerStateMana3","isNodeCollapsible","isAriaTagsEnabled","collapsibleElement","_collapsibleElement","initialLoad","inheritedColumnProperties","SORT_EMPTY_CELLS_DEFAULT","SHOW_SORT_INDICATOR_DEFAULT","HEADER_ACTION_DEFAULT","ColumnStatesManager","mapName","sortingStates","sortEmptyCells","indicator","headerAction","compareFunctionFactory","updateAllColumnsProperties","allSortSettings","getAllColumnsProperties","columnProperties","getSortOrderOfColumn","searchedColumn","_this$sortingStates$g","sortOrder","getIndexOfColumnInSortQueue","getNumberOfSortedColumns","isListOfSortedColumnsEmpty","isColumnSorted","getSortStates","sortingStatesQueue","getColumnSortState","setSortStates","sortStates","ASC_SORT_STATE","DESC_SORT_STATE","HEADER_SPAN_CLASS","isValidColumnState","columnState","areValidSortStates","sortedColumns","getNextSortOrder","getHeaderSpanElement","headerSpanElement","isFirstLevelColumnHeader","TRs","wasHeaderClickedProperly","clickEvent","HEADER_CLASS_ASC_SORT","HEADER_CLASS_DESC_SORT","HEADER_CLASS_INDICATOR_DISABLED","HEADER_SORT_CLASS","HEADER_ACTION_CLASS","orderToCssClass","getClassesToAdd","columnStatesManager","showSortIndicator","cssClasses","columnOrder","getClassesToRemove","DO_NOT_SWAP","FIRST_BEFORE_SECOND","FIRST_AFTER_SECOND","indexesWithData","rootComparatorId","rootComparator","getRootComparator","argsForRootComparator","columnPluginSettings","COLUMN_DATA_TYPE","parsedFirstValue","parsedSecondValue","isEmptyValue","isEmptyNextValue","unifiedValue","unifiedNextValue","isValueFromTemplate","isNextValueFromTemplate","firstDate","nextDate","isAfter","isBefore","registerCompareFunctionFactory","getGloballyCompareFunctionFactory","hasGloballyCompareFunctionFactory","registerRootComparator","getCompareFunctionFactory","sortingOrders","columnMetas","rowIndexWithValues","nextRowIndexWithValues","nextValues","sortingOrder","pluginSettings","compareResult","APPEND_COLUMN_CONFIG_STRATEGY","REPLACE_COLUMN_CONFIG_STRATEGY","ColumnSorting","columnMetaCache","pluginKey","indexesSequenceCache","getMergedPluginSettings","onAfterOnCellMouseDown","loadOrSortBySettings","clearColHeader","updateHeaderClasses","getColumnNextConfig","sortConfig","currentSortConfig","getSortConfig","destinationSortConfigs","getNormalizedSortConfigs","sortPossible","areValidSortConfigs","allowSort","sortByPresetSortStates","saveAllSortSettings","clearSort","isSorted","setSortConfig","sortConfigs","numberOfColumns","translateColumnToPhysical","restOfProperties","initialConfig","getAllSavedSortSettings","storedAllSortSettings","translateColumnToVisual","nextSortOrder","getNextSortConfig","columnToChange","strategyId","indexOfColumnToChange","nextColumnConfig","getPluginColumnConfig","columnConfig","pluginColumnConfig","pluginMainSettings","storedColumnProperties","getFirstCellSettings","cellMetaCopy","getNumberOfRowsToSort","numberOfRows","getDataForSortedColumns","indexesBefore","indexWithData","indexesAfter","indexMapping","indexBefore","indexInsideArray","newIndexesSequence","sortBySettings","pluginSettingsForColumn","headerActionEnabled","currentSortState","wasClickableHeaderClicked","_this$columnStatesMan","Endpoints","endpoints","settingsType","currentEndpoint","cellsToSetCache","getEndpoint","fillMissingEndpointData","getAllEndpoints","parseSettings","endpointsArray","newEndpoint","assignSetting","destinationColumn","endpoint","reversedRowCoords","resetSetupBeforeStructureAlteration","number","destinationRow","alterRowOffset","alterColumnOffset","resetAllEndpoints","resetSetupAfterStructureAlteration","forceRefresh","beforeViewRenderCallback","refreshAllEndpoints","multiplier","rowMoving","placeOfAlteration","extendEndpointRanges","recreatePhysicalRanges","clearOffsetInformation","shiftEndpointCoordinates","previousPosition","newRanges","allIndexes","newRange","coord","offsetStartIndex","subElement","useOffset","anyEndpointOutOfRange","alterColOffset","resetEndpointValue","setEndpointValue","refreshChangedEndpoints","needToRefresh","changesObj","refreshEndpoint","visualEndpointRowIndex","throwOutOfBoundsWarning","destinationVisualRow","roundFloat","toFixed","isNullishOrNaN","ColumnSummary","onAfterChange","onAfterRowMove","calculateSum","calculateMinMax","countEntries","calculateAverage","customFunction","getPartialSum","biggestDecimalPlacesCount","getCellValue","decimalPlaces","partialResult","getPartialMinMax","countEmpty","counter","emptyCount","entriesCount","cellClassName","forceNumeric","suppressDataTypeErrors","CommentEditor","CLASS_EDITOR_CONTAINER","CLASS_EDITOR","CLASS_INPUT","CLASS_CELL","createEditor","editorStyle","setPosition","getInputElement","getSize","resetSize","setReadOnlyState","show","comment","isFocused","textArea","containerParentElement","DEFAULT_DISPLAY_DELAY","DEFAULT_HIDE_DELAY","DisplaySwitch","displayDelay","wasLastActionShow","showDebounced","hidingTimer","updateDelay","cancelHiding","KEY","separatorItem","addEditCommentItem","getCommentAtCell","setRange","focusEditor","removeCommentItem","removeCommentAtCell","prepareVerticalAlignClass","alignment","replacedClassName","prepareHorizontalAlignClass","getAlignmentClasses","classes","align","cellDescriptor","propertySetter","applyAlignClassName","markLabelAsSelected","checkSelectionConsistency","comparator","getDocumentOffsetByElement","baseDocument","readOnlyCommentItem","areReadOnly","getCommentMeta","META_READONLY","currentState","updateCommentMeta","META_COMMENT","META_COMMENT_VALUE","META_STYLE","SHORTCUTS_CONTEXT_NAME","_editor","_displaySwitch","_preventEditorAutoSwitch","_preventEditorHiding","_tempEditorDimensions","_cellBelowCursor","_commentValueBeforeSave","Comments","getDisplayDelaySetting","addToContextMenu","onAfterRenderer","onAfterScroll","showAtCell","manager","pluginContext","_this$hot$getSelected2","_this$hot$getSelected3","editorElement","getEditorInputElement","onEditorFocus","onEditorBlur","onEditorMouseDown","onEditorMouseUp","clearRange","targetIsCellWithComment","closestCell","targetIsCommentTextArea","setComment","editorValue","setCommentAtCell","removeComment","forceRender","getComment","refreshEditor","_renderableRow","_renderableColumn","targetingPreviousRow","isBeforeRenderedRows","isBeforeRenderedColumns","commentStyle","lastColWidth","cellHeight","editorWidth","editorHeight","oldComment","newComment","eventCell","coordinates","currentWidth","items","commentSetting","CommandExecutor","commonCallback","registerCommand","commandDescriptor","setCommonCallback","execute","commandName","commandSplit","commandNamePrimary","subCommandName","submenu","findSubCommand","unshift","subCommands","cmd","cmds","alignmentItem","stateBefore","clearColumnItem","columnLeftItem","latestSelection","alterAction","columnRightItem","readOnlyItem","atLeastOneReadOnly","redoItem","redo","isRedoAvailable","removeColumnItem","removeRowItem","rowAboveItem","rowBelowItem","noItemsItem","isCommand","undoItem","isUndoAvailable","ITEMS","_predefinedItems","predefinedItems","itemFactory","ItemsFactory","orderPattern","defaultOrderPattern","setPredefinedItems","predefinedItemsCollection","menuItemKey","itemsPattern","defaultPattern","Cursor","topRelative","leftRelative","getSourceType","pageY","pageX","Event","fitsAbove","fitsBelow","fitsOnRight","fitsOnLeft","_container","_parentContainer","_cursor","_keepInViewport","Positioner","keepInViewport","above","below","setElement","setParentElement","updatePosition","setPositionBelowCursor","setPositionAboveCursor","updateHorizontalPosition","setPositionOnRightOfCursor","setPositionOnLeftOfCursor","parentMenuRight","parentMenuLeft","createPaginator","initialPage","onItemSelect","onClear","visitedPages","_updateState","newIndex","lastIndex","changeProceed","setCurrentPage","getCurrentPage","toFirstItem","toLastItem","toNextItem","toPreviousItem","normalizeSelection","selRanges","isItemSubMenu","itemToTest","isItemSeparator","isItemDisabled","isItemSelectionDisabled","isSeparator","hasSubMenu","isDisabled","isSelectionDisabled","isItemHidden","shiftSeparators","separator","popSeparators","removeDuplicatedSeparators","filterSeparators","createMenuNavigator","hotMenu","directItemChange","createDefaultShortcutsList","menu","getNavigator","subMenu","openSubMenu","isSubMenu","parentMenu","executeCommand","SHORTCUTS_CONTEXT","createKeyboardShortcutsCtrl","customKeyboardShortcuts","customShortcuts","_addShortcuts","addCustomShortcuts","k","getCustomShortcuts","_getContextName","_manager$getContext","createMenuItemRenderer","mainTableHot","menuHot","wrapper","itemValue","isFocusable","MIN_WIDTH","_navigator","_shortcutsCtrl","Menu","standalone","positioner","hotSubMenus","menuItems","origOutsideClickDeselects","onDocumentMouseDown","onDocumentContextMenu","setMenuItems","getKeyboardShortcutsCtrl","getSelectedItem","hasSelectedItem","delayedOpenSubMenu","minWidthOfMenu","noItemsDefined","filteredItems","shouldAutoCloseMenu","modifyColWidth","beforeOnCellMouseOver","afterOnCellMouseOver","isAllSubMenusClosed","afterOnCellContextMenu","beforeOnCellMouseUp","isCommandPassive","afterOnCellMouseUp","afterUnlisten","closeParent","closeAllSubMenus","dataItem","closeSubMenu","menus","menuContainerParentElement","selectedItem","normalizedSelection","area","doc","currentHiderWidth","realHeight","ContextMenu","DEFAULT_ITEMS","commandExecutor","itemsFactory","uiContainer","onMenuBeforeOpen","onMenuAfterOpen","onMenuAfterClose","onAfterOnCellContextMenu","rect","_this$menu","prepareMenuItems","_this$menu2","showRowHeaders","showColHeaders","isValidElement","copyItem","copyPastePlugin","copyCellsOnly","copyColumnHeadersOnlyItem","nounForm","copyColumnHeadersOnly","copyWithColumnGroupHeadersItem","copyWithAllColumnHeaders","copyWithColumnHeadersItem","copyWithColumnHeaders","cutItem","cut","SEPARATOR","ClipboardData","PasteEvent","clipboardData","_selectedRange","_countRows","_countColumns","_rowsLimit","_columnsLimit","_countColumnHeaders","_trimColumnsRange","_trimRowsRange","CopyableRangesFactory","countColumns","columnsLimit","countColumnHeaders","setSelectedRange","getCellsRange","finalEndRow","_trimRowsRange2","finalEndCol","_trimColumnsRange2","isRangeTrimmed","getMostBottomColumnHeadersRange","getAllColumnHeadersRange","normalizeRanges","minRow","maxRow","minColumn","maxColumn","META_HEAD","_enableCopyColumnHeaders","_enableCopyColumnGroupHeaders","_enableCopyColumnHeadersOnly","_copyMode","_isTriggeredByCopy","_isTriggeredByCut","_copyableRangesFactory","_ensureClipboardEventsGetTriggered","_countCopiedHeaders","_addContentEditableToHighlightedCell","_removeContentEditableFromHighlightedCell","CopyPaste","_settings$pasteMode","_settings$uiContainer","pasteMode","copyColumnHeaders","copyColumnGroupHeaders","onAfterContextMenuDefaultOptions","onAfterSelectionEnd","onCopy","onCut","onPaste","onSafariMouseEnter","onSafariMouseLeave","onSafariAfterSelection","copy","copyMode","_ensureClipboardEventsGetTriggered2","getRangedCopyableData","getRangedData","paste","pastableText","pastableHtml","pasteData","setCopyableText","groupedRanges","cellsRange","_this$hot$getActiveEd","populateValues","inputArray","populatedRowsLength","populatedColumnsLength","newRows","endRowFromSelection","endColumnFromSelection","visualRowForPopulatedData","visualColumnForPopulatedData","lastVisualRow","lastVisualColumn","newRow","insertedRow","insertedColumn","copiedHeadersCount","_countCopiedHeaders2","allowCopying","textPlain","textHTML","ClipboardEvent","rangedData","allowCuttingOut","pastedData","ADD_TAGS","ADD_ATTR","FORCE_BODY","parsedConfig","_removeContentEditableFromHighlightedCell2","_addContentEditableToHighlightedCell2","currentlySelectedCell","createId","createDefaultCustomBorder","createSingleEmptyBorder","createDefaultHtBorder","normalizeBorder","_border$start","_border$end","denormalizeBorder","createEmptyBorders","extendDefaultBorder","customBorder","checkSelectionBorders","atLeastOneHasBorder","metaBorders","markSelected","hasLeftRightTypeOptions","hasStartEndTypeOptions","physicalToInlinePropNames","toInlinePropName","_physicalToInlineProp","customBordersPlugin","hasBorder","prepareBorder","borderDirection","noBorders","CustomBorders","hideBorders","changeBorderSettings","setBorders","borderObject","borderKeys","normBorder","checkSettingsCohesion","borderKey","prepareBorderFromCustomAdded","getBorders","savedBorders","selectedBorders","clearBorders","clearBordersFromSelectionSettings","clearNullCellRange","insertBorderIntoSettings","place","hasSavedBorders","checkSavedBorders","hasCustomSelections","checkCustomSelections","borderDescriptor","prepareBorderFromCustomAddedRange","lastRowIndex","lastColumnIndex","removeAllBorders","borderId","spliceBorder","setBorder","bordersMeta","hideCount","countHide","customSelectionsChecker","checkCustomSelectionsFromContextMenu","topCol","bottomCol","createCustomBorders","normCustomBorder","check","savedBorder","bordersClone","hasLeftOrRight","hasStartOrEnd","defaultOptions","DragToScroll","boundaries","listening","setupListening","unregisterEvents","setBoundaries","setCallback","diffX","diffY","scrollHandler","BUTTON_CLASS_NAME","_addCustomShortcuts","DropdownMenu","subMenuInstance","onSubMenuAfterOpen","onTableClick","setListening","headerRow","headerRowList","existingButton","onclick","_addCustomShortcuts2","menuInstance","DataProvider","setOptions","_getDataRange","exportHiddenRows","_isHiddenRow","exportHiddenColumns","_isHiddenColumn","BaseType","DEFAULT_OPTIONS","mimeType","fileExtension","filename","encoding","bom","dataProvider","_mergeOptions","YYYY","getFullYear","MM","getMonth","DD","CHAR_CARRIAGE_RETURN","CHAR_DOUBLE_QUOTES","CHAR_LINE_FEED","Csv","columnDelimiter","rowDelimiter","_escapeCell","escapedValue","TYPE_CSV","EXPORT_TYPES","typeFactory","ExportFile","exportAsString","_createTypeFormatter","export","exportAsBlob","_createBlob","downloadFile","blob","URL","webkitURL","download","url","createObjectURL","MouseEvent","revokeObjectURL","msSaveOrOpenBlob","typeFormatter","Blob","BaseComponent","stateless","stateId","getElements","ui","restoreState","setState","saveState","getState","conditions","getCondition","conditionArguments","inputValuesDecorator","getConditionDescriptor","registerCondition","CONDITION_NAME","inputsCount","showOperators","inputValues","conditionValue","inputDate","diff","fromValue","toValue","_from","_to","dateBefore","dateAfter","endsWith","isSame","subtract","startOf","TYPE_NUMERIC","TYPE_TEXT","TYPE_DATE","TYPES","getOptionsList","typeName","typeValue","STATE_BUILT","STATE_BUILDING","EVENTS_TO_REGISTER","BaseUI","DEFAULTS","wrapIt","_element","buildState","build","isBuilt","translateIfPossible","registerEvent","role","_input","_onKeyup","InputUI","_onKeyup2","icon","_menu","_items","_caption","_captionElement","_dropdown","_onMenuSelect","_onMenuClosed","_onClick","SelectUI","getMenu","_onClick2","setItems","translateNames","menuContainer","caption","dropdown","_onMenuSelect2","_onMenuClosed2","conditionName","openOptions","closeOptions","_onConditionSelect","_onInputKeyDown","ConditionComponent","addSeparator","getSelectElement","_onConditionSelect2","getInputElements","_onInputKeyDown2","copyOfCommand","updateState","getMenuItemDescriptor","disableSelection","getSelectedColumn","operations","getOperationFunc","getOperationName","registerOperation","OPERATION_ID","SHORT_NAME_FOR_COMPONENT","operationResult","_label","RadioInputUI","htmlFor","isChecked","setChecked","SELECTED_AT_START_ELEMENT_INDEX","_onRadioInputChange","OperatorsComponent","buildOperatorsElement","operationKeys","operation","radioInput","_onRadioInputChange2","searchedIndex","getActiveOperationId","operationElement","operationId","selectedOperationId","toVisualValue","defaultEmptyValue","visualValue","SUPPORT_SET_CONSTRUCTOR","SUPPORT_FAST_DEDUPE","createArrayAssertion","initialData","dataset","toEmptyString","unifyColumnValues","unifiedValues","intersectValues","same","selectedItemsAssertion","_link","LinkUI","href","_itemsBox","_locale","_searchInput","_selectAllUI","_clearAllUI","_onInput","_onSelectAllClick","_onClearAllClick","MultipleSelectUI","getItemsBox","_onInput2","_onSelectAllClick2","_onClearAllClick2","setLocale","getLocale","itemsToValue","getSearchInputElement","getSelectAllElement","getClearAllElement","isSelectedAllValues","itemsBoxWrapper","selectionControl","hotInitializer","beforeRenderer","afterListen","valueToItems","isKeyCode","availableItems","arrayAssertion","_class","ValueComponent","getMultipleSelectElement","selectElement","itemsSnapshot","stateInfo","updateColumnState","conditionArgsChange","filteredRowsFactory","conditionsStack","firstByValueCondition","defaultBlankCellValue","rowValues","selectedValues","editedConditionStack","dependentConditionStacks","_getColumnVisibleValues","_onButtonClick","ActionBarComponent","BUTTON_OK","BUTTON_CANCEL","identifier","_onButtonClick2","accept","cancel","MAP_NAME","ConditionCollection","isMapRegistrable","filteringStates","getFilteredColumns","isMatch","_stateForColumn$condi","stateForColumn","isMatchInConditions","operationType","addCondition","conditionDefinition","localeForColumn","columnType","getOperation","conditionsForColumn","getConditions","_this$filteringStates","_this$filteringStates2","_this$filteringStates3","getColumnStackPosition","exportAllConditions","allConditions","importAllConditions","stack","removeConditions","hasConditions","DataFilter","conditionCollection","columnDataFactory","filteredData","_getIntersectData","filterByColumn","needles","needleRow","ConditionUpdateObserver","grouping","latestEditedColumnPosition","latestOrderStack","_onConditionBeforeModify","updateStatesAtColumn","_onConditionBeforeClean","_onConditionAfterClean","groupChanges","flush","editedColumnPosition","conditionsBefore","conditionsAfter","visibleDataFactory","curriedConditionsBefore","curriedColumn","splitConditionCollection","curriedConditionsBeforeArray","allRows","visibleRowsAssertion","editedConditions","createFocusNavigator","SHORTCUTS_MENU_CONTEXT","createMenuFocusController","mainMenu","updateNavigatorPosition","addKeyboardShortcuts","mainMenuShortcutsCtrl","currentMenuShortcutsCtrl","_menuFocusNavigator","Filters","filtersRowsMap","dropdownMenuPlugin","dropdownSettings","addConfirmationHooks","onActionBarSubmit","onComponentChange","filterByConditionLabel","filterValueLabel","components","conditionComponent","onSelectUIClosed","conditionUpdateObserver","getDataMapAtColumn","conditionState","updateComponents","onAfterDropdownMenuDefaultOptions","onAfterDropdownMenuShow","onAfterDropdownMenuHide","focusableItems","forwardToFocusNavigation","_this$dropdownMenuPlu","clearConditions","dataFilter","_createDataFilter","needToFilter","visibleVisualRows","allowFiltering","trimmedRows","visibleVisualRowsAssertion","_this$hot$getDataAtCe","dataValue","updateValueComponentCondition","dataAtCol","restoreComponents","_this$getSelectedColu","updateDependentComponentsVisibility","getOperationBasedOnArguments","suggestedOperation","byConditionState1","byConditionState2","byValueState","submitType","_this$dropdownMenuPlu3","_this$dropdownMenuPlu2","columnStackPosition","setListeningDropdownMenu","componentsToShow","showComponents","hideComponents","conditionsState","_this$dropdownMenuPlu4","conditionsByValue","conditionsWithoutByValue","getIndexesOfComponents","changeComponentsVisibility","visible","showRows","hideRows","DEFAULT_LICENSE_KEY","DEFAULT_SETTINGS","useArrayArithmetic","useColumnIndex","useStats","evaluateNullToZero","precisionEpsilon","precisionRounding","smartRounding","leapYear1900","nullDate","year","month","day","nullYear","dateFormats","timeFormats","matchWholeCell","useRegularExpressions","useWildcards","functionArgSeparator","thousandSeparator","decimalSeparator","getEngineSettingsOverrides","_hotSettings$PLUGIN_K","maxColumns","langCode","cleanEngineSettings","getEngineSettingsWithDefaultsAndOverrides","_pluginSettings$engin","engine","hyperformula","overrides","getEngineSettingsWithOverrides","_pluginSettings$engin2","haveEngineSettingsChanged","currentEngineSettings","newEngineSettings","settingOption","getEngineRelationshipRegistry","registryKey","pluginStaticRegistry","getSharedEngineUsageRegistry","setupEngine","engineConfigItem","_engineConfigItem$hyp","registerEngine","engineRelationship","sharedEngineUsage","getConfig","updateConfig","engineClass","engineSettings","engineRegistry","sharedEngineRegistry","registerCustomFunctions","registerLanguage","engineInstance","buildEmpty","registerNamedExpressions","namedExpressions","on","rebuildAndRecalculate","getRegisteredHotInstances","_engineRegistry$get","hotInstances","sheetId","unregisterEngine","engineHotRelationship","customFunctions","translations","registerFunction","languageSetting","suspendEvaluation","namedExp","scope","addNamedExpression","resumeEvaluation","setupSheet","sheetName","doesSheetExist","addSheet","DEFAULT_DATE_FORMAT_HYPERFORMULA","isEscapedFormulaExpression","unescapeFormulaExpression","isFormula","isDate","isDateValid","getDateInHfFormat","getDateInHotFormat","getDateFromExcelDate","numericDate","dateOffset","dateForFormatting","UTC","_axis","_indexMapper","_indexSyncer","_indexesSequence","_movedIndexes","_finalIndex","_removedIndexes","AxisSyncer","axis","indexSyncer","setRemovedHfIndexes","getHfIndexFromVisualIndex","getRemovedHfIndexes","syncMoves","moves","NUMBER_OF_MOVED_INDEXES","SYNC_MOVE_METHOD_NAME","getEngine","move","moveToTheSamePosition","anotherMoveWithoutEffect","getSheetId","storeMovesInformation","movedVisualIndexes","visualFinalIndex","movePossible","getMoveLine","movedHfIndexes","finalHfIndex","numberOfElements","notMovedElements","_notMovedElements$fin","getInitiallyCalculatedMoves","moveLine","movedHfIndex","previouslyMovedIndex","isMovingFromEndToStart","isMovingElementBefore","isMovingAfterElement","adjustedCalculatedMoves","nextMoved","nextMovedIndex","isMovingFromStartToEnd","calculateAndSyncMoves","orderChanged","isPerformingUndoRedo","calculatedMoves","getPostponeAction","getIndexesChangeSyncMethod","SYNC_ORDER_CHANGE_METHOD_NAME","newSequence","relativeTransformation","sheetDimensions","getSheetDimensions","sizeForAxis","numberOfReorganisedIndexes","_rowIndexSyncer","_columnIndexSyncer","_postponeAction","_isPerformingUndo","_isPerformingRedo","_engine","_sheetId","IndexSyncer","postponeAction","getForAxis","indexType","setPerformUndo","flagValue","setPerformRedo","setupSyncEndpoint","isBlockedSource","_internalOperationPending","_hotWasInitializedWithEmptyData","_engineListeners","Formulas","onEngineValuesUpdated","onEngineNamedExpressionsAdded","onEngineNamedExpressionsRemoved","onEngineSheetAdded","onEngineSheetRenamed","onEngineSheetRemoved","_setupEngine","newSheetName","onBeforeLoadData","onModifyData","onModifySourceData","onBeforeValidate","onAfterSetSourceDataAtCell","onAfterSetDataAtCell","onBeforeCreateRow","onBeforeCreateCol","onAfterCreateRow","onAfterCreateCol","onBeforeRemoveRow","onBeforeRemoveCol","onAfterRemoveRow","onAfterRemoveCol","postponedAction","rowAxisSyncer","columnAxisSyncer","movedRows","movedColumns","dropIndex","freezePerformed","unfreezePerformed","onAfterCellMetaReset","onAfterDetachChild","onBeforeAutofill","off","switchSheet","_this$engine","sheetData","actualSheetName","setSheetContent","serialized","getSheetSerialized","getCellType","sheet","isFormulaCellType","doesCellHaveFormula","renderDependentSheets","dependentCells","renderSelf","affectedSheetIds","relatedHot","_relatedHot$view","validateDependentCells","changedCells","stringifyAddress","_change$address2","changedCellsSet","_change$address3","_change$address4","addressId","boundHot","syncChangeWithEngine","isItPossibleToSetCellContents","setCellContents","sourceTopStartRow","sourceTopStartColumn","sourceBottomEndRow","sourceBottomEndColumn","targetTopStartRow","targetTopStartColumn","targetBottomEndRow","targetBottomEndColumn","engineSourceRange","engineTargetRange","fillRangeData","getFillRangeData","sourceStartRow","sourceStartColumn","sourceEndRow","sourceEndColumn","populationRowLength","populationColumnLength","populatedRowIndex","populatedColumnIndex","populatedValue","sourceCellMeta","sourceDataArray","valueChanged","isItPossibleToReplaceSheetContent","ioMode","dimensions","getCellSerialized","outOfBoundsChanges","outOfBoundsDependentCells","hfRowIndex","isItPossibleToAddRows","hfColumnIndex","isItPossibleToAddColumns","hfRows","possible","hfRow","isItPossibleToRemoveRows","physicalColumns","hfColumns","hfColumn","isItPossibleToRemoveColumns","addRows","addColumns","descendingHfRows","removeRows","descendingHfColumns","removeColumns","finalElementRowIndex","_element$__children","rowsData","__children","relativeRowIndex","namedExpressionName","addedSheetDisplayName","oldDisplayName","newDisplayName","removedSheetDisplayName","hideColumnItem","hiddenColumnsPlugin","columnsToHide","hideColumns","lastHiddenColumn","columnToSelect","showColumnItem","_this$columnIndexMapp","_this$columnIndexMapp2","startVisualColumn","endVisualColumn","showColumns","allColumnsSelected","hiddenPhysicalColumns","getHiddenColumns","selectedRangeLast","visualStartColumn","visualEndColumn","renderableStartColumn","renderableEndColumn","notTrimmedColumnIndexes","physicalColumnIndexes","visualColumnsInRange","renderedColumnsInRange","physicalIndexesInRange","lastVisualIndex","lastRenderableIndex","_settings","_hiddenColumnsMap","HiddenColumns","copyPasteEnabled","onMapInit","onAfterGetCellMeta","onModifyColWidth","onModifyCopyableRange","resetCellsMeta","currentHideConfig","isValidConfig","destinationHideConfig","hidingMapValues","isAnyColumnShowed","hiddenIndexes","continueHiding","showColumn","isConfigValid","indicators","containAfterHiddenColumn","pushRange","hideRowItem","hiddenRowsPlugin","rowsToHide","lastHiddenRow","showRowItem","_this$rowIndexMapper$","_this$rowIndexMapper$2","startVisualRow","endVisualRow","allRowsSelected","hiddenPhysicalRows","getHiddenRows","visualStartRow","visualEndRow","renderableStartRow","renderableEndRow","notTrimmedRowIndexes","physicalRowIndexes","visualRowsInRange","renderedRowsInRange","_hiddenRowsMap","HiddenRows","onModifyRowHeight","onAfterGetRowHeader","isAnyRowShowed","showRow","hideRow","containAfterHiddenRow","freezeColumnItem","manualColumnFreezePlugin","freezeColumn","unfreezeColumnItem","unfreezeColumn","ManualColumnFreeze","afterFirstUse","addContextMenuEntry","onBeforeColumnMove","beforeColumnFreezeHook","_fixedColumnsStart","beforeColumnUnfreezeHook","freezeLine","STATE_INITIALIZED","STATE_APPENDED","UNIT","inlineProperty","appendTo","isAppended","inlinePosition","getPosition","marginTop","getOffset","inlineProp","CSS_CLASSNAME","BacklightUI","GuidelineUI","CSS_PLUGIN","CSS_SHOW_UI","CSS_ON_MOVING","CSS_AFTER_SELECTION","ManualColumnMove","columnsToMove","pressed","eventPageX","cachedDropIndex","backlight","guideline","onBeforeOnCellMouseOver","onAfterScrollVertically","buildPluginUI","moveBySettingsOrLoad","moveColumn","moveColumns","isMovePossible","beforeMoveHook","movePerformed","isColumnOrderChanged","dragColumn","dragColumns","countFinalIndex","tooHighDestinationIndex","tooLowDestinationIndex","tooLowMovedColumnIndex","movedColumn","tooHighMovedColumnIndex","nrOfMovedElement","numberOfColumnsLowerThanDropIndex","currentColumnIndex","getColumnsWidth","persistentStateLoad","isFixedColumnsStart","persistentStateSave","storedState","prepareColumnsToMoving","selectedColumns","refreshPositions","firstVisible","hoveredColumn","scrollStart","tdOffsetStart","tbodyOffsetLeft","backlightElemMarginStart","backlightElemWidth","mouseOffsetStart","newCoordsCol","backlightStart","guidelineStart","isHeaderSelection","isSortingElement","guidelineIsNotReady","backlightIsNotReady","eventOffsetX","countColumnsFrom","inlinePos","backlightWidth","firstMovedVisualColumn","firstMovedPhysicalColumn","posTop","PERSISTENT_STATE_KEY","ManualColumnResize","currentTH","currentCol","selectedCols","startY","startWidth","startOffset","guide","isTriggeredByRMB","dblclick","autoresizeTimeout","inlineDir","isDoubleClick","saveManualColumnWidths","loadManualColumnWidths","setManualSize","newWidth","clearManualSize","initialSetting","loadedManualColumnWidths","setupHandlePosition","box","fixedColumn","relativeHeaderPosition","isFullColumnSelected","refreshHandlePosition","setupGuidePosition","handleHeight","handleBottomPosition","refreshGuidePosition","hideHandleAndGuide","checkIfColumnHeader","getClosestTHParent","afterMouseDownTimeout","hookNewSize","selectedColsLength","selectedCol","startX","marginLeft","ManualRowMove","rowsToMove","eventPageY","onAfterScrollHorizontally","moveRow","moveRows","isRowOrderChanged","dragRow","dragRows","tooLowMovedRowIndex","movedRow","tooHighMovedRowIndex","numberOfRowsLowerThanDropIndex","currentRowIndex","getRowsHeight","isFixedRowTop","isFixedRowBottom","prepareRowsToMoving","selectedRows","lastVisible","tableScroll","trimmingContainerScroll","pixelsAbove","pixelsRelToTableStart","hiderHeight","tbodyOffsetTop","backlightElemMarginTop","backlightElemHeight","tdMiddle","tdHeight","tdStartPixel","isBelowTable","backlightTop","guidelineTop","leftPos","rowsLen","backlightHeight","firstMovedVisualRow","firstMovedPhysicalRow","headerWidth","posLeft","ManualRowResize","startHeight","saveManualRowHeights","loadManualRowHeights","newHeight","isFullRowSelected","handleWidth","handleEndPosition","checkIfRowHeader","_element$parentNode","thElement","getActualRowHeight","walkontableHeight","selectedRowsLength","loadedManualRowHeights","MergedCellCoords","cellRangeFactory","NEGATIVE_VALUES_WARNING","newMergedCell","IS_OUT_OF_BOUNDS_WARNING","IS_SINGLE_CELL","ZERO_SPAN_WARNING","containsNegativeValues","mergedCellInfo","containsZeroSpan","isOutOfBounds","mergeCell","includesHorizontally","includesVertically","shiftVector","indexOfChange","shiftValue","shiftedIndex","changeStart","changeEnd","mergeStart","mergeEnd","removedOffset","preRemovedOffset","removedPart","isFarther","mergedCell","getLastRow","getLastColumn","applySpanProperties","MergedCellsCollection","mergedCells","IS_OVERLAPPING_WARNING","getWithinRange","countPartials","foundMergedCells","testedRange","mergedCellTopLeft","mergedCellBottomRight","mergedCellRange","alreadyExists","isOverlapping","wantedCollection","wantedCollectionIndex","mergedCellParentsToClear","hiddenCollectionElements","mergedCellParents","hiddenCollectionElement","currentRange","isFirstRenderableMergedCell","mergeParent","getFirstRenderableCoords","firstRenderableRow","firstRenderableColumn","shiftCollections","currentMerge","AutofillCalculations","mergedCellsCollection","currentFillData","correctSelectionAreaSize","selectionArea","finalArea","snapDragArea","baseArea","dragArea","dragDirection","newDragArea","fillSize","getAutofillSize","baseAreaStartRow","baseAreaStartColumn","baseAreaEndRow","baseAreaEndColumn","verticalDirection","fullCycle","fulls","partials","farthestCollection","getFarthestCollection","newLimit","updateCurrentFillCache","cycleLength","updateObject","dragAreaStartRow","dragAreaStartColumn","dragAreaEndRow","dragAreaEndColumn","getDragArea","mergedCellArray","baseEnd","baseStart","inclusionFunctionName","endOfDragRecreationIndex","currentCollection","recreateAfterDataPopulation","fillRange","getRangeFromChanges","inBounds","ifChromeForceRepaint","dragAreaOverlapsCollections","fullArea","dragRange","SelectionCalculations","fullySelectedMergedCellClassName","snapDelta","newColumn","jumpOverMergedCell","flatDelta","includesIndex","firstIndex","getUpdatedSelectionRange","oldSelectionRange","getSelectedMergedCellClassName","mergeRowEnd","mergeColumnEnd","fullMergeAreaWithinSelection","selectionCalculations","isMergeCellFullySelected","selectionRangesArray","mergedCellIndividualCoords","insideSelections","getSelectedMergedCellClassNameToRemove","toggleMergeItem","info","toggleMergeOnSelection","MergeCells","lastDesiredCoords","autofillCalculations","onModifyTransformStart","onAfterModifyTransformStart","onModifyTransformEnd","onBeforeSetRangeStart","onBeforeSetRangeEnd","onAfterIsMultipleSelection","addMergeActionsToContextMenu","onAfterViewportRowCalculatorOverride","onAfterViewportColumnCalculatorOverride","onModifyAutofillRange","onBeforeDrawAreaBorders","clearCollections","generateFromSettings","rowsToRefresh","rowIndexesToRefresh","wtTableRef","rowToRefresh","rowElement","validateSetting","populatedNulls","mergeRange","canMergeRange","newMergedCellInfo","auto","toggleMerge","mergeSelection","unmergeRange","unmergeSelection","preventPopulation","clearedData","populationInfo","clearedValue","mergedCellAdded","mergedCellCoversWholeRange","merge","unmerge","currentlySelectedRange","newDelta","nextPosition","currentPosition","mergedParent","mergeTopLeft","mergeBottomRight","nextPositionMergedCell","firstRenderableCoords","currentSelectionRange","newSelectionRange","tempDelta","mergedCellsWithinRange","mergeRow","mergeColumn","mergedCellCopy","lastMergedRowIndex","lastMergedColumnIndex","translateMergedCellToRenderable","maxRowSpan","maxColSpan","rangeExpanded","cellInfo","modifyViewportRowStart","modifyViewportRowEnd","mergeParentForViewportStart","renderableIndexAtMergeStart","mergeParentForViewportEnd","renderableIndexAtMergeEnd","modifyViewportColumnStart","modifyViewportColumnEnd","visualStartCol","visualEndCol","parentRow","parentColumn","firstNonHiddenRow","firstNonHiddenColumn","drag","mergedCellsWithinSelectionArea","mergedCellAtCoords","goingDown","goingUp","goingLeft","goingRight","mergedCellOnBottomEdge","mergedCellOnTopEdge","mergedCellOnRightEdge","mergedCellOnLeftEdge","getCompareResult","nextSortedColumn","warnAboutPluginsConflict","COLUMN_ORDER_PREFIX","htmlElement","sortSequenceRegExp","cssClass","CONFLICTED_PLUGIN_KEY","MultiColumnSorting","MultipleSelectionHandles","dragged","lastSetCell","removeFromDragged","entryPosition","touchStartRange","targetCoords","rangeWidth","rangeHeight","rangeDirection","newRangeCoords","endTarget","touches","getCurrentRangeCoords","currentTouch","touchStartDirection","currentDirection","draggedHandle","bottomStartCorner","topEndCorner","isDragged","createDefaultHeaderSettings","crossHiddenColumns","isRoot","isPlaceholder","createPlaceholderHeaderSettings","normalizeSettings","sourceSettings","normalizedSettings","headersSettings","sourceHeaderSettings","cancelProcessing","columnsLength","defaultSettings","HEADER_CONFIGURABLE_PROPS","_data","_dataLength","SourceSettings","setColumnsLimit","nestedHeadersSettings","mergeWith","additionalSettings","propsToExtend","_headersSettings$colu","getHeadersSettings","headersSettingsChunks","currentLength","getLayersCount","getColumnsCount","TRAVERSAL_DF_PRE","depthFirstPreOrder","continueTraverse","TRAVERSAL_DF_POST","depthFirstPostOrder","TRAVERSAL_BF","breadthFirst","queue","DEFAULT_TRAVERSAL_STRATEGY","TRAVERSAL_STRATEGIES","TreeNode","addChild","cloneTree","nodeTree","clonedNode","replaceTreeWith","walkDown","traversalStrategy","walkUp","_rootNodes","_rootsIndex","_sourceSettings","HeadersTree","getRoots","getRootByColumn","normColumnIndex","treeNode","nodeHeaderLevel","rebuildTreeIndex","buildTree","buildLeaves","extractionLength","nodeData","traverseHiddenNodeColumnIndexes","getFirstChildProperty","isNodeReflectsFirstChildColspan","expandNode","nodeToProcess","nodeChilds","isNodeReflected","allLeavesExceptMostLeft","clonedTree","leafData","gridColumnIndex","collapseNode","_getFirstChildPropert","isCollapsibleNode","availableModifiers","generateMatrix","headerRoots","matrix","colspanHeaderLayer","createNestedArrayIfNecessary","isRootSettingsFound","isColumnHidden","headerRootSettings","createHeaderSettings","subArray","_headersTree","_stateMatrix","StateManager","hasError","ex","transformedSettings","rowCoordsToLevel","actionResult","triggerColumnModification","getHeaderTreeNode","findTopMostEntireHeaderLevel","columnIndexFrom","_headerLevel","columnIndexTo","atLeastOneRootFound","nodeColumnIndex","findLeftMostColumnIndex","_this$getHeaderSettin","stepBackColumn","_this$getHeaderSettin2","isRootNode","findRightMostColumnIndex","_this$getHeaderSettin3","stepForthColumn","_this$getHeaderSettin4","nestedHeaderSettingsGetter","widthsMap","setLayersCount","layersCount","buildWidthsMap","_buildGhostTable","isDropdownEnabled","maxRenderedCols","_stateManager","_hidingIndexMapObserver","_focusInitialCoords","_isColumnsSelectionInProgress","NestedHeaders","onBeforeOnCellMouseUp","onBeforeSelectionHighlightSet","updateFocusHighlightPosition","onAfterGetColumnHeaderRenderers","onModifyColumnHeaderValue","onBeforeCopy","onBeforeSelectColumns","onModifyFocusedElement","clearColspans","masterNodes","headerRendererFactory","_wtOverlays$topInline","_wtOverlays$inlineSta","isTopInlineStartOverlay","isInlineStartOverlay","correctedColspan","getColumnHeaderValue","_this$hot","isNestedHeadersRange","firstColumn","mostLeftColumnIndex","mostRightColumnIndex","headerNodeData","rangeIndex","zeroBasedColumnHeaderLevel","zeroBasedColumnIndex","_getHeaderTreeNodeDataByCoords","columnsToSelect","topStartCoords","bottomEndCoords","nextCoords","visualColumnIndexStart","visualColumnIndexEnd","notHiddenColumnIndex","startNodeData","endNodeData","renderersArray","headerLayer","headerLayersCount","newStartColumn","nonRenderable","cachedWidth","DataManager","nestedRowsPlugin","parentReference","cache","levels","levelCount","nodeInfo","getRawSourceData","rawSourceData","disableCoreAPIModifiers","enableCoreAPIModifiers","updateWithData","rewriteCache","cacheNode","hasChildren","getDataObject","readTreeNodes","readCount","neededIndex","neededObject","rootLevel","readNodesCount","parentObj","mockParent","fakeParent","mockNode","fakeNode","getRowIndex","rowObj","getRowIndexWithinParent","getRowParent","countAllRows","rootNodeMock","countChildren","getRowObjectParent","getRowLevel","getRowObjectLevel","isChild","getChild","_parent$__children","isRowHighestLevel","isParent","_rowObj$__children","childElement","parentIndex","functionalParent","newRowIndex","addChildAtIndex","flattenedIndex","finalChildIndex","addSibling","where","translatedIndex","translateTrimmedRow","indexWithinParent","detachFromParent","rowObjects","childRowIndex","childCount","grandparent","grandparentRowIndex","movedElementRowIndex","removedRowIndexes","lastGrandparentChild","lastGrandparentChildIndex","elementsToRemove","tempParent","previousElement","newRowParent","syncRowWithRawSource","upmostParent","moveToCollapsed","moveToLastChild","moveToLastRow","fromParent","indexInFromParent","elemToMove","movingUp","toParent","indexInTargetParent","sameParent","collapsingUI","untranslateTrimmedRow","pluginInstance","HeadersUI","CSS_CLASSES","indicatorContainer","emptyIndicator","expandButton","collapseButton","dataManager","rowHeaderWidthCache","appendLevelIndicators","rowLevel","innerDiv","getElementsByTagName","innerSpan","previousIndicators","initialContent","levelIndicator","buttonsContainer","areChildrenCollapsed","updateRowHeaderWidth","deepestLevel","deepestLevelIndex","CollapsingUI","collapsedRows","collapsedRowsStash","stash","lastCollapsedRows","expandMultipleChildren","shiftStash","targetIndex","applyStash","collapseMultipleChildren","trimStash","realElementIndex","indexOfElement","collapseChildren","doTrimming","rowsToCollapse","rowsToTrim","collapseRows","renderAndAdjust","collapseRow","recursive","rowIndexes","collapseChildRows","parentObject","elemIndex","expandRow","expandRows","rowsToUntrim","expandChildRows","untrimRows","isAnyParentCollapsed","expandChildren","rowsToExpand","childIndex","parentsToCollapse","parentsToExpand","collapsedRowsMap","allCollapsed","toggleState","ContextMenuUI","row_above","lastSelection","row_below","appendOptions","newEntries","translatedRowIndex","modifyRowInsertingOptions","RowMoveController","improperUsage","displayAPICompatibilityWarning","movedToCollapsed","dropToLastRow","physicalDropIndex","allowMove","physicalStartIndexes","shouldAllowMoving","willDataChange","baseParent","getBaseParent","targetParent","getTargetParent","shiftCollapsibleParentsLocations","moveCellsMeta","beforeMoveRowHookArgs","shouldTerminate","physicalStartIndex","baseIndexes","rowsOfMeta","movingDown","lastColIndex","WRONG_DATA_TYPE_ERROR","NestedRows","headersUI","skipCoreAPIModifiers","contextMenuUI","rowMoveController","onModifyRowData","onModifySourceLength","onBeforeDataSplice","onFilterData","onBeforeAddChild","onAfterAddChild","onBeforeDetachChild","currentSourceData","modifiedPhysicalRows","removedRows","Storage","prefix","savedKeys","loadSavedKeys","localStorage","setItem","saveSavedKeys","loadValue","itemKey","resetAll","clearSavedKeys","keysJSON","PersistentState","storage","saveTo","resetValue","DEFAULT_SEARCH_RESULT_CLASS","DEFAULT_CALLBACK","testResult","isSearchResult","DEFAULT_QUERY_METHOD","Search","queryMethod","searchResultClass","searchSettings","updatePluginSettings","onBeforeRenderer","beforeRendererCallback","queryStr","getCallback","getQueryMethod","queryResult","cellCallback","cellQueryMethod","singleResult","newCallback","setQueryMethod","newQueryMethod","getSearchResultClass","setSearchResultClass","newElementClass","classArray","TouchScroll","scrollbars","clones","lockedCollection","onAfterViewRender","scrollbar","TrimRows","trimmedRowsMap","getTrimmedRows","currentTrimConfig","destinationTrimConfig","allowTrimRow","trimRow","trimmingMapValues","isAnyRowUntrimmed","trimmedIndexes","allowUntrimRow","untrimRow","untrimAll","sourceRows","trimmedRow","UndoRedo","doneActions","undoneActions","ignoreNewActions","changesLen","hasDifferences","wrappedAction","clonedChanges","ChangeAction","CreateRowAction","removedData","RemoveRowAction","CreateColumnAction","logicColumns","originalData","origRow","columnsMap","rowsMap","RemoveColumnAction","CellAlignmentAction","FiltersAction","RowMoveAction","MergeCellsAction","UnmergeCellsAction","isBlockedByDefault","doneActionsCopy","continueAction","newAction","undoneActionsCopy","actionClone","that","enable","exposeUndoRedoMethods","disable","removeExposedUndoRedoMethods","Action","actionType","undoneCallback","emptyRowsAtTheEnd","emptyColsAtTheEnd","onFinishCallback","redoneCallback","rowIndexesSequence","rowIndexDelta","columnProp","columnPositions","rowPositions","ascendingIndexes","sortByIndexes","removedDataLength","sortedData","sortedHeaders","changedIndex","contiquesIndex","headerData","rangeData","mergeCellsPlugin","clearUndo","copyOfRows","rowsMovedUp","rowsMovedDown","allMovedRows","newPhysicalRow","pluginEnabled","_this$getPlugin","_Handsontable$cellTyp","_Handsontable$rendere","_Handsontable$validat","_Handsontable$plugins","registerAllPlugins","registerAllModules","jQueryWrapper","jQuery","$this","removeData","__GhostTable","_getListenersCounter","_getRegisteredMapsCounter","HELPERS","DOM","helper","dom","cellTypes","cellTypeName","registerCellType","editorName","registerEditor","getEditor","renderers","rendererName","cellDecorator","registerRenderer","getRenderer","validators","validatorName","registerValidator","getValidator","plugins","addClassWhenNeeded","progressBarRenderer","starsRenderer","TextRenderer","headerAlignments","addClassesToRows","drawCheckboxInRowHeaders","alignHeaders","alignmentClass","changeCheckboxCell","afterGetColHeader","afterGetRowHeader","DataGrid","log","silent","App","webpackContext","req","webpackContextResolve","__webpack_require__","resolve","__webpack_module_cache__","moduleId","cachedModule","loaded","__webpack_modules__","m","deferred","chunkIds","notFulfilled","fulfilled","definition","Function","toStringTag","nmd","paths","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}